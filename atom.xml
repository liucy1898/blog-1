<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://destinywang.github.io/blog/"/>
  <updated>2018-05-07T13:09:48.569Z</updated>
  <id>https://destinywang.github.io/blog/</id>
  
  <author>
    <name>destiny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lucene(二) —— 搭建简易搜索引擎</title>
    <link href="https://destinywang.github.io/blog/2018/05/07/Lucene-%E4%BA%8C-%E2%80%94%E2%80%94-%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <id>https://destinywang.github.io/blog/2018/05/07/Lucene-二-——-搭建简易搜索引擎/</id>
    <published>2018-05-07T13:08:45.000Z</published>
    <updated>2018-05-07T13:09:48.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h1><h2 id="1-1-爬取数据"><a href="#1-1-爬取数据" class="headerlink" title="1.1 爬取数据"></a>1.1 爬取数据</h2><ul><li>爬取网站数据，为实现搜索引擎做准备</li><li><code>wget -o /tmp/wget.log -P /root/data --no-parent --no-verbose -m -D destiny -N --convert-links --random-wait -A html,HTML https://destinywang.github.io/blog/</code></li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-5-6/96451093.jpg" alt=""></p><p>将 <a href="https://destinywang.github.io/blog/">本人个人博客</a> 爬取的结果为：</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-5-6/16891715.jpg" alt=""></p><p>放在浏览器中展示的效果为：</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-5-6/24255196.jpg" alt=""></p><p>在 html 文件中，实际的文件格式如下图所示：</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-5-6/56955141.jpg" alt=""></p><p>以此类推，可以多爬几个 HTML 文件。</p><h2 id="1-2-HTML-parser"><a href="#1-2-HTML-parser" class="headerlink" title="1.2 HTML parser"></a>1.2 HTML parser</h2><p>在搜索中，我们往往更关注文字部分，而对于 HTML 标签最好能够予以过滤，为此，我们使用 <code>jericho</code> 进行 HTML 过滤</p><p>添加依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.htmlparser.jericho/jericho-html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.htmlparser.jericho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jericho-html<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="1-3-IKAnalyzer-中文分词器"><a href="#1-3-IKAnalyzer-中文分词器" class="headerlink" title="1.3 IKAnalyzer 中文分词器"></a>1.3 IKAnalyzer 中文分词器</h2><p>之前的示例中，使用的是默认的StandardAnalyzer分词器，不能有效的进行中文分词，下面演示下如何在Lucene5.0中使用IKAnalyzer分词器。</p><p>首先下载IKAnalyzer分词器源码，IKAnalyzer分词器源码托管在<a href="http://git.oschina.net/wltea/IK-Analyzer-2012FF" target="_blank" rel="noopener">OSChina</a></p><p>不过目前项目已经停止更新了，<code>IKAnalyzer</code> 由于已经停止更新，所以并不支持 <code>Lucene5</code>，这里需要对源码做一些修改，否则启动时会抛出如下异常：<br><img src="http://oetw0yrii.bkt.clouddn.com/18-5-7/95267985.jpg" alt=""></p><h3 id="1-3-1-下载-IKAnalyzer-源码并打开"><a href="#1-3-1-下载-IKAnalyzer-源码并打开" class="headerlink" title="1.3.1 下载 IKAnalyzer 源码并打开"></a>1.3.1 下载 IKAnalyzer 源码并打开</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@gitee.com:wltea/IK-Analyzer-<span class="number">2012</span>FF.git</span><br></pre></td></tr></table></figure><p>然后在 IDE 中打开</p><h3 id="1-3-2-修改-IKAnalyzer-源码"><a href="#1-3-2-修改-IKAnalyzer-源码" class="headerlink" title="1.3.2 修改 IKAnalyzer 源码"></a>1.3.2 修改 IKAnalyzer 源码</h3><pre><code>由于Lucene5.0 API上有些变化，我们需要对IK源码做些修改</code></pre><h4 id="1-3-2-1-IKTokenizer-类"><a href="#1-3-2-1-IKTokenizer-类" class="headerlink" title="1.3.2.1 IKTokenizer 类"></a>1.3.2.1 IKTokenizer 类</h4><pre><code>第一处需要修改的就是IKTokenizer类，在其构造函数里把//super(in);这句注释掉即可</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * IK 中文分词  版本 5.0.1 </span></span><br><span class="line"><span class="comment"> * IK Analyzer release 5.0.1 </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one or more </span></span><br><span class="line"><span class="comment"> * contributor license agreements.  See the NOTICE file distributed with </span></span><br><span class="line"><span class="comment"> * this work for additional information regarding copyright ownership. </span></span><br><span class="line"><span class="comment"> * The ASF licenses this file to You under the Apache License, Version 2.0 </span></span><br><span class="line"><span class="comment"> * (the "License"); you may not use this file except in compliance with </span></span><br><span class="line"><span class="comment"> * the License.  You may obtain a copy of the License at </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software </span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS, </span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. </span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and </span></span><br><span class="line"><span class="comment"> * limitations under the License. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 源代码由林良益(linliangyi2005@gmail.com)提供 </span></span><br><span class="line"><span class="comment"> * 版权声明 2012，乌龙茶工作室 </span></span><br><span class="line"><span class="comment"> * provided by Linliangyi and copyright 2012 by Oolong studio </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">package</span> org.wltea.analyzer.lucene;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.Reader;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Tokenizer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.CharTermAttribute;  </span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.OffsetAttribute;  </span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.TypeAttribute;  </span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.util.Version;  </span><br><span class="line"><span class="keyword">import</span> org.wltea.analyzer.core.IKSegmenter;  </span><br><span class="line"><span class="keyword">import</span> org.wltea.analyzer.core.Lexeme;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * IK分词器 Lucene Tokenizer适配器类 </span></span><br><span class="line"><span class="comment"> * 兼容Lucene 4.0版本 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">IKTokenizer</span> <span class="keyword">extends</span> <span class="title">Tokenizer</span> </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//IK分词器实现  </span></span><br><span class="line">    <span class="keyword">private</span> IKSegmenter _IKImplement;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//词元文本属性  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CharTermAttribute termAtt;  </span><br><span class="line">    <span class="comment">//词元位移属性  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OffsetAttribute offsetAtt;  </span><br><span class="line">    <span class="comment">//词元分类属性（该属性分类参考org.wltea.analyzer.core.Lexeme中的分类常量）  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TypeAttribute typeAtt;  </span><br><span class="line">    <span class="comment">//记录最后一个词元的结束位置  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> endPosition;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> Version version = Version.LATEST;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Lucene 4.0 Tokenizer适配器类构造函数 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> useSmart </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IKTokenizer</span><span class="params">(Reader in , <span class="keyword">boolean</span> useSmart)</span></span>&#123;  </span><br><span class="line">        <span class="comment">//super(in);  </span></span><br><span class="line">        offsetAtt = addAttribute(OffsetAttribute.class);  </span><br><span class="line">        termAtt = addAttribute(CharTermAttribute.class);  </span><br><span class="line">        typeAtt = addAttribute(TypeAttribute.class);  </span><br><span class="line">        _IKImplement = <span class="keyword">new</span> IKSegmenter(input , useSmart);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* (non-Javadoc) </span></span><br><span class="line"><span class="comment">     * @see org.apache.lucene.analysis.TokenStream#incrementToken() </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">incrementToken</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        <span class="comment">//清除所有的词元属性  </span></span><br><span class="line">        clearAttributes();  </span><br><span class="line">        Lexeme nextLexeme = _IKImplement.next();  </span><br><span class="line">        <span class="keyword">if</span>(nextLexeme != <span class="keyword">null</span>)&#123;  </span><br><span class="line">            <span class="comment">//将Lexeme转成Attributes  </span></span><br><span class="line">            <span class="comment">//设置词元文本  </span></span><br><span class="line">            termAtt.append(nextLexeme.getLexemeText());  </span><br><span class="line">            <span class="comment">//设置词元长度  </span></span><br><span class="line">            termAtt.setLength(nextLexeme.getLength());  </span><br><span class="line">            <span class="comment">//设置词元位移  </span></span><br><span class="line">            offsetAtt.setOffset(nextLexeme.getBeginPosition(), nextLexeme.getEndPosition());  </span><br><span class="line">            <span class="comment">//记录分词的最后位置  </span></span><br><span class="line">            endPosition = nextLexeme.getEndPosition();  </span><br><span class="line">            <span class="comment">//记录词元分类  </span></span><br><span class="line">            typeAtt.setType(nextLexeme.getLexemeTypeString());            </span><br><span class="line">            <span class="comment">//返会true告知还有下个词元  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//返会false告知词元输出完毕  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * (non-Javadoc) </span></span><br><span class="line"><span class="comment">     * @see org.apache.lucene.analysis.Tokenizer#reset(java.io.Reader) </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.reset();  </span><br><span class="line">        _IKImplement.reset(input);  </span><br><span class="line">    &#125;     </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// set final offset  </span></span><br><span class="line">        <span class="keyword">int</span> finalOffset = correctOffset(<span class="keyword">this</span>.endPosition);  </span><br><span class="line">        offsetAtt.setOffset(finalOffset, finalOffset);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-2-IKAnalyzer"><a href="#1-3-2-2-IKAnalyzer" class="headerlink" title="1.3.2.2 IKAnalyzer"></a>1.3.2.2 IKAnalyzer</h4><pre><code>createComponents()方法是继承Luecene的Analyzer接口的由于Lucene5.0里把createComponents()方法的第二个参数去掉了所以需要对该方法做同样的修改</code></pre><p>而上文中真正抛出异常的地方也在于此。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 重载Analyzer接口，构造分词组件 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">protected</span> TokenStreamComponents <span class="title">createComponents</span><span class="params">(String text)</span> </span>&#123;  </span><br><span class="line">    Reader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> StringReader(text));  </span><br><span class="line">    Tokenizer _IKTokenizer = <span class="keyword">new</span> IKTokenizer(reader , <span class="keyword">this</span>.useSmart());  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TokenStreamComponents(_IKTokenizer);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-将依赖安装到本地仓库"><a href="#1-3-3-将依赖安装到本地仓库" class="headerlink" title="1.3.3 将依赖安装到本地仓库"></a>1.3.3 将依赖安装到本地仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn install:install-file -DgroupId=org.wltea.analyzer -DartifactId=IKAnalyzer -Dversion=5.0 -Dpackaging=jar -Dfile=/User/destiny/.m2/repository/IKAnalyzer-5.0.jar</span><br></pre></td></tr></table></figure><h3 id="1-3-4-导入依赖"><a href="#1-3-4-导入依赖" class="headerlink" title="1.3.4 导入依赖"></a>1.3.4 导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.wltea.analyzer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>IKAnalyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-核心代码"><a href="#2-核心代码" class="headerlink" title="2. 核心代码"></a>2. 核心代码</h1><h2 id="2-1-HTML-对象"><a href="#2-1-HTML-对象" class="headerlink" title="2.1 HTML 对象"></a>2.1 HTML 对象</h2><p>在搜索结果中，返回给用户的主要信息包括：</p><ul><li>文档标题</li><li>文档正文（缩略信息）</li><li>URL</li></ul><p>所以对应的实体类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;       <span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> String content;     <span class="comment">// 正文</span></span><br><span class="line">    <span class="keyword">private</span> String url;         <span class="comment">// URL</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-2-HTML-转换对象"><a href="#2-2-HTML-转换对象" class="headerlink" title="2.2 HTML 转换对象"></a>2.2 HTML 转换对象</h2><p>由于爬取的原始数据中，HTML 正文含有大量的标签，对搜索而言没有意义，因此使用 <code>jericho</code> 进行过滤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlBeanUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将文件转换为 HtmlBean 页面对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HtmlBean <span class="title">parseHtml</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 解析 HTML</span></span><br><span class="line">        HtmlBean htmlBean = <span class="keyword">new</span> HtmlBean();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Source source = <span class="keyword">new</span> Source(file);</span><br><span class="line">            <span class="comment">// 取第一个标题元素</span></span><br><span class="line">            Element firstElement = source.getFirstElement(HTMLElementName.TITLE);</span><br><span class="line"></span><br><span class="line">            htmlBean.setTitle(firstElement.getTextExtractor().toString());</span><br><span class="line">            htmlBean.setContent(source.getTextExtractor().toString());</span><br><span class="line">            htmlBean.setUrl(<span class="string">"http://"</span> + file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> htmlBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-创建索引"><a href="#2-3-创建索引" class="headerlink" title="2.3 创建索引"></a>2.3 创建索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuceneService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INDEX_DIR = <span class="string">"/Users/destiny/IdeaProjects/lucene-demo/src/main/resources/index"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATA_DIR = <span class="string">"/Users/destiny/IdeaProjects/lucene-demo/src/main/resources/html"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 目录对象，需要由 Path 进行初始化</span></span><br><span class="line">            Directory directory = FSDirectory.open(Paths.get(INDEX_DIR));</span><br><span class="line">            <span class="comment">// 创建分词器</span></span><br><span class="line">            Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">            <span class="comment">// 由分词器对 IndexWriterConfig 进行初始化</span></span><br><span class="line">            IndexWriterConfig indexWriterConfig = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">            indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);</span><br><span class="line">            IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, indexWriterConfig);</span><br><span class="line"></span><br><span class="line">            File file = <span class="keyword">new</span> File(DATA_DIR);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 用递归的方式获取指定路径的文件列表(org.apache.commons.io)</span></span><br><span class="line">            Collection&lt;File&gt; files = FileUtils.listFiles(file, TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将每个文件转换成 Document 对象</span></span><br><span class="line">            <span class="keyword">for</span> (File file1 : files) &#123;</span><br><span class="line">                System.out.println(<span class="string">"file: "</span> + file1.getName());</span><br><span class="line">                HtmlBean htmlBean = HtmlBeanUtil.parseHtml(file1);</span><br><span class="line">                Document document = <span class="keyword">new</span> Document();</span><br><span class="line">                document.add(<span class="keyword">new</span> StringField(<span class="string">"title"</span>, htmlBean.getTitle(), Field.Store.YES));</span><br><span class="line">                document.add(<span class="keyword">new</span> TextField(<span class="string">"content"</span>, htmlBean.getContent(), Field.Store.YES));</span><br><span class="line">                document.add(<span class="keyword">new</span> StringField(<span class="string">"url"</span>, htmlBean.getUrl(), Field.Store.YES));</span><br><span class="line">                indexWriter.addDocument(document);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            indexWriter.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-搜索"><a href="#2-4-搜索" class="headerlink" title="2.4 搜索"></a>2.4 搜索</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/search/&#123;keyword&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;HtmlBean&gt; <span class="title">search</span><span class="params">(@PathVariable(value = <span class="string">"keyword"</span>)</span> String keyword) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Directory directory = FSDirectory.open(Paths.get(INDEX_DIR));</span><br><span class="line">        IndexReader indexReader = DirectoryReader.open(directory);</span><br><span class="line">        IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">        <span class="comment">// 创建中文分词器</span></span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</span><br><span class="line">        <span class="comment">// 多 field 查询</span></span><br><span class="line">        MultiFieldQueryParser multiFieldQueryParser = <span class="keyword">new</span> MultiFieldQueryParser(<span class="keyword">new</span> String[]&#123;<span class="string">"title"</span>, <span class="string">"content"</span>&#125;, analyzer);</span><br><span class="line">        Query query = multiFieldQueryParser.parse(keyword);</span><br><span class="line">        <span class="comment">// 搜索前 10 个匹配度最高的文档</span></span><br><span class="line">        TopDocs topDocs = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组装查询结果</span></span><br><span class="line">        List&lt;HtmlBean&gt; htmlBeanList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc scoreDoc : topDocs.scoreDocs) &#123;</span><br><span class="line">            <span class="keyword">int</span> docId = scoreDoc.doc;</span><br><span class="line">            Document document = indexReader.document(docId);</span><br><span class="line">            HtmlBean htmlBean = <span class="keyword">new</span> HtmlBean();</span><br><span class="line">            htmlBean.setTitle(document.get(<span class="string">"title"</span>));</span><br><span class="line">            htmlBean.setContent(document.get(<span class="string">"content"</span>));</span><br><span class="line">            htmlBean.setUrl(document.get(<span class="string">"url"</span>));</span><br><span class="line">            htmlBeanList.add(htmlBean);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> htmlBeanList;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-使用结果"><a href="#3-使用结果" class="headerlink" title="3. 使用结果"></a>3. 使用结果</h1><p><img src="http://oetw0yrii.bkt.clouddn.com/18-5-7/55592553.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-前期准备&quot;&gt;&lt;a href=&quot;#1-前期准备&quot; class=&quot;headerlink&quot; title=&quot;1. 前期准备&quot;&gt;&lt;/a&gt;1. 前期准备&lt;/h1&gt;&lt;h2 id=&quot;1-1-爬取数据&quot;&gt;&lt;a href=&quot;#1-1-爬取数据&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Luence" scheme="https://destinywang.github.io/blog/categories/Luence/"/>
    
    
      <category term="Lucene" scheme="https://destinywang.github.io/blog/tags/Lucene/"/>
    
      <category term="搜索引擎" scheme="https://destinywang.github.io/blog/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Lucene(一) —— 快速入门</title>
    <link href="https://destinywang.github.io/blog/2018/05/05/Lucene-%E4%B8%80-%E2%80%94%E2%80%94-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://destinywang.github.io/blog/2018/05/05/Lucene-一-——-快速入门/</id>
    <published>2018-05-04T16:01:42.000Z</published>
    <updated>2018-05-05T16:30:57.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-搜索引擎组件"><a href="#1-搜索引擎组件" class="headerlink" title="1. 搜索引擎组件"></a>1. 搜索引擎组件</h1><h2 id="1-1-索引组件"><a href="#1-1-索引组件" class="headerlink" title="1.1 索引组件"></a>1.1 索引组件</h2><pre><code>为了快速搜索大量的文本，必须针对文本建立索引，将文本内容转换成能够进行快速搜索的格式。这个过程就叫做索引操作(indexing)，输出就是索引(index)</code></pre><h3 id="1-1-1-获取内容"><a href="#1-1-1-获取内容" class="headerlink" title="1.1.1 获取内容"></a>1.1.1 获取内容</h3><p>使用网络爬虫或者蜘蛛程序来搜索和界定需要索引的内容。</p><h3 id="1-1-2-建立文档"><a href="#1-1-2-建立文档" class="headerlink" title="1.1.2 建立文档"></a>1.1.2 建立文档</h3><p>获取原始内容之后，就需要对内容进行索引，首先必须将内容转换成<strong>文档</strong>，以供搜索引擎使用。</p><p>文档主要包括几个带值的域，比如<code>标题</code>、<code>正文</code>、<code>摘要</code>、<code>作者</code>和<code>链接(URL)</code>。</p><p>然后需要将原始内容中的文本提取出来写入各个文档。</p><h3 id="1-1-3-文档分析"><a href="#1-1-3-文档分析" class="headerlink" title="1.1.3 文档分析"></a>1.1.3 文档分析</h3><p>搜索引擎不能直接对文本进行索引，而必须将文本分割成一系列被称为 <code>词汇单元</code> 的独立原子元素。</p><p>这一步骤决定文档中的文本域如何分割成 <code>词汇单元</code> 系列。</p><p>Lucene 提供了大量内嵌的分析器能够轻松完成这步操作。</p><h3 id="1-1-4-文档索引"><a href="#1-1-4-文档索引" class="headerlink" title="1.1.4 文档索引"></a>1.1.4 文档索引</h3><p>在本步骤中，文档将被加入到索引列表。</p><h2 id="1-2-搜索组件"><a href="#1-2-搜索组件" class="headerlink" title="1.2 搜索组件"></a>1.2 搜索组件</h2><pre><code>搜索处理过程就是从索引中查找单词，从而找到包含该单词的文档。</code></pre><h3 id="1-2-1-建立查询"><a href="#1-2-1-建立查询" class="headerlink" title="1.2.1 建立查询"></a>1.2.1 建立查询</h3><p>搜索请求会被转换成搜索引擎使用的 <code>查询(query)</code> 对象格式。</p><p>查询对象可能很简单，也可能很复杂。 Lucene 提供了一个称之为 <code>查询解析器(QueryParser)</code> 的强大开发包，用它可以根据通用查询语法将用户输入的文本处理成查询对象。<br>查询语句可以包含 布尔运算、短语查询或通配符查询。</p><h3 id="1-2-2-搜索查询"><a href="#1-2-2-搜索查询" class="headerlink" title="1.2.2 搜索查询"></a>1.2.2 搜索查询</h3><pre><code>查询检索索引并返回与查询语句匹配的文档，结果返回时按照查询请求来排序</code></pre><p>常见的搜索理论模型：</p><ol><li>纯布尔模型：文档不管是否匹配查询请求，都不会被评分，匹配文档与评分不相关，一条查询仅获取所有匹配文档集合的一个子集。</li><li>向量空间模型：查询语句和文档都是高维空间的向量模型，这里每一个独立的项都是一个维度，查询语句和文档之间的相关性或相似性由各个向量之间的距离计算得到。</li><li>概率模型：采用全概率的方法来计算文档和查询语句匹配的概率。</li></ol><p>Lucene 采用了 <code>空间向量模型</code>和<code>纯布尔模型</code>。</p><h1 id="2-核心技术"><a href="#2-核心技术" class="headerlink" title="2. 核心技术"></a>2. 核心技术</h1><pre><code>Lucene 是一个全文搜索框架</code></pre><ul><li>倒排索引</li><li>压缩算法</li><li>二元搜索</li></ul><h2 id="2-1-倒排索引"><a href="#2-1-倒排索引" class="headerlink" title="2.1 倒排索引"></a>2.1 倒排索引</h2><ul><li>根据属性的值来查找记录，这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性，而是由属性值来确定记录的位置，因而成为倒排索引。</li><li>单词——文档矩阵<br><img src="http://oetw0yrii.bkt.clouddn.com/18-5-4/72395859.jpg" alt=""></li></ul><h1 id="3-Lucene-的工作方法"><a href="#3-Lucene-的工作方法" class="headerlink" title="3. Lucene 的工作方法"></a>3. Lucene 的工作方法</h1><pre><code>Lucene 提供的服务实际包含两部分，一入一出：入就是写入，将提供的源（本质上是字符串）写入索引或者将其从索引中删除；出就是读取，向用户提供全文搜索服务，让用户可以通过关键词定位源。</code></pre><ul><li>写入：源字符首先经过 <code>analyzer</code> 处理，包括：分词，拆分成一个个单词；去除 <code>stopword</code> 。将源中需要的信息加入 <code>Document</code> 的各个 <code>Field</code> 中，并把需要索引的 <code>Field</code> 索引起来，把需要存储的 <code>Field</code> 存储起来。</li><li>读取：用户提供关键词，经过 <code>analyzer</code> 处理，对处理后的关键词搜索索引，找出对应的 <code>Document</code>。用户根据需要从找到的 <code>Document</code> 中提取出需要的 <code>Field</code>。</li></ul><blockquote><p>document：用户提供的源是一条条记录，它们可以是文本文件、字符串或者数据库表的一条记录等等。一条记录经过索引之后，就是以一个 <code>Document</code> 的形式存储在索引文件中的。用户进行搜索，也是以 <code>Document</code> 列表的形式返回。</p></blockquote><blockquote><p>field：一个 <code>Document</code> 可以包含多个信息域，例如一篇文章可以包括标题、正文、最后修改时间等信息域，这些信息域是通过 <code>Field</code> 在 <code>Document</code> 中存储的。<br><code>Field</code> 有两个属性可选：存储和索引。通过存储属性，可以控制是否对这个 <code>Field</code> 进行索引。</p></blockquote><h1 id="4-示例代码"><a href="#4-示例代码" class="headerlink" title="4. 示例代码"></a>4. 示例代码</h1><h2 id="4-1-导入依赖"><a href="#4-1-导入依赖" class="headerlink" title="4.1 导入依赖"></a>4.1 导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- lucene --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queries<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queryparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-highlighter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- apache-common --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-环境准备"><a href="#4-2-环境准备" class="headerlink" title="4.2 环境准备"></a>4.2 环境准备</h2><p>准备 <code>index</code> 和 <code>data</code> 两个目录，分别用于存放索引和文档<br><img src="http://oetw0yrii.bkt.clouddn.com/18-5-4/79601259.jpg" alt=""></p><ul><li><code>data</code> 随便从其他项目中复制了几个 <code>LICENSE</code></li><li><code>index</code> 保持为空，当 Lucene 运行的时候会自动进行创建</li></ul><h2 id="4-3-创建索引"><a href="#4-3-创建索引" class="headerlink" title="4.3 创建索引"></a>4.3 创建索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateIndex</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 索引目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INDEX_DIR = <span class="string">"/Users/destiny/IdeaProjects/lucene-demo/src/main/resources/index"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 文本目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATA_DIR = <span class="string">"/Users/destiny/IdeaProjects/lucene-demo/src/main/resources/data"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 目录对象，描述了索引的存放位置，需要由 Path 进行初始化</span></span><br><span class="line">        Directory directory = FSDirectory.open(Paths.get(INDEX_DIR));</span><br><span class="line">        <span class="comment">// 创建分词器</span></span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">        <span class="comment">// 由分词器对 IndexWriterConfig 进行初始化</span></span><br><span class="line">        IndexWriterConfig indexWriterConfig = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);</span><br><span class="line">        IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, indexWriterConfig);</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(DATA_DIR);</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 读取并遍历文本路径下的所有文件，用于生成文档及其索引</span></span><br><span class="line">            <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                <span class="comment">// 创建文档</span></span><br><span class="line">                Document document = <span class="keyword">new</span> Document();</span><br><span class="line">                <span class="comment">// 为文档设置 Field</span></span><br><span class="line">                document.add(<span class="keyword">new</span> StringField(<span class="string">"filename"</span>, f.getName(), Field.Store.YES));</span><br><span class="line">                document.add(<span class="keyword">new</span> TextField(<span class="string">"content"</span>, FileUtils.readFileToString(f, Charset.defaultCharset()), Field.Store.YES));</span><br><span class="line">                document.add(<span class="keyword">new</span> LongField(<span class="string">"lastModify"</span>, f.lastModified(), Field.Store.YES));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 写入索引</span></span><br><span class="line">                indexWriter.addDocument(document);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        indexWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        CreateIndex createIndex = <span class="keyword">new</span> CreateIndex();</span><br><span class="line">        createIndex.createIndex();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行完毕之后，发现 <code>index</code> 路径下多了一些文件，即为文档的索引。  </p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-5-4/71134605.jpg" alt=""></p><h2 id="4-4-查询索引"><a href="#4-4-查询索引" class="headerlink" title="4.4 查询索引"></a>4.4 查询索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchIndex</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ParseException </span>&#123;</span><br><span class="line">        <span class="comment">// 打开索引所在路径</span></span><br><span class="line">        Directory directory = FSDirectory.open(Paths.get(CreateIndex.INDEX_DIR));</span><br><span class="line">        IndexReader indexReader = DirectoryReader.open(directory);</span><br><span class="line">        IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line"></span><br><span class="line">        QueryParser queryParser = <span class="keyword">new</span> QueryParser(<span class="string">"content"</span>, <span class="keyword">new</span> StandardAnalyzer());</span><br><span class="line">        Query query = queryParser.parse(<span class="string">"from"</span>);</span><br><span class="line">        <span class="comment">// 找到符合条件的前 10 条 Document 的索引的集合</span></span><br><span class="line">        TopDocs search = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历集合并打印文件名称</span></span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc scoreDoc : search.scoreDocs) &#123;</span><br><span class="line">            <span class="keyword">int</span> docId = scoreDoc.doc;</span><br><span class="line">            Document document = indexReader.document(docId);</span><br><span class="line">            String filename = document.get(<span class="string">"filename"</span>);</span><br><span class="line">            System.out.println(<span class="string">"filename: "</span> + filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ParseException </span>&#123;</span><br><span class="line">        SearchIndex searchIndex = <span class="keyword">new</span> SearchIndex();</span><br><span class="line">        searchIndex.search();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询结果：</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-5-4/42921719.jpg" alt=""></p><h1 id="5-理解索引过程核心类"><a href="#5-理解索引过程核心类" class="headerlink" title="5. 理解索引过程核心类"></a>5. 理解索引过程核心类</h1><p>执行简单的索引过程需要用到以下几个类：</p><ul><li>IndexWriter</li><li>Directory</li><li>Analyzer</li><li>Document</li><li>Field</li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-5-5/99307359.jpg" alt=""></p><h2 id="5-1-IndexWriter"><a href="#5-1-IndexWriter" class="headerlink" title="5.1 IndexWriter"></a>5.1 IndexWriter</h2><p>IndexWriter(写索引)是索引过程的核心组件，这个类负责创建新索引或者打开已有索引，以及向索引中添加、删除或者是更新被索引文档的信息。为开发者提供针对索引文件的写入操作，但不能用于读取或者搜索索引。IndexWriter 需要开辟一定的空间用来存储索引，该功能可以由 Directory 完成。</p><h2 id="5-2-Directory"><a href="#5-2-Directory" class="headerlink" title="5.2 Directory"></a>5.2 Directory</h2><p>Directory 描述了 Lucene 索引存放的位置。它是一个抽象类，其实现类负责具体指定索引的存储路径。在上面的例子中，我们使用 <code>FSDirectory.open()</code> 方法来获取真实文件在文件系统中的存储路径，然后将她们依次传递给 <code>IndexWriter</code> 类的构造方法。</p><p>IndexWriter 不能直接索引文本，需要先由 <code>Analyzer</code> 将文本分割成独立的单词才行。</p><h2 id="5-3-Analyzer"><a href="#5-3-Analyzer" class="headerlink" title="5.3 Analyzer"></a>5.3 Analyzer</h2><p>文本文件在被索引之前，需要经过 Analyzer 处理，Analyzer 由 IndexWriter 的构造方法来指定，负责从被索引文本文件中提取词汇单元，并剔除剩下的无用信息。如果被索引的内容不是纯文本文件，那就需要先将其转换成文本文档。</p><p>Analyzer 是一个抽象类，其实现类中：</p><ul><li>有的用于跳过停用词（指一些常用且不能帮助区分文档的词，如a、an、the、in 和 on 等）</li><li>有的用于把词汇转换成小写，以使得搜索过程不区分大小写</li><li>等等</li></ul><p>分析器的分析对象为文档。</p><h2 id="5-4-Document"><a href="#5-4-Document" class="headerlink" title="5.4 Document"></a>5.4 Document</h2><p>Document 代表一些 <code>域(Field)</code> 的集合，可以将 Document 理解为虚拟文档，如 Web页面、邮件信息等。文档的域代表文档或者文档相关的一些元数据。</p><p>Lucene 只处理文本和数字，Lucene 的内核本身只处理 <code>java.lang.String</code> 和 <code>java.io.Reader</code> 对象和本地数字类型</p><p>Document 对象的结构比较简单，为一个多个 Field 对象的容器， Field 是指包含能被索引的文本内容的类。</p><h2 id="5-5-Field"><a href="#5-5-Field" class="headerlink" title="5.5 Field"></a>5.5 Field</h2><p>索引中，每个文档都包含一个或者多个不同命名的域，这些域包含在 Field 类中。</p><p>每个域都有一个域名和对应的值，以及一组选项来精确控制 Lucene 索引操作各个域值。</p><h1 id="6-理解搜索过程核心类"><a href="#6-理解搜索过程核心类" class="headerlink" title="6. 理解搜索过程核心类"></a>6. 理解搜索过程核心类</h1><p>核心类：</p><ul><li>IndexSearcher</li><li>Term</li><li>Query</li><li>TermQuery</li><li>TocDocs</li></ul><h2 id="6-1-IndexSearcher"><a href="#6-1-IndexSearcher" class="headerlink" title="6.1 IndexSearcher"></a>6.1 IndexSearcher</h2><p>用于搜索 IndexWriter 所创建的索引，可以将它看做一个以只读方式打开索引的类。</p><p>它需要利用 Directory 实例来掌握前期创建的索引，然后才能提供大量的搜索方法，最简单的搜索方法是将单个 <code>Query</code> 对象和 <code>int topN</code> 所谓该方法的参数，返回一个 <code>TopDocs</code> 对象。</p><h2 id="6-2-Term"><a href="#6-2-Term" class="headerlink" title="6.2 Term"></a>6.2 Term</h2><p>Term 是搜索功能的基本单元，与 Field 对象类似，Term 对象包含一对字符串元素：域名和单词，注意 Term 对象还与索引操作有关。</p><h2 id="6-3-Query"><a href="#6-3-Query" class="headerlink" title="6.3 Query"></a>6.3 Query</h2><p>Lucene 含有许多具体的 Query 子类</p><h2 id="6-4-TermQuery"><a href="#6-4-TermQuery" class="headerlink" title="6.4 TermQuery"></a>6.4 TermQuery</h2><p>是 Lucene 提供的最基本的查询类型，也是简单的查询类型之一，它用来匹配指定域中包含特定值的文档。</p><h2 id="6-5-TopDocs"><a href="#6-5-TopDocs" class="headerlink" title="6.5 TopDocs"></a>6.5 TopDocs</h2><p>TopDocs 类是一个简单的容器指针，指针一般指向前 N 个排名的搜索结果，搜索结果即匹配查询条件的文档。TopDocs 会记录前 N 个结果中每个结果的 <code>int docID</code> 和浮点型分数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-搜索引擎组件&quot;&gt;&lt;a href=&quot;#1-搜索引擎组件&quot; class=&quot;headerlink&quot; title=&quot;1. 搜索引擎组件&quot;&gt;&lt;/a&gt;1. 搜索引擎组件&lt;/h1&gt;&lt;h2 id=&quot;1-1-索引组件&quot;&gt;&lt;a href=&quot;#1-1-索引组件&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Luence" scheme="https://destinywang.github.io/blog/categories/Luence/"/>
    
    
      <category term="Luence" scheme="https://destinywang.github.io/blog/tags/Luence/"/>
    
  </entry>
  
  <entry>
    <title>quartz 入门</title>
    <link href="https://destinywang.github.io/blog/2018/04/25/quartz-%E5%85%A5%E9%97%A8/"/>
    <id>https://destinywang.github.io/blog/2018/04/25/quartz-入门/</id>
    <published>2018-04-25T14:33:08.000Z</published>
    <updated>2018-05-02T13:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-任务调度概述"><a href="#1-任务调度概述" class="headerlink" title="1. 任务调度概述"></a>1. 任务调度概述</h1><pre><code>各种企业应用几乎都会碰到任务调度的需求。在特定的时间点执行指定的操作。任务调度本身涉及多线程并发、运行时间规则指定和解析、运行现场保持和恢复、线程池维护等诸多方面的问题。</code></pre><h1 id="2-Quartz"><a href="#2-Quartz" class="headerlink" title="2. Quartz"></a>2. Quartz</h1><ul><li>Quartz允许开发人员灵活地定义触发器的调度时间，并可对触发器和任务进行关联映射；</li><li>Quartz提供了调度运行环境的持久化和保存；</li><li>Quartz还提供了组件式的侦听器、插件、线程池等功能。</li></ul><h2 id="2-1-Quartz基础结构"><a href="#2-1-Quartz基础结构" class="headerlink" title="2.1 Quartz基础结构"></a>2.1 Quartz基础结构</h2><p>Quartz对任务调度领域的问题进行了高度的抽象，提出了<code>调度器</code>、<code>任务</code>、<code>触发器</code>这3个核心的概念。</p><p><img src="https://upload-images.jianshu.io/upload_images/9124849-f11aeb994ba4a26b.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/459" alt="image"></p><h3 id="2-1-1-Job"><a href="#2-1-1-Job" class="headerlink" title="2.1.1 Job"></a>2.1.1 Job</h3><p>是一个接口，只有一个方法<code>void execute(JobExecutionContext context)</code>，开发者通过实现该接口来定义需要执行的任务，<code>JobExecutionContext</code> 类提供了调度上下文的各种信息。<code>Job</code> 运行时的信息保存在 <code>JobDataMap</code> 实例中。</p><h3 id="2-1-2-JobDetail"><a href="#2-1-2-JobDetail" class="headerlink" title="2.1.2 JobDetail"></a>2.1.2 JobDetail</h3><p>Quartz 在每次执行 Job 的时候，都重新创建一个 Job 实例，所以它不是直接接收一个 Job 实例，而是接收一个 Job 实现类，以便运行时通过 <code>newInstance()</code> 反射调用机制实例化 Job。因此需要通过一个类来描述 Job 的实现类及其他相关信息，如 Job 名称、描述、关联监听器等信息，而 JobDetail 承担了这一角色。通过该类的构造函数 <code>JobDetail(java.lang.String name, java.lang.String group, java.lang.Class jobClass)</code>，可以更具体地了解它的功能。该构造函数要求指定 Job 的实现类，以及任务在 Schedule 中的组名和 Job 名称。</p><h3 id="2-1-3-Trigger"><a href="#2-1-3-Trigger" class="headerlink" title="2.1.3 Trigger"></a>2.1.3 Trigger</h3><p>描述触发 Job 执行的时间触发规则。主要有 <code>SimpleTrigger</code> 和 <code>CronTrigger</code> 这两个子类。当仅需要触发一次或者以固定间隔周期性执行的时候， <code>SimpleTrigger</code> 是最佳选择；而 <code>CronTrigger</code> 则可以通过 Cron 表达式定义出各种复杂的调度方案，如每天早上 <code>9:00</code> 执行，每周一、周三下午 <code>5:00</code> 执行等。</p><h3 id="2-1-4-Calendar"><a href="#2-1-4-Calendar" class="headerlink" title="2.1.4 Calendar"></a>2.1.4 Calendar</h3><p><code>org.quartz.Calendar</code> 和 <code>java.util.Calendar</code> 不同，它是一些日历特定时间点的集合。一个 Trigger 可以和多个 Calendar 关联，以便排除或包含某些时间点。假设安排每周一早晨 <code>10:00</code> 执行任务，但是如果遇到法定节假日不执行任务，这时就需要在 Trigger 触发机制的基础上使用 Calendar 进行定点排除。针对不同的时间段类型，如 <code>AnnualCalendar</code>、<code>MonthlyCalendar</code>、<code>WeeklyCalendar</code> 分别针对每年、每月和每周进行定义。</p><h3 id="2-1-5-Scheduler"><a href="#2-1-5-Scheduler" class="headerlink" title="2.1.5 Scheduler"></a>2.1.5 Scheduler</h3><p>代表一个 Quartz 的独立运行容器，Trigger 和 JobDetail 可以注册到 Scheduler 中，二者在 Scheduler 中拥有各自的组及名称。组及名称是 Scheduler 查找定位容器中某个对象的依据， Trigger 的组及明恒的组合必须唯一， JobDetail 的组及名称的组合也必须唯一（但可以和 Trigger 的组及名称相同，因为二者处在不同的容器中）。Scheduler 定义了多个接口方法，允许外部通过组及名称访问和控制容器中的 Trigger 和 JobDetail。Scheduler 可以将 Trigger 绑定到某一个 JobDetail 中，这样当 Trigger 被触发时，对应的 Job 就会被执行。一个 Job 可以对应多个 Trigger，但一个 Trigger 只能对应一个 Job。可以通过 SchedulerFactory 创建一个 Scheduler 实例。Scheduler 拥有一个 SchedulerContext，保存着 Scheduler 上下文信息，可以对照 ServletContext 来理解 SchedulerContext。 Job 和 Trigger 都可以访问 SchedulerContext 内的信息。SchedulerContext 内部通过一个 Map，以键值对的方式维护这些上下文数据。SchedulerContext 为保存和获取数据提供了多个 <code>put()</code> 和 <code>getXxx()</code> 方法。可以通过 <code>Scheduler#getContext()</code> 方法获取 SchedulerContext 实例。</p><h3 id="2-1-6-ThreadPool"><a href="#2-1-6-ThreadPool" class="headerlink" title="2.1.6 ThreadPool"></a>2.1.6 ThreadPool</h3><p>Schedule 使用一个线程池作为任务运行的基础设施，任务通过共享线程池中的线程来提高效率。</p><p>Job 有一个 <code>StatefulJob</code> 子接口，代表有状态的任务。该接口是一个没有方法的标签接口，其目的是让 Quartz 知道任务类型，以便采取不同的措施。无状态任务在执行时拥有自己的 JobDataMap 复制，对 JobDataMap 的更改不会影响下次执行。而有状态任务共享同一个 JobDataMap 实例，每次任务执行时对 JobDataMap 所做的更改会保存下来。后面的执行可以看到更改。</p><p>因此，无状态任务可以并发执行，而有状态任务的 <code>StatefulJob</code> 不能并发执行。如果上一次的 StatefulJob 还没有执行完成，则下次的任务将阻塞等待。<br>有状态任务比无状态任务需要考虑更多的因素，所以尽量避免使用无状态任务。</p><p>如果 Quartz 使用了数据库持久化任务调度信息，则无状态的 JobDataMap 仅会在 Scheduler 注册的任务时保存一次，而有状态任务对应的 JobDataMap 在每次执行任务后都会进行保存。</p><p>Trigger 自身也可以拥有一个 JobDataMap，其关联的 JobDataMap 可以通过 <code>JobExecutionContext#getTrigger().getJobDataMap()</code> 方法获取。不管是有状态还是无状态的任务，在任务执行期间对 Trigger 的 JobDataMap 所做的更改都不会进行持久化。</p><p>Quartz 拥有完善的事件和监听体系，大部分组件都拥有事件，如任务执行前事件、执行后事件、触发器触发前事件、触发器触发后事件、调度器开始事件、调度器关闭事件等。可以注册相应的监听器处理感兴趣的事件。</p><h2 id="2-2-SimpleTrigger"><a href="#2-2-SimpleTrigger" class="headerlink" title="2.2 SimpleTrigger"></a>2.2 SimpleTrigger</h2><p>SimpleTrigger 有多个重载的构造函数，用于在不同场合下构造出对应的实例。</p><ul><li><code>SimpleTrigger(String name, String group)</code>：指定所属组和名称；</li><li><code>SimpleTrigger(String name, String group, Date startTime)</code>：指定触发的开始时间；</li><li><code>SimpleTrigger(String name, String group, Date startTime, Date endTime, int repeatCount, long repeatInterval)</code>：指定开始时间、结束时间、重复执行次数、时间间隔；</li><li><code>SimpleTrigger(String name, String group, String jobName, String jobGroup, Date startTime, Date endTime, int repeatCount, long repeatInterval)</code>：最复杂的一个构造函数，通过 jobName 和 jobGroup，使该 Trigger 和 Scheduler 中的某个任务关联起来。</li></ul><h3 id="2-2-1-代码实例"><a href="#2-2-1-代码实例" class="headerlink" title="2.2.1 代码实例"></a>2.2.1 代码实例</h3><hr><h4 id="2-2-1-1-SimpleJob"><a href="#2-2-1-1-SimpleJob" class="headerlink" title="2.2.1.1 SimpleJob"></a>2.2.1.1 SimpleJob</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        System.out.println(jobExecutionContext.getTrigger().getName() + <span class="string">" triggered. time is:"</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-1-2-SimpleTriggerRunner"><a href="#2-2-1-2-SimpleTriggerRunner" class="headerlink" title="2.2.1.2 SimpleTriggerRunner"></a>2.2.1.2 <span id="SimpleTriggerRunner">SimpleTriggerRunner</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTriggerRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个 JobDetail 实例，指定 SimpleJob</span></span><br><span class="line">            JobDetail jobDetail = JobBuilder.newJob(SimpleJob.class)</span><br><span class="line">                    .withIdentity(<span class="string">"jName"</span>, <span class="string">"jGroup"</span>)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过 SimpleTrigger 定义调度规则：【立即启动】、【每2秒运行一次】、【用运行10次】</span></span><br><span class="line">            SimpleTrigger simpleTrigger = TriggerBuilder.newTrigger()</span><br><span class="line">                    .withIdentity(<span class="string">"tName"</span>, <span class="string">"tGroup"</span>)</span><br><span class="line">                    .startNow()</span><br><span class="line">                    .withSchedule(</span><br><span class="line">                            SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                                    .withIntervalInSeconds(<span class="number">2</span>)           <span class="comment">// 调度间隔</span></span><br><span class="line">                                    .withRepeatCount(<span class="number">10</span>)                <span class="comment">// 调度次数</span></span><br><span class="line">                    ).build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过 SchedulerFactory 获取一个调度器实例</span></span><br><span class="line">            SchedulerFactory factory = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line">            Scheduler scheduler = factory.getScheduler();</span><br><span class="line"></span><br><span class="line">            scheduler.scheduleJob(jobDetail, simpleTrigger);</span><br><span class="line">            scheduler.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-1-3-运行结果"><a href="#2-2-1-3-运行结果" class="headerlink" title="2.2.1.3 运行结果"></a>2.2.1.3 运行结果</h4><pre><code>tName1 triggered. time is:1524563336613tName1 triggered. time is:1524563338522tName1 triggered. time is:1524563340522tName1 triggered. time is:1524563342524tName1 triggered. time is:1524563344523tName1 triggered. time is:1524563346523tName1 triggered. time is:1524563348523tName1 triggered. time is:1524563350524tName1 triggered. time is:1524563352524tName1 triggered. time is:1524563354524tName1 triggered. time is:1524563356523</code></pre><h2 id="2-3-使用-CronTrigger"><a href="#2-3-使用-CronTrigger" class="headerlink" title="2.3 使用 CronTrigger"></a>2.3 使用 CronTrigger</h2><p>CronTrigger 能够提供比 SimpleTrigger 更有实际意义的调度方案，调度规则基于 <code>Cron表达式</code>。 CronTrigger 支持日历相关的周期性时间间隔（比如每月第一个周一执行），而不是简单的周期时间间隔。</p><h3 id="2-3-1-Cron-表达式"><a href="#2-3-1-Cron-表达式" class="headerlink" title="2.3.1 Cron 表达式"></a>2.3.1 Cron 表达式</h3><pre><code>Quartz 使用类似 Linux 下的 Cron 表达式定义时间规则。Cron 表达式由 6 或 7 个空格分割的时间字段组成。</code></pre><table><thead><tr><th style="text-align:center">位置</th><th>时间域名</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>秒</td><td>[0, 60)</td><td><code>,-*/</code></td></tr><tr><td style="text-align:center">2</td><td>分钟</td><td>[0, 60)</td><td><code>,-*/</code></td></tr><tr><td style="text-align:center">3</td><td>小时</td><td>[1, 24)</td><td><code>,-*/</code></td></tr><tr><td style="text-align:center">4</td><td>日期</td><td>[1, 32)</td><td><code>,-*?/LWC</code></td></tr><tr><td style="text-align:center">5</td><td>月份</td><td>[1, 13)</td><td><code>,-*/</code></td></tr><tr><td style="text-align:center">6</td><td>星期</td><td>[1, 8)</td><td><code>,-*/LC?#</code></td></tr><tr><td style="text-align:center">7</td><td>年（可选）</td><td>空值 或 [1970, 2100)</td><td><code>,-*/</code></td></tr></tbody></table><p>特殊字符：</p><table><thead><tr><th>特殊字符</th><th>作用</th></tr></thead><tbody><tr><td>*</td><td>表示对应时间域的每一个时刻，如 <code>*</code> 在分钟时段就表示每分钟</td></tr><tr><td>?</td><td>只能在日期和星期中使用，占位符，无意义</td></tr><tr><td>-</td><td>表达范围，如在小时中使用 <code>10-12</code>，表示从 10 点到 12 点</td></tr><tr><td>,</td><td>列表纸，如在星期中使用 <code>MON,WED,FRI</code>，表示周一、周三、周五</td></tr><tr><td>/</td><td><code>x/y</code> 表示等步长序列，x 为起始值，y 为增量步长，如在分钟中使用 <code>0/15</code>，表示0、15、30、45秒</td></tr><tr><td>L</td><td>只能在日期和星期中使用，代表 <code>Last</code> 的意思，日期中表示当月最后一天，星期表示周六</td></tr><tr><td>W</td><td>只能出现在日期中，是对前导日期的修饰，表示里该日期最近的工作日</td></tr><tr><td>LW</td><td>只能出现在日期中，表示当月最后一个工作日</td></tr><tr><td>#</td><td>只能在星期字段中使用，表示当月的某个工作日，<code>6#3</code>表示当月第三个周五，<code>4#5</code> 表示当月第五个周三，如果不存在则不触发</td></tr><tr><td>C</td><td>只能在日期和星期中使用，<code>Calendar</code>，表示计划所关联的日期。<code>5C</code> 在日期中相当于 <code>5日之后的那一天</code>，<code>1C</code> 在星期中相当于 <code>周天后的那一天</code></td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td><code>0 0 12 * * ?</code></td><td>每天 12:00 运行</td></tr><tr><td><code>0 15 10 ? * *</code></td><td>每天 10:15 运行</td></tr><tr><td><code>0 15 10 * * ?</code></td><td>每天 10:15 运行</td></tr><tr><td><code>0 15 10 * * ? *</code></td><td>每天 10:15 运行</td></tr><tr><td><code>0 15 10 * * ? 2008</code></td><td>在 2008 年的每天 10:15 运行</td></tr><tr><td><code>0 * 14 * * ?</code></td><td>每天 14 点到 15 点每分钟运行一次，开始于 14:00，结束于 14:59</td></tr><tr><td><code>0 0/5 14 * * ?</code></td><td>每天 14 点到 15 点每 5 分钟运行一次，开始于 14:00，结束语 14:55</td></tr><tr><td><code>0 0/5 14,18 * * ?</code></td><td>每天 14 点到 15 点每 5 分钟运行一次，此外每天 18 点到 19 点每 5 分钟也运行一次</td></tr><tr><td><code>0 10,44 14 ? 3 WED</code></td><td>3 月的每周三的 14:10 到 14:44，每分钟运行一次</td></tr><tr><td><code>0 15 10 ? * MON-FRI</code></td><td>每个工作日的 10:15 运行一次</td></tr><tr><td><code>0 15 10 15 * ?</code></td><td>每月 15 日的 10:15 运行一次</td></tr><tr><td><code>0 15 10 L * ?</code></td><td>每月最后一天的 10:15 运行一次</td></tr><tr><td><code>0 15 10 ? * 6L</code></td><td>每月的最后一个周五的 10:15 运行一次</td></tr><tr><td><code>0 15 10 ? * 6L 2014-2016</code></td><td>2014、2015、2016 年每个月的最后一个周五的 10:15 运行</td></tr><tr><td><code>0 15 10 ? * 6#3</code></td><td>每月第三个周五的 10: 15 运行</td></tr></tbody></table><h3 id="2-3-2-示例"><a href="#2-3-2-示例" class="headerlink" title="2.3.2 示例"></a>2.3.2 示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CronTriggerRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobDetail jobDetail = <span class="keyword">new</span> JobDetail(<span class="string">"jName1"</span>, <span class="string">"jGroup1"</span>, SimpleJob.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 CronTrigger 指定组及名称</span></span><br><span class="line">            CronTrigger cronTrigger = <span class="keyword">new</span> CronTrigger(<span class="string">"tName1"</span>, <span class="string">"tGroup1"</span>);</span><br><span class="line">            <span class="comment">// 新建并设置 Cron 表达式：从每分钟的 0 秒开始，每隔5秒触发一次</span></span><br><span class="line">            CronExpression cronExpression = <span class="keyword">new</span> CronExpression(<span class="string">"0/5 * * * * ?"</span>);</span><br><span class="line">            cronTrigger.setCronExpression(cronExpression);</span><br><span class="line"></span><br><span class="line">            SchedulerFactory schedulerFactory = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line">            Scheduler scheduler = schedulerFactory.getScheduler();</span><br><span class="line">            scheduler.scheduleJob(jobDetail, cronTrigger);</span><br><span class="line">            scheduler.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-运行结果"><a href="#2-3-3-运行结果" class="headerlink" title="2.3.3 运行结果"></a>2.3.3 运行结果</h3><pre><code>tName1 triggered. time is:1524645830011tName1 triggered. time is:1524645835006tName1 triggered. time is:1524645840006tName1 triggered. time is:1524645845002tName1 triggered. time is:1524645850003tName1 triggered. time is:1524645855004tName1 triggered. time is:1524645860003tName1 triggered. time is:1524645865003tName1 triggered. time is:1524645870005tName1 triggered. time is:1524645875006tName1 triggered. time is:1524645880000tName1 triggered. time is:1524645885000tName1 triggered. time is:1524645890007tName1 triggered. time is:1524645895005tName1 triggered. time is:1524645900005</code></pre><p>由于打印的时间是以毫秒作为单位的，因此可以看毫秒数的倒数第4位，都是以 5 作为步长的。</p><h2 id="2-4-Calendar"><a href="#2-4-Calendar" class="headerlink" title="2.4 Calendar"></a>2.4 Calendar</h2><pre><code>在实际任务调度中，不可能一成不变地按照某个特定周期调度任务，必须考虑到现实生活中日历上的特殊日期。下面的例子中，该任务每小时运行一次，并将 五一劳动节 和 国庆节 排除在外</code></pre><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        SchedulerFactory schedulerFactory = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line">        Scheduler scheduler = schedulerFactory.getScheduler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 法定节日是以年作为周期的，所以使用 AnnualCalendar</span></span><br><span class="line">        AnnualCalendar holidays = <span class="keyword">new</span> AnnualCalendar();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 五一劳动节</span></span><br><span class="line">        Calendar laborDay = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        laborDay.add(Calendar.MONTH, <span class="number">5</span>);</span><br><span class="line">        laborDay.add(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 国庆节</span></span><br><span class="line">        Calendar nationalDay = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        nationalDay.add(Calendar.MONTH, <span class="number">10</span>);</span><br><span class="line">        nationalDay.add(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Calendar&gt; calendarList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        calendarList.add(laborDay);</span><br><span class="line">        calendarList.add(nationalDay);</span><br><span class="line">        <span class="comment">// 排除这两个日期</span></span><br><span class="line">        holidays.setDaysExcluded(calendarList);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 向 Scheduler 注册日历</span></span><br><span class="line">        scheduler.addCalendar(<span class="string">"holidays"</span>, holidays, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4月1日上午10点</span></span><br><span class="line">        Date runDate = TriggerUtils.getDateOf(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        JobDetail jobDetail = <span class="keyword">new</span> JobDetail(<span class="string">"jName1"</span>, <span class="string">"jGroup1"</span>, SimpleJob.class);</span><br><span class="line">        SimpleTrigger trigger = <span class="keyword">new</span> SimpleTrigger(</span><br><span class="line">                <span class="string">"tName1"</span>, <span class="string">"tGroup1"</span>, runDate, <span class="keyword">null</span>, SimpleTrigger.REPEAT_INDEFINITELY, <span class="number">60L</span> * <span class="number">60L</span> * <span class="number">1000L</span>);</span><br><span class="line">        <span class="comment">// 让 Trigger 应用指定的日历规则</span></span><br><span class="line">        trigger.setCalendarName(<span class="string">"holidays"</span>);</span><br><span class="line">        </span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-任务调度信息存储"><a href="#2-5-任务调度信息存储" class="headerlink" title="2.5 任务调度信息存储"></a>2.5 任务调度信息存储</h2><p>在默认情况下，Quartz 将任务调度的运行信息保存在内存中。这种方法提供了最佳的性能，但缺乏持久性。</p><p>如果需要持久化任务调度信息，则 Quartz 允许用户通过调整其属性文件，将这些信息保存到数据库中。</p><h3 id="2-5-1-通过配置文件调整任务调度信息"><a href="#2-5-1-通过配置文件调整任务调度信息" class="headerlink" title="2.5.1 通过配置文件调整任务调度信息"></a>2.5.1 通过配置文件调整任务调度信息</h3><p>Quartz JAR 文件的 <code>org.quartz</code> 包含了一个 <code>quartz.properties</code> 属性配置文件，并提供了默认属性。可以通过在类路径下新建一个 <code>quartz.properties</code> 文件来覆盖默认配置。</p><pre><code># 集群的配置，这里不使用集群org.quartz.scheduler.instanceName = DefaultQuartzSchedulerorg.quartz.scheduler.rmi.export= falseorg.quartz.scheduler.warpJobExecutionInUserTransaction = false# 配置调度器的线程池org.quartz.threadPool.class = org.quartz.simple.SimpleThreadPoolorg.quartz.threadPool.threadCount = 10org.quartz.threadPool.threadPriority = 5org.quartz.threadPool.threadInheritContextClassLoaderOfInitializingThread # 配置任务调度现场数据保存机制org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore</code></pre><p>如果任务数目很大，则可以通过增大线程池获得更好的性能。</p><p>默认情况下，Quartz 采用 org.quartz.simpl.RAMJobStore 保存任务的现场数据，而通过以下设置可以将任务调度现场数据保存到数据库中</p><pre><code>org.quartz.jobStore.class = org.quratz.impl.jdbcjobstore.JobStoreTX# 数据库表前缀org.quartz.jobStore.tablePrefix = QRTZ_# 数据源名称org.quartz.jobStore.dataSource = qzDS# 定义数据源的具体属性org.quartz.dataSource.qzDS.driver = com.mysql.jdbc.Driverorg.quartz.dataSource.qzDS.URL = jdbc:mysql://localhost:3306/quartzorg.quartz.dataSource.qzDS.user = rootorg.quartz.dataSource.qzDS.password = 123456org.quartz.dataSource.qzDS.maxConnections = 10</code></pre><p>要将任务调度数据保存到数据库中，就必须使用 <code>org.quratz.impl.jdbcjobstore.JobStoreTX</code>，并提供相应的数据库配置信息。</p><p>用户必须事先在相应的数据库中创建 Quartz 的数据表，在 Quartz 的完整发布包的 <code>docs/dbTables</code> 目录下拥有对应不同数据库的 SQL 脚本。</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-27/67697382.jpg" alt=""></p><p>选择自己使用的数据库对应的脚本执行即可。</p><p>执行结果：<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-27/48452929.jpg" alt=""></p><h3 id="2-5-2-查询数据库中的运行信息"><a href="#2-5-2-查询数据库中的运行信息" class="headerlink" title="2.5.2 查询数据库中的运行信息"></a>2.5.2 查询数据库中的运行信息</h3><p>首先，引入依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.45<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>任务的现场保存对于上层的 Quartz 来说是完全透明的。<br>使用该配置文件后将之前的代码重新运行，就能在数据库中看到对应的数据。</p><p>当调度程序中途停止之后，任务调度的现场数据将记录在数据库表中，在系统重启时就可以在此基础上继续任务的调度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCJobStoreRunner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SchedulerFactory schedulerFactory = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line">            Scheduler scheduler = schedulerFactory.getScheduler();</span><br><span class="line">            <span class="comment">// 获取调度器中所有的触发组</span></span><br><span class="line">            String[] triggerGroups = scheduler.getTriggerGroupNames();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重新恢复在 tGroup1 组中名为 tName1 的触发器的运行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; triggerGroups.length; ++ i) &#123;</span><br><span class="line">                String[] triggerNames = scheduler.getTriggerNames(triggerGroups[i]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; triggerNames.length; ++ j) &#123;</span><br><span class="line">                    Trigger trigger = scheduler.getTrigger(triggerGroups[i], triggerNames[j]);</span><br><span class="line">                    <span class="keyword">if</span> (trigger <span class="keyword">instanceof</span> SimpleTrigger &amp;&amp; trigger.getFullName().equals(<span class="string">"tGroup1.tName1"</span>)) &#123;</span><br><span class="line">                        <span class="comment">// 恢复运行</span></span><br><span class="line">                        scheduler.rescheduleJob(triggerNames[j], triggerGroups[i], trigger);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            scheduler.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果调度程序执行后非正常退出，就可以通过 <code>JDBCJobStoreRunner</code> 根据记录在数据库中的现场数据恢复任务的调度。<br>Scheduler 中的所有 Trigger 及 JobDetail 的运行信息都会保存在数据库中，这里仅恢复 <code>tGroup1</code> 组中名为 <code>tName1</code> 的触发器。触发器采用 <code>GROUP.TRIGGER_NAME</code> 的全名格式，通过 <code>Scheduler#reschduleJob(String triggerName, String groupName, Trigger trigger)</code> 方法即可重新调度关联某个 Trigger 任务。</p><h3 id="2-5-3-不同时期-QRTZ-SIMPLE-TRIGGERS-表的数据"><a href="#2-5-3-不同时期-QRTZ-SIMPLE-TRIGGERS-表的数据" class="headerlink" title="2.5.3 不同时期 QRTZ_SIMPLE_TRIGGERS 表的数据"></a>2.5.3 不同时期 <code>QRTZ_SIMPLE_TRIGGERS</code> 表的数据</h3><ul><li>执行 <a href="#SimpleTriggerRunner">代码</a> 中的 <code>SimpleTriggerRunner</code> 一段时间后退出<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-28/81612739.jpg" alt=""></li><li>quartz 数据库状态如下<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-28/61021009.jpg" alt=""></li><li><p>这时 <code>QRTZ_SIMPLE_TRIGGERS</code> 表中的数据如下<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-28/8830267.jpg" alt=""></p><ul><li>REPEAT_COUNT: 触发器器需要执行的总次数</li><li>REPEAT_INTERVAL: 调度间隔(单位：毫秒)</li><li>TIMES_TRIGGERED: 触发器已经调度的次数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCJobStoreRunner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SchedulerFactory schedulerFactory = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line">            Scheduler scheduler = schedulerFactory.getScheduler();</span><br><span class="line"></span><br><span class="line">            JobKey jobKey = <span class="keyword">new</span> JobKey(<span class="string">"jName"</span>, <span class="string">"jGroup"</span>);</span><br><span class="line">            List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);</span><br><span class="line">            <span class="comment">// SELECT TRIGGER_NAME, TRIGGER_GROUP FROM &#123;QRTZ_&#125;TRIGGERS WHERE SCHED_NAME = &#123;DefaultQuartzScheduler&#125; AND JOB_NAME = ? AND JOB_GROUP = ?</span></span><br><span class="line">            <span class="comment">// 其中 &#123;QRTZ_&#125; 和 &#123;DefaultQuartzScheduler&#125; 均来自 quartz.properties 的配置</span></span><br><span class="line">            <span class="comment">// 重新恢复在jGroup1组中，名为job1_1的 job的触发器运行</span></span><br><span class="line">            <span class="keyword">if</span>(triggers.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (Trigger tg : triggers) &#123;</span><br><span class="line">                    <span class="comment">// 根据类型判断</span></span><br><span class="line">                    <span class="keyword">if</span> ((tg <span class="keyword">instanceof</span> CronTrigger) || (tg <span class="keyword">instanceof</span> SimpleTrigger)) &#123;</span><br><span class="line">                        <span class="comment">// 恢复job运行</span></span><br><span class="line">                        scheduler.resumeJob(jobKey);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                scheduler.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时原先被中断的任务已经恢复。</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-28/42883536.jpg" alt=""><br>可以看到，将剩余12次全部执行完成。</p><p>再次查看 <code>QRTZ_SIMPLE_TRIGGER</code> 表，发现触发器已经完成调度并被清除。<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-28/27877213.jpg" alt=""></p><h1 id="3-集成-Spring"><a href="#3-集成-Spring" class="headerlink" title="3. 集成 Spring"></a>3. 集成 Spring</h1><pre><code>Spring 为创建 Quartz 的 Scheduler、Trigger、JobDetail 提供了便利的 FactoryBean 类，以便能够在 Spring 容器中享受注入的好处。</code></pre><p>Spring 提供了两方面的支持：</p><ol><li>为 Quartz 的主要组件提供了更具 Bean 风格的扩展类</li><li>提供创造 Scheduler 的BeanFactory 类，方便在 Spring 环境下创建对应的组件对象，并结合 Spring 容器生命周期执行启动和停止的动作。</li></ol><h2 id="3-1-创建-JobDetail"><a href="#3-1-创建-JobDetail" class="headerlink" title="3.1 创建 JobDetail"></a>3.1 创建 JobDetail</h2><p>由于 JobDetail 使用带参构造函数，不方便通过 Spring 配置，因此 Spring 通过扩展 JobDetail 提供了更具 Bean 风格的 <code>JobDetailFactoryBean</code>，此外，Spring 还提供了 <code>MethodInvokingJobDetailFactoryBean</code>，用于将 Spring 容器中 Bean 的方法包装成 Quartz 任务，使开发者不必为 Job 创建对应的类。</p><h3 id="3-1-1-JobDetailFactoryBean"><a href="#3-1-1-JobDetailFactoryBean" class="headerlink" title="3.1.1 JobDetailFactoryBean"></a>3.1.1 JobDetailFactoryBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"example5"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConf</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetailFactoryBean <span class="title">jobDetailFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JobDetailFactoryBean jobDetailFactoryBean = <span class="keyword">new</span> JobDetailFactoryBean();</span><br><span class="line">        jobDetailFactoryBean.setJobClass(SimpleJob.class);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"size"</span>, <span class="number">10</span>);</span><br><span class="line">        jobDetailFactoryBean.setJobDataAsMap(map);</span><br><span class="line"></span><br><span class="line">        jobDetailFactoryBean.setApplicationContextJobDataKey(<span class="string">"applicationContext"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jobDetailFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JobDetailFactoryBean 封装了 SimpleJob 任务类，并为 Job 对应的 JobDataMap 设置了一个 key 为 <code>size</code>，value 为 10的数据。此外，通过指定 ApplicationContextJobDataKey，让 Job 的JobDataMap 持有 Spring ApplicationContext 的引用。</p></blockquote><ul><li>jobClass：实现 Job 接口的任务类；</li><li>beanName：默认为 bean 的id，显示指定 Bean 名称，对应任务的名称；</li><li>jobDataAsMap：类型为 Map，为任务所对应的 JobDataMap 提供值。提供这个数据是因为用户无法在 Spring 配置文件中为 JobDataMap 类型的属性提供信息；</li><li>applicationContextJobDataKey：用户可以将 Spring ApplicationContext 的引用保存到 JobDataMap 中，以便在 Job 的代码中访问 ApplicaitonContext。为了达到这个目的，用户需要指定一个 key 对应这个 ApplicationContext，如果不设置就不会将 ApplicationContext 放入 JobDataMap中；</li><li>jobListenerNames：类型为 <code>String[]</code>，指定注册在 Scheduler 中的 JobListener 名称。</li></ul><h2 id="3-2-创建-Trigger"><a href="#3-2-创建-Trigger" class="headerlink" title="3.2 创建 Trigger"></a>3.2 创建 Trigger</h2><pre><code>Spring 按照相似的思路分为 SimpleTrigger 和 CronTrigger 提供了更具 Bean 风格的 SimpleTriggerFactoryBean 和 CronTriggerFactoryBean 的扩展类，</code></pre><h3 id="3-2-1-SimpleTriggerFactoryBean"><a href="#3-2-1-SimpleTriggerFactoryBean" class="headerlink" title="3.2.1 SimpleTriggerFactoryBean"></a>3.2.1 SimpleTriggerFactoryBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"simpleTrigger"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleTriggerFactoryBean <span class="title">simpleTriggerFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleTriggerFactoryBean simpleTriggerFactoryBean = <span class="keyword">new</span> SimpleTriggerFactoryBean();</span><br><span class="line">    simpleTriggerFactoryBean.setJobDetail(jobDetailFactoryBean().getObject());</span><br><span class="line">    simpleTriggerFactoryBean.setStartDelay(<span class="number">1000</span>);</span><br><span class="line">    simpleTriggerFactoryBean.setRepeatInterval(<span class="number">2000</span>);</span><br><span class="line">    simpleTriggerFactoryBean.setRepeatCount(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"count"</span>, <span class="number">10</span>);</span><br><span class="line">    simpleTriggerFactoryBean.setJobDataAsMap(map);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> simpleTriggerFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义了一个 Trigger，该 Trigger 和 JobDetail 相关联，延迟 1 秒后启动，时间间隔为 2 秒，重复执行 20 次。</p></blockquote><p><strong>Trigger 中设置的 JobDataMap 在执行任务时必须通过以下方式获取</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJob</span> <span class="keyword">implements</span> <span class="title">StatefulJob</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        Map dataMap = context.getTrigger().getJobDataMap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-2-2-CronTriggerFactoryBean"><a href="#3-2-2-CronTriggerFactoryBean" class="headerlink" title="3.2.2 CronTriggerFactoryBean"></a>3.2.2 CronTriggerFactoryBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"cronTriggerFactoryBean"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CronTriggerFactoryBean <span class="title">cronTriggerFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CronTriggerFactoryBean cronTriggerFactoryBean = <span class="keyword">new</span> CronTriggerFactoryBean();</span><br><span class="line">    cronTriggerFactoryBean.setJobDetail(jobDetailFactoryBean().getObject());</span><br><span class="line">    cronTriggerFactoryBean.setCronExpression(<span class="string">"0/5 * * * * ?"</span>);</span><br><span class="line">    <span class="keyword">return</span> cronTriggerFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-Scheduler"><a href="#3-3-Scheduler" class="headerlink" title="3.3 Scheduler"></a>3.3 Scheduler</h2><pre><code>Quartz 的 SchedulerFactory 是标准的工厂类，不太适合在 Spring 环境下使用。此外，为了保证 Scheduler 能够感知到 Spring 的生命周期，Spring 提供了 SchedulerFactory。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SchedulerFactoryBean <span class="title">schedulerFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SchedulerFactoryBean schedulerFactoryBean = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">    <span class="comment">// 注册一个或多个 Trigger</span></span><br><span class="line">    schedulerFactoryBean.setTriggers(simpleTriggerFactoryBean().getObject());</span><br><span class="line">    <span class="comment">// 以 Map 类型设置 SchedulerContext</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"timeout"</span>, <span class="number">30</span>);</span><br><span class="line">    schedulerFactoryBean.setSchedulerContextAsMap(map);</span><br><span class="line">    <span class="comment">// 显示指定 Quartz 配置文件的路径</span></span><br><span class="line">    schedulerFactoryBean.setConfigLocation(<span class="keyword">new</span> ClassPathResource(<span class="string">"quartz.properties"</span>));</span><br><span class="line">    <span class="keyword">return</span> schedulerFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>triggers：属性为 <code>trigger[]</code>，可以注册多个 Trigger</li><li>schedulerContextAsMap：Scheduler拥有类似 ServletContext 的 SchedulerContext，允许用户以 Map 的形式设置 SchedulerContext 的参数值</li><li>configLocation：指定配置文件路径</li><li>calendars：类型为 Map，通过该属性向 Scheduler 注册 JobDetail</li><li>jobDetails：类型为 <code>JobDetail[]</code>，通过该属性向 Scheduler 注册 JobDetail</li><li>autoStartup：SchedulerFactoryBean 初始化之后是否立即启动，默认为 true</li><li>startupDelay：SchedulerFactoryBean 启动后的延迟时间，默认为 0</li></ul><p><em>SchedulerFactoryBean 的一项重要功能是允许用户将 Quartz 配置文件中的信息转移到 Spring 配置文件中</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SchedulerFactoryBean <span class="title">schedulerFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SchedulerFactoryBean schedulerFactoryBean = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">    <span class="comment">// 注册一个或多个 Trigger</span></span><br><span class="line">    schedulerFactoryBean.setTriggers(simpleTriggerFactoryBean().getObject());</span><br><span class="line">    <span class="comment">// 以 Map 类型设置 SchedulerContext</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"timeout"</span>, <span class="number">30</span>);</span><br><span class="line">    schedulerFactoryBean.setSchedulerContextAsMap(map);</span><br><span class="line">    <span class="comment">// 显示指定 Quartz 配置文件的路径</span></span><br><span class="line">    schedulerFactoryBean.setConfigLocation(<span class="keyword">new</span> FileSystemResource(<span class="string">"classpath:quartz.properties"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------ 集成 Quartz 配置文件 ------------------//</span></span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.setProperty(<span class="string">"org.quartz.threadPool.class"</span>, <span class="string">"org.quartz.simpl.SimpleThreadPool"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"org.quartz.threadPool.threadCount"</span>, <span class="string">"10"</span>);</span><br><span class="line">    schedulerFactoryBean.setQuartzProperties(properties);</span><br><span class="line">    <span class="keyword">return</span> schedulerFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-测试代码"><a href="#3-4-测试代码" class="headerlink" title="3.4 测试代码"></a>3.4 测试代码</h2><p>此处有一个坑，就说从 Spring 容器中根据 beanName 获取的 schedulerFactoryBean 其实是 <code>org.quartz.impl.StdScheduler</code> 对象，如果使用 <code>org.springframework.scheduling.quartz.SchedulerFactoryBean</code> 会抛出以下异常</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-5-2/64504859.jpg" alt=""></p><p>从 Spring 容器中直接获取 Scheduler 即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTriggerRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(QuartzConf.class);</span><br><span class="line">        <span class="comment">// 此处一定要取 Scheduler 而不是 SchedulerFactoryBean，因为它是一个工厂bean，得到的不是它本身，而是它负责创建的 org.quartz.impl.StdScheduler 对象</span></span><br><span class="line">        Scheduler scheduler = context.getBean(<span class="string">"schedulerFactoryBean"</span>, Scheduler.class);</span><br><span class="line"></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="4-附录"><a href="#4-附录" class="headerlink" title="4. 附录"></a>4. 附录</h1><h2 id="4-1-tables-mysql-innodb-sql"><a href="#4-1-tables-mysql-innodb-sql" class="headerlink" title="4.1 tables_mysql_innodb.sql"></a>4.1 tables_mysql_innodb.sql</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- In your Quartz properties file, you'll need to set </span></span><br><span class="line"><span class="comment">-- org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line"><span class="comment">-- By: Ron Cordell - roncordell</span></span><br><span class="line"><span class="comment">-- I didn't see this anywhere, so I thought I'd post it here. This is the script from Quartz to create the tables in a MySQL database, modified to use INNODB instead of MYISAM.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_JOB_LISTENERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_TRIGGER_LISTENERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_FIRED_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_PAUSED_TRIGGER_GRPS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_SCHEDULER_STATE;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_LOCKS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_SIMPLE_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_CRON_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_BLOB_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_JOB_DETAILS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_CALENDARS;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_JOB_DETAILS(</span><br><span class="line">JOB_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">DESCRIPTION <span class="built_in">VARCHAR</span>(<span class="number">250</span>) <span class="literal">NULL</span>,</span><br><span class="line">JOB_CLASS_NAME <span class="built_in">VARCHAR</span>(<span class="number">250</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">IS_DURABLE <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">IS_VOLATILE <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">IS_STATEFUL <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">REQUESTS_RECOVERY <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">JOB_DATA <span class="built_in">BLOB</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (JOB_NAME,JOB_GROUP))</span><br><span class="line"><span class="keyword">TYPE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_JOB_LISTENERS (</span><br><span class="line">JOB_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">JOB_LISTENER <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (JOB_NAME,JOB_GROUP,JOB_LISTENER),</span><br><span class="line"><span class="keyword">INDEX</span> (JOB_NAME, JOB_GROUP),</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (JOB_NAME,JOB_GROUP)</span><br><span class="line"><span class="keyword">REFERENCES</span> QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP))</span><br><span class="line"><span class="keyword">TYPE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_TRIGGERS (</span><br><span class="line">TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">JOB_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">IS_VOLATILE <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">DESCRIPTION <span class="built_in">VARCHAR</span>(<span class="number">250</span>) <span class="literal">NULL</span>,</span><br><span class="line">NEXT_FIRE_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="literal">NULL</span>,</span><br><span class="line">PREV_FIRE_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">PRIORITY</span> <span class="built_in">INTEGER</span> <span class="literal">NULL</span>,</span><br><span class="line">TRIGGER_STATE <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TRIGGER_TYPE <span class="built_in">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">START_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">END_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="literal">NULL</span>,</span><br><span class="line">CALENDAR_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">MISFIRE_INSTR <span class="built_in">SMALLINT</span>(<span class="number">2</span>) <span class="literal">NULL</span>,</span><br><span class="line">JOB_DATA <span class="built_in">BLOB</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line"><span class="keyword">INDEX</span> (JOB_NAME, JOB_GROUP),</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (JOB_NAME,JOB_GROUP)</span><br><span class="line"><span class="keyword">REFERENCES</span> QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP))</span><br><span class="line"><span class="keyword">TYPE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_SIMPLE_TRIGGERS (</span><br><span class="line">TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">REPEAT_COUNT <span class="built_in">BIGINT</span>(<span class="number">7</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">REPEAT_INTERVAL <span class="built_in">BIGINT</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TIMES_TRIGGERED <span class="built_in">BIGINT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line"><span class="keyword">INDEX</span> (TRIGGER_NAME, TRIGGER_GROUP),</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line"><span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP))</span><br><span class="line"><span class="keyword">TYPE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_CRON_TRIGGERS (</span><br><span class="line">TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">CRON_EXPRESSION <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TIME_ZONE_ID <span class="built_in">VARCHAR</span>(<span class="number">80</span>),</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line"><span class="keyword">INDEX</span> (TRIGGER_NAME, TRIGGER_GROUP),</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line"><span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP))</span><br><span class="line"><span class="keyword">TYPE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_BLOB_TRIGGERS (</span><br><span class="line">TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">BLOB_DATA <span class="built_in">BLOB</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line"><span class="keyword">INDEX</span> (TRIGGER_NAME, TRIGGER_GROUP),</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line"><span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP))</span><br><span class="line"><span class="keyword">TYPE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_TRIGGER_LISTENERS (</span><br><span class="line">TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TRIGGER_LISTENER <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),</span><br><span class="line"><span class="keyword">INDEX</span> (TRIGGER_NAME, TRIGGER_GROUP),</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line"><span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP))</span><br><span class="line"><span class="keyword">TYPE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_CALENDARS (</span><br><span class="line">CALENDAR_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">CALENDAR <span class="built_in">BLOB</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (CALENDAR_NAME))</span><br><span class="line"><span class="keyword">TYPE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_PAUSED_TRIGGER_GRPS (</span><br><span class="line">TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (TRIGGER_GROUP))</span><br><span class="line"><span class="keyword">TYPE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_FIRED_TRIGGERS (</span><br><span class="line">ENTRY_ID <span class="built_in">VARCHAR</span>(<span class="number">95</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">IS_VOLATILE <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">INSTANCE_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FIRED_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">PRIORITY</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">STATE <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">JOB_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">IS_STATEFUL <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">REQUESTS_RECOVERY <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (ENTRY_ID))</span><br><span class="line"><span class="keyword">TYPE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_SCHEDULER_STATE (</span><br><span class="line">INSTANCE_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">LAST_CHECKIN_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">CHECKIN_INTERVAL <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (INSTANCE_NAME))</span><br><span class="line"><span class="keyword">TYPE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_LOCKS (</span><br><span class="line">LOCK_NAME <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (LOCK_NAME))</span><br><span class="line"><span class="keyword">TYPE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> QRTZ_LOCKS <span class="keyword">values</span>(<span class="string">'TRIGGER_ACCESS'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> QRTZ_LOCKS <span class="keyword">values</span>(<span class="string">'JOB_ACCESS'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> QRTZ_LOCKS <span class="keyword">values</span>(<span class="string">'CALENDAR_ACCESS'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> QRTZ_LOCKS <span class="keyword">values</span>(<span class="string">'STATE_ACCESS'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> QRTZ_LOCKS <span class="keyword">values</span>(<span class="string">'MISFIRE_ACCESS'</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-任务调度概述&quot;&gt;&lt;a href=&quot;#1-任务调度概述&quot; class=&quot;headerlink&quot; title=&quot;1. 任务调度概述&quot;&gt;&lt;/a&gt;1. 任务调度概述&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;各种企业应用几乎都会碰到任务调度的需求。
在特定的时间点执行指定的操作。
      
    
    </summary>
    
      <category term="quartz" scheme="https://destinywang.github.io/blog/categories/quartz/"/>
    
    
      <category term="quartz" scheme="https://destinywang.github.io/blog/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>Java文件下载</title>
    <link href="https://destinywang.github.io/blog/2018/04/16/Java%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    <id>https://destinywang.github.io/blog/2018/04/16/Java文件下载/</id>
    <published>2018-04-16T15:46:42.000Z</published>
    <updated>2018-04-16T15:56:06.275Z</updated>
    
    <content type="html"><![CDATA[<pre><code>今天在开发中遇到了一个需求：在服务端保存一个Excel模板，用户通过浏览器传递不同的参数，解析参数并写入模板返回给用户以供下载。需求本身很简单，但在开发的过程中踩了几个坑，所以记录下来。</code></pre><h2 id="1-文件下载的原理"><a href="#1-文件下载的原理" class="headerlink" title="1. 文件下载的原理"></a>1. 文件下载的原理</h2><blockquote><ul><li>通过 <code>HttpServletResponse.setContentType()</code> 方法设置 <code>Content-Type</code> 字段的值，设置为 <code>application/octet-stream</code> 或 <code>application/x-msdownload</code> ，决定客户端服务器以那种方式来接受返回的信息</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"application/vnd.ms-excel"</span>);</span><br></pre></td></tr></table></figure><blockquote><ul><li>通过 <code>HttpServletResponse.setHeader()</code> 方法设置 <code>Content-Disposition</code> 头的值为 <code>attachment;filename=文件名</code> ，浏览器通过附件的形式来获取到用户上传的文件</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.addHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename="</span> + fileName);</span><br></pre></td></tr></table></figure><blockquote><ul><li>读取下载文件，通过 <code>HttpServletResponse.getOutputStream()</code> 方法返回 <code>ServletOutputStream</code> 对象来向客户端写入附件文件的内容</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (OutputStream out = response.getOutputStream();</span><br><span class="line">     BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">     BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(out)) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">    <span class="keyword">int</span> bytesRead;</span><br><span class="line">    <span class="keyword">while</span> (-<span class="number">1</span> != (bytesRead = bis.read(buff, <span class="number">0</span>, buff.length))) &#123;</span><br><span class="line">        bos.write(buff, <span class="number">0</span>, bytesRead);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    logger.error(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Http-报头-Content-disposition-的作用"><a href="#2-Http-报头-Content-disposition-的作用" class="headerlink" title="2. Http 报头 Content-disposition 的作用"></a>2. <code>Http</code> 报头 <code>Content-disposition</code> 的作用</h2><pre><code>Content-Disposition 属性是作为对下载文件的一个标识字段。</code></pre><p>在 <a href="http://www.rfc-editor.org/rfc/rfc2616.pdf" target="_blank" rel="noopener">rfc2616</a> 章节19.5 Additional Features中</p><p><code>Content-Disposition</code> 属性有两种类型：<code>inline</code> 和 <code>attachment</code></p><ul><li>inline ：将文件内容直接显示在页面</li><li>attachment：弹出对话框让用户下载</li></ul><h3 id="2-1-inline"><a href="#2-1-inline" class="headerlink" title="2.1 inline"></a>2.1 inline</h3><pre><code>inline 用于直接在页面中展示该文件，常用与图片等</code></pre><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"rfc1806.txt"</span>);</span><br><span class="line">String filename = file.getName();</span><br><span class="line">response.setHeader(<span class="string">"Content-Type"</span>,<span class="string">"text/plain"</span>);</span><br><span class="line">response.addHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"inline;filename="</span> + <span class="keyword">new</span> String(filename.getBytes(),<span class="string">"utf-8"</span>));</span><br><span class="line">response.addHeader(<span class="string">"Content-Length"</span>,<span class="string">""</span> + file.length());</span><br></pre></td></tr></table></figure><h3 id="2-2-attachment"><a href="#2-2-attachment" class="headerlink" title="2.2 attachment"></a>2.2 attachment</h3><pre><code>attachment 用于通知浏览器弹出对话框以供用户下载。</code></pre><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"rfc1806.txt"</span>);</span><br><span class="line">String filename = file.getName();</span><br><span class="line">response.setHeader(<span class="string">"Content-Type"</span>,<span class="string">"text/plain"</span>);</span><br><span class="line">response.addHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment; filename="</span> + <span class="keyword">new</span> String(filename.getBytes(),<span class="string">"utf-8"</span>));</span><br><span class="line">response.addHeader(<span class="string">"Content-Length"</span>,<span class="string">""</span> + file.length());</span><br></pre></td></tr></table></figure><h2 id="3-filename-属性中文乱码"><a href="#3-filename-属性中文乱码" class="headerlink" title="3. filename 属性中文乱码"></a>3. <code>filename</code> 属性中文乱码</h2><p>如果在设置 <code>filename</code> 的时候直接使用中文，则会出现如下情况:</p><ul><li><p>在代码中直接使用中文进行设置<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-16/99931223.jpg" alt=""></p></li><li><p>相应的 <code>HTTP Response</code><br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-16/35170323.jpg" alt=""></p></li><li><p>浏览器的弹窗<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-16/14163886.jpg" alt=""></p></li></ul><p>首先，产生乱码的根本问题是在 HTTP 协议中，HTTP Header要求其内容必须为 <code>ISO-8859-1</code> 编码。</p><p>所以，在开发中尽量使用如下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment; filename="</span> + <span class="keyword">new</span> String(<span class="string">"中文文件名"</span>.getBytes(<span class="string">"utf-8"</span>), <span class="string">"ISO8859-1"</span>));</span><br></pre></td></tr></table></figure><p>得到文件名的字节数组，将字节数组转换成 <code>IOS-8859-1</code> 格式编码的字符串。</p><p>而不能通过如下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"中文文件名"</span>.getBytes(<span class="string">"ISO8859-1"</span>);</span><br></pre></td></tr></table></figure><p>因为 <code>IOS-8859-1</code> 的编码表中没有汉字字符，因此无法通过以上的方式对中文字符串进行编码。</p><p>以先通过 <code>&quot;中文文件名&quot;.getBytes(&quot;utf-8&quot;)</code> 获取其 <code>byte[]</code>字节，让其按照字节来编码，即在使用 <code>new String(&quot;中文文件名&quot;.getBytes(&quot;utf-8&quot;), &quot;ISO8859-1&quot;)</code> 将其重新组成一个字符串，传送给浏览器。</p><h2 id="4-演示"><a href="#4-演示" class="headerlink" title="4. 演示"></a>4. 演示</h2><h3 id="4-1-代码及资源路径"><a href="#4-1-代码及资源路径" class="headerlink" title="4.1 代码及资源路径"></a>4.1 代码及资源路径</h3><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-16/86742792.jpg" alt=""></p><h3 id="4-2-HTTP-Response-详情"><a href="#4-2-HTTP-Response-详情" class="headerlink" title="4.2 HTTP Response 详情"></a>4.2 HTTP Response 详情</h3><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-16/68196612.jpg" alt=""></p><h3 id="4-3-浏览器能够正确识别"><a href="#4-3-浏览器能够正确识别" class="headerlink" title="4.3 浏览器能够正确识别"></a>4.3 浏览器能够正确识别</h3><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-16/88139961.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;今天在开发中遇到了一个需求：
在服务端保存一个Excel模板，用户通过浏览器传递不同的参数，解析参数并写入模板返回给用户以供下载。
需求本身很简单，但在开发的过程中踩了几个坑，所以记录下来。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;1-文件下载的原理&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="踩坑总结" scheme="https://destinywang.github.io/blog/categories/%E8%B8%A9%E5%9D%91%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="踩坑总结" scheme="https://destinywang.github.io/blog/tags/%E8%B8%A9%E5%9D%91%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>(翻译)In Search of an Understandable Consensus Algorithm —— Raft算法</title>
    <link href="https://destinywang.github.io/blog/2018/04/15/%E7%BF%BB%E8%AF%91-In-Search-of-an-Understandable-Consensus-Algorithm-%E2%80%94%E2%80%94-Raft%E7%AE%97%E6%B3%95/"/>
    <id>https://destinywang.github.io/blog/2018/04/15/翻译-In-Search-of-an-Understandable-Consensus-Algorithm-——-Raft算法/</id>
    <published>2018-04-15T07:40:55.000Z</published>
    <updated>2018-04-15T14:55:31.574Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客为著名的 RAFT 一致性算法论文的中文翻译，论文名为<a href="https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf" target="_blank" rel="noopener">《In search of an Understandable Consensus Algorithm (Extended Version)》(寻找一种易于理解的一致性算法)</a></p><p><code>Raft</code> 是一种用来管理日志复制的一致性算法。它和 <code>Paxos</code> 的性能和功能是一样的，但是它和 <code>Paxos</code> 的结构不一样；这使得 <code>Raft</code> 更容易理解并且更易于建立实际的系统。为了提高理解性，Raft 将一致性算法分为了几个部分，例如<code>领导选取（leader selection）</code>，<code>日志复制（log replication）</code>和<code>安全性（safety）</code>，同时它使用了更强的一致性来减少了必须需要考虑的状态。从用户学习的结果来看，<code>Raft</code> 比 <code>Paxos</code> 更容易学会。<code>Raft</code> 还包括了一种新的机制来使得动态改变集群成员，它使用<code>重叠大多数（overlapping majorities）</code>来保证安全。</p><h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h1><p>一致性算法允许一组机器像一个整体一样工作，即使其中的一些机器出了错误也能正常工作。正因为此，他们扮演着建立大规模可靠的软件系统的关键角色。在过去的十年中 <code>Paxos</code> 一直都主导着有关一致性算法的讨论：大多数一致性算法的实现都基于它或者受它影响，并且 Paxos 也成为了教学生关于一致性知识的主要工具。</p><p>不幸的是，尽管在降低它的复杂性方面做了许多努力，<code>Paxos</code> 依旧很难理解。并且，<code>Paxos</code> 需要经过复杂的修改才能应用于实际中。这些导致了系统构构建者和学生都十分头疼。</p><p>在被 <code>Paxos</code> 折磨之后，我们开始寻找一种在系统构建和教学上更好的新的一致性算法。我们的首要目标是让它易于理解：我们能不能定义一种面向实际系统的一致性算法并且比 <code>Paxos</code> 更容易学习呢？并且，我们希望这种算法能凭直觉就能明白，这对于一个系统构建者来说是十分必要的。对于一个算法，不仅仅是让它工作起来很重要，知道它是如何工作的更重要。</p><p>我们工作的结果是一种新的一致性算法，叫做 <code>Raft</code>。在设计 <code>Raft</code> 的过程中我们应用了许多专门的技巧来提升理解性，包括<code>算法分解（分为领导选取（leader selection），日志复制（log replication）和安全性（safety））</code> 和 <code>减少状态（state space reduction）（相对于 Paxos，Raft 减少了非确定性的程度和服务器互相不一致的方式）</code>。在两所学校的43个学生的研究中发现，<code>Raft</code> 比 <code>Paxos</code> 要更容易理解：在学习了两种算法之后，其中的33个学生回答 <code>Raft</code> 的问题要比回答 <code>Paxos</code> 的问题要好。</p><p>在许多方面，<code>Raft</code>与现有的协商一致意见相似(最值得注意的是，Oki和Liskov的Viewstamped复制)，但它有几个新的特点:</p><ul><li>强领导者<code>（Strong Leader）</code> : <code>Raft</code>使用一种比其他共识算法更强的领导方式。例如，日志条目只从<code>Leader</code>流向其他服务器。这样就简化了复制日志的管理，使<code>Raft</code>更容易理解。</li><li>领导选取<code>（Leader Selection）</code>: <code>Raft</code> 使用<code>随机定时器</code>选举领导人。这只增加了对任何协商一致算法所需的心跳的一小部分机制，同时快速地解决冲突。</li><li>成员变化<code>（Membership Change）</code>: <code>Raft</code> 为了调整集群中成员关系使用了新的<code>联合一致性（joint consensus）</code>的方法，这种方法中大多数不同配置的机器在转换关系的时候会<code>交迭（overlap）</code>。这使得在配置改变的时候，集群能够继续操作。</li></ul><p>我们认为，Raft 在教学方面和实际实现方面比 <code>Paxos</code> 和其他算法更出众。</p><ul><li>它比其他算法更简单、更容易理解；</li><li>它能满足一个实际系统的需求；</li><li>它拥有许多开源的实现并且被许多公司所使用；</li><li>它的安全特性已经被证明；</li><li>并且它的效率和其他算法相比也具有竞争力。</li></ul><p>这篇论文剩下的部分会讲如下内容：</p><ul><li><code>复制状态机（replicated state machine）</code>问题（第2节）;</li><li>讨论 <code>Paxos</code> 的优缺点（第3节）;</li><li>讨论我们用的为了达到提升理解性的方法（第4节）;</li><li>陈述 Raft 一致性算法（第5~8节）;</li><li>评价 <code>Raft</code> 算法（第9节）;</li><li>对相关工作的讨论（第10节）。</li></ul><h1 id="2-复制状态机（Replicated-State-Machine）"><a href="#2-复制状态机（Replicated-State-Machine）" class="headerlink" title="2. 复制状态机（Replicated State Machine）"></a>2. 复制状态机（Replicated State Machine）</h1><pre><code>复制状态机在分布式领域是一个常用且重要的技术。通过复制服务副本，并和副本一起来协调客户端的交互，来实现容错服务。这个方法同样提供了一个框架，来理解和设计复制管理协议。</code></pre><p>一致性算法是在<code>复制状态机</code>的背景下提出来的。在这个方法中，在一组服务器的状态机产生同样的状态的副本因此即使有一些服务器崩溃了这组服务器也还能继续执行。复制状态机在分布式系统中被用于解决许多有关容错的问题。例如，<code>GFS</code>，<code>HDFS</code>还有 <code>RAMCloud</code> 这些大规模的系统都是用一个单独的集群领导者，使用一个单独的复制状态机来进行领导选取和存储配置信息来应对领导者的崩溃。使用复制状态机的例子有 <code>Chubby</code> 和 <code>ZooKeeper</code>。</p><blockquote><p>复制状态机的架构。一致性算法管理来自客户端状态命令的复制日志。状态机处理的日志中的命令的顺序都是一致的，因此会得到相同的执行结果。</p></blockquote><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-15/55312592.jpg" alt=""></p><p>复制状态机是通过复制日志来实现的。每一台服务器保存着一份日志，日志中包含一系列的命令，状态机会按顺序执行这些命令。因为每一台计算机的状态机都是确定的，所以每个状态机的状态都是相同的，执行的命令是相同的，最后的执行结果也就是一样的了。</p><p>如何保证复制日志一致就是一致性算法的工作了。在一台服务器上，一致性模块接受客户端的命令并且把命令加入到它的日志中。它和其他服务器上的一致性模块进行通信来确保每一个日志最终包含相同序列的请求，即使有一些服务器宕机了。一旦这些命令被正确的复制了，每一个服务器的状态机都会按同样的顺序去执行它们，然后将结果返回给客户端。最终，这些服务器看起来就像一台可靠的状态机。</p><p>应用于实际系统的一致性算法一般有以下特性：</p><ul><li>确保安全性（从来不会返回一个错误的结果），即使在所有的非拜占庭（Non-Byzantine）情况下，包括网络延迟、分区、丢包、冗余和乱序的情况下。</li><li>高可用性，只要集群中的大部分机器都能运行，可以互相通信并且可以和客户端通信，这个集群就可用。因此，一般来说，一个拥有 5 台机器的集群可以容忍其中的 2 台的失败（fail）。服务器停止工作了我们就认为它失败（fail）了，没准一会当它们拥有稳定的存储时就能从中恢复过来，重新加入到集群中。</li><li>不依赖时序保证一致性，时钟错误和极端情况下的消息延迟在最坏的情况下才会引起可用性问题。</li><li>通常情况下，一条命令能够尽可能快的在大多数节点对一轮远程调用作出相应时完成，一少部分慢的机器不会影响系统的整体性能。</li></ul><h1 id="3-Paxos算法的不足"><a href="#3-Paxos算法的不足" class="headerlink" title="3. Paxos算法的不足"></a>3. Paxos算法的不足</h1><p>在过去的10年中，<code>Leslie Lamport</code> 的 <code>Paxos</code> 算法几乎已经成为了一致性算法的代名词：它是授课中最常见的算法，同时也是许多一致性算法实现的起点。<code>Paxos</code> 首先定义了一个<strong>能够达成单一决策一致的协议</strong>，例如一个<code>单一复制日志条目（single replicated log entry）</code>。我们把这个子集叫做单一决策 Paxos（single-decree Paxos）。之后 Paxos通过组合多个这种协议来完成一系列的决策，例如一个日志（multi-Paxos）。Paxos 确保安全性和活跃性（liveness），并且它支持集群成员的变更。它的正确性已经被证明，通常情况下也很高效。</p><p>不幸的是，Paxos 有两个致命的缺点。</p><ol><li><code>Paxos</code> 太难以理解。它的完整的解释晦涩难懂；很少有人能完全理解，只有少数人成功的读懂了它。并且大家做了许多努力来用一些简单的术语来描述它。尽管这些解释都关注于单一决策子集问题，但仍具有挑战性。在 NSDI 2012 会议上的一次非正式调查显示，我们发现大家对 <code>Paxos</code> 都感到不满意，其中甚至包括一些有经验的研究员。我们自己也曾深陷其中，我们在读过几篇简化它的文章并且设计了我们自己的算法之后才完全理解了 <code>Paxos</code>，而整个过程花费了将近一年的时间。<br>我们假定 Paxos 的晦涩来源于它将单决策子集作为它的基础。单决策（Single-decree）Paxos 是晦涩且微妙的：它被划分为两个没有简单直观解释的阶段，并且难以独立理解。正因为如此，它不能很直观的让我们知道为什么单一决策协议能够工作。为多决策 Paxos 设计的规则又添加了额外的复杂性和精巧性。我们相信多决策问题能够分解为其它更直观的方式。</li><li>它难以在实际环境中实现。其中一个原因是，对于多决策 <code>Paxos （multi-Paxos）</code> ，大家还没有一个一致同意的算法。Lamport 的描述大部分都是有关于<code>单决策 Paxos （single-decree Paxos）</code>；他仅仅描述了实现多决策的可能的方法，缺少许多细节。有许多实现 Paxos 和优化 Paxos 的尝试，但是他们都和 Lamport 的描述有些出入。例如，<code>Chubby</code> 实现的是一个类似 <code>Paxos</code> 的算法，但是在许多情况下的细节没有公开。</li></ol><p>另外，<code>Paxos</code> 的结构也是不容易在一个实际系统中进行实现的，这是单决策问题分解带来的又一个问题。例如，从许多日志条目中选出条目然后把它们融合到一个序列化的日志中并没有带来什么好处，它仅仅增加了复杂性。围绕着日志来设计一个系统是更简单、更高效的：新日志按照严格的顺序添加到日志中去。另一个问题是，<code>Paxos</code> 使用对等的点对点的实现作为它的核心（尽管它最终提出了一种弱领导者的形式来优化性能）。这种方法在只有一个决策被制定的情况下才显得有效，但是很少有现实中的系统使用它。如果要做许多的决策，选择一个领导人，由领带人来协调是更简单有效的方法。</p><p>因此，在实际的系统应用中和 <code>Paxos</code> 算法都相差很大。所有开始于 <code>Paxos</code> 的实现都会遇到很多问题，然后由此衍生出了许多与 <code>Paxos</code> 有很大不同的架构。这是既费时又容易出错的，并且理解 <code>Paxos</code> 的难度又非常大。<code>Paxos</code> 算法在它正确性的理论证明上是很好的，但是在实现上的价值就远远不足了。来自 <code>Chubby</code> 的实现的一条评论就能够说明：</p><pre><code>There are signiﬁcant gaps between the description of the Paxos algorithm and the needs of a real-world system...the ﬁnal system will be based on an unproven protocol翻译：Paxos 算法的描述与实际实现之间存在巨大的鸿沟...最终的系统往往建立在一个没有被证明的算法之上。</code></pre><p>正因为存在这些问题，我们认为 <code>Paxos</code> 不仅对于系统的构建者来说不友好，同时也不利于教学。鉴于一致性算法对于大规模软件系统的重要性，我们决定试着来设计一种另外的比 <code>Paxos</code> 更好的一致性算法。<code>Raft</code> 就是这样的一个算法。</p><h1 id="4-易于理解的设计"><a href="#4-易于理解的设计" class="headerlink" title="4. 易于理解的设计"></a>4. 易于理解的设计</h1><p>设计 Raft 的目标有如下几个：</p><ul><li>它必须提供一个完整的、实际的基础来进行系统构建，为的是减少开发者的工作；</li><li>它必须在所有情况下都能保证安全可用；</li><li>它对于常规操作必须高效；</li><li>最重要的目标是：易于理解，它必须使得大多数人能够很容易的理解；</li><li>另外，它必须能让开发者有一个直观的认识，这样才能使系统构建者们去对它进行扩展。</li></ul><p>在设计 <code>Raft</code> 的过程中，我们不得不在许多种方法中做出选择。当面临这种情况时，我们通常会权衡可理解性：每种方法的可理解性是如何的？（例如，它的状态空间有多复杂？它是不是有很细微的含义？）它的可读性如何？读者能不能轻易地理解这个方法和它的含义？</p><p>我们意识到对这种可理解性的分析具有高度的主观性；尽管如此，我们使用了两种适用的方式。</p><ol><li>第一种是众所周知的问题分解：我们尽可能将问题分解成为若干个可解决的、可被理解的小问题。例如，在 <code>Raft</code> 中，我们把问题分解成为了<strong>领导选取（leader election）、日志复制（log replication）、安全（safety）和成员变化（membership changes）</strong>。</li><li>我们采用的第二个方法是<strong>通过减少需要考虑的状态的数量将状态空间简化</strong>，这能够使得整个系统更加一致并且尽可能消除不确定性。特别地，日志之间不允许出现空洞，并且 Raft 限制了限制了日志不一致的可能性。尽管在大多数情况下，我们都都在试图消除不确定性，但是有时候有些情况下，不确定性使得算法更易理解。尤其是，随机化方法使得不确定性增加，但是它减少了状态空间。我们使用随机化来简化了 <code>Raft</code> 中的领导选取算法。</li></ol><h1 id="5-Raft-一致性算法"><a href="#5-Raft-一致性算法" class="headerlink" title="5. Raft 一致性算法"></a>5. Raft 一致性算法</h1><p>Raft是一种用于管理第2节中描述的表单的复制日志的算法。表2总结了压缩格式的算法，表3列出了算法的关键属性;这些数字的组成部分是分段讨论的。</p><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><blockquote><p><center>表-2-1</center></p></blockquote><ul><li>在所有服务器上持久存在的</li></ul><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>currentTerm</td><td>服务器最后知道的任期号（从0开始递增）</td></tr><tr><td>votedFor</td><td>当前任期内收到选票的 <code>候选人</code> id（如果没有就为<code>null</code>）</td></tr><tr><td>log[]</td><td>日志条目；，诶个条目包含状态机的要执行命令和从 `领导者  出收到的任期号</td></tr></tbody></table><ul><li>在所有服务器上不稳定存在的</li></ul><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>commitIndex</td><td>已知的被提交的最大日志条目的索引值（从0开始递增）</td></tr><tr><td>lastApplied</td><td>被状态机执行的额最大日志条目的索引值（从0开始递增）</td></tr></tbody></table><ul><li>在领导人服务器上不稳定存在的（在选举之后初始化的）</li></ul><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>nextIndex[]</td><td>对于每个服务器，记录需要发给它的下一个日志条目的索引（初始化为<code>Leader</code>上一条日志索引+1）</td></tr><tr><td>natchIndex[]</td><td>对于每一个服务器，记录已经复制到该拂去其的日志的最高索引值（从0开始递增）</td></tr></tbody></table><h2 id="附加日志远程调用（AppendEntries-RPC）"><a href="#附加日志远程调用（AppendEntries-RPC）" class="headerlink" title="附加日志远程调用（AppendEntries RPC）"></a>附加日志远程调用（AppendEntries RPC）</h2><p>由领导人来调用复制日志</p><blockquote><p><center>表-2-2</center></p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>term</td><td>领导人的任期号</td></tr><tr><td>leaderId</td><td>领导人的id，为了其他服务器能重定向到<code>Leader</code></td></tr><tr><td>prevLogIndex</td><td>最新日志之前的日志的索引值</td></tr><tr><td>prevLogTerm</td><td>最新日志之前的日志的领导人任期号</td></tr><tr><td>entries[]</td><td>要存储的日志条目（表示<code>heartbeat</code>时为空，有时会为了效率发送多条）</td></tr><tr><td>leaderCommit</td><td>领导人提交的日志条目索引值</td></tr></tbody></table><table><thead><tr><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>term</td><td>当前的任期号，用于 <code>Leader</code> 更新自己的任期号</td></tr><tr><td>success</td><td>如果其他服务器包含能够匹配上 <code>prevLogIndex</code> 和 <code>prevLogTerm</code> 的日志时为真</td></tr></tbody></table><p><code>Follower</code>需要实现：</p><ol><li>如果 <code>term</code> &lt; <code>currentTerm</code> 返回<code>false</code></li><li>如果在 <code>prevLogIndex</code> 处的日志的任期号与 <code>prevLogTerm</code> 不匹配时，返回<code>false</code></li><li>如果一条已经存在的日志与新的冲突（<code>index</code> 相同但任期号 <code>term</code> 不同），则删除已经存在的日志和它之后的所有日志</li><li>添加任何在以后日志中不存在的条目</li><li>如果 <code>leaderCommit</code> &gt; <code>commitIndex</code>，将 <code>commitIndex</code> 设置为 <code>leaderCommit</code> 和最新日志条目索引号中较小的一个 </li></ol><h2 id="投票请求RPC（RequestVote-RPC）"><a href="#投票请求RPC（RequestVote-RPC）" class="headerlink" title="投票请求RPC（RequestVote RPC）"></a>投票请求RPC（RequestVote RPC）</h2><p>由候选人发起收集选票</p><blockquote><p><center>表-2-3</center></p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>term</td><td>领导人的任期号</td></tr><tr><td>candidateId</td><td>请求投票的候选人id</td></tr><tr><td>lastLogIndex</td><td>候选人最新日志条目的索引值</td></tr><tr><td>lastLogTerm</td><td>候选人最新日志条目对应的任期号</td></tr></tbody></table><table><thead><tr><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>term</td><td>当前的任期号，用于 候选人 更新自己的任期号</td></tr><tr><td>voteGranted</td><td>如果候选人收到选票为true</td></tr></tbody></table><p>接受者需要实现</p><ol><li>如果 <code>term</code> &lt; <code>currentTerm</code> 返回false</li><li>如果 <code>votedFor</code> 为空或者与 <code>candidateId</code> 相同，并且候选人的日志和自己的日志一样新，则给候选人投票。</li></ol><hr><h2 id="服务器需要遵守的规则"><a href="#服务器需要遵守的规则" class="headerlink" title="服务器需要遵守的规则"></a>服务器需要遵守的规则</h2><h3 id="所有服务器"><a href="#所有服务器" class="headerlink" title="所有服务器"></a><em>所有服务器</em></h3><ul><li>如果 <code>commitIndex</code> &gt; <code>lastApplied</code>，<code>lastApplied</code> 自增，将 <code>log[lastApplied]</code> 应用到状态机；</li><li>如果RPC的请求或者响应中包含一个 <code>Term</code> &gt; <code>currentTerm</code>，则 <code>currentTerm</code> 赋值为 <code>Term</code>，并切换状态为<code>Follower</code>；</li></ul><h3 id="Follower"><a href="#Follower" class="headerlink" title="Follower"></a><em>Follower</em></h3><ul><li>响应来自候选人和领导人的RPC请求</li><li>如果在超过选取 <code>Leader</code> 时间之前没有收到来自领导人的 <code>AppendEntries RPC</code> 或者没有收到候选人的投票请求，则自己转换状态为候选人</li></ul><h3 id="Candidate"><a href="#Candidate" class="headerlink" title="Candidate"></a><em>Candidate</em></h3><ul><li>转变为 <code>Candidate</code> 之后开始选举<ul><li><code>currentTerm</code> 自增</li><li>给自己投票</li><li>重置选举计时器</li><li>向其他服务器发送 <code>RequestVote RPC</code></li></ul></li><li>如果收到了来自大多数服务器的投票，则成为领导人</li><li>如果收到了来自新 <code>Leader</code> 的 <code>AppendEntries RPC(heartbeat)</code>，则成为 <code>Follower</code></li><li>如果选举超时，开始新一轮选举</li></ul><h3 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a><em>Leader</em></h3><ul><li>一旦成为领导人：想起他所有服务器发送空的 <code>AppendEntries PRC(heartbeat)</code>；在空闲时间重复发送以防止选举超时</li><li>如果收到来自客户端的请求，向本地日子增加条目，在该条目应用到状态机后响应客户端</li><li>对于一个 <code>Followed</code> 来说，如果上一次收到的日志索引大于将要收到的日志索引<code>(nextIndex)</code>：通过 <code>AppendEntries RPC</code> 将 <code>nextIndex</code> 之后的所有日志条目发送出去<ul><li>如果发送成功：将该 <code>Follower</code> 的 <code>nextIndex</code> 和 <code>matchIndex</code> 更新</li><li>如果由于日志不一致导致 <code>AppendEntries RPC</code> 失败：<code>nextIndex</code> 递减并且重新发送</li></ul></li><li>如果存在一个满足 <code>N &gt; commitIndex</code> 和 <code>matchIndex[i] &gt;= N</code> 并且 <code>log[N].term == currentTerm</code>的 N，则将 <code>commitIndex</code> 赋值为N</li></ul><h2 id="Raft-一致性算法的总结（不包括成员变化和日志压缩）"><a href="#Raft-一致性算法的总结（不包括成员变化和日志压缩）" class="headerlink" title="Raft 一致性算法的总结（不包括成员变化和日志压缩）"></a>Raft 一致性算法的总结（不包括成员变化和日志压缩）</h2><blockquote><p><center>表-3 Raft 算法保证这些特性任何时刻都能成立</center></p></blockquote><table><thead><tr><th>性质</th><th>描述</th></tr></thead><tbody><tr><td>选举安全原则(Election Safety)</td><td>一个任期 <code>(Term)</code> 内最多允许有一个 <code>Leader</code> 被选上</td></tr><tr><td>领导者只增加原则(Leader Append-Only)</td><td><code>Leader</code> 永远不会覆盖或删除自己的日志，只会增加条目</td></tr><tr><td>日志匹配原则(Log Matching)</td><td>如果两个日志在相同的索引位置上的日志条目的任期号相同，那么我们就认为这个日志从头到这个索引位置的条目完全相同。</td></tr><tr><td>领导者完全原则(Leader Completeness)</td><td>如果一个日志条目在一个给定任期内被提交，那么这个条目一定会出现在所有任期更大的 <code>Leader</code> 中</td></tr><tr><td>状态机安全原则(State Machine Safely)</td><td>如果一个服务器已经将给定索引位置的日志条目应用到状态机中，则所有其他服务器不会在该索引位置应用不同的条目</td></tr></tbody></table><p><code>Raft</code> 通过首先选出一个领导人来实现一致性，然后给予领导人完全管理<code>复制日志（replicated log）</code>的责任。领导人接收来自客户端的日志条目，并把它们复制到其他的服务器上，领带人还要告诉服务器们什么时候将日志条目应用到它们的状态机是安全的。通过选出领导人能够简化复制日志的管理工作。例如，领导人能够决定将新的日志条目放到哪，而并不需要和其他的服务器商议，数据流被简化成从领导人流向其他服务器。如果领导人宕机或者和其他服务器失去连接，就可以选取下一个领导人。</p><p>通过选出 <code>Leader</code> 的方法，<code>Raft</code> 将共识问题分解为三个相对独立的子问题，这些子问题在下面的子部分中讨论:</p><ul><li><code>Leader</code> 选举: 当现有 <code>Leader</code> 失败时，必须选出新的 <code>Leader</code>。</li><li>日志复制（Log replication）： 领导人必须从客户端接收日志然后复制到集群中的其他服务器，并且强制要求其他服务器的日志保持和自己相同</li><li>安全性（Safety）： Raft 的关键的安全特性是 表-3 中提到的状态机安全原则（State Machine Safety）:如果一个服务器已经将给定索引位置的日志条目应用到状态机中，则所有其他服务器不会在该索引位置应用不同的条目。5.4节阐述了 Raft 是如何保证这条原则的，解决方案涉及到一个对于选举机制另外的限制，这一部分会在 5.2节 中说明。</li></ul><p>在说明了一致性算法之后，本章会讨论有关可用性（availability）的问题和系统中时序（timing）的问题。</p><h2 id="5-1-Raft基础"><a href="#5-1-Raft基础" class="headerlink" title="5.1. Raft基础"></a>5.1. Raft基础</h2><p>一个 <code>Raft</code> 集群包括若干服务器；对于一个典型的 5 服务器集群，该集群能够容忍 2 台机器不能正常工作，而整个系统保持正常。在任意的时间，每一个服务器一定会处于以下三种状态中的一个：领导人、候选人、追随者。在正常情况下，只有一个服务器是领导人，剩下的服务器是追随者。追随者们是被动的：他们不会发送任何请求，只是响应来自领导人和候选人的请求。领导人来处理所有来自客户端的请求（如果一个客户端与追随者进行通信，追随者会将信息发送给领导人）。候选人是用来选取一个新的领导人的，这一部分会在 5.2节 进行阐释。图-4 阐述了这些状态，和它们之间的转换；它们的转换会在下边进行讨论。</p><blockquote><p>服务器的状态。追随者只响应其他服务器的请求。如果追随者没有收到任何消息，它会成为一个候选人并且开始一次选举。收到大多数服务器投票的候选人会成为新的领导人。领导人在它们宕机之前会一直保持领导人的状态。</p></blockquote><p><img src="http://wx2.sinaimg.cn/mw690/4858d6a8ly1fc9uv9fx6wj20hn07xt9z.jpg" alt="image"></p><blockquote><p>时间被分为一个个的任期（term），每一个任期的开始都是领导人选举。在成功选举之后，一个领导人会在任期内管理整个集群。如果选举失败，该任期就会因为没有领带人而结束。这个转变会在不同的时间的不同服务器上观察到。</p></blockquote><p><img src="http://wx3.sinaimg.cn/mw690/4858d6a8ly1fc9vx0s6l6j20ef05odg9.jpg" alt="image"></p><p>如 <code>图-5</code> 所示，<code>Raft</code> 算法将时间划分成为任意不同长度的 <code>任期（term）</code>。任期用连续的数字进行表示。每一个任期的开始都是一次选举（election），就像 <code>5.2</code> 节 所描述的那样，一个或多个候选人会试图成为领导人。如果一个候选人赢得了选举，它就会在该任期的剩余时间担任领导人。在某些情况下，选票会被瓜分，有可能没有选出领导人，那么，将会开始另一个任期，并且立刻开始下一次选举。Raft 算法保证在给定的一个任期最少要有一个领导人。</p><p>不同的服务器可能会在任期内观察到多次不同的状态转换，在某些情况下，一台服务器可能看不到一次选举或者一个完整的任期。任期在 <code>Raft</code> 中充当逻辑时钟的角色，并且它们允许服务器检测过期的信息，比如过时的领导人。每一台服务器都存储着一个当前任期的数字，这个数字会单调的增加。当服务器之间进行通信时，会互相交换当前任期号；如果一台服务器的当前任期号比其它服务器的小，则更新为较大的任期号。如果一个候选人或者领导人意识到它的任期号过时了，它会立刻转换为追随者状态。如果一台服务器收到的请求的任期号是过时的，那么它会拒绝此次请求。</p><p><code>Raft</code> 中的服务器通过远程过程调用（RPC）来通信，基本的 <code>Raft</code> 一致性算法仅需要 2 种 RPC。<code>RequestVote RPC</code> 是候选人在选举过程中触发的（5.2节），<code>AppendEntries RPC</code> 是领导人触发的，为的是复制日志条目和提供一种 <code>心跳（heartbeat）</code> 机制（5.3节）。第7章加入了第三种 <code>RPC</code> 来在各个服务器之间传输 <code>快照（snapshot）</code>。如果服务器没有及时收到 RPC 的响应，它们会重试，并且它们能够并行的发出 RPC 来获得最好的性能。</p><h2 id="5-2-领导人选举"><a href="#5-2-领导人选举" class="headerlink" title="5.2. 领导人选举"></a>5.2. 领导人选举</h2><p><code>Raft</code> 使用一种 <code>心跳机制（heartbeat）</code> 来触发领导人的选取。当服务器启动时，它们会初始化为追随者。一太服务器会一直保持追随者的状态只要它们能够收到来自领导人或者候选人的有效 RPC。领导人会向所有追随者周期性发送 <code>心跳（heartbeat，不带有任何日志条目的 AppendEntries RPC）</code> 来保证它们的领导人地位。如果一个追随者在一个周期内没有收到心跳信息，就叫做 <code>选举超时（election timeout）</code> ,然后它就会假定没有可用的领导人并且开始一次选举来选出一个新的领导人。</p><p>为了开始选举，一个追随者会自增它的当前任期并且转换状态为候选人。然后，它会给自己投票并且给集群中的其他服务器发送 <code>RequestVote RPC</code> 。一个候选人会一直处于该状态，直到下列三种情形之一发生：</p><ul><li>它赢得了选举；</li><li>另一台服务器赢得了选举；</li><li>一段时间后没有任何一台服务器赢得了选举</li></ul><p>一个候选人如果在一个任期内收到了来自集群中大多数服务器的投票就会赢得选举。在一个任期内，一台服务器最多能给一个候选人投票，按照 <code>先到先服务原则（first-come-first-served）</code> （注意：在 5.4节 针对投票添加了一个额外的限制）。大多数原则使得在一个任期内最多有一个候选人能赢得选举 <code>（表-3   中提到的选举安全原则）</code> 。一旦有一个候选人赢得了选举，它就会成为 <code>领导人</code> 。然后它会像其他服务器发送心跳信息来建立自己的领导地位并且组织新的选举。</p><p>当一个 <code>候选人</code> 等待别人的选票时，它有可能会收到来自其他服务器发来的声明其为领导人的 <code>AppendEntries RPC</code> 。如果这个领导人的 <code>任期（包含在它的 RPC 中）</code> 比当前候选人的当前任期要大，则候选人认为该领导人合法，并且转换自己的状态为 <code>追随者</code> 。如果在这个 <code>RPC</code> 中的任期小于候选人的当前任期，则候选人会拒绝此次 <code>RPC</code>， 继续保持<code>候选人</code> 状态。</p><p>第三种情形是一个 <code>候选人</code> 既没有赢得选举也没有输掉选举：如果许多追随者在同一时刻都成为了候选人，选票会被分散，可能没有候选人能获得大多数的选票。当这种情形发生时，每一个候选人都会超时，并且通过自增任期号和发起另一轮 <code>RequestVote RPC</code>  来开始新的选举。然而，如果没有其它手段来分配选票的话，这种情形可能会无限的重复下去。</p><p><code>Raft</code> 使用 <code>随机的选举超时时间</code> 来确保第三种情形很少发生，并且能够快速解决。为了防止在一开始是选票就被瓜分，选举超时时间是在一个固定的间隔内随机选出来的（例如，150~300ms）。这种机制使得在大多数情况下只有一个服务器会率先超时，它会在其它服务器超时之前赢得选举并且向其它服务器发送心跳信息。同样的机制被用于选票一开始被瓜分的情况下。每一个候选人在开始一次选举的时候会重置一个随机的选举超时时间，在超时进行下一次选举之前一直等待。这能够减小在新的选举中一开始选票就被瓜分的可能性。9.3节 展示了这种方法能够快速的选出一个领导人。</p><p>选举是一个理解性引导我们设计替代算法的一个例子。最开始时，我们计划使用一种排名系统：给每一个候选人分配一个唯一的排名，用于在竞争的候选人之中选择领导人。如果一个候选人发现了另一个比它排名高的候选人，那么它会回到追随者的状态，这样排名高的候选人会很容易地赢得选举。但是我们发现这种方法在可用性方面有一点问题（一个低排名的服务器在高排名的服务器宕机后，需要等待超时才能再次成为候选人，但是如果它这么做的太快，它能重置选举领带人的过程）。我们对这个算法做了多次调整，但是每次调整后都会出现一些新的问题。最终我们认为随机重试的方法是更明确并且更易于理解的。</p><h2 id="5-3-日志复制"><a href="#5-3-日志复制" class="headerlink" title="5.3.日志复制"></a>5.3.日志复制</h2><p>一旦选出了领导人，它就开始接收客户端的请求。每一个客户端请求都包含一条需要被 <code>复制状态机（replicated state machine）</code> 执行的命令。领导人把这条命令作为新的日志条目加入到它的日志中去，然后并行的向其他服务器发起 <code>AppendEntries RPC</code> ，要求其它服务器复制这个条目。当这个条目被安全的复制之后（下面的部分会详细阐述），领导人会将这个条目应用到它的状态机中并且会向客户端返回执行结果。如果追随者崩溃了或者运行缓慢或者是网络丢包了，领导人会无限的重试  <code>AppendEntries RPC</code> （甚至在它向客户端响应之后）知道所有的追随者最终存储了所有的日志条目。</p><blockquote><p>图-6：日志由有序编号的日志条目组成。每个日志条目包含它被创建时的任期号（每个方块中的数字），并且包含用于状态机执行的命令。如果一个条目能够被状态机安全执行，就被认为可以提交了。</p></blockquote><p><img src="http://wx1.sinaimg.cn/mw690/4858d6a8ly1fc9zgzzchkj20hl0d7wg4.jpg" alt="image"></p><p>日志就像 <code>图-6</code> 所示那样组织的。每个日志条目存储着一条被状态机执行的命令和当这条日志条目被领导人接收时的任期号。日志条目中的任期号用来检测在不同服务器上日志的不一致性，并且能确保 <code>图-3</code> 中的一些特性。每个日志条目也包含一个整数索引来表示它在日志中的位置。</p><p><code>领导人</code> 决定什么时候将日志条目应用到状态机是安全的；这种条目被称为 <code>可被提交（commited）</code> 。 <code>Raft</code>  保证 <code>可被提交（commited）的日志条目</code> 是持久化的并且最终会被所有可用的状态机执行。一旦被领导人创建的条目已经复制到了大多数的服务器上，这个条目就称为可被提交的（例如，图-6中的7号条目）。领导人日志中之前的条目都是可被提交的（commited），包括由之前的领导人创建的条目。5.4节将会讨论当领导人更替之后这条规则的应用问题的细节，并且也讨论了这种提交方式是安全的。领导人跟踪记录它所知道的被提交条目的最大索引值，并且这个索引值会包含在之后的 <code>AppendEntries RPC</code> 中（包括心跳 heartbeat 中），为的是让其他服务器都知道这条条目已经提交。一旦一个追随者知道了一个日志条目已经被提交，它会将该条目应用至本地的状态机（按照日志顺序）。</p><p>我们设计了 Raft 日志机制来保证不同服务器上日志的一致性。这样做不仅简化了系统的行为使得它更可预测，并且也是保证安全性不可或缺的一部分。Raft 保证以下特性，并且也保证了 <code>表-3</code> 中的日志匹配原则 <code>（Log Matching Property）</code> :</p><ul><li>如果在不同日志中的两个条目有着相同的索引和任期号，则它们所存储的命令是相同的。</li><li>如果在不同日志中的两个条目有着相同的索引和任期号，则它们之间的所有条目都是完全一样的。</li></ul><p>第一条特性源于 <code>领导人</code> 在一个任期里在给定的一个日志索引位置最多创建一条日志条目，同时该条目在日志中的位置也从来不会改变。第二条特性源于 AppendEntries 的一个简单的一致性检查。当发送一个 AppendEntries RPC 时，领导人会把新日志条目紧接着之前的条目的索引位置和任期号都包含在里面。如果追随者没有在它的日志中找到相同索引和任期号的日志，它就会拒绝新的日志条目。这个一致性检查就像一个归纳步骤：一开始空的日志的状态一定是满足日志匹配原则的，一致性检查保证了当日志添加时的日志匹配原则。因此，只要 AppendEntries 返回成功的时候，领导人就知道追随者们的日志和它的是一致的了。</p><blockquote><p>图-7：当最上边的领导人掌权之后，追随者日志可能有以下情况（a~f）。一个格子表示一个日志条目；格子中的数字是它的任期。一个追随者可能会丢失一些条目（a, b）；可能多出来一些未提交的条目（c, d）；或者两种情况都有（e, f）。例如，场景 f 在如下情况下就会发生：如果一台服务器在任期2时是领导人并且往它的日志中添加了一些条目，然后在将它们提交之前就宕机了，之后它很快重启了，成为了任期3的领导人，又往它的日志中添加了一些条目，然后在任期2和任期3中的条目提交之前它又宕机了并且几个任期内都一直处于宕机状态。</p></blockquote><p><img src="http://wx2.sinaimg.cn/mw690/4858d6a8ly1fca1aw93cnj20gf0baabf.jpg" alt="image"></p><p>在一般情况下， <code>领导人</code> 和 <code>追随者们</code> 的日志保持一致，因此 <code>AppendEntries</code> 一致性检查通常不会失败。然而， <code>领导人</code> 的崩溃会导致日志不一致（旧的领导人可能没有完全复制完日志中的所有条目）。这些不一致会导致一系列领导人和追随者崩溃。 <code>图-7</code>  阐述了一些 <code>追随者</code> 可能和 <code>新的领导人</code> 日志不同的情况。一个 <code>追随者</code> 可能会丢失掉领导人上的一些条目，也有可能包含一些 <code>领导人</code> 没有的条目，也有可能两者都会发生。丢失的或者多出来的条目可能会持续多个任期。</p><p>在 <code>Raft</code> 算法中， <code>领导人</code> 通过 <code>强制追随者们复制它的日志</code> 来处理日志的不一致。这就意味着，在追随者上的冲突日志会被领导者的日志覆盖。5.4节会说明当添加了一个额外的限制之后这是安全的。</p><p>为了使得追随者的日志同自己的一致， <code>领导人</code> 需要找到追随者同它的日志一致的地方，然后删除追随者在该位置之后的条目，然后将自己在该位置之后的条目发送给追随者。这些操作都在 <code>AppendEntries RPC</code> 进行一致性检查时完成。领导人给每一个追随者维护了一个 <code>nextIndex</code> ，它表示领导人将要发送给该追随者的下一条日志条目的索引。当一个领导人开始掌权时，它会将 <code>nextIndex</code> 初始化为 <code>它的最新的日志条目索引数+1（图-7 中的 11）</code> 。如果一个追随者的日志和领导者的不一致，<code>AppendEntries</code> 一致性检查会在下一次 <code>AppendEntries RPC</code> 时返回失败。在失败之后，领导人会将 <code>nextIndex</code> 递减然后重试  <code>AppendEntries RPC</code> 。最终 <code>nextIndex</code> 会达到一个领导人和追随者日志一致的地方。这时，<code>AppendEntries</code> 会返回成功，追随者中冲突的日志条目都被移除了，并且添加所缺少的上了领导人的日志条目。一旦 <code>AppendEntries</code> 返回成功，追随者和领导人的日志就一致了，这样的状态会保持到该任期结束。</p><p>如果需要的话，算法还可以进行优化来减少 <code>AppendEntries RPC</code> 失败的次数。例如，当拒绝了一个 <code>AppendEntries</code> 请求，追随者可以记录下冲突日志条目的任期号和自己存储那个任期的最早的索引。通过这些信息，领导人能够直接递减nextIndex跨过那个任期内所有的冲突条目；这样的话，一个冲突的任期需要一次 <code>AppendEntries RPC</code>，而不是每一个冲突条目需要一次 <code>AppendEntries RPC</code>。在实践中，我们怀疑这种优化是否是必要的，因为 <code>AppendEntries</code> 一致性检查很少失败并且也不太可能出现大量的日志条目不一致的情况。</p><p>通过这种机制，一个领导人在掌权时不需要采取另外特殊的方式来恢复日志的一致性。它只需要使用一些常规的操作，通过响应 <code>AppendEntries</code> 一致性检查的失败能使得日志自动的趋于一致。一个领导人从来不会覆盖或者删除自己的日志（表-3 中的领导人只增加原则）。</p><p>这个日志复制机制展示了在第2章中阐述的所希望的一致性特性：<code>Raft</code> 能够接受，复制并且应用新的日志条目只要大部分的服务器是正常的。在通常情况下，一条新的日志条目可以在一轮 <code>RPC</code> 内完成在集群的大多数服务器上的复制；并且一个速度很慢的追随者并不会影响整体的性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇博客为著名的 RAFT 一致性算法论文的中文翻译，论文名为&lt;a href=&quot;https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="Raft" scheme="https://destinywang.github.io/blog/categories/Raft/"/>
    
    
      <category term="Raft" scheme="https://destinywang.github.io/blog/tags/Raft/"/>
    
      <category term="文献翻译" scheme="https://destinywang.github.io/blog/tags/%E6%96%87%E7%8C%AE%E7%BF%BB%E8%AF%91/"/>
    
      <category term="分布式" scheme="https://destinywang.github.io/blog/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Raft协议(1)——一致性原理分析</title>
    <link href="https://destinywang.github.io/blog/2018/04/14/Raft%E5%8D%8F%E8%AE%AE-1-%E2%80%94%E2%80%94%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://destinywang.github.io/blog/2018/04/14/Raft协议-1-——一致性原理分析/</id>
    <published>2018-04-14T13:47:19.000Z</published>
    <updated>2018-04-14T13:48:29.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在一个由 Raft 协议组织的集群中有三类角色：</p><ul><li>Leader（领袖）</li><li>Follower（群众）</li><li>Candidate（候选人）</li></ul><p>就像一个民主社会，领袖由民众投票选出。刚开始没有领袖，所有集群中的参与者都是群众，那么首先开启一轮大选，在大选期间所有群众都能参与竞选，这时所有群众的角色就变成了候选人，民主投票选出领袖后就开始了这届领袖的任期，然后选举结束，所有除领袖的候选人又变回群众角色服从领袖领导。这里提到一个概念「任期」，用术语 <code>Term</code> 表达。关于 Raft 协议的核心概念和术语就这么多而且和现实民主制度非常匹配，所以很容易理解。三类角色的变迁图如下，结合后面的选举过程来看很容易理解。</p><p><img src="http://images2015.cnblogs.com/blog/815275/201603/815275-20160301175331861-266461745.png" alt="image"></p><h1 id="Raft-集群中节点状态转化"><a href="#Raft-集群中节点状态转化" class="headerlink" title="Raft 集群中节点状态转化"></a>Raft 集群中节点状态转化</h1><p><img src="http://on-img.com/chart_image/5aca2824e4b0cfe274897f04.png" alt="image"></p><h1 id="Leader-选举过程"><a href="#Leader-选举过程" class="headerlink" title="Leader 选举过程"></a>Leader 选举过程</h1><p>在极简的思维下，一个最小的 Raft 民主集群需要三个参与者（如下图：A、B、C），这样才可能投出多数票。初始状态 ABC 都是 Follower，然后发起选举这时有三种可能情形发生。下图中前二种都能选出 Leader，第三种则表明本轮投票无效（Split Votes），每方都投给了自己，结果没有任何一方获得多数票。之后每个参与方随机休息一阵（Election Timeout）重新发起投票直到一方获得多数票。这里的关键就是随机 timeout，最先从 timeout 中恢复发起投票的一方向还在 timeout 中的另外两方请求投票，这时它们就只能投给对方了，很快达成一致。</p><p><img src="http://images2015.cnblogs.com/blog/815275/201603/815275-20160301175349689-522400583.png" alt="image"></p><p>选出 Leader 后，Leader 通过定期向所有 Follower 发送心跳信息维持其统治。若 Follower 一段时间未收到 Leader 的心跳则认为 Leader 可能已经挂了再次发起选主过程。</p><h1 id="Leader-节点对一致性的影响"><a href="#Leader-节点对一致性的影响" class="headerlink" title="Leader 节点对一致性的影响"></a>Leader 节点对一致性的影响</h1><p>Raft 协议强依赖 Leader 节点的可用性来确保集群数据的一致性。数据的流向只能从 Leader 节点向 Follower 节点转移。当 Client 向集群 Leader 节点提交数据后，Leader 节点接收到的数据处于未提交状态（Uncommitted），接着 Leader 节点会并发向所有 Follower 节点复制数据并等待接收响应，确保至少集群中超过半数节点已接收到数据后再向 Client 确认数据已接收。一旦向 Client 发出数据接收 Ack 响应后，表明此时数据状态进入已提交（Committed），Leader 节点再向 Follower 节点发通知告知该数据状态已提交。</p><p><img src="http://images2015.cnblogs.com/blog/815275/201603/815275-20160301175358173-526445555.png" alt="image"></p><p>在这个过程中，主节点可能在任意阶段挂掉，看下 Raft 协议如何针对不同阶段保障数据一致性的。</p><h2 id="数据到达-Leader-节点前"><a href="#数据到达-Leader-节点前" class="headerlink" title="数据到达 Leader 节点前"></a>数据到达 Leader 节点前</h2><p>这个阶段 Leader 挂掉不影响一致性，不多说。</p><p><img src="http://images2015.cnblogs.com/blog/815275/201603/815275-20160301175405705-1452838896.png" alt="image"></p><h2 id="数据到达-Leader-节点，但未复制到-Follower-节点"><a href="#数据到达-Leader-节点，但未复制到-Follower-节点" class="headerlink" title="数据到达 Leader 节点，但未复制到 Follower 节点"></a>数据到达 Leader 节点，但未复制到 Follower 节点</h2><p>这个阶段 Leader 挂掉，数据属于未提交状态，Client 不会收到 Ack 会认为超时失败可安全发起重试。Follower 节点上没有该数据，重新选主后 Client 重试重新提交可成功。原来的 Leader 节点恢复后作为 Follower 加入集群重新从当前任期的新 Leader 处同步数据，强制保持和 Leader 数据一致。</p><p><img src="http://images2015.cnblogs.com/blog/815275/201603/815275-20160301175412580-649716029.png" alt="image"></p><h2 id="数据到达-Leader-节点，成功复制到-Follower-所有节点，但还未向-Leader响应"><a href="#数据到达-Leader-节点，成功复制到-Follower-所有节点，但还未向-Leader响应" class="headerlink" title="数据到达 Leader 节点，成功复制到 Follower 所有节点，但还未向 Leader响应"></a>数据到达 Leader 节点，成功复制到 Follower 所有节点，但还未向 Leader响应</h2><p>这个阶段 Leader 挂掉，虽然数据在 Follower 节点处于未提交状态（Uncommitted）但保持一致，重新选出 Leader 后可完成数据提交，此时 Client 由于不知到底提交成功没有，可重试提交。针对这种情况 Raft 要求 RPC 请求实现幂等性，也就是要实现内部去重机制。</p><p><img src="http://images2015.cnblogs.com/blog/815275/201603/815275-20160301175419501-326023047.png" alt="image"></p><h2 id="数据到达-Leader-节点，成功复制到-Follower-部分节点，但还未向-Leader-响应接受"><a href="#数据到达-Leader-节点，成功复制到-Follower-部分节点，但还未向-Leader-响应接受" class="headerlink" title="数据到达 Leader 节点，成功复制到 Follower 部分节点，但还未向 Leader 响应接受"></a>数据到达 Leader 节点，成功复制到 Follower 部分节点，但还未向 Leader 响应接受</h2><p>这个阶段 Leader 挂掉，数据在 Follower 节点处于未提交状态（Uncommitted）且不一致，Raft 协议要求投票只能投给拥有最新数据的节点。所以拥有最新数据的节点会被选为 Leader 再强制同步数据到 Follower，数据不会丢失并最终一致。</p><p><img src="http://images2015.cnblogs.com/blog/815275/201603/815275-20160301175427314-1771762822.png" alt="image"></p><h2 id="数据到达-Leader-节点，成功复制到-Follower-所有或多数节点，数据在所有节点都处于已提交状态，但还未响应-Client"><a href="#数据到达-Leader-节点，成功复制到-Follower-所有或多数节点，数据在所有节点都处于已提交状态，但还未响应-Client" class="headerlink" title="数据到达 Leader 节点，成功复制到 Follower 所有或多数节点，数据在所有节点都处于已提交状态，但还未响应 Client"></a>数据到达 Leader 节点，成功复制到 Follower 所有或多数节点，数据在所有节点都处于已提交状态，但还未响应 Client</h2><p>这个阶段 Leader 挂掉，Cluster 内部数据其实已经是一致的，Client 重复重试基于幂等策略对一致性无影响。</p><p><img src="http://images2015.cnblogs.com/blog/815275/201603/815275-20160301175628111-980324469.png" alt="image"></p><h2 id="网络分区导致的脑裂情况，出现双-Leader"><a href="#网络分区导致的脑裂情况，出现双-Leader" class="headerlink" title="网络分区导致的脑裂情况，出现双 Leader"></a>网络分区导致的脑裂情况，出现双 Leader</h2><p>网络分区将原先的 Leader 节点和 Follower 节点分隔开，Follower 收不到 Leader 的心跳将发起选举产生新的 Leader。这时就产生了双 Leader，原先的 Leader 独自在一个区，向它提交数据不可能复制到多数节点所以永远提交不成功。向新的 Leader 提交数据可以提交成功，网络恢复后旧的 Leader 发现集群中有更新任期（Term）的新 Leader 则自动降级为 Follower 并从新 Leader 处同步数据达成集群数据一致。</p><p><img src="http://images2015.cnblogs.com/blog/815275/201603/815275-20160301175637220-1693295968.png" alt="image"></p><blockquote><p>算法以正确性、高效性、简洁性作为主要设计目标。<br>虽然这些都是很有价值的目标，但这些目标都不会达成直到开发者写出一个可用的实现。<br>所以我们相信可理解性同样重要。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;在一个由 Raft 协议组织的集群中有三类角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leader（领袖）&lt;/li&gt;
&lt;li&gt;Follower（群众）
      
    
    </summary>
    
      <category term="Raft" scheme="https://destinywang.github.io/blog/categories/Raft/"/>
    
    
      <category term="Raft" scheme="https://destinywang.github.io/blog/tags/Raft/"/>
    
      <category term="一致性算法" scheme="https://destinywang.github.io/blog/tags/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/"/>
    
      <category term="分布式系统" scheme="https://destinywang.github.io/blog/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ-(5)——ActiveMQ结合Spring开发</title>
    <link href="https://destinywang.github.io/blog/2018/04/14/ActiveMQ-5-%E2%80%94%E2%80%94ActiveMQ%E7%BB%93%E5%90%88Spring%E5%BC%80%E5%8F%91/"/>
    <id>https://destinywang.github.io/blog/2018/04/14/ActiveMQ-5-——ActiveMQ结合Spring开发/</id>
    <published>2018-04-14T10:45:00.000Z</published>
    <updated>2018-04-14T10:46:00.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在Spring中配置jmsTemplate"><a href="#在Spring中配置jmsTemplate" class="headerlink" title="在Spring中配置jmsTemplate"></a>在Spring中配置<code>jmsTemplate</code></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JMS连接池工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.pool.PooledConnectionFactory"</span> <span class="attr">destroy-method</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://localhost:61616"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxConnections"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--目的地--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"destination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"spring-queue"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jmsFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestination"</span> <span class="attr">ref</span>=<span class="string">"destination"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.support.converter.SimpleMessageConverter"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如果是topic"><a href="#如果是topic" class="headerlink" title="如果是topic"></a>如果是topic</h2><ol><li>添加<code>topic</code>的配置</li><li><p>修改<code>jmsTemplate</code>配置中的<code>defaultDestination</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JMS连接池工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsFactory"</span>     <span class="attr">class</span>=<span class="string">"org.apache.activemq.pool.PooledConnectionFactory"</span>     <span class="attr">destroy-method</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://localhost:61616"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxConnections"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--目的地--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"destination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"spring-topic"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jmsFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestination"</span> <span class="attr">ref</span>=<span class="string">"destination"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.support.converter.SimpleMessageConverter"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="如果在Spring中配置消费者的话，就不需要启动消费者"><a href="#如果在Spring中配置消费者的话，就不需要启动消费者" class="headerlink" title="如果在Spring中配置消费者的话，就不需要启动消费者"></a>如果在Spring中配置消费者的话，就不需要启动消费者</h2><p>相当于注册了一个默认消息监听器</p><p>当JMS Provider接受到消息之后就会触发<code>listener</code>的<code>onMessage()</code>方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsContainer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jmsFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"destination"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"messageListener"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageListener"</span><span class="attr">class</span>=<span class="string">"org.destiny.activemq.spring.MyMessageListener"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.destiny.activemq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        TextMessage textMessage = (TextMessage) message;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"receive: "</span> + textMessage.getText());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li>Camel框架支持大量的企业集成模式，可以大大简化集成组件间的大量服务和复杂的消息流。而Spring更注重简单性。</li><li>Spring消息发送的核心架构是<code>JmsTemplate</code>，隔离了像打开、关闭<code>Session</code>和<code>Producer</code>等操作。因此应用开发人员仅仅需要关注实际的业务逻辑。但<code>JmsTemplate</code>损害了ActiveMQ的<code>PooledConnectionFactory</code>对<code>Session</code>和消息<code>Producer</code>的缓存机制带来的性能提升。</li><li>新的Spring中，可以设置<code>org.springframework.jms.connection.CachingConnectionFactory</code>的<code>sessionCacheSize</code>，或者直接使用ActiveMQ的<code>PooledConnectionFactory</code>。</li><li>不建议使用<code>JmsTemplate</code>的<code>receive()</code>，因为<code>JmsTemplate</code>上的所有调用都是同步的，这意味着调用的线程会阻塞，直到方法返回，性能影响较大。</li><li>尽量使用<code>DefaultMessageListenerContainer</code>，它允许异步接受消息并缓存session和消息<code>Consuer</code>。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h1&gt;&lt;h2 id=&quot;依赖&quot;&gt;&lt;a href=&quot;#依赖&quot; class=&quot;headerlink&quot; title=&quot;依赖&quot;&gt;&lt;/a&gt;依赖&lt;/h2&gt;&lt;figur
      
    
    </summary>
    
      <category term="ActiveMQ" scheme="https://destinywang.github.io/blog/categories/ActiveMQ/"/>
    
    
      <category term="ActiveMQ" scheme="https://destinywang.github.io/blog/tags/ActiveMQ/"/>
    
      <category term="JMS" scheme="https://destinywang.github.io/blog/tags/JMS/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ(4)——Broker的启动方式</title>
    <link href="https://destinywang.github.io/blog/2018/04/12/ActiveMQ-4-%E2%80%94%E2%80%94Broker%E7%9A%84%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F/"/>
    <id>https://destinywang.github.io/blog/2018/04/12/ActiveMQ-4-——Broker的启动方式/</id>
    <published>2018-04-11T16:22:37.000Z</published>
    <updated>2018-04-11T16:23:25.354Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Broker：相当于一个ActiveMQ服务器实例。</li><li>命令行启动参数示例<ul><li><code>activemq start</code>：默认使用<code>acitvemq.xml来启动</code></li><li><code>activemq start xbean:file:../conf/activemq.xml</code>：使用指定的配置文件来启动。</li></ul></li><li>用ActiveMQ来构建Java应用<br>用ActiveMQ Broker作为独立的消息服务器来构建JAVA应用。ActiveMQ也支持在VM中通信基于嵌入式的Broker，能够无缝集成其他Java应用。</li></ul><h1 id="嵌入式Broker"><a href="#嵌入式Broker" class="headerlink" title="嵌入式Broker"></a>嵌入式Broker</h1><h2 id="BrokerService启动Broker"><a href="#BrokerService启动Broker" class="headerlink" title="BrokerService启动Broker"></a>BrokerService启动Broker</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 开启ActiveMQ Broker</span></span><br><span class="line">    BrokerService brokerService = <span class="keyword">new</span> BrokerService();</span><br><span class="line">    brokerService.setUseJmx(<span class="keyword">true</span>);</span><br><span class="line">    brokerService.addConnector(<span class="string">"tcp://localhost:61616"</span>);</span><br><span class="line">    brokerService.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-11/6804604.jpg" alt=""></p><h2 id="BrokerFactory启动Broker"><a href="#BrokerFactory启动Broker" class="headerlink" title="BrokerFactory启动Broker"></a>BrokerFactory启动Broker</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 开启ActiveMQ Broker</span></span><br><span class="line">    String uri = <span class="string">"properties:broker.properties"</span>;</span><br><span class="line">    BrokerService brokerService = BrokerFactory.createBroker(<span class="keyword">new</span> URI(uri));</span><br><span class="line">    brokerService.addConnector(<span class="string">"tcp://localhost:61616"</span>);</span><br><span class="line">    brokerService.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件<code>broker.properties</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useJmx=true</span><br><span class="line">persistent=false</span><br><span class="line">brokerName=Cheese</span><br></pre></td></tr></table></figure></p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-11/11567085.jpg" alt=""></p><h1 id="利用Spring集成Broker"><a href="#利用Spring集成Broker" class="headerlink" title="利用Spring集成Broker"></a>利用Spring集成Broker</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"broker"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.broker.BrokerService"</span> <span class="attr">init-method</span>=<span class="string">"start"</span> <span class="attr">destroy-method</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerName"</span> <span class="attr">value</span>=<span class="string">"myBroker"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"persistent"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transportConnectorURIs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>tcp://localhost:61616<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-11/54820003.jpg" alt=""></p><h1 id="启动多个Broker"><a href="#启动多个Broker" class="headerlink" title="启动多个Broker"></a>启动多个Broker</h1><p>如果需要启动多个Broker，那么需要为每个Broker设置一个名字<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Broker：相当于一个ActiveMQ服务器实例。&lt;/li&gt;
&lt;li&gt;命令行启动参数示例&lt;ul&gt;
&lt;li&gt;&lt;code&gt;activemq start&lt;/code&gt;：默认使用&lt;code&gt;acitvemq.xml来启动&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a
      
    
    </summary>
    
      <category term="ActiveMQ" scheme="https://destinywang.github.io/blog/categories/ActiveMQ/"/>
    
    
      <category term="ActiveMQ" scheme="https://destinywang.github.io/blog/tags/ActiveMQ/"/>
    
      <category term="JMS" scheme="https://destinywang.github.io/blog/tags/JMS/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ(3)——JMS可靠性机制</title>
    <link href="https://destinywang.github.io/blog/2018/04/12/ActiveMQ-3-%E2%80%94%E2%80%94JMS%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%9C%BA%E5%88%B6/"/>
    <id>https://destinywang.github.io/blog/2018/04/12/ActiveMQ-3-——JMS可靠性机制/</id>
    <published>2018-04-11T16:20:25.000Z</published>
    <updated>2018-04-11T16:24:44.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="消息接受确认"><a href="#消息接受确认" class="headerlink" title="消息接受确认"></a>消息接受确认</h1><p>JMS消息只有在被确认之后，才认为已经被成功地消费了。<br>消费的成功通常包含三个阶段：客户端接受消息、客户端处理消息和消息被确认。<br>在事务性会话中，当一个事务被提交的时候，确认自动发生。在非事务性会话中，消息何时被确认取决于创建会话时的应答模式。该参数有三个可选方案：</p><h2 id="Session-AUTO-ACKNOWLEDGE"><a href="#Session-AUTO-ACKNOWLEDGE" class="headerlink" title="Session.AUTO_ACKNOWLEDGE"></a><code>Session.AUTO_ACKNOWLEDGE</code></h2><p>当客户成功的从<code>receive()</code>方法返回的时候，或者从<code>MessageListener.onMessage()</code>方法成功返回的时候，会话自动确认客户端收到的消息。</p><h2 id="Session-CLIENT-ACKNOWLEDGE"><a href="#Session-CLIENT-ACKNOWLEDGE" class="headerlink" title="Session.CLIENT_ACKNOWLEDGE"></a><code>Session.CLIENT_ACKNOWLEDGE</code></h2><p>客户端通过调用消息的<code>acknowledge()</code>方法确认消息。在这种模式中，确认是在会话层上进行，确认一个被消费的消息将自动确认所有已被会话消费的消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.CLIENT_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure><h2 id="Session-DUPS-ACKNOWLEDGE"><a href="#Session-DUPS-ACKNOWLEDGE" class="headerlink" title="Session.DUPS_ACKNOWLEDGE"></a><code>Session.DUPS_ACKNOWLEDGE</code></h2><p>只是会话迟钝的确认消息的提交。如果JMS Provider失败，那么可能会导致一些重复的消息。如果是重复的消息，那么JMS Provider必须把消息头的JMSRedelivered字段设置为true</p><h1 id="消息的持久性，JMS支持两种消息提交模式"><a href="#消息的持久性，JMS支持两种消息提交模式" class="headerlink" title="消息的持久性，JMS支持两种消息提交模式"></a>消息的持久性，JMS支持两种消息提交模式</h1><h2 id="PERSISTENT"><a href="#PERSISTENT" class="headerlink" title="PERSISTENT"></a>PERSISTENT</h2><p>JMS Provider永久保存消息，以保证消息不会因为JMS Provider的失败而丢失。</p><h2 id="NON-PERSISTENT"><a href="#NON-PERSISTENT" class="headerlink" title="NON_PERSISTENT"></a>NON_PERSISTENT</h2><p>不要求JMS Provider持久保存消息</p><h1 id="消息的临时目的地"><a href="#消息的临时目的地" class="headerlink" title="消息的临时目的地"></a>消息的临时目的地</h1><p>可以通过Session的<code>createTemporaryQueue()</code>和<code>createTemporaryTopic()</code>方法来创建临时目的地。他们的存在时间只限于创建他们的连接所保持的时间，只有创建该临时目的地的连接上的消息消费者才能够从临时目的地中提取消息。</p><h1 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h1><p>在一个JMS客户端，可以使用本地事务来组合消息的发送和签收。Session接口提供了<code>commit()</code>和<code>rollback()</code>方法。</p><ul><li>事务提交意味着生产的所有消息被发送，消费的所有消息被确认。</li><li>事务回滚意味着生产的所有消息被销毁，消费的所有消息被恢复并重新提交，除非他们已过期。</li></ul><h1 id="PTP模型"><a href="#PTP模型" class="headerlink" title="PTP模型"></a>PTP模型</h1><pre><code>该模型定义了客户端如何向队列发送消息，从队列接受消息。</code></pre><p>PTP模型是基于队列的，生产者发消息到队列，消费者从队列接受消息，队列使得消息的异步传输成为可能。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>Session在关闭时，如果有消息已经被接受，但还没有确认，那么当消费者下次连接到相同的队列时，这些消息还会被再次接受。</li><li>如果用户在<code>receive()</code>方法中设定了消息选择条件，那么不符合条件的消息会留在队列中。</li><li>队列可以长久地保存消息直到消费者收到消息，消费者不需要因为担心消息丢失而时刻与队列保持激活的连接状态。</li></ol><h1 id="Pub-Sub模型"><a href="#Pub-Sub模型" class="headerlink" title="Pub/Sub模型"></a>Pub/Sub模型</h1><pre><code>该模型定义了如何向一个内容节点发布和订阅消息。</code></pre><p>主题可以被认为是消息的传输中介，发布者发布消息到主题，订阅者从主题订阅消息，二者相互独立，不需要接触。</p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ol><li>消息订阅分为非持久订阅和持久订阅<ol><li>非持久订阅时，只有当客户端处于激活状态才能收到某个主题的消息；离线时发布到主题的消息将会丢失。</li><li>持久订阅时，客户端向JMS Provider注册一个自己身份的ID，当客户端处于离线状态时，Provider会为这个ID保存所有发送到主题的消息。</li></ol></li><li>如果用户在<code>receive()</code>方法中设定了消息选择条件，那么不符合条件的消息不会被接收。</li><li>非持久订阅状态下，不能恢复或重新派送一个未签收的消息。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;消息接受确认&quot;&gt;&lt;a href=&quot;#消息接受确认&quot; class=&quot;headerlink&quot; title=&quot;消息接受确认&quot;&gt;&lt;/a&gt;消息接受确认&lt;/h1&gt;&lt;p&gt;JMS消息只有在被确认之后，才认为已经被成功地消费了。&lt;br&gt;消费的成功通常包含三个阶段：客户端接受消息、客
      
    
    </summary>
    
      <category term="ActiveMQ" scheme="https://destinywang.github.io/blog/categories/ActiveMQ/"/>
    
    
      <category term="ActiveMQ" scheme="https://destinywang.github.io/blog/tags/ActiveMQ/"/>
    
      <category term="JMS" scheme="https://destinywang.github.io/blog/tags/JMS/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ(2)——JMS规范</title>
    <link href="https://destinywang.github.io/blog/2018/04/11/ActiveMQ-2-%E2%80%94%E2%80%94JMS%E8%A7%84%E8%8C%83/"/>
    <id>https://destinywang.github.io/blog/2018/04/11/ActiveMQ-2-——JMS规范/</id>
    <published>2018-04-10T16:09:30.000Z</published>
    <updated>2018-04-10T16:10:37.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><pre><code>JMS(Java Message Service)，Java消息服务JMS定义了Java访问消息中间件的接口，并没有给予实现。实现JMS接口的消息中间件成为JMSProvider，如ActiveMQ。</code></pre><h1 id="JMS规范"><a href="#JMS规范" class="headerlink" title="JMS规范"></a>JMS规范</h1><ul><li>JMS message：JMS的消息，由三部分组成：<code>消息头</code>、<code>消息属性</code>、<code>消息体</code></li><li>JMS Producer：消息生产者，创建和发送消息</li><li>JMS Consumer：消息消费者，接受和处理消息，消息的消费可以采用以下两种方式之一：<ul><li>同步消费：通过调用消费者的<code>receive</code>方法从目的地中显示提取消息，<code>receive</code>方法可以一直阻塞到消息到达</li><li>异步消费：客户可以为消费者注册一个<code>Listener</code>，以定义在消息到达时所采取的动作。</li></ul></li><li>JMS domains：消息传递域，JMS定义了两周消息传递域：<ul><li>点对点：每个消息只能有一个消费者，生产者和消费者没有时间上的相关性，无论消费者在生产者发送消息的时候是否处于运行状态，都可以提取消息；</li><li>发布订阅：每个消息可以被多个消费者消费，生产者和消费者有时间上的相关性，订阅一个主题的消费者只能消费它订阅之后发布的消息</li></ul></li><li>ConnectionFactory：连接工厂，用来创建连接对象，已连接到JMS的Provider</li><li>JMS Connection：封装了客户与JMS提供者之间的一个虚拟连接</li><li><p>JMS Session：是生产和消费消息的一个单线程上下文</p><p>  会话用于创建消息生产者、消费者和消息等。会话提供了一个事务性的上下文，在这个上下文中，一组发送和接受被组合到了一个原子操作中。</p></li><li><p>Destination：消息发送到的目的地。</p></li><li>Acknowledge：签收。消费者收到消息后，需要告诉JMS Provider消息已被消费。</li><li>Transaction：事务</li><li>JMS Client：用来收发消息的Java应用</li></ul><h1 id="JMS-Message结构"><a href="#JMS-Message结构" class="headerlink" title="JMS Message结构"></a>JMS Message结构</h1><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><ul><li>消息头</li><li>属性</li><li>消息体</li></ul><h2 id="消息头"><a href="#消息头" class="headerlink" title="消息头"></a>消息头</h2><pre><code>消息头包含识别信息和路由信息</code></pre><ul><li>JMSDestination：消息发送的目的地，主要是指<code>Queue</code>或<code>Topic</code>。</li><li>JMSDeliveryMode：传送模式，<code>持久</code>或<code>非持久</code>。<ul><li>持久消息应该<code>会且只会被发送一次</code>，JMS提供者出现故障，消息也不会丢失，会在服务器恢复之后再次传递。</li><li>非持久的消息<code>最多会被发送一次</code>，这意味着服务器出现故障，该消息会永远丢失。</li></ul></li><li>JMSExpiration：消息过期时间，为0表示永不过期。</li><li>JMSPriority：消息优先级，数字越大，级别越高，加急消息要先于普通消息。</li><li>JMSMessageId：唯一标识。</li><li>JMSCorrelationID：用来连接到另一个消息，典型应用是在回复消息中关联到原消息。</li><li>JMSReplyTo：提供本消息回复消息的目的地址，由开发者提供</li><li>JMSType：消息的类型识别符</li><li>JMSRedelivered：如果一个客户端收到了一个设置了<code>JMSRedelivered</code>属性的消息，则表示客户端可能收到过该消息，但没有签收。</li></ul><h2 id="消息体"><a href="#消息体" class="headerlink" title="消息体"></a>消息体</h2><ul><li>TextMessage：文本消息</li><li>MapMessage：映射消息</li><li>BytesMessage：二进制消息</li><li>StreamMessage：流式消息</li><li>ObjectMessage：对象消息</li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="应用程序设置和添加的属性"><a href="#应用程序设置和添加的属性" class="headerlink" title="应用程序设置和添加的属性"></a>应用程序设置和添加的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message.setStringProperty(<span class="string">"username"</span>, username);</span><br></pre></td></tr></table></figure><h3 id="JMS定义的属性"><a href="#JMS定义的属性" class="headerlink" title="JMS定义的属性"></a>JMS定义的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回所有连接支持的JMSX属性的名字</span></span><br><span class="line">connection.getMetaData().getJMSXPropertyNames();</span><br></pre></td></tr></table></figure><h3 id="JMS供应商特定的属性"><a href="#JMS供应商特定的属性" class="headerlink" title="JMS供应商特定的属性"></a>JMS供应商特定的属性</h3><h2 id="JMS定义的属性-1"><a href="#JMS定义的属性-1" class="headerlink" title="JMS定义的属性"></a>JMS定义的属性</h2><ul><li>JMSXUserID：发送消息的用户标识</li><li>JMSXAppID：发送消息的应用标识</li><li>JMSXDeliveryCount：转发消息重试次数</li><li>JMSXGroupID：消息所在的消息组的标识</li><li>JMSXGroupSeq：组内消息的序号</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;JMS(Java Message Service)，Java消息服务
JMS定义了Java访问消息中间件的接口，并没有给予实
      
    
    </summary>
    
      <category term="ActiveMQ" scheme="https://destinywang.github.io/blog/categories/ActiveMQ/"/>
    
    
      <category term="ActiveMQ" scheme="https://destinywang.github.io/blog/tags/ActiveMQ/"/>
    
      <category term="JMS" scheme="https://destinywang.github.io/blog/tags/JMS/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ(1)——概览&amp;入门</title>
    <link href="https://destinywang.github.io/blog/2018/04/09/ActiveMQ-1-%E2%80%94%E2%80%94%E6%A6%82%E8%A7%88-%E5%85%A5%E9%97%A8/"/>
    <id>https://destinywang.github.io/blog/2018/04/09/ActiveMQ-1-——概览-入门/</id>
    <published>2018-04-09T15:54:59.000Z</published>
    <updated>2018-04-09T15:55:47.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><h2 id="ActiveMQ简介"><a href="#ActiveMQ简介" class="headerlink" title="ActiveMQ简介"></a>ActiveMQ简介</h2><ul><li>什么是ActiveMQ</li><li>ActiveMQ的作用</li><li>ActiveMQ的特点</li><li>消息中间件的功能、特点、应用场景等</li></ul><h2 id="ActiveMQ安装和基本使用"><a href="#ActiveMQ安装和基本使用" class="headerlink" title="ActiveMQ安装和基本使用"></a>ActiveMQ安装和基本使用</h2><p>通过源码安装、基本的配置实例、启动、测试运行、关闭等</p><h2 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h2><p>基本概念、消息结构、可靠性机制、PTP、Pub/Sub、API结构、JMS应用开发的基本步骤、持久和非持久的Topic</p><h2 id="同ActiveMQ构建应用"><a href="#同ActiveMQ构建应用" class="headerlink" title="同ActiveMQ构建应用"></a>同ActiveMQ构建应用</h2><ul><li>多种启动Broker的方法</li><li>单独应用的开发</li><li>结合Spring开发</li></ul><h2 id="ActiveMQ的Transport"><a href="#ActiveMQ的Transport" class="headerlink" title="ActiveMQ的Transport"></a>ActiveMQ的Transport</h2><p>多种运输协议的功能、配置和使用</p><h2 id="ActiveMQ的消息存储"><a href="#ActiveMQ的消息存储" class="headerlink" title="ActiveMQ的消息存储"></a>ActiveMQ的消息存储</h2><p>队列和Topic、KahaDB、AMQ、JDBC、MMS等</p><h2 id="ActiveMQ的Network"><a href="#ActiveMQ的Network" class="headerlink" title="ActiveMQ的Network"></a>ActiveMQ的Network</h2><ul><li>在一台服务器上启动多个Broker</li><li>静态网络连接的功能、配置</li><li>“丢失”消息的处理</li><li>容错或可负载均衡的连接</li><li>动态网络连接等</li></ul><h2 id="ActiveMQ集群"><a href="#ActiveMQ集群" class="headerlink" title="ActiveMQ集群"></a>ActiveMQ集群</h2><ul><li>队列消费者集群</li><li>Broker的集群</li><li>MasterSlave等</li></ul><h2 id="Destination高级特性"><a href="#Destination高级特性" class="headerlink" title="Destination高级特性"></a>Destination高级特性</h2><ul><li>通配符</li><li>组合队列</li><li>配置启动的Destination</li><li>删除不活动的Destination</li><li>虚拟Destination</li><li>镜像队列</li></ul><h2 id="Message-Dispatch高级特性"><a href="#Message-Dispatch高级特性" class="headerlink" title="Message Dispatch高级特性"></a>Message Dispatch高级特性</h2><ul><li>消息游标</li><li>异步发送</li><li>分发策略</li><li>优化批量控制</li></ul><h2 id="Message高级特性"><a href="#Message高级特性" class="headerlink" title="Message高级特性"></a>Message高级特性</h2><ul><li>消息属性</li><li>Advisory Message</li><li>延迟和定时消息投递</li><li>Blob消息</li><li>消息转换</li></ul><h2 id="Consumer高级特性"><a href="#Consumer高级特性" class="headerlink" title="Consumer高级特性"></a>Consumer高级特性</h2><ul><li>消息异步分发</li><li>消息优先级</li><li>管理持久化消息</li><li>消息分组</li><li>消息重抵策略</li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ul><li>监控和管理</li><li>集成ActiveMQ和Tomcat</li></ul><h2 id="ActiveMQ优化"><a href="#ActiveMQ优化" class="headerlink" title="ActiveMQ优化"></a>ActiveMQ优化</h2><h1 id="ActiveMQ简介-1"><a href="#ActiveMQ简介-1" class="headerlink" title="ActiveMQ简介"></a>ActiveMQ简介</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ActiveMQ是Apache推出的一款开源的、完全支持JMS和J2EE规范的JMSProvider实现的消息中间件(Message Oriented Middleware, MOM)。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>用来帮助实现高可用、高性能、可伸缩、易用和安全的企业级面向消息服务的系统。</p><h1 id="ActiveMQ安装和基本使用-1"><a href="#ActiveMQ安装和基本使用-1" class="headerlink" title="ActiveMQ安装和基本使用"></a>ActiveMQ安装和基本使用</h1><h2 id="下载并安装服务端"><a href="#下载并安装服务端" class="headerlink" title="下载并安装服务端"></a>下载并安装服务端</h2><ul><li>从<code>http://activemq.apache.org/download.html</code>下载最新的ActiveMQ</li><li>直接解压<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf apache-activemq-5.9.0-bin.tar.gz activemq</span><br></pre></td></tr></table></figure></li></ul><h2 id="启动运行"><a href="#启动运行" class="headerlink" title="启动运行"></a>启动运行</h2><ol><li><p>普通启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span>/activemq/bin</span><br><span class="line"></span><br><span class="line">$ ./activemq start</span><br></pre></td></tr></table></figure></li><li><p>启动并指定日志文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./activemq start &gt; /tmp/activemqlog</span><br></pre></td></tr></table></figure></li></ol><h2 id="检查是否已经启动"><a href="#检查是否已经启动" class="headerlink" title="检查是否已经启动"></a>检查是否已经启动</h2><p>ActiveMQ默认采用61616端口提供JMS服务，使用8061端口提供管理控制台服务，执行以下命令以便检验是否已经成功启动ActiveMQ服务：</p><ul><li>查看61616端口是否已经打开： <code>netstat -an | grep 61616</code></li><li>查看控制台输出或者日志文件</li><li>直接访问ActiveMQ的管理页面：<code>http://localhost:8161/admin</code>，默认的用户名和密码是<code>admin/admin</code></li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-9/51018237.jpg" alt=""></p><h1 id="关闭ActiveMQ"><a href="#关闭ActiveMQ" class="headerlink" title="关闭ActiveMQ"></a>关闭ActiveMQ</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./activemq stop</span><br></pre></td></tr></table></figure><h1 id="基本的消息发送"><a href="#基本的消息发送" class="headerlink" title="基本的消息发送"></a>基本的消息发送</h1><h2 id="配置MAVEN所需的依赖"><a href="#配置MAVEN所需的依赖" class="headerlink" title="配置MAVEN所需的依赖"></a>配置MAVEN所需的依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gruopId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">gruopId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gruopId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">gruopId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建连接工厂，连接工程负责与ActiveMQ服务端建立连接</span></span><br><span class="line">    ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://localhost:61616"</span>);</span><br><span class="line">    <span class="comment">// 由连接工厂创建连接</span></span><br><span class="line">    Connection connection = connectionFactory.createConnection();</span><br><span class="line">    <span class="comment">// 启动连接</span></span><br><span class="line">    connection.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过连接创建会话</span></span><br><span class="line">    Session session = connection.createSession(<span class="keyword">true</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">    <span class="comment">// 通过会话创建目的地，名称表示对列名</span></span><br><span class="line">    Destination destination = session.createQueue(<span class="string">"my-queue"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 session 创建生产者</span></span><br><span class="line">    MessageProducer producer = session.createProducer(destination);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">        TextMessage message = session.createTextMessage(<span class="string">"message -- "</span> + i);</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 通过消息生产者发出消息</span></span><br><span class="line">        producer.send(message);</span><br><span class="line">        System.out.println(<span class="string">"创建成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-9/51224256.jpg" alt=""></p><h2 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建连接工厂，连接工厂负责与ActiveMQ服务端建立连接</span></span><br><span class="line">    ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://localhost:61616"</span>);</span><br><span class="line">    <span class="comment">// 由连接工厂创建连接</span></span><br><span class="line">    Connection connection = connectionFactory.createConnection();</span><br><span class="line">    <span class="comment">// 启动连接</span></span><br><span class="line">    connection.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过连接创建会话</span></span><br><span class="line">    Session session = connection.createSession(<span class="keyword">true</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">    <span class="comment">// 通过会话创建目的地，名称表示对列名</span></span><br><span class="line">    Destination destination = session.createQueue(<span class="string">"my-queue"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 session 创建生产者</span></span><br><span class="line">    MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">        TextMessage message = (TextMessage) consumer.receive();</span><br><span class="line">        session.commit();</span><br><span class="line">        System.out.println(<span class="string">"收到消息: "</span> + message.getText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-9/74587109.jpg" alt=""></p><h2 id="JMS模型"><a href="#JMS模型" class="headerlink" title="JMS模型"></a>JMS模型</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-9/43815928.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;h2 id=&quot;ActiveMQ简介&quot;&gt;&lt;a href=&quot;#ActiveMQ简介&quot; class=&quot;headerlink&quot; title=&quot;Activ
      
    
    </summary>
    
      <category term="ActiveMQ" scheme="https://destinywang.github.io/blog/categories/ActiveMQ/"/>
    
    
      <category term="ActiveMQ" scheme="https://destinywang.github.io/blog/tags/ActiveMQ/"/>
    
      <category term="JMS" scheme="https://destinywang.github.io/blog/tags/JMS/"/>
    
  </entry>
  
  <entry>
    <title>盘点实际项目中常用的加密算法及使用场景</title>
    <link href="https://destinywang.github.io/blog/2018/04/08/%E7%9B%98%E7%82%B9%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>https://destinywang.github.io/blog/2018/04/08/盘点实际项目中常用的加密算法及使用场景/</id>
    <published>2018-04-08T14:17:17.000Z</published>
    <updated>2018-04-08T14:58:02.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><code>MD5即Message-Digest Algorithm 5</code>（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。<br>将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>压缩性：任意长度的数据，算出的MD5值长度都是固定的。</li><li>容易计算：从原数据计算出MD5值很容易。</li><li>抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</li><li>强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</li></ol><p>MD5的作用是让大容量信息在用数字签名软件签署私人密钥前被”压缩”成一种保密的格式（就是把一个任意长度的字节串变换成一定长的十六进制数字串）。除了MD5以外，其中比较有名的还有sha-1、RIPEMD以及Haval等。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="一致性验证"><a href="#一致性验证" class="headerlink" title="一致性验证"></a>一致性验证</h3><p>MD5的典型应用是对一段信息（Message）产生信息摘要（Message-Digest），以防止被篡改。MD5就可以为任何文件（不管其大小、格式、数量）产生一个同样独一无二的“数字指纹”，如果任何人对文件做了任何改动，其MD5值也就是对应的“数字指纹”都会发生变化。</p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>MD5的典型应用是对一段Message(字节串)产生fingerprint(指纹），以防止被“篡改”。举个例子，你将一段话写在一个叫 readme.txt文件中，并对这个readme.txt产生一个MD5的值并记录在案，然后你可以传播这个文件给别人，别人如果修改了文件中的任何内容，你对这个文件重新计算MD5时就会发现（两个MD5值不相同）。如果再有一个第三方的认证机构，用MD5还可以防止文件作者的“抵赖”，这就是所谓的数字签名应用。</p><h3 id="安全访问认证"><a href="#安全访问认证" class="headerlink" title="安全访问认证"></a>安全访问认证</h3><p>MD5还广泛用于操作系统的登陆认证上，如Unix、各类BSD系统登录密码、数字签名等诸多方面。如在Unix系统中用户的密码是以MD5（或其它类似的算法）经Hash运算后存储在文件系统中。当用户登录的时候，系统把用户输入的密码进行MD5 Hash运算，然后再去和保存在文件系统中的MD5值进行比较，进而确定输入的密码是否正确。通过这样的步骤，系统在并不知道用户密码的明码的情况下就可以确定用户登录系统的合法性。这可以避免用户的密码被具有系统管理员权限的用户知道。</p><h2 id="缺点与不足"><a href="#缺点与不足" class="headerlink" title="缺点与不足"></a>缺点与不足</h2><p>2014年中国山东大学的王小云教授公布破译了MD5、HAVAL-128、 MD4和RIPEMD算法的报告。通过加速的杂凑与冲撞方法破译了MD5算法。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-8/17215732.jpg" alt=""></p><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>RSA为公钥加密体制</p><ul><li>乙方生成两把秘钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。</li><li>甲方获取乙方的公钥，然后用它对信息加密。</li><li>乙方得到加密后的信息，用私钥解密。</li></ul><p><img src="http://img.blog.csdn.net/20130613222101437" alt="image"></p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><h3 id="便于理解，使用广泛"><a href="#便于理解，使用广泛" class="headerlink" title="便于理解，使用广泛"></a>便于理解，使用广泛</h3><p>RSA算法是第一个能同时用于加密和数字签名的算法，也易于理解和操作。RSA是被研究得最广泛的公钥算法，从提出到现今的三十多年里，经历了各种攻击的考验，逐渐为人们接受，普遍认为是目前最优秀的公钥方案之一。</p><h3 id="缺点与不足：加密和解密花费时间长、速度慢，只适合对少量数据进行加密"><a href="#缺点与不足：加密和解密花费时间长、速度慢，只适合对少量数据进行加密" class="headerlink" title="缺点与不足：加密和解密花费时间长、速度慢，只适合对少量数据进行加密"></a>缺点与不足：加密和解密花费时间长、速度慢，只适合对少量数据进行加密</h3><p>为提高保密强度，RSA密钥至少为500位长，一般推荐使用1024位。这就使加密的计算量很大。为减少计算量，在传送信息时，常采用传统加密方法与公开密钥加密方法相结合的方式，即信息采用改进的DES或IDEA对话密钥加密，然后使用RSA密钥加密对话密钥和信息摘要。对方收到信息后，用不同的密钥解密并可核对信息摘要。</p><h2 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h2><h3 id="ssh口令登录"><a href="#ssh口令登录" class="headerlink" title="ssh口令登录"></a>ssh口令登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">客户端-&gt;&gt;服务端: 口令登录</span><br><span class="line">服务端-&gt;&gt;客户端: 发送1024为公钥指纹</span><br><span class="line">客户端-&gt;&gt;服务端: 指纹保存在$HOME/.ssh/known_hosts，接受远程主机秘钥</span><br><span class="line">服务端-&gt;&gt;客户端: 请求输入密码</span><br><span class="line">客户端-&gt;&gt;服务端: 输入密码</span><br><span class="line">服务端-&gt;&gt;客户端: 接受或拒绝链接</span><br></pre></td></tr></table></figure><h3 id="ssh公钥登录"><a href="#ssh公钥登录" class="headerlink" title="ssh公钥登录"></a>ssh公钥登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">客户端-&gt;&gt;服务端: 登录请求</span><br><span class="line">服务端-&gt;&gt;客户端: 发送随机字符串</span><br><span class="line">客户端-&gt;&gt;服务端: 发送加密后的随机字符串</span><br><span class="line">服务端-&gt;&gt;客户端: 接受或拒绝链接</span><br></pre></td></tr></table></figure><p>客户端事先把自己的公钥保存在服务端的指定目录: <code>$HOME/.ssh/authorized_keys</code></p><p>客户端生成秘钥: <code>ssh-keygen</code>，运行结束后，在<code>$HOME/.ssh/</code>目录下，会新生成两个文件: <code>id_rsa.pub</code>和<code>id_rsa</code>。前者是公钥，后者是私钥。</p><p>将公钥发送给远程主机: <code>ssh-copy-id user@host</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MD5&quot;&gt;&lt;a href=&quot;#MD5&quot; class=&quot;headerlink&quot; title=&quot;MD5&quot;&gt;&lt;/a&gt;MD5&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p
      
    
    </summary>
    
      <category term="加密" scheme="https://destinywang.github.io/blog/categories/%E5%8A%A0%E5%AF%86/"/>
    
    
      <category term="开发" scheme="https://destinywang.github.io/blog/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="算法" scheme="https://destinywang.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="加密" scheme="https://destinywang.github.io/blog/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>（二）Nginx实现动静分离</title>
    <link href="https://destinywang.github.io/blog/2018/04/03/%EF%BC%88%E4%BA%8C%EF%BC%89Nginx%E5%AE%9E%E7%8E%B0%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/"/>
    <id>https://destinywang.github.io/blog/2018/04/03/（二）Nginx实现动静分离/</id>
    <published>2018-04-03T15:16:48.000Z</published>
    <updated>2018-04-03T15:28:29.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>在反向代理时，如果是静态资源，就直接从Nginx发布的路径中去读取，而不需要从后台服务器获取。</code></pre><p>但这种情况下需要保证后端跟前端的程序保持一致，可以使用Rsync做服务端自动同步或者使用NFS、MFS分布式共享存储。</p><h2 id="概念图"><a href="#概念图" class="headerlink" title="概念图"></a>概念图</h2><p><img src="http://images0.cnblogs.com/blog/682202/201501/221032498757036.gif" alt="image"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>Nginx可以拦截请求</p><p>因此可以利用这一特性，将拦截到的静态请求进行重定向。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen          80;</span><br><span class="line">    server_name     destiny;</span><br><span class="line">    access_log      logs/host.access.log main;</span><br><span class="line">    </span><br><span class="line">    index   index.html index.htm index.jsp;</span><br><span class="line">    root    /usr/local/tomcat-9.0.0-RC5-1/webapps/ROOT/;</span><br><span class="line">    </span><br><span class="line">    # 不区分大小写的正则匹配</span><br><span class="line">    location ~* .*\.(jpg|jepg|fig|png|wsf|ico)$ &#123;</span><br><span class="line">        if(-f $request_filename) &#123;</span><br><span class="line">            # expires   15d;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    # 不区分大小写的正则匹配</span><br><span class="line">    locatin ~* .*\.(html|htm|js|css)$ &#123;</span><br><span class="line">        # expires       1d;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass      http://10.211.55.5</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前两个location中，没有配置后端服务器的路径<br>Nginx就会默认去寻找<code>root</code>的资源</p><p>Nginx会以<code>root</code>为根路径，将请求的路径拼在其后去查找，如果能访问到，Nginx就可以直接将该文件返回。</p><p>如果能够查询到响应的文件，就会直接返回。</p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="index-默认主页设置模块"><a href="#index-默认主页设置模块" class="headerlink" title="index(默认主页设置模块)"></a>index(默认主页设置模块)</h2><pre><code>如果URL中没有指定文件，则设置一个默认主页。可以指定多个文件，如果第一个文件没有找到，将会查找后面指定的文件</code></pre><p>index   index.html index.htm index.jsp</p><h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><pre><code>请求到达后的文件根目录</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location  /i/ &#123;</span><br><span class="line">  root  /spool/w3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果请求<code>/i/top.gif</code>文件，Nginx将转到<code>/spool/w3/i/top.gif</code>文件</p><p>在请求中root会添加这个location到它的值后面，即”/i/top.gif”并不会请求”/spool/w3/top.gif”文件，如果要实现上述类似于apache alias的功能，可以使用alias指令。</p><pre><code>简单来说，root是拼接，alias是替换。</code></pre><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>当访问静态资源的请求进入(假设为<code>http://10.211.55.4:80/static/person.jpg</code>)时，会被配置文件中的第一个location拦截</p><p>location会将<code>root</code>中配置的路径和访问路径拼接在一起，新的路径为<code>/usr/local/tomcat-9.0.0-RC5-1/webapps/ROOT/static/person.jpg</code>，在Nginx的路径中进行查找。</p><h2 id="初始情况，不加Nginx的情况下启动Tomcat"><a href="#初始情况，不加Nginx的情况下启动Tomcat" class="headerlink" title="初始情况，不加Nginx的情况下启动Tomcat"></a>初始情况，不加Nginx的情况下启动Tomcat</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-3/3587203.jpg" alt=""></p><p>访问<code>10.211.55.4:8080</code>即可访问Tomcat主页。</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-3/22785804.jpg" alt=""></p><p>查看<code>logs/localhost_access_log.2018-04-03.txt</code>可以看到访问日志</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-3/98037964.jpg" alt=""></p><p>此时可以看到，请求了多个静态文件。</p><h2 id="加入Nginx"><a href="#加入Nginx" class="headerlink" title="加入Nginx"></a>加入Nginx</h2><p>将包含上图中文件的路径<code>/usr/local/apache-tomcat-7.0.73/webapps/ROOT/</code>配置进Nginx配置文件中的<code>root</code>属性。</p><p>并配置location用于拦截<code>jpg/jepg/fig/png/wsf/ico</code>后缀的文件。</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-3/41423428.jpg" alt=""></p><p>然后<code>sbin/nginx -s reload</code>重启Nginx</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>分别重启Tomcat和Nginx后，再访问<code>10.211.55.4</code>(Nginx自动监听80端口并转发至8080)</p><p>删除浏览器缓存</p><p>此时再查看日志，已经请求中已经不再对静态资源进行请求</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-3/88998797.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;在反向代理时，如果是静态资源，就直接从Nginx发布的路径中去读取，而不需要从后台服务器获取。
&lt;/code&gt;&lt;/pre&gt;&lt;
      
    
    </summary>
    
      <category term="Nginx" scheme="https://destinywang.github.io/blog/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://destinywang.github.io/blog/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>从头搭建github博客</title>
    <link href="https://destinywang.github.io/blog/2018/04/01/%E4%BB%8E%E5%A4%B4%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"/>
    <id>https://destinywang.github.io/blog/2018/04/01/从头搭建github博客/</id>
    <published>2018-04-01T14:11:46.000Z</published>
    <updated>2018-04-15T14:32:27.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Node-js并配置Node-js环境"><a href="#安装Node-js并配置Node-js环境" class="headerlink" title="安装Node.js并配置Node.js环境"></a>安装Node.js并配置Node.js环境</h1><p>成功界面如下：</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/70261172.jpg" alt=""></p><h1 id="安装git并配置git环境"><a href="#安装git并配置git环境" class="headerlink" title="安装git并配置git环境"></a>安装git并配置git环境</h1><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/70159677.jpg" alt=""></p><h1 id="注册Github并新建项目"><a href="#注册Github并新建项目" class="headerlink" title="注册Github并新建项目"></a>注册Github并新建项目</h1><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/97358630.jpg" alt=""></p><h2 id="新建仓库页"><a href="#新建仓库页" class="headerlink" title="新建仓库页"></a>新建仓库页</h2><p>参考其他博客的时候，很多博客中都提到</p><blockquote><p>项目名必须是 <code>github账户名.github.io</code></p></blockquote><p>但经本人测试其实项目名称可以任意选取，如本人的仓库名就是<code>blog</code>，而非<code>destinywang.github.io</code></p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/27050333.jpg" alt=""></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>进入项目的<code>setting</code>选项卡中</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/78571147.jpg" alt=""></p><p>下拉到<code>Github Pages</code>，此时该项目已经被部署，可以通过提供的外网链接去访问。</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/58918233.jpg" alt=""></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo中文网站</a></p><pre><code>Hexo是个快捷，简介且高效的博客框架让上百个页面在几秒内完成渲染Hexo支持Github Flavored Markdown的所有功能</code></pre><h2 id="在合适的位置创建文件夹"><a href="#在合适的位置创建文件夹" class="headerlink" title="在合适的位置创建文件夹"></a>在合适的位置创建文件夹</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/99445506.jpg" alt=""></p><p>以上操作需要在空文件夹中进行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo -g             <span class="comment"># 安装Hexo</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo -v                         <span class="comment"># 检查Hexo是否安装成功</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init                       <span class="comment"># 初始化文件夹</span></span></span><br></pre></td></tr></table></figure><h2 id="Hexo-init"><a href="#Hexo-init" class="headerlink" title="Hexo init"></a>Hexo init</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/8639246.jpg" alt=""></p><h2 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h2><p>此命令用于安装所需要的组件<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/77556695.jpg" alt=""></p><h2 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h2><p>首次体验Hexo</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/78086644.jpg" alt=""></p><h2 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h2><p>此命令会在本地开启Hexo的服务器</p><p>可以在发布到github之前先在本地进行调试</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/85905480.jpg" alt=""></p><p>然后再浏览器中输入<code>localhost:4000/blog/</code><br>如果出现如下界面就成功了<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/66613199.jpg" alt=""></p><h1 id="将Hexo和Github-page联系起来"><a href="#将Hexo和Github-page联系起来" class="headerlink" title="将Hexo和Github page联系起来"></a>将Hexo和Github page联系起来</h1><h2 id="设置本地git"><a href="#设置本地git" class="headerlink" title="设置本地git"></a>设置本地git</h2><p>如果是第一次使用git的话需要设置<code>name</code>和<code>email</code><br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/13461778.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your email&quot;     # 生成秘钥，路径在~/.ssh下，windows用户的路径为C:\Users\Administrator\.ssh</span><br><span class="line"></span><br><span class="line">$ eval &quot;$(ssh-agent -s)&quot;                # 添加秘钥到ssh-agent</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa                 # 添加生成的SSH key到ssh-agent</span><br></pre></td></tr></table></figure><h2 id="登录github，进行设置"><a href="#登录github，进行设置" class="headerlink" title="登录github，进行设置"></a>登录github，进行设置</h2><ol><li>进入用户的setting页面</li></ol><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/59448019.jpg" alt=""></p><ol start="2"><li>在<code>SSH and GPG keys</code>选项卡中添加一个ssh key，并将<code>id_rsa.pub</code>(公钥)的内容复制上去</li></ol><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/74389678.jpg" alt=""></p><h1 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h1><p>为了保证Hexo能够正确的通过Git进行<code>add</code>、<code>commit</code>、<code>pull</code>、<code>push</code>等操作<br>需要将本地及远程的git仓库信息进行配置</p><p>当前站点文件夹的状态：<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/15486482.jpg" alt=""></p><p>修改<code>_config.yml</code>文件，将<code>deployment</code>部分相关的内容进行替换</p><ul><li>type: 部署类型</li><li>repository: 远程仓库路径，即github中的仓库路径</li><li>branch: 分支名</li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/85193500.jpg" alt=""></p><h1 id="新建一篇博客"><a href="#新建一篇博客" class="headerlink" title="新建一篇博客"></a>新建一篇博客</h1><h2 id="在终端中执行命令hexo-new-post-博客名"><a href="#在终端中执行命令hexo-new-post-博客名" class="headerlink" title="在终端中执行命令hexo new post 博客名"></a>在终端中执行命令<code>hexo new post 博客名</code></h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/44957206.jpg" alt=""></p><p>会在<code>source/_posts</code>路径下生成对应的博客文件<code>test.md</code><br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/50261262.jpg" alt=""></p><h2 id="安装hexo-deployer-git扩展文件"><a href="#安装hexo-deployer-git扩展文件" class="headerlink" title="安装hexo-deployer-git扩展文件"></a>安装<code>hexo-deployer-git</code>扩展文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/92845681.jpg" alt=""></p><h2 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim source/_posts/test.md</span><br></pre></td></tr></table></figure><p>打开<code>test.md</code>文件，按照正常的Markdown文件编辑即可<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/50073786.jpg" alt=""></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 640 ms</span><br><span class="line">INFO  Generated: tags/index.html</span><br><span class="line">INFO  Generated: about/index.html</span><br><span class="line">INFO  Generated: 2018/04/01/jvm/index.html</span><br><span class="line">INFO  Generated: 2018/04/01/test/index.html</span><br><span class="line">INFO  Generated: 2018/04/01/hello-world-1/index.html</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: tags/jvm/index.html</span><br><span class="line">INFO  Generated: archives/2018/index.html</span><br><span class="line">INFO  Generated: archives/2018/04/index.html</span><br><span class="line">INFO  Generated: tags/java基础/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: 2018/04/01/hello-world/index.html</span><br><span class="line">INFO  Generated: 2018/04/01/一-Nginx基本知识/index.html</span><br><span class="line">INFO  Generated: tags/Nginx/index.html</span><br><span class="line">INFO  Generated: images/cc-by-nc-nd.svg</span><br><span class="line">INFO  Generated: images/avatar.gif</span><br><span class="line">INFO  Generated: images/apple-touch-icon-next.png</span><br><span class="line">INFO  Generated: images/cc-by-nc-sa.svg</span><br><span class="line">INFO  Generated: images/algolia_logo.svg</span><br><span class="line">INFO  Generated: images/cc-by-nc.svg</span><br><span class="line">INFO  Generated: images/cc-by-nd.svg</span><br><span class="line">INFO  Generated: images/cc-by-sa.svg</span><br><span class="line">INFO  Generated: images/cc-by.svg</span><br><span class="line">INFO  Generated: images/cc-zero.svg</span><br><span class="line">INFO  Generated: images/favicon-16x16-next.png</span><br><span class="line">INFO  Generated: images/favicon-32x32-next.png</span><br><span class="line">INFO  Generated: images/loading.gif</span><br><span class="line">INFO  Generated: images/logo.svg</span><br><span class="line">INFO  Generated: images/placeholder.gif</span><br><span class="line">INFO  Generated: images/quote-r.svg</span><br><span class="line">INFO  Generated: images/searchicon.png</span><br><span class="line">INFO  Generated: lib/font-awesome/css/font-awesome.css.map</span><br><span class="line">INFO  Generated: images/quote-l.svg</span><br><span class="line">INFO  Generated: lib/font-awesome/HELP-US-OUT.txt</span><br><span class="line">INFO  Generated: images/blog-logo.jpeg</span><br><span class="line">INFO  Generated: lib/font-awesome/fonts/fontawesome-webfont.woff2</span><br><span class="line">INFO  Generated: css/main.css</span><br><span class="line">INFO  Generated: lib/font-awesome/fonts/fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: js/src/affix.js</span><br><span class="line">INFO  Generated: js/src/exturl.js</span><br><span class="line">INFO  Generated: js/src/algolia-search.js</span><br><span class="line">INFO  Generated: js/src/bootstrap.js</span><br><span class="line">INFO  Generated: js/src/love.js</span><br><span class="line">INFO  Generated: js/src/js.cookie.js</span><br><span class="line">INFO  Generated: js/src/post-details.js</span><br><span class="line">INFO  Generated: js/src/motion.js</span><br><span class="line">INFO  Generated: js/src/scrollspy.js</span><br><span class="line">INFO  Generated: js/src/scroll-cookie.js</span><br><span class="line">INFO  Generated: lib/font-awesome/bower.json</span><br><span class="line">INFO  Generated: js/src/utils.js</span><br><span class="line">INFO  Generated: lib/ua-parser-js/dist/ua-parser.min.js</span><br><span class="line">INFO  Generated: lib/velocity/velocity.ui.min.js</span><br><span class="line">INFO  Generated: lib/velocity/velocity.min.js</span><br><span class="line">INFO  Generated: js/src/schemes/pisces.js</span><br><span class="line">INFO  Generated: lib/ua-parser-js/dist/ua-parser.pack.js</span><br><span class="line">INFO  Generated: lib/velocity/velocity.ui.js</span><br><span class="line">INFO  Generated: lib/font-awesome/css/font-awesome.css</span><br><span class="line">INFO  Generated: lib/jquery/index.js</span><br><span class="line">INFO  Generated: lib/font-awesome/css/font-awesome.min.css</span><br><span class="line">INFO  Generated: lib/font-awesome/fonts/fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: lib/velocity/velocity.js</span><br><span class="line">INFO  61 files generated in 1.13 s</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">[master 966acc9] Site updated: 2018-04-01 21:18:16</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">To github.com:DestinyWang/blog.git</span><br><span class="line"> + fa066f8...966acc9 HEAD -&gt; master (forced update)</span><br><span class="line">Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;git@github.com:DestinyWang/blog.git&apos;.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure><p>至此，博客已经部署成功，可以去<code>http://用户名.github.io</code>查看。</p><p><img src="http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022001738037-1195721153.png" alt="image"></p><h1 id="安装Next"><a href="#安装Next" class="headerlink" title="安装Next"></a>安装Next</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>下载到站点文件夹路径下的<code>themes/next</code></p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/97713977.jpg" alt=""></p><h1 id="启用Next主体"><a href="#启用Next主体" class="headerlink" title="启用Next主体"></a>启用Next主体</h1><p>在站点目录中，打开配置文件<code>_config.yml</code>，修改<code>theme: next</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">~/blog</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim _config.yml</span></span><br></pre></td></tr></table></figure></p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/41418865.jpg" alt=""></p><h1 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h1><p>在next主题目录下的<code>_config.yml</code>，修改<code>scheme: Pisces</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/3206762.jpg" alt=""></p><h1 id="语言设定"><a href="#语言设定" class="headerlink" title="语言设定"></a>语言设定</h1><p>Hexo提供了多种语言支持，包括简体中文<code>zh-Hans</code><br>在站点根目录下修改配置文件<code>_config.yml</code>中的<code>language</code>为<code>zh-Hans</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">~/blog</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim _config.yml</span></span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/30730480.jpg" alt=""></p><h1 id="修改菜单栏"><a href="#修改菜单栏" class="headerlink" title="修改菜单栏"></a>修改菜单栏</h1><p>在主题目录下修改配置文件<code>_config.yml</code>中的<code>menu</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/60828279.jpg" alt=""></p><h1 id="设置菜单项图标"><a href="#设置菜单项图标" class="headerlink" title="设置菜单项图标"></a>设置菜单项图标</h1><p>对应字段是<code>menu_icons</code><br>同样在主题目录下的<code>_config.yml</code>中修改</p><p>格式为<code>item name: icon name</code>，其中<code>item name</code> 与所配置的菜单名字对应，<code>icon name</code>是<code>Font Awesome</code>图标的名字。而 <code>enable</code>可用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/60198648.jpg" alt=""></p><h1 id="设置侧栏位置"><a href="#设置侧栏位置" class="headerlink" title="设置侧栏位置"></a>设置侧栏位置</h1><p>修改主题目录下<code>sidebar</code>的<code>position</code>值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/98610330.jpg" alt=""></p><h1 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h1><p>在站点根目录下载配置文件中新增avatar，值设置为头像的链接地址。地址可以是网络地址，也可以是本地地址（放置在<code>source/images/</code>目录下）</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/90699135.jpg" alt=""></p><h1 id="设置文章代码主题"><a href="#设置文章代码主题" class="headerlink" title="设置文章代码主题"></a>设置文章代码主题</h1><p>在主题目录下修改配置文件<code>_config.yml</code>，字段<code>highlight_theme</code>，默认值为<code>nomal</code>。可以设置为<code>night</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/42242111.jpg" alt=""></p><h1 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h1><p>在站点路径下新建页面<code>categories</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ hexo new page categories</span><br><span class="line"></span><br><span class="line"># 在 source/categories 目录中修改index.md</span><br><span class="line">vim source/categories/index.md</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-2/61519989.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在主题的 _config.yml 中取消注释:</span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-2/75484065.jpg" alt=""></p><p>在要分类的文章中加入 category 属性:</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-2/86412607.jpg" alt=""></p><h1 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h1><p>标签是对博客分类的方式<br>比如一个系列的博客都是将<code>神经网络</code>，那么就可以给每篇博客加上<code>神经网络</code>的tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ hexo new page tags</span><br><span class="line">INFO Created: ~/blog/source/tags/index.md</span><br><span class="line"></span><br><span class="line"># 在新建的index.md中添加type: &quot;tags&quot;</span><br><span class="line">vim source/tags/index.md</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/60934507.jpg" alt=""></p><p>后面只需要在博客的开头中添加<code>tags: [A, B, C]</code>即可</p><p>成功后，<code>标签</code>部分的导航栏为<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/92069862.jpg" alt=""></p><h1 id="Aboute-Me"><a href="#Aboute-Me" class="headerlink" title="Aboute Me"></a><code>Aboute Me</code></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ hexo new page about</span><br><span class="line">INFO Created: ~/blog/source/about/index.md</span><br><span class="line"></span><br><span class="line"># 在新建的index.md中添加如下内容</span><br><span class="line">vim source/about/index.md</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/87161448.jpg" alt=""></p><p>成功后效果如下所示：<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/2887356.jpg" alt=""></p><h1 id="添加github导航条"><a href="#添加github导航条" class="headerlink" title="添加github导航条"></a>添加github导航条</h1><p><a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">从这里选择主题</a></p><p>然后将代码复制到<code>themes/next/layout/_layout.swig</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ vim themes/next/layout/_layout.swig</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/69448329.jpg" alt=""></p><p>成功后的效果如下：<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/97473185.jpg" alt=""></p><h1 id="修改内容区域宽度"><a href="#修改内容区域宽度" class="headerlink" title="修改内容区域宽度"></a>修改内容区域宽度</h1><h2 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h2><p>Next 对内容的宽度的设定如下：</p><ul><li>700px，当屏幕宽度 &lt; 1600px</li><li>900px，当屏幕宽度 &gt;= 1600px</li><li>移动设备下，宽度自适应</li></ul><h2 id="非Pisces-Scheme主题修改"><a href="#非Pisces-Scheme主题修改" class="headerlink" title="非Pisces Scheme主题修改"></a>非<code>Pisces Scheme</code>主题修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim <span class="built_in">source</span>/css_variables/custom.styl</span><br></pre></td></tr></table></figure><p>修改内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 修改成你期望的宽度</span><br><span class="line">$content-desktop = 700px</span><br><span class="line"></span><br><span class="line">// 当视窗超过 1600px 后的宽度</span><br><span class="line">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure><h2 id="Pisces-Scheme主题修改"><a href="#Pisces-Scheme主题修改" class="headerlink" title="Pisces Scheme主题修改"></a><code>Pisces Scheme</code>主题修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim themes\next\<span class="built_in">source</span>\css\_schemes\Picses\_layout.styl</span><br></pre></td></tr></table></figure><p>修改内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;<span class="attribute">width</span>: <span class="number">1150px</span>;&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123;<span class="attribute">width</span>: <span class="number">1150px</span>;&#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;<span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 260px);&#125;</span><br></pre></td></tr></table></figure><h1 id="设置首页不显示全文-只显示预览"><a href="#设置首页不显示全文-只显示预览" class="headerlink" title="设置首页不显示全文(只显示预览)"></a>设置首页不显示全文(只显示预览)</h1><h2 id="打开主题路径下的-config-yml"><a href="#打开主题路径下的-config-yml" class="headerlink" title="打开主题路径下的_config.yml"></a>打开主题路径下的<code>_config.yml</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure><h2 id="修改auto-excerpt"><a href="#修改auto-excerpt" class="headerlink" title="修改auto_excerpt"></a>修改<code>auto_excerpt</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommand.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><p>将<code>enable</code>属性改为<code>true</code></p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-10/10430155.jpg" alt=""></p><h1 id="修改code代码块自定义样式"><a href="#修改code代码块自定义样式" class="headerlink" title="修改code代码块自定义样式"></a>修改<code>code</code>代码块自定义样式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim themes/next/source/css/_custom/custom.styl</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-10/87094654.jpg" alt=""></p><h1 id="取消文章目录对标题的自动编号"><a href="#取消文章目录对标题的自动编号" class="headerlink" title="取消文章目录对标题的自动编号"></a>取消<code>文章目录</code>对标题的自动编号</h1><p><img src="http://segmentfault.com/img/bVJN4j?w=1246&amp;h=345" alt=""></p><p>nexT对 <code>markdown</code> 语法的标题</p><pre><code>#            一级标题##            二级标题###            三级标题####        四级标题#####        五级标题######        六级标题</code></pre><p>会默认进行标号分配，这样有可能会打乱文章原有标题</p><p>取消方式：</p><p><strong>修改主题配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim theme/next/_config</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-15/56617961.jpg" alt=""></p><p>将 <code>number</code> 设为 <code>false</code></p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>至此，博客基本设置OK<br>但还有很多地方可以继续挖掘</p><p>后续会持续更新</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装Node-js并配置Node-js环境&quot;&gt;&lt;a href=&quot;#安装Node-js并配置Node-js环境&quot; class=&quot;headerlink&quot; title=&quot;安装Node.js并配置Node.js环境&quot;&gt;&lt;/a&gt;安装Node.js并配置Node.js环境&lt;/
      
    
    </summary>
    
    
      <category term="github博客" scheme="https://destinywang.github.io/blog/tags/github%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>（一）Nginx基本知识</title>
    <link href="https://destinywang.github.io/blog/2018/04/01/%EF%BC%88%E4%B8%80%EF%BC%89Nginx%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>https://destinywang.github.io/blog/2018/04/01/（一）Nginx基本知识/</id>
    <published>2018-04-01T07:06:23.000Z</published>
    <updated>2018-04-03T15:27:16.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><pre><code>Nginx是一款轻量级的Web服务器，也是一款轻量级的反向代理服务器</code></pre><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ul><li>直接支持Rails和PHP程序</li><li>作为HTTP反向代理服务器</li><li>作为负载均衡服务器</li><li>作为邮件代理服务器</li><li>帮助实现动静分离</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><pre><code>高稳定、高性能、资源占用少、功能丰富、模块化结构、支持热部署</code></pre><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><blockquote><p>依赖gcc openssl-devel pcre-devel zlib zlib-devel</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc openssl-devel pcre-devel zlib zlib-devel</span><br></pre></td></tr></table></figure><blockquote><p>安装</p></blockquote><pre><code>$ ./configure--prefix=/usr/local/nginx--withhttp_stub_status_module$ make$ make install</code></pre><p><img src="http://oetw0yrii.bkt.clouddn.com/18-3-25/9736175.jpg" alt=""></p><h2 id="常见的Nginx安装配置选项"><a href="#常见的Nginx安装配置选项" class="headerlink" title="常见的Nginx安装配置选项"></a>常见的Nginx安装配置选项</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-3-25/45304814.jpg" alt=""><br><img src="http://oetw0yrii.bkt.clouddn.com/18-3-25/30829334.jpg" alt=""><br><img src="http://oetw0yrii.bkt.clouddn.com/18-3-25/7156821.jpg" alt=""><br><img src="http://oetw0yrii.bkt.clouddn.com/18-3-25/61702919.jpg" alt=""><br><img src="http://oetw0yrii.bkt.clouddn.com/18-3-25/72685599.jpg" alt=""></p><h2 id="Nginx基本运行"><a href="#Nginx基本运行" class="headerlink" title="Nginx基本运行"></a>Nginx基本运行</h2><pre><code>// 测试配置文件$ sbin/nginx -tnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is oknginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful// 启动$ sbin/nginx// 停止$ sbin/nginx -s stop$ sbin/nginx -s quit// 重启$ sbin/nginx -s reload// 查看进程ps -ef | grep nginx</code></pre><h1 id="Nginx的基本配置"><a href="#Nginx的基本配置" class="headerlink" title="Nginx的基本配置"></a>Nginx的基本配置</h1><pre><code>默认启动Nginx的时候，使用的配置文件是conf/nginx.conf文件也可以在启动Nginx的时候，通过-c来指定要去读的配置文件</code></pre><h2 id="常见的配置文件"><a href="#常见的配置文件" class="headerlink" title="常见的配置文件"></a><center>常见的配置文件</center></h2><table><thead><tr><th>文件名</th><th>用途</th></tr></thead><tbody><tr><td><code>nginx.conf</code></td><td>应用程序的基本配置文件</td></tr><tr><td><code>mime.types</code></td><td>MIME类型关联的扩展文件</td></tr><tr><td><code>fastcgi.conf</code></td><td>与fastcgi相关的配置，与PHP相关</td></tr><tr><td><code>proxy.conf</code></td><td>与proxy相关的配置（反向代理）</td></tr><tr><td><code>sites.conf</code></td><td>配置Nginx提供的网站，包括虚拟主机</td></tr></tbody></table><h2 id="nginx-cong"><a href="#nginx-cong" class="headerlink" title="nginx.cong"></a>nginx.cong</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">user root;</span><br><span class="line">worker_processes 1;</span><br><span class="line"></span><br><span class="line">error_log logs/error.log crit;</span><br><span class="line"></span><br><span class="line">pid         logs/nginx.pid;     # nginx 进程号文件路径</span><br><span class="line"></span><br><span class="line">events &#123;                        # 事件模块</span><br><span class="line">    use epoll;                  # 文件的模型</span><br><span class="line">    worker_connections 24;      # 每个worker的connections</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;                              # web反向代理</span><br><span class="line">    include         mime.type;      # 引入mime.type </span><br><span class="line">    include         proxy.conf;     # 引入proxy.conf</span><br><span class="line">    </span><br><span class="line">    defualt_type application/octet-stream;  # mine.type 的缺省类型</span><br><span class="line">    </span><br><span class="line">    log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot;&apos;  # 日志格式，远程地址 - 远程用户 时间 等</span><br><span class="line">                    &apos;$status $body_bytes_sent &quot;$http_referer&quot;&apos;</span><br><span class="line">                    &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;</span><br><span class="line">                    </span><br><span class="line">    access_log  logs/access.log main;       # 使用为main的格式</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    upstream test.com &#123;                         # 负载均衡模块</span><br><span class="line">        server 127.0.0.1:8080 weight = 5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        lisent          80;</span><br><span class="line">        server_name     detiny;</span><br><span class="line">        </span><br><span class="line">        access_log  logs/host.access.log    main;</span><br><span class="line">        </span><br><span class="line">        index       index.html index.htm index.jsp;</span><br><span class="line">        root        /Users/destiny/Download/apache-tomcat-9.0.1/webapps/ROOT/;</span><br><span class="line">        </span><br><span class="line">        location ~* .*\.(jpg|jepg|gif|png|wsf|ico)$ &#123;   # 如果是图片，就去root路径查询</span><br><span class="line">            if(-f $request_filename) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /         proxy_pass http://destiny.com;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx的进程结构"><a href="#Nginx的进程结构" class="headerlink" title="Nginx的进程结构"></a>Nginx的进程结构</h2><pre><code>启动Nginx的时候，会启动一个Master进程，这个进程不处理客户端的任何请求，主要用来产生worker进程而每个worker进程用来处理一个Request</code></pre><h2 id="Niginx-模块"><a href="#Niginx-模块" class="headerlink" title="Niginx 模块"></a>Niginx 模块</h2><p>分为：核心模块、时间模块、标准HTTP模块、可选HTTP模块、邮件模块、第三方模块和补丁等。</p><h3 id="基本模块"><a href="#基本模块" class="headerlink" title="基本模块"></a>基本模块</h3><p>Nginx默认的功能模块，它们提供的指令，允许使用定义Nginx基本功能的变量，在编译的时候不能被禁用，包括:</p><ul><li>核心模块：基本功能和指令，如进程管理和安全</li><li>事件模块：在Nginx内配置网络使用的能力</li><li>配置模块：提供包含机制</li></ul><h1 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h1><h2 id="Nginx常用的核心模块指令"><a href="#Nginx常用的核心模块指令" class="headerlink" title="Nginx常用的核心模块指令"></a>Nginx常用的核心模块指令</h2><ul><li>error_log</li><li>include</li><li>pid</li><li>user</li><li>worker_cpu_affinity</li><li>worker_processes</li></ul><h3 id="error-log"><a href="#error-log" class="headerlink" title="error_log"></a>error_log</h3><pre><code>语法： error_log file [ debug|info|notice|warn|error|crit ]Nginx支持将不同的虚拟主机的日志记录在不同的路径</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    error_log logs/http_error.log error;</span><br><span class="line">    server &#123;</span><br><span class="line">        server_name one;</span><br><span class="line">        access_log logs/one_access.log;</span><br><span class="line">        error_log logs/one_error.log error;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        server_name two;</span><br><span class="line">        access_log logs/two_access.log;</span><br><span class="line">        error_log logs/two_error.log error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><pre><code>从外部引入文件，支持文件通配符</code></pre><h3 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h3><pre><code>指定pid文件，可以使用kill命令</code></pre><h3 id="user"><a href="#user" class="headerlink" title="user"></a>user</h3><pre><code>为了提高安全性，指定允许操作Nginx的用户语法：user user [group]</code></pre><h3 id="worker-cpu-affinity"><a href="#worker-cpu-affinity" class="headerlink" title="worker_cpu_affinity"></a>worker_cpu_affinity</h3><pre><code>指定工作进程指定到某个CPU上// 指定每个进程绑定一个CPUworker_processes        4;worker_cpu_affinity     0001 0010 0100 1000;// 指定第一个进程到CPU0/CPU2，第二个进程到CPU1/CPU3worker_processes        2;worker_cpu_affinity     0101 1010;</code></pre><h3 id="worker-processes"><a href="#worker-processes" class="headerlink" title="worker_processes"></a>worker_processes</h3><pre><code>一个工作进程为一个单线程的进程如果Nginx工作在一些CPU密集型的环境中，并且你的机器拥有2块以上的CPU，则可以将worker_processes的数目设置为CPU核数。如果你的机器运行在需要处理大量静态文件的环境，并且文件的大小总和超出了可用的内存，那么可以增加worker_processes的以便充分利用磁盘带宽。</code></pre><h2 id="日志模块"><a href="#日志模块" class="headerlink" title="日志模块"></a>日志模块</h2><pre><code>控制Nginx如何记录请求日志</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log_format gzip $remote_addr - $remote_user [$time_local] &quot;$request&quot;&apos;  </span><br><span class="line">                &apos;$status $body_bytes_sent &quot;$http_referer&quot;&apos;</span><br><span class="line">                &apos;&quot;$http_user_agent&quot; &quot;$gzip_ratio&quot;&apos;;</span><br><span class="line">                </span><br><span class="line">access_log /spool/logs/nginx-access.log gzip buffer=32k;</span><br></pre></td></tr></table></figure><h3 id="access-log"><a href="#access-log" class="headerlink" title="access_log"></a>access_log</h3><p>语法：<code>access_log path [format [buffer=size | off]]</code></p><p>默认值：access_log log/access.log combined</p><p>使用字段：http、server、location</p><p>注意：</p><ul><li>Nginx指定的用户必须有创建日志的权限</li></ul><h3 id="log-format"><a href="#log-format" class="headerlink" title="log_format"></a>log_format</h3><p>语法：<code>log_format name format [format ...]</code></p><p>默认值：<code>log_format combined &quot;...&quot;</code></p><p>使用字段：http、server</p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td><code>$body_bytes_sent</code></td><td>减去应答头后传送给客户端的字节数</td></tr><tr><td><code>$bytes_sent</code></td><td>传送给客户端的字节数</td></tr><tr><td><code>$connection</code></td><td>连接数</td></tr><tr><td><code>$msec</code></td><td>正在写入日志条目的当前时间</td></tr><tr><td><code>$pipe</code></td><td>如果请求为<code>管道的</code></td></tr><tr><td><code>request_length</code></td><td>请求主体的长度</td></tr><tr><td><code>$request_time</code></td><td>从一个请求发出到Nginx工作的时间</td></tr><tr><td><code>$status</code></td><td>应答的状态</td></tr><tr><td><code>$time_local</code></td><td>写入普通日志格式的当地时间</td></tr></tbody></table><h2 id="事件模块"><a href="#事件模块" class="headerlink" title="事件模块"></a>事件模块</h2><ul><li>use</li><li>connection</li></ul><h3 id="use"><a href="#use" class="headerlink" title="use"></a>use</h3><p>语法：use [ kqueue | rtsig | epoll | /dev/poll | select | poll | eventport]</p><h3 id="connections"><a href="#connections" class="headerlink" title="connections"></a>connections</h3><p>语法：worker_connections</p><pre><code>最大连接数 = worker_processes * worker_connections// 反向代理环境下最大连接数 = worker_processes * worker_connections / 4原因：浏览器默认打开两个连接到服务器，Nginx使用来自相同地址池的fds与前后端相连接</code></pre><h2 id="HTTP模块基本配置"><a href="#HTTP模块基本配置" class="headerlink" title="HTTP模块基本配置"></a>HTTP模块基本配置</h2><p>Nginx的HTTP配置主要包括三个区块，结构如下<br><img src="http://oetw0yrii.bkt.clouddn.com/18-3-28/28711425.jpg" alt=""></p><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>语法：<code>alias file-path | directory-path;</code></p><p>使用字段：location</p><blockquote><p>alias是替换路径，而root是追加路径，将location后的路径追到root之后</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /i/ &#123;</span><br><span class="line">    alias /spool/w3/images/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">请求 /i/top.gif 将返回这个文件 &quot;/spool/w3/images/top.gif&quot;。</span><br></pre></td></tr></table></figure><h3 id="error-page"><a href="#error-page" class="headerlink" title="error_page"></a>error_page</h3><p>语法：<code>error_page code [ code ... ] [ = | = answer-code ] uri | @named_location</code></p><p>使用字段：http、server、location、location中的if字段</p><blockquote><p>这个参数可以为错误代码指定相应的错误页面</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error_page      4040        /404.html;</span><br><span class="line">error_page      502 503 504 /50x.html;</span><br><span class="line">error_page      403         http://example.com/forbidden.html;</span><br><span class="line">error_page      404         = @fetch;</span><br></pre></td></tr></table></figure><blockquote><p>同样，你也可以将原有响应代码修改为另一个响应代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error_page      404 = 200   /empty.gif;</span><br><span class="line">error_page      404 = 403   /forbindden.gif;</span><br></pre></td></tr></table></figure><h3 id="internal"><a href="#internal" class="headerlink" title="internal"></a>internal</h3><p>语法：<code>internal</code></p><p>使用字段：location</p><p>internal指定某个location只能被内部的请求调用，外部的调用会返回404.</p><h2 id="location区段"><a href="#location区段" class="headerlink" title="location区段"></a>location区段</h2><pre><code>通过指定模式来与客户端请求的URI相匹配location [=|~|~*|^~|@] pattern {    # ...}</code></pre><h3 id="没有修饰符，表示必须以指定的模式开始"><a href="#没有修饰符，表示必须以指定的模式开始" class="headerlink" title="没有修饰符，表示必须以指定的模式开始"></a>没有修饰符，表示必须以指定的模式开始</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name destiny.com;</span><br><span class="line">    location /abc &#123;</span><br><span class="line">        # ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以匹配：</p><ul><li><a href="http://destiny.com/abc" target="_blank" rel="noopener">http://destiny.com/abc</a></li><li><a href="http://destiny.com/abc?age=24" target="_blank" rel="noopener">http://destiny.com/abc?age=24</a></li><li><a href="http://destiny.com/abc/" target="_blank" rel="noopener">http://destiny.com/abc/</a></li><li><a href="http://destiny.com/abcde" target="_blank" rel="noopener">http://destiny.com/abcde</a></li></ul><h3 id="，表示必须与指定的模式精准匹配"><a href="#，表示必须与指定的模式精准匹配" class="headerlink" title="=，表示必须与指定的模式精准匹配"></a>=，表示必须与指定的模式精准匹配</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name destiny.com;</span><br><span class="line">    location = /abc &#123;</span><br><span class="line">        # ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以匹配：</p><ul><li><a href="http://destiny.com/abc" target="_blank" rel="noopener">http://destiny.com/abc</a></li><li><a href="http://destiny.com/abc?age=24" target="_blank" rel="noopener">http://destiny.com/abc?age=24</a> (参数不参与匹配)</li></ul><p>不能匹配</p><ul><li><a href="http://destiny.com/abc/" target="_blank" rel="noopener">http://destiny.com/abc/</a></li><li><a href="http://destiny.com/abcde" target="_blank" rel="noopener">http://destiny.com/abcde</a></li></ul><h3 id="，表示指定的正则表达式要区分大小写"><a href="#，表示指定的正则表达式要区分大小写" class="headerlink" title="~，表示指定的正则表达式要区分大小写"></a>~，表示指定的正则表达式要区分大小写</h3><blockquote><p>~表示按照正则表达式的语法与pattern进行匹配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name destiny.com;</span><br><span class="line">    location ~ ^/abc$ &#123;</span><br><span class="line">        # ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以匹配：</p><ul><li><a href="http://destiny.com/abc" target="_blank" rel="noopener">http://destiny.com/abc</a></li><li><a href="http://destiny.com/abc?age=24" target="_blank" rel="noopener">http://destiny.com/abc?age=24</a> (参数不参与匹配)</li></ul><p>不能匹配</p><ul><li><a href="http://destiny.com/ABC/" target="_blank" rel="noopener">http://destiny.com/ABC/</a></li><li><a href="http://destiny.com/abc/" target="_blank" rel="noopener">http://destiny.com/abc/</a></li><li><a href="http://destiny.com/abcde" target="_blank" rel="noopener">http://destiny.com/abcde</a></li></ul><h3 id="，表示正则表达式不区分大小写"><a href="#，表示正则表达式不区分大小写" class="headerlink" title="~*，表示正则表达式不区分大小写"></a>~*，表示正则表达式不区分大小写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name destiny.com;</span><br><span class="line">    location ~* ^/abc$ &#123;</span><br><span class="line">        # ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以匹配：</p><ul><li><a href="http://destiny.com/abc" target="_blank" rel="noopener">http://destiny.com/abc</a></li><li><a href="http://destiny.com/abc?age=24" target="_blank" rel="noopener">http://destiny.com/abc?age=24</a> (参数不参与匹配)</li><li><a href="http://destiny.com/ABC/" target="_blank" rel="noopener">http://destiny.com/ABC/</a></li></ul><p>不能匹配</p><ul><li><a href="http://destiny.com/abc/" target="_blank" rel="noopener">http://destiny.com/abc/</a></li><li><a href="http://destiny.com/abcde" target="_blank" rel="noopener">http://destiny.com/abcde</a></li></ul><h3 id="，表示正则表达式不区分大小写-1"><a href="#，表示正则表达式不区分大小写-1" class="headerlink" title="^~，表示正则表达式不区分大小写"></a>^~，表示正则表达式不区分大小写</h3><blockquote><p>类似于无修饰符的行为，也是以指定模式开始，但如果模式匹配，那么久停止搜索其他模式了。</p></blockquote><h3 id="，定义命名location区段，这些区段客户端不能访问，只可以由内部产生的请求来访问"><a href="#，定义命名location区段，这些区段客户端不能访问，只可以由内部产生的请求来访问" class="headerlink" title="@，定义命名location区段，这些区段客户端不能访问，只可以由内部产生的请求来访问"></a>@，定义命名location区段，这些区段客户端不能访问，只可以由内部产生的请求来访问</h3><h3 id="多个location的优先级问题"><a href="#多个location的优先级问题" class="headerlink" title="多个location的优先级问题"></a>多个location的优先级问题</h3><ol><li>带有<code>=</code>的精准匹配</li><li>没有修饰符的精准匹配</li><li>正则表达式按照定义顺序</li><li><code>^~</code>的开头匹配</li><li><code>~</code>或<code>~*</code> 修饰符</li><li>没有修饰符的，如果指定字符串与URI开头匹配</li></ol><h2 id="Http反向代理模块"><a href="#Http反向代理模块" class="headerlink" title="Http反向代理模块"></a>Http反向代理模块</h2><ul><li>Nginx通常被用作后端服务器的反向代理，这样就可以很方便的实现动静分离，以及负载均衡，从而大大提高服务器的处理能力。</li><li>Http Proxy模块，功能很多，最常用的是proxy_pass</li><li>如果要使用proxy_cache的话，需要集成第三方的ngx_cache_purge模块，用来清除指定的URL缓存。</li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><blockquote><p>普通的正向代理，为客户端提供代理服务</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[客户端]--&gt;|发出请求|B&#123;代理&#125;</span><br><span class="line">B --&gt; |代理访问并返回响应|A</span><br><span class="line">B --&gt; |代理访问|C[服务器A]</span><br><span class="line">B --&gt; |代理访问|D[服务器B]</span><br><span class="line">B --&gt; |代理访问|E[服务器C]</span><br></pre></td></tr></table></figure><blockquote><p>反向代理，为服务端提供代理服务</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[客户端A]--&gt;|先访问反向代理服务器|D&#123;代理服务器&#125;</span><br><span class="line">B[客户端B]--&gt;|先访问反向代理服务器|D&#123;代理服务器&#125;</span><br><span class="line">C[客户端C]--&gt;|先访问反向代理服务器|D&#123;代理服务器&#125;</span><br><span class="line">D --&gt; |代理客户端访问|E[服务器]</span><br><span class="line">E --&gt; |返回请求|D</span><br></pre></td></tr></table></figure><h3 id="Http代理模块"><a href="#Http代理模块" class="headerlink" title="Http代理模块"></a>Http代理模块</h3><pre><code>这个模块可以转发请求到其他的服务器location / {    proxy_pass          http://localhost:8080;  # 转发指令，把当前的指令转发到指定路径    proxy_set_header    X-Real-IP $remote_addr; # 设置http请求头}</code></pre><h3 id="proxy-buffer-size"><a href="#proxy-buffer-size" class="headerlink" title="proxy_buffer_size"></a>proxy_buffer_size</h3><pre><code>设置从被代理服务器(真实服务器)读取的第一部分应答的缓冲区大小</code></pre><p>语法：proxy_buffer_size the_size<br>通常情况下这部分应答中包含一个小的应答头</p><h3 id="proxy-buffering"><a href="#proxy-buffering" class="headerlink" title="proxy_buffering"></a>proxy_buffering</h3><pre><code>为后端服务器启用响应缓冲如果启用缓冲，Nginx假设被代理服务器能够非常快的传递响应，并将其放入缓冲区如果禁用缓冲，从后端传来的应答将立即被传送到客户端</code></pre><p>语法：proxy_buffering on|off</p><h3 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h3><pre><code>设置被代理服务器的地址和被映射的URL地址可以使用主机名或IP+端口号的形式</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Nginx是一款轻量级的Web服务器，也是一款轻量级的反向代理服务器
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;用途&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="Nginx" scheme="https://destinywang.github.io/blog/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://destinywang.github.io/blog/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://destinywang.github.io/blog/2018/04/01/hello-world/"/>
    <id>https://destinywang.github.io/blog/2018/04/01/hello-world/</id>
    <published>2018-03-31T18:20:50.230Z</published>
    <updated>2018-03-31T18:20:50.230Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
