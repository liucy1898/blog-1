<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://destinywang.github.io/blog/"/>
  <updated>2019-04-11T15:32:18.094Z</updated>
  <id>https://destinywang.github.io/blog/</id>
  
  <author>
    <name>destiny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL(1)--整体架构</title>
    <link href="https://destinywang.github.io/blog/2019/04/11/MySQL-1-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
    <id>https://destinywang.github.io/blog/2019/04/11/MySQL-1-整体架构/</id>
    <published>2019-04-11T15:13:36.000Z</published>
    <updated>2019-04-11T15:32:18.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-MySQL-逻辑架构"><a href="#1-MySQL-逻辑架构" class="headerlink" title="1. MySQL 逻辑架构"></a>1. MySQL 逻辑架构</h1><p><img src="https://user-images.githubusercontent.com/17758731/55969691-d475cc00-5cb0-11e9-8a8a-e4ada42a0c7d.png" alt="image"></p><ul><li>最上层是通用的 C/S 架构服务架构, 比如连接处理, 权限校验, 安全等.</li><li>第二层架构包含了大多数 MySQL 核心服务, 比如查询解析, 分析, 优化, 缓存以及所有的内置函数, 所有跨存储引擎的功能都在这一层实现: 存储过程, 触发器, 视图等.</li><li>第三层包含了存储引擎, 负责MySQL 中数据的存储以及读取, 服务器通过 API 和存储引擎进行通信, API 屏蔽了不同存储引擎的差异. 存储引擎 API 包含十几个底层函数, 可以执行如下操作: <code>开启一个事务</code>, <code>根据主键查找一行记录</code> 等操作, 不同存储引擎之间也不会相互通信, 只会简单的响应服务器的请求.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-MySQL-逻辑架构&quot;&gt;&lt;a href=&quot;#1-MySQL-逻辑架构&quot; class=&quot;headerlink&quot; title=&quot;1. MySQL 逻辑架构&quot;&gt;&lt;/a&gt;1. MySQL 逻辑架构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://user-image
      
    
    </summary>
    
      <category term="MySQL" scheme="https://destinywang.github.io/blog/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://destinywang.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Activiti源码分析(9)-XML解析</title>
    <link href="https://destinywang.github.io/blog/2019/04/08/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-9-XML%E8%A7%A3%E6%9E%90/"/>
    <id>https://destinywang.github.io/blog/2019/04/08/Activiti源码分析-9-XML解析/</id>
    <published>2019-04-08T14:32:21.000Z</published>
    <updated>2019-04-08T15:53:19.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-XML-解析"><a href="#1-XML-解析" class="headerlink" title="1. XML 解析"></a>1. XML 解析</h1><h2 id="1-1-DOM-模型"><a href="#1-1-DOM-模型" class="headerlink" title="1.1. DOM 模型"></a>1.1. DOM 模型</h2><ul><li>优点: 文档解析的时候允许客户端编辑和更新 XML 文档的内容, 并可以随机访问文档中定义的元素数据.</li><li>缺点: 文档解析的时候需要将 XML 一次性加载到内存, 进而映射成 Document 对象中的树形结构, 在解析大文件的时候内存占用大, 元素遍历查找慢, 性能容易成为瓶颈.</li></ul><h2 id="1-2-SAX-模型"><a href="#1-2-SAX-模型" class="headerlink" title="1.2. SAX 模型"></a>1.2. SAX 模型</h2><ul><li>优点: 该方式解析文档的时候, 每一次操作只会将解析的节点放置到内存中, 从头部开始, 读取一段处理一段, 内存占用小.</li><li>缺点: 解析文档的时候文档是只读的, 不能编辑, 并且文件流只能前进不能后退</li></ul><p>在 Activiti 中, 由于 XML 完全由用户的输入决定, 无法控制器大小, 因此选用 SAX 模型</p><h1 id="2-文档转换器"><a href="#2-文档转换器" class="headerlink" title="2. 文档转换器"></a>2. 文档转换器</h1><p>文档转换器可以将文档转换为 BpmnModel, 也可以将 BpmnModel 转换为文档</p><p>文档解析器: BpmnXMLConverter</p><p>解析器内部持有所有 <code>元素解析器</code></p><ul><li>元素解析器与元素之间一一对应</li><li>任务节点的元素名称是 UserTask, 因此对应的解析器为 <code>UserTaskXMLConverter</code></li><li>连线的元素名称是 SequenceFlow, 对应的解析器为 <code>SequenceFlowXMLConverter</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-XML-解析&quot;&gt;&lt;a href=&quot;#1-XML-解析&quot; class=&quot;headerlink&quot; title=&quot;1. XML 解析&quot;&gt;&lt;/a&gt;1. XML 解析&lt;/h1&gt;&lt;h2 id=&quot;1-1-DOM-模型&quot;&gt;&lt;a href=&quot;#1-1-DOM-模型&quot; class
      
    
    </summary>
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/categories/Activiti/"/>
    
      <category term="源码" scheme="https://destinywang.github.io/blog/categories/Activiti/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti源码分析(7)-ID生成器</title>
    <link href="https://destinywang.github.io/blog/2019/03/26/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-7-ID%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://destinywang.github.io/blog/2019/03/26/Activiti源码分析-7-ID生成器/</id>
    <published>2019-03-26T14:52:05.000Z</published>
    <updated>2019-03-26T15:26:36.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-DbIdGenerator"><a href="#1-DbIdGenerator" class="headerlink" title="1. DbIdGenerator"></a>1. <code>DbIdGenerator</code></h1><p><img src="https://user-images.githubusercontent.com/17758731/55007318-2e706380-501a-11e9-9a32-8e98d9944b66.png" alt="image"></p><p>Activiti 默认采用数据库来实现强一致的发号器 <code>DbIdGenerator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbIdGenerator</span> <span class="keyword">implements</span> <span class="title">IdGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> idBlockSize;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">long</span> nextId;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">long</span> lastId = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> CommandExecutor commandExecutor;</span><br><span class="line">  <span class="keyword">protected</span> CommandConfig commandConfig;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastId &lt; nextId) &#123;</span><br><span class="line">      getNewBlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> _nextId = nextId++;</span><br><span class="line">    <span class="keyword">return</span> Long.toString(_nextId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getNewBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IdBlock idBlock = commandExecutor.execute(commandConfig, <span class="keyword">new</span> GetNextIdBlockCmd(idBlockSize));</span><br><span class="line">    <span class="keyword">this</span>.nextId = idBlock.getNextId();</span><br><span class="line">    <span class="keyword">this</span>.lastId = idBlock.getLastId();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIdBlockSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> idBlockSize;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdBlockSize</span><span class="params">(<span class="keyword">int</span> idBlockSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.idBlockSize = idBlockSize;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CommandExecutor <span class="title">getCommandExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commandExecutor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommandExecutor</span><span class="params">(CommandExecutor commandExecutor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.commandExecutor = commandExecutor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CommandConfig <span class="title">getCommandConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commandConfig;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommandConfig</span><span class="params">(CommandConfig commandConfig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.commandConfig = commandConfig;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DbIdGenerator 实现了 <code>getNextId</code> 方法, 用于对应用范围内所有的实体对象分配 id, 我们就以这个方法为起点, 分析默认的发号器逻辑.</p><h2 id="1-1-DbIdGenerator-getNextId"><a href="#1-1-DbIdGenerator-getNextId" class="headerlink" title="1.1. DbIdGenerator#getNextId()"></a>1.1. DbIdGenerator#getNextId()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastId &lt; nextId) &#123;</span><br><span class="line">        getNewBlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> _nextId = nextId++;</span><br><span class="line">    <span class="keyword">return</span> Long.toString(_nextId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>比较内部持有的两个布局变量 <code>lastId</code> 和 <code>nextId</code><ol><li>如果 <code>lastId</code> 已经小于 <code>nextId</code></li><li>获取一个新的 Block</li></ol></li><li>获得当前的 <code>_nextId</code>, 并转换成字符串, 同时持有的局部变量 <code>nextId</code> 自增</li></ol><h2 id="1-2-DbIdGenerator-getNewBlock"><a href="#1-2-DbIdGenerator-getNewBlock" class="headerlink" title="1.2. DbIdGenerator#getNewBlock()"></a>1.2. DbIdGenerator#getNewBlock()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getNewBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IdBlock idBlock = commandExecutor.execute(commandConfig, <span class="keyword">new</span> GetNextIdBlockCmd(idBlockSize));</span><br><span class="line">    <span class="keyword">this</span>.nextId = idBlock.getNextId();</span><br><span class="line">    <span class="keyword">this</span>.lastId = idBlock.getLastId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取一个新的 <code>IdBlock</code> 对象</li><li>分别将该对象的 <code>nextId</code> 和 <code>lastId</code> 赋值给自身持有的同名字段</li></ol><h2 id="1-3-GetNextIdBlockCmd-execute-CommandContext-commandContext"><a href="#1-3-GetNextIdBlockCmd-execute-CommandContext-commandContext" class="headerlink" title="1.3. GetNextIdBlockCmd#execute(CommandContext commandContext)"></a>1.3. GetNextIdBlockCmd#execute(CommandContext commandContext)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IdBlock <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">    PropertyEntity property = (PropertyEntity) commandContext.getPropertyEntityManager().findById(<span class="string">"next.dbid"</span>);</span><br><span class="line">    <span class="keyword">long</span> oldValue = Long.parseLong(property.getValue());</span><br><span class="line">    <span class="keyword">long</span> newValue = oldValue + idBlockSize;</span><br><span class="line">    property.setValue(Long.toString(newValue));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IdBlock(oldValue, newValue - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>调用 <code>PropertyEntityManager</code>, 从 <code>ACT_GE_PROPERTY</code> 表中获取 <code>next.dbid</code> 字段的值</li><li>将旧值转换成 long 类型并增加 <code>idBlockSize</code> 长度得到新值, 其中 <code>idBlockSize</code> 通过调用链追踪到在 <code>ProcessEngineConfiguration</code> 将其设置为 2500, 并调用命令类的初始化</li><li>将新值设置进查询到的 property 对象</li><li>返回新的 <code>IdBlock</code> 对象</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-DbIdGenerator&quot;&gt;&lt;a href=&quot;#1-DbIdGenerator&quot; class=&quot;headerlink&quot; title=&quot;1. DbIdGenerator&quot;&gt;&lt;/a&gt;1. &lt;code&gt;DbIdGenerator&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;&lt;im
      
    
    </summary>
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/categories/Activiti/"/>
    
      <category term="源码" scheme="https://destinywang.github.io/blog/categories/Activiti/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti源码分析(8)-发起流程实例</title>
    <link href="https://destinywang.github.io/blog/2019/03/09/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-8-%E5%8F%91%E8%B5%B7%E6%B5%81%E7%A8%8B%E5%AE%9E%E4%BE%8B/"/>
    <id>https://destinywang.github.io/blog/2019/03/09/Activiti源码分析-8-发起流程实例/</id>
    <published>2019-03-09T10:48:39.000Z</published>
    <updated>2019-03-10T05:03:49.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h1><h2 id="1-1-启动流程"><a href="#1-1-启动流程" class="headerlink" title="1.1. 启动流程"></a>1.1. 启动流程</h2><ol><li>操作数据库的 ACT_RU_EXECUTION 表, 如果是用户任务节点, 同时也会在 ACT_RU_TASK 表添加一条记录;</li><li></li></ol><h2 id="1-2-流程实例"><a href="#1-2-流程实例" class="headerlink" title="1.2. 流程实例"></a>1.2. 流程实例</h2><ol><li>代表流程定义的执行实例</li><li>一个流程实例包括了所有的运行节点</li><li>流程实例表示一个流程从开始到结束的最大流程分支</li><li>流程实例也被称为执行实例根节点</li></ol><p>在 Activiti 对应的接口为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProcessInstance</span> <span class="keyword">extends</span> <span class="title">Execution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出 ProcessInstance 就是 Execution</p><h2 id="1-3-执行实例"><a href="#1-3-执行实例" class="headerlink" title="1.3. 执行实例"></a>1.3. 执行实例</h2><ol><li>启动流程的时候会首先创建流程实例, 然后创建执行实例</li><li>流程运转的过程中永远执行的是自己对应的执行实例</li><li>当所有的执行实例按照规则完毕之后, 对应的流程随之结束</li><li>Activiti 使用 <code>Execution</code> 对象去描述流程执行的每一个节点</li><li>流程按照流程定义的规则执行一次的过程, 就可以表示执行对象 <code>Execution</code></li><li>一个流程中, 执行对象可以存在多个, 但流程实例只能有一个</li><li>执行实例的父级 / 父级的父级为流程实例</li></ol><h2 id="1-4-概念演示"><a href="#1-4-概念演示" class="headerlink" title="1.4. 概念演示"></a>1.4. 概念演示</h2><h3 id="1-4-1-简单流程实例"><a href="#1-4-1-简单流程实例" class="headerlink" title="1.4.1. 简单流程实例"></a>1.4.1. 简单流程实例</h3><p><img src="https://user-images.githubusercontent.com/17758731/54070715-5d5aab80-429e-11e9-815e-bfc25e01843c.png" alt="image"></p><ol><li>发起流程的时候, 会先创建一个流程实例, 然后创建执行实例;</li><li>随着流程的运转, 执行实例会不断更新;</li><li>直到流程执行完毕(走到结束节点), 对应执行实例会结束, 此时流程实例也结束.</li></ol><h3 id="1-4-2-有分支的流程实例"><a href="#1-4-2-有分支的流程实例" class="headerlink" title="1.4.2. 有分支的流程实例"></a>1.4.2. 有分支的流程实例</h3><p><img src="https://user-images.githubusercontent.com/17758731/54070799-bf67e080-429f-11e9-9264-556b380bc5cc.png" alt="image"></p><ol><li>当流程进入并行网关之后, 会创建两个执行实例</li><li>当两个执行实例都结束之后, 再创建第三个执行实例</li></ol><h1 id="2-RuntimeServiceImpl-startProcessInstanceByKey-String-processDefinitionKey"><a href="#2-RuntimeServiceImpl-startProcessInstanceByKey-String-processDefinitionKey" class="headerlink" title="2. RuntimeServiceImpl#startProcessInstanceByKey(String processDefinitionKey)"></a>2. RuntimeServiceImpl#startProcessInstanceByKey(String processDefinitionKey)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessInstance <span class="title">startProcessInstanceByKey</span><span class="params">(String processDefinitionKey)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commandExecutor.execute(<span class="keyword">new</span> StartProcessInstanceCmd&lt;ProcessInstance&gt;(processDefinitionKey, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-StartProcessInstanceCmd-execution-CommandContext-commandContext"><a href="#2-1-StartProcessInstanceCmd-execution-CommandContext-commandContext" class="headerlink" title="2.1. StartProcessInstanceCmd#execution(CommandContext commandContext)"></a>2.1. StartProcessInstanceCmd#execution(CommandContext commandContext)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessInstance <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">    DeploymentManager deploymentCache = commandContext.getProcessEngineConfiguration().getDeploymentManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the process definition</span></span><br><span class="line">    ProcessDefinition processDefinition = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (processDefinitionId != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        processDefinition = deploymentCache.findDeployedProcessDefinitionById(processDefinitionId);</span><br><span class="line">        <span class="keyword">if</span> (processDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiObjectNotFoundException(<span class="string">"No process definition found for id = '"</span> + processDefinitionId + <span class="string">"'"</span>, ProcessDefinition.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (processDefinitionKey != <span class="keyword">null</span> &amp;&amp; (tenantId == <span class="keyword">null</span> || ProcessEngineConfiguration.NO_TENANT_ID.equals(tenantId))) &#123;</span><br><span class="line"></span><br><span class="line">        processDefinition = deploymentCache.findDeployedLatestProcessDefinitionByKey(processDefinitionKey);</span><br><span class="line">        <span class="keyword">if</span> (processDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiObjectNotFoundException(<span class="string">"No process definition found for key '"</span> + processDefinitionKey + <span class="string">"'"</span>, ProcessDefinition.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (processDefinitionKey != <span class="keyword">null</span> &amp;&amp; tenantId != <span class="keyword">null</span> &amp;&amp; !ProcessEngineConfiguration.NO_TENANT_ID.equals(tenantId)) &#123;</span><br><span class="line"></span><br><span class="line">            processDefinition = deploymentCache.findDeployedLatestProcessDefinitionByKeyAndTenantId(processDefinitionKey, tenantId);</span><br><span class="line">            <span class="keyword">if</span> (processDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiObjectNotFoundException(<span class="string">"No process definition found for key '"</span> + processDefinitionKey + <span class="string">"' for tenant identifier "</span> + tenantId, ProcessDefinition.class);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"processDefinitionKey and processDefinitionId are null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();</span><br><span class="line">    ProcessInstance processInstance = createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables, transientVariables);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> processInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>初始化 processDefinition 对象, 由于 <code>startProcessInstanceByXX</code> 系列方法有多种参数, 因此一下三种条件都可以实现:<ol><li>如果 processDefinitionId 不为空, 通过该 id 查询流程定义;</li><li>如果 processDefinitionKey 不为空, 并且 <code>tenantId</code> 为空, 就通过 <code>processDefinitionKey</code> 查询最新的流程定义;</li><li>如果 processDefinitionKey 不为空, 并且 <code>tenantId</code> 也不为空, 就通过这两个参数一起查询最新的流程定义;</li></ol></li><li>获取 <code>processInstanceHelper</code> 对象</li><li>执行创建流程逻辑并返回</li></ol><h2 id="2-2-StartProcessInstanceCmd-createAndStartProcessInstance-ProcessDefinition-processDefinition-String-businessKey-String-processInstanceName-Map-lt-String-Object-gt-variables-Map-lt-String-Object-gt-transientVariables"><a href="#2-2-StartProcessInstanceCmd-createAndStartProcessInstance-ProcessDefinition-processDefinition-String-businessKey-String-processInstanceName-Map-lt-String-Object-gt-variables-Map-lt-String-Object-gt-transientVariables" class="headerlink" title="2.2. StartProcessInstanceCmd#createAndStartProcessInstance(ProcessDefinition processDefinition, String businessKey, String processInstanceName, Map&lt;String,Object&gt; variables, Map&lt;String, Object&gt; transientVariables)"></a>2.2. StartProcessInstanceCmd#createAndStartProcessInstance(ProcessDefinition processDefinition, String businessKey, String processInstanceName, Map&lt;String,Object&gt; variables, Map&lt;String, Object&gt; transientVariables)</h2><p>参数较多, 先解释下参数:</p><ul><li>processDefinition: 流程定义对象</li><li>businessKey: 业务标识</li><li>processInstanceName: 需要设置的流程名称</li><li>variables: 表单数据(会持久化到变量表中)</li><li>transientVariables: 不需要持久化的变量表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ProcessInstance <span class="title">createAndStartProcessInstance</span><span class="params">(ProcessDefinition processDefinition, String businessKey, String processInstanceName, </span></span></span><br><span class="line"><span class="function"><span class="params">        Map&lt;String,Object&gt; variables, Map&lt;String, Object&gt; transientVariables)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> processInstanceHelper.createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables, transientVariables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-ProcessInstanceHelper-createAndStartProcessInstance-ProcessDefinition-processDefinition-String-businessKey-String-processInstanceName-Map-lt-String-Object-gt-variables-Map-lt-String-Object-gt-transientVariables-boolean-startProcessInstance"><a href="#2-3-ProcessInstanceHelper-createAndStartProcessInstance-ProcessDefinition-processDefinition-String-businessKey-String-processInstanceName-Map-lt-String-Object-gt-variables-Map-lt-String-Object-gt-transientVariables-boolean-startProcessInstance" class="headerlink" title="2.3. ProcessInstanceHelper#createAndStartProcessInstance(ProcessDefinition processDefinition, String businessKey, String processInstanceName, Map&lt;String, Object&gt; variables, Map&lt;String, Object&gt; transientVariables, boolean startProcessInstance)"></a>2.3. ProcessInstanceHelper#createAndStartProcessInstance(ProcessDefinition processDefinition, String businessKey, String processInstanceName, Map&lt;String, Object&gt; variables, Map&lt;String, Object&gt; transientVariables, boolean startProcessInstance)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ProcessInstance <span class="title">createAndStartProcessInstance</span><span class="params">(ProcessDefinition processDefinition,</span></span></span><br><span class="line"><span class="function"><span class="params">      String businessKey, String processInstanceName,</span></span></span><br><span class="line"><span class="function"><span class="params">      Map&lt;String, Object&gt; variables, Map&lt;String, Object&gt; transientVariables, <span class="keyword">boolean</span> startProcessInstance)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    CommandContext commandContext = Context.getCommandContext(); <span class="comment">// Todo: ideally, context should be passed here</span></span><br><span class="line">    <span class="keyword">if</span> (Activiti5Util.isActiviti5ProcessDefinition(commandContext, processDefinition)) &#123;</span><br><span class="line">        Activiti5CompatibilityHandler activiti5CompatibilityHandler = Activiti5Util.getActiviti5CompatibilityHandler();</span><br><span class="line">        <span class="keyword">return</span> activiti5CompatibilityHandler.startProcessInstance(processDefinition.getKey(), processDefinition.getId(),</span><br><span class="line">                variables, businessKey, processDefinition.getTenantId(), processInstanceName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do not start process a process instance if the process definition is suspended</span></span><br><span class="line">    <span class="keyword">if</span> (ProcessDefinitionUtil.isProcessDefinitionSuspended(processDefinition.getId())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"Cannot start process instance. Process definition "</span> + processDefinition.getName() + <span class="string">" (id = "</span> + processDefinition.getId() + <span class="string">") is suspended"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get model from cache</span></span><br><span class="line">    Process process = ProcessDefinitionUtil.getProcess(processDefinition.getId());</span><br><span class="line">    <span class="keyword">if</span> (process == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"Cannot start process instance. Process model "</span> + processDefinition.getName() + <span class="string">" (id = "</span> + processDefinition.getId() + <span class="string">") could not be found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FlowElement initialFlowElement = process.getInitialFlowElement();</span><br><span class="line">    <span class="keyword">if</span> (initialFlowElement == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"No start element found for process definition "</span> + processDefinition.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> createAndStartProcessInstanceWithInitialFlowElement(processDefinition, businessKey,</span><br><span class="line">            processInstanceName, initialFlowElement, process, variables, transientVariables, startProcessInstance);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>如果流程定义是 Activiti5 风格的, 执行 Activiti5 相关的兼容代码</li><li>如果流程定义已经被挂起, 那么抛出异常</li><li>根据 processDefinitionId 获取 Process 对象, 如果失败抛出异常</li><li>获取 Process 对象的 <code>initialFlowElement</code></li><li>创建并开启流程实例, 并返回结果</li></ol><h3 id="2-3-1-ProcessDefinitionUtil-getProcess-String-processDefinitionId"><a href="#2-3-1-ProcessDefinitionUtil-getProcess-String-processDefinitionId" class="headerlink" title="2.3.1. ProcessDefinitionUtil#getProcess(String processDefinitionId)"></a>2.3.1. ProcessDefinitionUtil#getProcess(String processDefinitionId)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Process <span class="title">getProcess</span><span class="params">(String processDefinitionId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Context.getProcessEngineConfiguration() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Activiti5Util.getActiviti5CompatibilityHandler().getProcessDefinitionProcessObject(processDefinitionId);</span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DeploymentManager deploymentManager = Context.getProcessEngineConfiguration().getDeploymentManager();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// This will check the cache in the findDeployedProcessDefinitionById and resolveProcessDefinition method</span></span><br><span class="line">        ProcessDefinition processDefinitionEntity = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);</span><br><span class="line">        <span class="keyword">return</span> deploymentManager.resolveProcessDefinition(processDefinitionEntity).getProcess();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-DeploymentManager-findDeployedProcessDefinitionById-String-processDefinitionId"><a href="#2-3-2-DeploymentManager-findDeployedProcessDefinitionById-String-processDefinitionId" class="headerlink" title="2.3.2. DeploymentManager#findDeployedProcessDefinitionById(String processDefinitionId)"></a>2.3.2. DeploymentManager#findDeployedProcessDefinitionById(String processDefinitionId)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessDefinition <span class="title">findDeployedProcessDefinitionById</span><span class="params">(String processDefinitionId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (processDefinitionId == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"Invalid process definition id : null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// first try the cache</span></span><br><span class="line">    ProcessDefinitionCacheEntry cacheEntry = processDefinitionCache.get(processDefinitionId);</span><br><span class="line">    ProcessDefinition processDefinition = cacheEntry != <span class="keyword">null</span> ? cacheEntry.getProcessDefinition() : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (processDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">        processDefinition = processDefinitionEntityManager.findById(processDefinitionId);</span><br><span class="line">        <span class="keyword">if</span> (processDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiObjectNotFoundException(<span class="string">"no deployed process definition found with id '"</span> + processDefinitionId + <span class="string">"'"</span>, ProcessDefinition.class);</span><br><span class="line">        &#125;</span><br><span class="line">        processDefinition = resolveProcessDefinition(processDefinition).getProcessDefinition();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> processDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先从缓存中查找</li><li>如果缓存没有, 继续从 DB 中查找</li><li>将 ProcessDefinition 转换为 Process 并返回</li></ol><h3 id="2-3-3-DeploymentManager-resolveProcessDefinition-ProcessDefinition-processDefinition"><a href="#2-3-3-DeploymentManager-resolveProcessDefinition-ProcessDefinition-processDefinition" class="headerlink" title="2.3.3. DeploymentManager#resolveProcessDefinition(ProcessDefinition processDefinition)"></a>2.3.3. DeploymentManager#resolveProcessDefinition(ProcessDefinition processDefinition)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessDefinitionCacheEntry <span class="title">resolveProcessDefinition</span><span class="params">(ProcessDefinition processDefinition)</span> </span>&#123;</span><br><span class="line">    String processDefinitionId = processDefinition.getId();</span><br><span class="line">    String deploymentId = processDefinition.getDeploymentId();</span><br><span class="line"></span><br><span class="line">    ProcessDefinitionCacheEntry cachedProcessDefinition = processDefinitionCache.get(processDefinitionId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cachedProcessDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">        CommandContext commandContext = Context.getCommandContext();</span><br><span class="line">        <span class="keyword">if</span> (commandContext.getProcessEngineConfiguration().isActiviti5CompatibilityEnabled() &amp;&amp; </span><br><span class="line">            Activiti5Util.isActiviti5ProcessDefinition(Context.getCommandContext(), processDefinition)) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">return</span> Activiti5Util.getActiviti5CompatibilityHandler().resolveProcessDefinition(processDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        DeploymentEntity deployment = deploymentEntityManager.findById(deploymentId);</span><br><span class="line">        deployment.setNew(<span class="keyword">false</span>);</span><br><span class="line">        deploy(deployment, <span class="keyword">null</span>);</span><br><span class="line">        cachedProcessDefinition = processDefinitionCache.get(processDefinitionId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cachedProcessDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"deployment '"</span> + deploymentId + <span class="string">"' didn't put process definition '"</span> + processDefinitionId + <span class="string">"' in the cache"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cachedProcessDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先尝试从缓存中获取流程定义<ol><li>如果为空<ol><li>如果是 Activiti5 风格的配置</li><li>通过 Activiti5 的方式获取并返回</li></ol></li><li>尝试从 DB 中获取, 补充到缓存中</li><li>再从缓存中获取</li><li>返回</li></ol></li></ol><h2 id="2-4-ProcessInstanceHelper-createAndStartProcessInstanceWithInitialFlowElement-ProcessDefinition-processDefinition-String-businessKey-String-processInstanceName-FlowElement-initialFlowElement-Process-process-Map-lt-String-Object-gt-variables-Map-lt-String-Object-gt-transientVariables-boolean-startProcessInstance"><a href="#2-4-ProcessInstanceHelper-createAndStartProcessInstanceWithInitialFlowElement-ProcessDefinition-processDefinition-String-businessKey-String-processInstanceName-FlowElement-initialFlowElement-Process-process-Map-lt-String-Object-gt-variables-Map-lt-String-Object-gt-transientVariables-boolean-startProcessInstance" class="headerlink" title="2.4. ProcessInstanceHelper#createAndStartProcessInstanceWithInitialFlowElement(ProcessDefinition processDefinition, String businessKey, String processInstanceName, FlowElement initialFlowElement, Process process, Map&lt;String, Object&gt; variables, Map&lt;String, Object&gt; transientVariables, boolean startProcessInstance)"></a>2.4. ProcessInstanceHelper#createAndStartProcessInstanceWithInitialFlowElement(ProcessDefinition processDefinition, String businessKey, String processInstanceName, FlowElement initialFlowElement, Process process, Map&lt;String, Object&gt; variables, Map&lt;String, Object&gt; transientVariables, boolean startProcessInstance)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessInstance <span class="title">createAndStartProcessInstanceWithInitialFlowElement</span><span class="params">(ProcessDefinition processDefinition,</span></span></span><br><span class="line"><span class="function"><span class="params">        String businessKey, String processInstanceName, FlowElement initialFlowElement,</span></span></span><br><span class="line"><span class="function"><span class="params">        Process process, Map&lt;String, Object&gt; variables, Map&lt;String, Object&gt; transientVariables, <span class="keyword">boolean</span> startProcessInstance)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    CommandContext commandContext = Context.getCommandContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the process instance</span></span><br><span class="line">    String initiatorVariableName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (initialFlowElement <span class="keyword">instanceof</span> StartEvent) &#123;</span><br><span class="line">        initiatorVariableName = ((StartEvent) initialFlowElement).getInitiator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ExecutionEntity processInstance = commandContext.getExecutionEntityManager()</span><br><span class="line">            .createProcessInstanceExecution(processDefinition, businessKey, processDefinition.getTenantId(), initiatorVariableName);</span><br><span class="line"></span><br><span class="line">    commandContext.getHistoryManager().recordProcessInstanceStart(processInstance, initialFlowElement);</span><br><span class="line"></span><br><span class="line">    processInstance.setVariables(processDataObjects(process.getDataObjects()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the variables passed into the start command</span></span><br><span class="line">    <span class="keyword">if</span> (variables != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String varName : variables.keySet()) &#123;</span><br><span class="line">            processInstance.setVariable(varName, variables.get(varName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (transientVariables != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (String varName : transientVariables.keySet()) &#123;</span><br><span class="line">        processInstance.setTransientVariable(varName, transientVariables.get(varName));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set processInstance name</span></span><br><span class="line">    <span class="keyword">if</span> (processInstanceName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        processInstance.setName(processInstanceName);</span><br><span class="line">        commandContext.getHistoryManager().recordProcessInstanceNameChange(processInstance.getId(), processInstanceName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fire events</span></span><br><span class="line">    <span class="keyword">if</span> (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) &#123;</span><br><span class="line">        Context.getProcessEngineConfiguration().getEventDispatcher()</span><br><span class="line">                .dispatchEvent(ActivitiEventBuilder.createEntityWithVariablesEvent(ActivitiEventType.ENTITY_INITIALIZED, processInstance, variables, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the first execution that will visit all the process definition elements</span></span><br><span class="line">    ExecutionEntity execution = commandContext.getExecutionEntityManager().createChildExecution(processInstance);</span><br><span class="line">    execution.setCurrentFlowElement(initialFlowElement);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (startProcessInstance) &#123;</span><br><span class="line">        startProcessInstance(processInstance, commandContext, variables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> processInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建流程实例(父级 Execution)</li><li>在历史流程表中将流程实例标记为开始</li><li>将所有 <code>DataObject</code> 转换为 Map&lt;String, Object&gt;, 并设置为流程实例的变量</li><li>将创建流程时填入的表单信息设置为变量</li><li>为流程变量设置名称</li><li>触发事件</li><li>创建第一个将访问所有流程定义元素的 <code>Execution</code></li><li>并将该 Execution 对象的当前元素设置为传入的初始化元素</li><li>如果需要立即开启<ol><li>调用开启流程实例方法</li></ol></li><li>返回该流程实例</li></ol><h3 id="2-4-1-ExecutionEntityManagerImpl-createProcessInstanceExecution-ProcessDefinition-processDefinition-String-businessKey-String-tenantId-String-initiatorVariableName"><a href="#2-4-1-ExecutionEntityManagerImpl-createProcessInstanceExecution-ProcessDefinition-processDefinition-String-businessKey-String-tenantId-String-initiatorVariableName" class="headerlink" title="2.4.1. ExecutionEntityManagerImpl#createProcessInstanceExecution(ProcessDefinition processDefinition, String businessKey, String tenantId, String initiatorVariableName)"></a>2.4.1. ExecutionEntityManagerImpl#createProcessInstanceExecution(ProcessDefinition processDefinition, String businessKey, String tenantId, String initiatorVariableName)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ExecutionEntity <span class="title">createProcessInstanceExecution</span><span class="params">(ProcessDefinition processDefinition, String businessKey, String tenantId, String initiatorVariableName)</span> </span>&#123;</span><br><span class="line">    ExecutionEntity processInstanceExecution = executionDataManager.create();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isExecutionRelatedEntityCountEnabledGlobally()) &#123;</span><br><span class="line">        ((CountingExecutionEntity) processInstanceExecution).setCountEnabled(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    processInstanceExecution.setProcessDefinitionId(processDefinition.getId());</span><br><span class="line">    processInstanceExecution.setProcessDefinitionKey(processDefinition.getKey());</span><br><span class="line">    processInstanceExecution.setProcessDefinitionName(processDefinition.getName());</span><br><span class="line">    processInstanceExecution.setProcessDefinitionVersion(processDefinition.getVersion());</span><br><span class="line">    processInstanceExecution.setBusinessKey(businessKey);</span><br><span class="line">    processInstanceExecution.setScope(<span class="keyword">true</span>); <span class="comment">// process instance is always a scope for all child executions</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Inherit tenant id (if any)</span></span><br><span class="line">    <span class="keyword">if</span> (tenantId != <span class="keyword">null</span>) &#123;</span><br><span class="line">        processInstanceExecution.setTenantId(tenantId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String authenticatedUserId = Authentication.getAuthenticatedUserId();</span><br><span class="line"></span><br><span class="line">    processInstanceExecution.setStartTime(Context.getProcessEngineConfiguration().getClock().getCurrentTime());</span><br><span class="line">    processInstanceExecution.setStartUserId(authenticatedUserId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Store in database</span></span><br><span class="line">    insert(processInstanceExecution, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (initiatorVariableName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        processInstanceExecution.setVariable(initiatorVariableName, authenticatedUserId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Need to be after insert, cause we need the id</span></span><br><span class="line">    processInstanceExecution.setProcessInstanceId(processInstanceExecution.getId());</span><br><span class="line">    processInstanceExecution.setRootProcessInstanceId(processInstanceExecution.getId());</span><br><span class="line">    <span class="keyword">if</span> (authenticatedUserId != <span class="keyword">null</span>) &#123;</span><br><span class="line">        getIdentityLinkEntityManager().addIdentityLink(processInstanceExecution, authenticatedUserId, <span class="keyword">null</span>, IdentityLinkType.STARTER);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Fire events</span></span><br><span class="line">    <span class="keyword">if</span> (getEventDispatcher().isEnabled()) &#123;</span><br><span class="line">        getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED, processInstanceExecution));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> processInstanceExecution;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建一个新的 <code>ExecutionEntity</code> 对象并初始化</li><li>获取创建人 ID 和开始时间</li><li>插入该 <code>ExecutionEntity</code></li><li>触发事件</li></ol><h3 id="2-4-2-DefaultHistoryManager-recordProcessInstanceStart-ExecutionEntity-processInstance-FlowElement-startElement"><a href="#2-4-2-DefaultHistoryManager-recordProcessInstanceStart-ExecutionEntity-processInstance-FlowElement-startElement" class="headerlink" title="2.4.2. DefaultHistoryManager#recordProcessInstanceStart(ExecutionEntity processInstance, FlowElement startElement)"></a>2.4.2. DefaultHistoryManager#recordProcessInstanceStart(ExecutionEntity processInstance, FlowElement startElement)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recordProcessInstanceStart</span><span class="params">(ExecutionEntity processInstance, FlowElement startElement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isHistoryLevelAtLeast(HistoryLevel.ACTIVITY)) &#123;</span><br><span class="line">        HistoricProcessInstanceEntity historicProcessInstance = getHistoricProcessInstanceEntityManager().create(processInstance);</span><br><span class="line">        historicProcessInstance.setStartActivityId(startElement.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Insert historic process-instance</span></span><br><span class="line">        getHistoricProcessInstanceEntityManager().insert(historicProcessInstance, <span class="keyword">false</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// Fire event</span></span><br><span class="line">        ActivitiEventDispatcher activitiEventDispatcher = getEventDispatcher();</span><br><span class="line">        <span class="keyword">if</span> (activitiEventDispatcher != <span class="keyword">null</span> &amp;&amp; activitiEventDispatcher.isEnabled()) &#123;</span><br><span class="line">            activitiEventDispatcher.dispatchEvent(</span><br><span class="line">                    ActivitiEventBuilder.createEntityEvent(ActivitiEventType.HISTORIC_PROCESS_INSTANCE_CREATED, historicProcessInstance));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>根据传入的 <code>processInstance</code> 构造 <code>HistoricProcessInstanceEntity</code> 对象</li><li>向历史表插入该对象</li><li>将给定的事件分派给任何已注册的侦听器</li></ol><h3 id="2-4-3-ExecutionEntityManagerImpl-createChildExecution-ExecutionEntity-parentExecutionEntity"><a href="#2-4-3-ExecutionEntityManagerImpl-createChildExecution-ExecutionEntity-parentExecutionEntity" class="headerlink" title="2.4.3. ExecutionEntityManagerImpl#createChildExecution(ExecutionEntity parentExecutionEntity)"></a>2.4.3. ExecutionEntityManagerImpl#createChildExecution(ExecutionEntity parentExecutionEntity)</h3><p>创建第一个将访问所有流程定义元素的执行对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ExecutionEntity <span class="title">createChildExecution</span><span class="params">(ExecutionEntity parentExecutionEntity)</span> </span>&#123;</span><br><span class="line">    ExecutionEntity childExecution = executionDataManager.create();</span><br><span class="line">    inheritCommonProperties(parentExecutionEntity, childExecution);</span><br><span class="line">    childExecution.setParent(parentExecutionEntity);</span><br><span class="line">    childExecution.setProcessDefinitionId(parentExecutionEntity.getProcessDefinitionId());</span><br><span class="line">    childExecution.setProcessDefinitionKey(parentExecutionEntity.getProcessDefinitionKey());</span><br><span class="line">    childExecution.setProcessInstanceId(parentExecutionEntity.getProcessInstanceId() != <span class="keyword">null</span> </span><br><span class="line">            ? parentExecutionEntity.getProcessInstanceId() : parentExecutionEntity.getId());</span><br><span class="line">    childExecution.setScope(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// manage the bidirectional parent-child relation</span></span><br><span class="line">    parentExecutionEntity.addChildExecution(childExecution);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Insert the child execution</span></span><br><span class="line">    insert(childExecution, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Child execution &#123;&#125; created with parent &#123;&#125;"</span>, childExecution, parentExecutionEntity.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getEventDispatcher().isEnabled()) &#123;</span><br><span class="line">        getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED, childExecution));</span><br><span class="line">        getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED, childExecution));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> childExecution;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>创建一个新的 <code>ExecutionEntity</code> 对象, 并继承父 ExecutionEntity 的公共配置</li><li>设置父子关系</li><li>插入子 ExecutionEntity</li><li>将指定事件分派给已注册的监听器</li></ol><h3 id="2-4-4-ExecutionEntityManagerImpl-startProcessInstance-ExecutionEntity-processInstance-CommandContext-commandContext-Map-lt-String-Object-gt-variables"><a href="#2-4-4-ExecutionEntityManagerImpl-startProcessInstance-ExecutionEntity-processInstance-CommandContext-commandContext-Map-lt-String-Object-gt-variables" class="headerlink" title="2.4.4. ExecutionEntityManagerImpl#startProcessInstance(ExecutionEntity processInstance, CommandContext commandContext, Map&lt;String, Object&gt; variables)"></a>2.4.4. ExecutionEntityManagerImpl#startProcessInstance(ExecutionEntity processInstance, CommandContext commandContext, Map&lt;String, Object&gt; variables)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startProcessInstance</span><span class="params">(ExecutionEntity processInstance, CommandContext commandContext, Map&lt;String, Object&gt; variables)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Process process = ProcessDefinitionUtil.getProcess(processInstance.getProcessDefinitionId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Event sub process handling</span></span><br><span class="line">    List&lt;MessageEventSubscriptionEntity&gt; messageEventSubscriptions = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (FlowElement flowElement : process.getFlowElements()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flowElement <span class="keyword">instanceof</span> EventSubProcess) &#123;</span><br><span class="line">            EventSubProcess eventSubProcess = (EventSubProcess) flowElement;</span><br><span class="line">            <span class="keyword">for</span> (FlowElement subElement : eventSubProcess.getFlowElements()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (subElement <span class="keyword">instanceof</span> StartEvent) &#123;</span><br><span class="line">                    StartEvent startEvent = (StartEvent) subElement;</span><br><span class="line">                    <span class="keyword">if</span> (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) &#123;</span><br><span class="line">                        EventDefinition eventDefinition = startEvent.getEventDefinitions().get(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">if</span> (eventDefinition <span class="keyword">instanceof</span> MessageEventDefinition) &#123;</span><br><span class="line">                            MessageEventDefinition messageEventDefinition = (MessageEventDefinition) eventDefinition;</span><br><span class="line">                            BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(processInstance.getProcessDefinitionId());</span><br><span class="line">                            <span class="keyword">if</span> (bpmnModel.containsMessageId(messageEventDefinition.getMessageRef())) &#123;</span><br><span class="line">                                messageEventDefinition.setMessageRef(bpmnModel.getMessage(messageEventDefinition.getMessageRef()).getName());</span><br><span class="line">                            &#125;</span><br><span class="line">                            ExecutionEntity messageExecution = commandContext.getExecutionEntityManager().createChildExecution(processInstance);</span><br><span class="line">                            messageExecution.setCurrentFlowElement(startEvent);</span><br><span class="line">                            messageExecution.setEventScope(<span class="keyword">true</span>);</span><br><span class="line">                            messageEventSubscriptions</span><br><span class="line">                                    .add(commandContext.getEventSubscriptionEntityManager().insertMessageEvent(messageEventDefinition.getMessageRef(), messageExecution));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ExecutionEntity execution = processInstance.getExecutions().get(<span class="number">0</span>); <span class="comment">// There will always be one child execution created</span></span><br><span class="line">    commandContext.getAgenda().planContinueProcessOperation(execution);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) &#123;</span><br><span class="line">    ActivitiEventDispatcher eventDispatcher = Context.getProcessEngineConfiguration().getEventDispatcher();</span><br><span class="line">        eventDispatcher.dispatchEvent(ActivitiEventBuilder.createProcessStartedEvent(execution, variables, <span class="keyword">false</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (MessageEventSubscriptionEntity messageEventSubscription : messageEventSubscriptions) &#123;</span><br><span class="line">            commandContext.getProcessEngineConfiguration().getEventDispatcher()</span><br><span class="line">                    .dispatchEvent(ActivitiEventBuilder.createMessageEvent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING, messageEventSubscription.getActivityId(),</span><br><span class="line">                            messageEventSubscription.getEventName(), <span class="keyword">null</span>, messageEventSubscription.getExecution().getId(),</span><br><span class="line">                            messageEventSubscription.getProcessInstanceId(), messageEventSubscription.getProcessDefinitionId()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取流程对象</li><li>找到所有的子流程的开始事件, 并查找开始事件的事件定义来收集所有的消息事件</li><li>获取当前 ExecutionEntity 的第一个子对象, 并由该子对象开始执行</li><li>开始流程后, 继续进行将给定的事件分派给任何已注册的侦听器的操作</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1. 概念&quot;&gt;&lt;/a&gt;1. 概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-启动流程&quot;&gt;&lt;a href=&quot;#1-1-启动流程&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/categories/Activiti/"/>
    
      <category term="源码" scheme="https://destinywang.github.io/blog/categories/Activiti/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti源码分析(6)--RepositoryService(仓库服务类)模型校验</title>
    <link href="https://destinywang.github.io/blog/2019/03/09/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-6-RepositoryService-%E4%BB%93%E5%BA%93%E6%9C%8D%E5%8A%A1%E7%B1%BB-%E6%A8%A1%E5%9E%8B%E6%A0%A1%E9%AA%8C/"/>
    <id>https://destinywang.github.io/blog/2019/03/09/Activiti源码分析-6-RepositoryService-仓库服务类-模型校验/</id>
    <published>2019-03-09T05:38:16.000Z</published>
    <updated>2019-03-09T06:31:00.160Z</updated>
    
    <content type="html"><![CDATA[<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBpmnModel</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        BpmnModel bpmnModel = <span class="keyword">new</span> BpmnModel();</span><br><span class="line">        Process process = <span class="keyword">new</span> Process();</span><br><span class="line">        process.setId(<span class="string">"my-process"</span>);</span><br><span class="line"></span><br><span class="line">        StartEvent startEvent = <span class="keyword">new</span> StartEvent();</span><br><span class="line">        startEvent.setId(<span class="string">"startEvent"</span>);</span><br><span class="line"></span><br><span class="line">        UserTask someTask = <span class="keyword">new</span> UserTask();</span><br><span class="line">        someTask.setId(<span class="string">"someTask"</span>);</span><br><span class="line">        someTask.setName(<span class="string">"Activiti is awesome!"</span>);</span><br><span class="line">        someTask.setAssignee(<span class="string">"$&#123;user&#125;"</span>);</span><br><span class="line">        MultiInstanceLoopCharacteristics multiInstanceLoopCharacteristics = <span class="keyword">new</span> MultiInstanceLoopCharacteristics();</span><br><span class="line">        multiInstanceLoopCharacteristics.setSequential(<span class="keyword">false</span>);</span><br><span class="line">        multiInstanceLoopCharacteristics.setInputDataItem(<span class="string">"$&#123;usersBean.getUsers(name)&#125;"</span>);</span><br><span class="line">        multiInstanceLoopCharacteristics.setElementVariable(<span class="string">"user"</span>);</span><br><span class="line">        multiInstanceLoopCharacteristics.setCompletionCondition(<span class="string">"$&#123;nrOfCompletedInstances &gt; 0&#125;"</span>);</span><br><span class="line"></span><br><span class="line">        someTask.setLoopCharacteristics(multiInstanceLoopCharacteristics);</span><br><span class="line"></span><br><span class="line">        EndEvent endEvent = <span class="keyword">new</span> EndEvent();</span><br><span class="line">        endEvent.setId(<span class="string">"endEvent"</span>);</span><br><span class="line"></span><br><span class="line">        SequenceFlow flow1 = createSequence(<span class="string">"startEvent"</span>, <span class="string">"someTask"</span>, <span class="string">"flow1"</span>, <span class="string">"flow1"</span>, <span class="keyword">null</span>);</span><br><span class="line">        SequenceFlow flow2 = createSequence(<span class="string">"someTask"</span>, <span class="string">"endEvent"</span>, <span class="string">"flow2"</span>, <span class="string">"flow2"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        process.addFlowElement(startEvent);</span><br><span class="line">        process.addFlowElement(someTask);</span><br><span class="line">        process.addFlowElement(endEvent);</span><br><span class="line">        process.addFlowElement(flow1);</span><br><span class="line">        process.addFlowElement(flow2);</span><br><span class="line"></span><br><span class="line">        bpmnModel.addProcess(process);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> BpmnXMLConverter().convertToXML(bpmnModel);</span><br><span class="line">        String s = <span class="keyword">new</span> String(bytes, <span class="string">"utf-8"</span>);</span><br><span class="line">        log.info(s);</span><br><span class="line"></span><br><span class="line">        ProcessValidatorFactory processValidatorFactory = <span class="keyword">new</span> ProcessValidatorFactory();</span><br><span class="line">        ProcessValidator defaultProcessValidator = processValidatorFactory.createDefaultProcessValidator();</span><br><span class="line">        List&lt;ValidationError&gt; validate = defaultProcessValidator.validate(bpmnModel);</span><br><span class="line">        log.info(<span class="string">"validate: &#123;&#125;"</span>, validate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成的-XMl-文件"><a href="#生成的-XMl-文件" class="headerlink" title="生成的 XMl 文件:"></a>生成的 XMl 文件:</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span> <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span> <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span> <span class="attr">isExecutable</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"startEvent"</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">"false"</span> <span class="attr">activiti:collection</span>=<span class="string">"$&#123;usersBean.getUsers(name)&#125;"</span> <span class="attr">activiti:elementVariable</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">completionCondition</span>&gt;</span>$&#123;nrOfCompletedInstances &amp;gt; 0&#125;<span class="tag">&lt;/<span class="name">completionCondition</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">multiInstanceLoopCharacteristics</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"endEvent"</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">name</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"startEvent"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">name</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"endEvent"</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">"BPMNDiagram_my-process"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">"my-process"</span> <span class="attr">id</span>=<span class="string">"BPMNPlane_my-process"</span>&gt;</span><span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="validate-的结果"><a href="#validate-的结果" class="headerlink" title="validate 的结果"></a>validate 的结果</h4><pre><code>validate: []</code></pre><p>代表当前流程正常, 没有错误</p><h1 id="1-ProcessValidatorFactory-createDefaultProcessValidator"><a href="#1-ProcessValidatorFactory-createDefaultProcessValidator" class="headerlink" title="1. ProcessValidatorFactory#createDefaultProcessValidator()"></a>1. ProcessValidatorFactory#createDefaultProcessValidator()</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessValidator <span class="title">createDefaultProcessValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ProcessValidatorImpl processValidator = <span class="keyword">new</span> ProcessValidatorImpl();</span><br><span class="line">    processValidator.addValidatorSet(<span class="keyword">new</span> ValidatorSetFactory().createActivitiExecutableProcessValidatorSet());</span><br><span class="line">    <span class="keyword">return</span> processValidator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;测试代码&quot;&gt;&lt;a href=&quot;#测试代码&quot; class=&quot;headerlink&quot; title=&quot;测试代码&quot;&gt;&lt;/a&gt;测试代码&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Activiti源码分析(5)--RepositoryService(仓库服务类)classpath资源部署</title>
    <link href="https://destinywang.github.io/blog/2019/03/09/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-5-RepositoryService-%E4%BB%93%E5%BA%93%E6%9C%8D%E5%8A%A1%E7%B1%BB-classpath%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/"/>
    <id>https://destinywang.github.io/blog/2019/03/09/Activiti源码分析-5-RepositoryService-仓库服务类-classpath资源部署/</id>
    <published>2019-03-09T04:29:31.000Z</published>
    <updated>2019-03-09T08:31:21.248Z</updated>
    
    <content type="html"><![CDATA[<p>RepositoryService 是 Activiti 的仓库服务类, 仓库指的是流程定义文档的两个文件: BPMN 文件和流程图片</p><p>获得方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br></pre></td></tr></table></figure><ul><li>其实现类为: RepositoryServiceImpl</li><li>可以产生 DeploymentBuilder, 用来产生定义流程部署的相关参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployment deployment = repositoryService.createDeployment();</span><br></pre></td></tr></table></figure><h1 id="1-classpath-部署方式说明"><a href="#1-classpath-部署方式说明" class="headerlink" title="1. classpath 部署方式说明"></a>1. classpath 部署方式说明</h1><ol><li>先获取流程引擎对象, 在创建时会自动加载 classpath 下的 <code>activiti.cfg.xml</code></li><li>首先获得默认的流程引擎, 通过流程引擎获取一个 RepositoryService 对象</li><li>由仓库的服务对象产生一个部署对象配置对象, 用来封装部署操作的相关配置</li><li>链式编程, 在部署的配置对象中设置显示名, 上传流程定义规则文件</li><li>向数据库中存放流程定义的规则信息</li></ol><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    Deployment deployment = processEngine.getRepositoryService()</span><br><span class="line">            .createDeployment()</span><br><span class="line">            .name(<span class="string">"my-process"</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">"process/my-process.bpmn20.xml"</span>)</span><br><span class="line">            .deploy();</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"deployment: &#123;&#125;"</span>, deployment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-DeploymentBuilderImpl-addClasspathResource-String-resource"><a href="#1-1-DeploymentBuilderImpl-addClasspathResource-String-resource" class="headerlink" title="1.1. DeploymentBuilderImpl#addClasspathResource(String resource)"></a>1.1. DeploymentBuilderImpl#addClasspathResource(String resource)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> DeploymentBuilder <span class="title">addClasspathResource</span><span class="params">(String resource)</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = ReflectUtil.getResourceAsStream(resource);</span><br><span class="line">    <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"resource '"</span> + resource + <span class="string">"' not found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> addInputStream(resource, inputStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过资源路径获取输入流</li><li>添加输入流并返回</li></ul><h3 id="1-1-1-ReflectUtil-getResourceAsStream-String-name"><a href="#1-1-1-ReflectUtil-getResourceAsStream-String-name" class="headerlink" title="1.1.1. ReflectUtil.getResourceAsStream(String name)"></a>1.1.1. ReflectUtil.getResourceAsStream(String name)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    InputStream resourceStream = <span class="keyword">null</span>;</span><br><span class="line">    ClassLoader classLoader = getCustomClassLoader();</span><br><span class="line">    <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">        resourceStream = classLoader.getResourceAsStream(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (resourceStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Try the current Thread context classloader</span></span><br><span class="line">        classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        resourceStream = classLoader.getResourceAsStream(name);</span><br><span class="line">        <span class="keyword">if</span> (resourceStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Finally, try the classloader for this class</span></span><br><span class="line">            classLoader = ReflectUtil.class.getClassLoader();</span><br><span class="line">            resourceStream = classLoader.getResourceAsStream(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resourceStream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取自定义类加载器</li><li>如果类加载器不为空, 获取 classpath 路径下的资源</li><li>如果资源为空, 重新获取当前线程的类加载器, 再次尝试获取 classpath 下的资源</li><li>如果资源依然为空, 再获取当前类的类加载器再次尝试获取 classpath 下的资源</li><li>返回 </li></ol><h2 id="1-2-DeploymentBuilderImpl-addInputStream-String-resourceName-InputStream-inputStream"><a href="#1-2-DeploymentBuilderImpl-addInputStream-String-resourceName-InputStream-inputStream" class="headerlink" title="1.2. DeploymentBuilderImpl#addInputStream(String resourceName, InputStream inputStream)"></a>1.2. DeploymentBuilderImpl#addInputStream(String resourceName, InputStream inputStream)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> DeploymentBuilder <span class="title">addInputStream</span><span class="params">(String resourceName, InputStream inputStream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"inputStream for resource '"</span> + resourceName + <span class="string">"' is null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = IoUtil.readInputStream(inputStream, resourceName);</span><br><span class="line">    ResourceEntity resource = resourceEntityManager.create();</span><br><span class="line">    resource.setName(resourceName);</span><br><span class="line">    resource.setBytes(bytes);</span><br><span class="line">    deployment.addResource(resource);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>将输入流转化为字节数组</li><li>创建一个 ResourceEntity 实例对象, 并设置名称和字节数组</li><li>为 <code>deployment</code> 对象添加资源, 其内部包含一个 <code>Map&lt;String, ResourceEntity&gt;</code> 的属性</li><li>返回当前对象(DeploymentBuilder)</li></ol><h3 id="1-2-1-IoUtil-readInputStream-InputStream-inputStream-String-inputStreamName"><a href="#1-2-1-IoUtil-readInputStream-InputStream-inputStream-String-inputStreamName" class="headerlink" title="1.2.1. IoUtil#readInputStream(InputStream inputStream, String inputStreamName)"></a>1.2.1. IoUtil#readInputStream(InputStream inputStream, String inputStreamName)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] readInputStream(InputStream inputStream, String inputStreamName) &#123;</span><br><span class="line">    ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span> * <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> bytesRead = inputStream.read(buffer);</span><br><span class="line">        <span class="keyword">while</span> (bytesRead != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            bytesRead = inputStream.read(buffer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"couldn't read input stream "</span> + inputStreamName, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> outputStream.toByteArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-DeploymentEntityImpl-addResource-ResourceEntity-resource"><a href="#1-3-DeploymentEntityImpl-addResource-ResourceEntity-resource" class="headerlink" title="1.3. DeploymentEntityImpl#addResource(ResourceEntity resource)"></a>1.3. DeploymentEntityImpl#addResource(ResourceEntity resource)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResource</span><span class="params">(ResourceEntity resource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resources == <span class="keyword">null</span>) &#123;</span><br><span class="line">        resources = <span class="keyword">new</span> HashMap&lt;String, ResourceEntity&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    resources.put(resource.getName(), resource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-4-RepositoryServiceImpl-deploy"><a href="#1-4-RepositoryServiceImpl-deploy" class="headerlink" title="1.4. RepositoryServiceImpl#deploy()"></a>1.4. RepositoryServiceImpl#deploy()</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Deployment <span class="title">deploy</span><span class="params">(DeploymentBuilderImpl deploymentBuilder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commandExecutor.execute(<span class="keyword">new</span> DeployCmd&lt;Deployment&gt;(deploymentBuilder));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-DeployCmd-execute-CommandContext-commandContext"><a href="#1-5-DeployCmd-execute-CommandContext-commandContext" class="headerlink" title="1.5. DeployCmd#execute(CommandContext commandContext)"></a>1.5. DeployCmd#execute(CommandContext commandContext)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Deployment <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Backwards compatibility with Activiti v5</span></span><br><span class="line">    <span class="keyword">if</span> (commandContext.getProcessEngineConfiguration().isActiviti5CompatibilityEnabled()</span><br><span class="line">        &amp;&amp; deploymentBuilder.getDeploymentProperties() != <span class="keyword">null</span> </span><br><span class="line">        &amp;&amp; deploymentBuilder.getDeploymentProperties().containsKey(DeploymentProperties.DEPLOY_AS_ACTIVITI5_PROCESS_DEFINITION)</span><br><span class="line">        &amp;&amp; deploymentBuilder.getDeploymentProperties().get(DeploymentProperties.DEPLOY_AS_ACTIVITI5_PROCESS_DEFINITION).equals(Boolean.TRUE)) &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> deployAsActiviti5ProcessDefinition(commandContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> executeDeploy(commandContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-DeployCmd-executeDeploy-CommandContext-commandContext"><a href="#1-6-DeployCmd-executeDeploy-CommandContext-commandContext" class="headerlink" title="1.6. DeployCmd#executeDeploy(CommandContext commandContext)"></a>1.6. DeployCmd#executeDeploy(CommandContext commandContext)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Deployment <span class="title">executeDeploy</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">    DeploymentEntity deployment = deploymentBuilder.getDeployment();</span><br><span class="line"></span><br><span class="line">    deployment.setDeploymentTime(commandContext.getProcessEngineConfiguration().getClock().getCurrentTime());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deploymentBuilder.isDuplicateFilterEnabled()) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Deployment&gt; existingDeployments = <span class="keyword">new</span> ArrayList&lt;Deployment&gt;();</span><br><span class="line">        <span class="keyword">if</span> (deployment.getTenantId() == <span class="keyword">null</span> || ProcessEngineConfiguration.NO_TENANT_ID.equals(deployment.getTenantId())) &#123;</span><br><span class="line">            DeploymentEntity existingDeployment = commandContext.getDeploymentEntityManager().findLatestDeploymentByName(deployment.getName());</span><br><span class="line">            <span class="keyword">if</span> (existingDeployment != <span class="keyword">null</span>) &#123;</span><br><span class="line">                existingDeployments.add(existingDeployment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;Deployment&gt; deploymentList = commandContext.getProcessEngineConfiguration().getRepositoryService().createDeploymentQuery().deploymentName(deployment.getName())</span><br><span class="line">                    .deploymentTenantId(deployment.getTenantId()).orderByDeploymentId().desc().list();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!deploymentList.isEmpty()) &#123;</span><br><span class="line">                existingDeployments.addAll(deploymentList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DeploymentEntity existingDeployment = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!existingDeployments.isEmpty()) &#123;</span><br><span class="line">            existingDeployment = (DeploymentEntity) existingDeployments.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((existingDeployment != <span class="keyword">null</span>) &amp;&amp; !deploymentsDiffer(deployment, existingDeployment)) &#123;</span><br><span class="line">            <span class="keyword">return</span> existingDeployment;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deployment.setNew(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save the data</span></span><br><span class="line">    commandContext.getDeploymentEntityManager().insert(deployment);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) &#123;</span><br><span class="line">        commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED, deployment));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Deployment settings</span></span><br><span class="line">    Map&lt;String, Object&gt; deploymentSettings = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    deploymentSettings.put(DeploymentSettings.IS_BPMN20_XSD_VALIDATION_ENABLED, deploymentBuilder.isBpmn20XsdValidationEnabled());</span><br><span class="line">    deploymentSettings.put(DeploymentSettings.IS_PROCESS_VALIDATION_ENABLED, deploymentBuilder.isProcessValidationEnabled());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Actually deploy</span></span><br><span class="line">    commandContext.getProcessEngineConfiguration().getDeploymentManager().deploy(deployment, deploymentSettings);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deploymentBuilder.getProcessDefinitionsActivationDate() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        scheduleProcessDefinitionActivation(commandContext, deployment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) &#123;</span><br><span class="line">        commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED, deployment));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deployment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>设置部署时间</li><li></li></ol><h1 id="2-资源部署涉及到的表"><a href="#2-资源部署涉及到的表" class="headerlink" title="2. 资源部署涉及到的表"></a>2. 资源部署涉及到的表</h1><ol><li>ACT_RE_DEPLOYMENT: 存放流程定义的显示名称和部署时间, 每部署一次增加一条记录;</li><li>ACT_RE_PROCDEF: 流程定义表, 存放流程定义的属性信息, 部署每个新的流程定义都会在这张表中增加一条记录, 当流程定义的 key 相同的时候, 使用的是版本升级</li><li>ACT_GE_BYTEARRAY: 资源文件表, 存储流程定义相关的二进制文件, 包括 XML 和图片.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RepositoryService 是 Activiti 的仓库服务类, 仓库指的是流程定义文档的两个文件: BPMN 文件和流程图片&lt;/p&gt;
&lt;p&gt;获得方式:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Activiti源码分析(4)--CommandExecutor(命令执行器)</title>
    <link href="https://destinywang.github.io/blog/2019/02/21/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-4-CommandExecutor-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%99%A8/"/>
    <id>https://destinywang.github.io/blog/2019/02/21/Activiti源码分析-4-CommandExecutor-命令执行器/</id>
    <published>2019-02-21T15:01:25.000Z</published>
    <updated>2019-03-09T02:44:39.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-commandExecutor-对象的构造"><a href="#1-commandExecutor-对象的构造" class="headerlink" title="1. commandExecutor 对象的构造"></a>1. commandExecutor 对象的构造</h1><h2 id="1-1-ProcessEngineConfigurationImpl-ProcessEngineConfigurationImpl"><a href="#1-1-ProcessEngineConfigurationImpl-ProcessEngineConfigurationImpl" class="headerlink" title="1.1. ProcessEngineConfigurationImpl#ProcessEngineConfigurationImpl()"></a>1.1. ProcessEngineConfigurationImpl#ProcessEngineConfigurationImpl()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initCommandExecutors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    initDefaultCommandConfig();</span><br><span class="line">    initSchemaCommandConfig();</span><br><span class="line">    initCommandInvoker();</span><br><span class="line">    initCommandInterceptors();</span><br><span class="line">    initCommandExecutor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法由 <code>ProcessEngineConfigurationImpl#init()</code> 调用, init 在创建 ProcessEngineConfigurationImpl 对象的时候已经分析过</p><ul><li>第 5 行, 初始化命令拦截器</li><li>第 6 行, 初始化命令执行器</li></ul><h3 id="1-1-1-initCommandInterceptors-方法"><a href="#1-1-1-initCommandInterceptors-方法" class="headerlink" title="1.1.1. initCommandInterceptors() 方法"></a>1.1.1. initCommandInterceptors() 方法</h3><p>Activiti 提供了命令拦截器的功能, 通过 API 对 Activiti 流程各个实例的操作本质上都是对 DB 的操作. 因此 Activiti 将每一个 CRUD 操作都封装为一个 <code>Command</code>, 然后交由命令执行器 <code>CommandExecutor</code> 去执行. </p><p>为了能让使用者可以对命令进行拦截, Activiti 还是用了 <code>责任链模式</code>, 使用者可以在其中添加相应的拦截器. 职责链让多个对象都有机会处理请求, 从而避免了请求发送者和接受者之间的耦合, 这些请求接受者将组成一条链, 并沿着这条链传递下去, 直到有一个对象处理了这个请求为止.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initCommandInterceptors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (commandInterceptors == <span class="keyword">null</span>) &#123;</span><br><span class="line">        commandInterceptors = <span class="keyword">new</span> ArrayList&lt;CommandInterceptor&gt;();</span><br><span class="line">        <span class="keyword">if</span> (customPreCommandInterceptors != <span class="keyword">null</span>) &#123;</span><br><span class="line">            commandInterceptors.addAll(customPreCommandInterceptors);</span><br><span class="line">        &#125;</span><br><span class="line">        commandInterceptors.addAll(getDefaultCommandInterceptors());</span><br><span class="line">        <span class="keyword">if</span> (customPostCommandInterceptors != <span class="keyword">null</span>) &#123;</span><br><span class="line">            commandInterceptors.addAll(customPostCommandInterceptors);</span><br><span class="line">        &#125;</span><br><span class="line">        commandInterceptors.add(commandInvoker);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法完成对所有拦截器的初始化 </p><ul><li>自定义前置拦截器: 需要开发者实现 <code>CommandInterceptor</code> 接口, 并配置到 Activiti 配置文件(<code>activiti.cfg.xml</code>)中</li><li>默认的拦截器:<ol><li>LogInterceptor: 日志拦截器, 用于打印执行的日志</li><li>TransactionInterceptor: 事务拦截器</li><li>CommandContextInterceptor: 命令上下文拦截器</li></ol></li><li>自定义后置拦截器: 需要开发者实现 <code>CommandInterceptor</code> 接口, 并配置到 Activiti 配置文件中.</li></ul><h3 id="1-1-2-getDefaultCommandInterceptors"><a href="#1-1-2-getDefaultCommandInterceptors" class="headerlink" title="1.1.2. getDefaultCommandInterceptors()"></a>1.1.2. getDefaultCommandInterceptors()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Collection&lt;? extends CommandInterceptor&gt; getDefaultCommandInterceptors() &#123;</span><br><span class="line">    List&lt;CommandInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;CommandInterceptor&gt;();</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> LogInterceptor());</span><br><span class="line"></span><br><span class="line">    CommandInterceptor transactionInterceptor = createTransactionInterceptor();</span><br><span class="line">    <span class="keyword">if</span> (transactionInterceptor != <span class="keyword">null</span>) &#123;</span><br><span class="line">        interceptors.add(transactionInterceptor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (commandContextFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">        interceptors.add(<span class="keyword">new</span> CommandContextInterceptor(commandContextFactory, <span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (transactionContextFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">        interceptors.add(<span class="keyword">new</span> TransactionContextInterceptor(transactionContextFactory));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> interceptors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-ProcessEngineConfigurationImpl-initCommandExecutor"><a href="#1-2-ProcessEngineConfigurationImpl-initCommandExecutor" class="headerlink" title="1.2. ProcessEngineConfigurationImpl#initCommandExecutor()"></a>1.2. ProcessEngineConfigurationImpl#initCommandExecutor()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initCommandExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (commandExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">      CommandInterceptor first = initInterceptorChain(commandInterceptors);</span><br><span class="line">      commandExecutor = <span class="keyword">new</span> CommandExecutorImpl(getDefaultCommandConfig(), first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将命令拦截器列表初始化为职责链</li><li>色织第一个拦截器</li></ul><h2 id="1-2-1-ProcessEngineConfigurationImpl-initInterceptorChain-List-chain"><a href="#1-2-1-ProcessEngineConfigurationImpl-initInterceptorChain-List-chain" class="headerlink" title="1.2.1 ProcessEngineConfigurationImpl#initInterceptorChain(List chain)"></a>1.2.1 ProcessEngineConfigurationImpl#initInterceptorChain(List<commandinterceptor> chain)</commandinterceptor></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CommandInterceptor <span class="title">initInterceptorChain</span><span class="params">(List&lt;CommandInterceptor&gt; chain)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (chain == <span class="keyword">null</span> || chain.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"invalid command interceptor chain configuration: "</span> + chain);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chain.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        chain.get(i).setNext(chain.get(i + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> chain.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化命令拦截器链, 并返回其中的第一个拦截器</p><p><img src="https://user-images.githubusercontent.com/17758731/54065183-e995b000-4257-11e9-9005-4a4f5f6ae568.png" alt="image"></p><h1 id="2-ProcessEngineConfigurationImpl-initService-Object-service"><a href="#2-ProcessEngineConfigurationImpl-initService-Object-service" class="headerlink" title="2. ProcessEngineConfigurationImpl#initService(Object service)"></a>2. ProcessEngineConfigurationImpl#initService(Object service)</h1><p>在各个服务对象(如 <code>RuntimeService</code>, <code>RepositoryService</code>等)中, 都可以直接使用 CommandExecutor 来执行命令<br>commandExecutor 对象由 RepositoryServiceImpl 的基类 <code>ServiceImpl</code> 声明</p><p>在 ProcessEngineConfigurationImpl 类的 initService(Object service) 方法中完成各个服务类的属性注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initService</span><span class="params">(Object service)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (service <span class="keyword">instanceof</span> ServiceImpl) &#123;</span><br><span class="line">        ((ServiceImpl) service).setCommandExecutor(commandExecutor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-commandExecutor-对象的构造&quot;&gt;&lt;a href=&quot;#1-commandExecutor-对象的构造&quot; class=&quot;headerlink&quot; title=&quot;1. commandExecutor 对象的构造&quot;&gt;&lt;/a&gt;1. commandExecut
      
    
    </summary>
    
      <category term="activiti" scheme="https://destinywang.github.io/blog/categories/activiti/"/>
    
      <category term="源码" scheme="https://destinywang.github.io/blog/categories/activiti/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="activiti" scheme="https://destinywang.github.io/blog/tags/activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti源码分析(3)--Spring配置风格源码分析1</title>
    <link href="https://destinywang.github.io/blog/2019/02/20/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-3-Spring%E9%85%8D%E7%BD%AE%E9%A3%8E%E6%A0%BC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/"/>
    <id>https://destinywang.github.io/blog/2019/02/20/Activiti源码分析-3-Spring配置风格源码分析1/</id>
    <published>2019-02-20T14:01:01.000Z</published>
    <updated>2019-02-20T15:25:32.556Z</updated>
    
    <content type="html"><![CDATA[<p>在分析源码之前, 先贴出一个典型的 Activiti 与 Spring 整合的配置文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 ProcessEngineConfiguration  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.SpringProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring 需要单独配置 DataSource --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"sa"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 流程引擎对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngine"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.ProcessEngineFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">ref</span>=<span class="string">"processEngineConfiguration"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将服务暴露给 Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"runtimeService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getRuntimeService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"repositoryService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getRepositoryService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"formService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getFormService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getTaskService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"historyService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getHistoryService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 activitiRule 用于测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"activitiRule"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.test.ActivitiRule"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngine"</span> <span class="attr">ref</span>=<span class="string">"processEngine"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-ProcessEngines-类"><a href="#1-ProcessEngines-类" class="headerlink" title="1. ProcessEngines 类"></a>1. ProcessEngines 类</h1><h2 id="1-1-init-方法"><a href="#1-1-init-方法" class="headerlink" title="1.1. init() 方法"></a>1.1. init() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    resources = classLoader.getResources(<span class="string">"activiti-context.xml"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"problem retrieving activiti-context.xml resources on the classpath: "</span> + System.getProperty(<span class="string">"java.class.path"</span>), e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (resources.hasMoreElements()) &#123;</span><br><span class="line">    URL resource = resources.nextElement();</span><br><span class="line">    log.info(<span class="string">"Initializing process engine using Spring configuration '&#123;&#125;'"</span>, resource.toString());</span><br><span class="line">    initProcessEngineFromSpringResource(resource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前两篇文章中, 我们主要对常规模式(即不与 Spring 整合的初始化模式)做了简单介绍, 这篇文章我们对于 Spring 整合方式下的 ProcessEngine 初始化做一个简单分析.</p><ol><li>读取 classpath 下的 <code>activiti-context.xml</code> 文件</li><li>将资源列表依次交由 <code>initProcessEngineFromSpringResource(resource)</code> 方法完成初始化</li></ol><h2 id="1-2-initProcessEngineFromSpringResource-URL-resource-方法"><a href="#1-2-initProcessEngineFromSpringResource-URL-resource-方法" class="headerlink" title="1.2. initProcessEngineFromSpringResource(URL resource) 方法"></a>1.2. initProcessEngineFromSpringResource(URL resource) 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initProcessEngineFromSpringResource</span><span class="params">(URL resource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; springConfigurationHelperClass = ReflectUtil.loadClass(<span class="string">"org.activiti.spring.SpringConfigurationHelper"</span>);</span><br><span class="line">        Method method = springConfigurationHelperClass.getDeclaredMethod(<span class="string">"buildProcessEngine"</span>, <span class="keyword">new</span> Class&lt;?&gt;[] &#123; URL.class &#125;);</span><br><span class="line">        ProcessEngine processEngine = (ProcessEngine) method.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] &#123; resource &#125;);</span><br><span class="line"></span><br><span class="line">        String processEngineName = processEngine.getName();</span><br><span class="line">        ProcessEngineInfo processEngineInfo = <span class="keyword">new</span> ProcessEngineInfoImpl(processEngineName, resource.toString(), <span class="keyword">null</span>);</span><br><span class="line">        processEngineInfosByName.put(processEngineName, processEngineInfo);</span><br><span class="line">        processEngineInfosByResourceUrl.put(resource.toString(), processEngineInfo);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"couldn't initialize process engine from spring configuration resource "</span> + resource.toString() + <span class="string">": "</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过反射的方式加载目标类 <code>org.activiti.spring.SpringConfigurationHelper</code> 的 class 对象</li><li>通过反射的方式获取该类名为 <code>buildProcessEngine</code> , 参数列表为 <code>URL</code> 的方法对象</li><li>反射调用 <code>org.activiti.spring.SpringConfigurationHelper#buildProcessEngine(URL resource)</code> 方法</li></ol><h1 id="2-SpringConfigurationHelper-类"><a href="#2-SpringConfigurationHelper-类" class="headerlink" title="2. SpringConfigurationHelper 类"></a>2. SpringConfigurationHelper 类</h1><h2 id="2-1-buildProcessEngine-URL-resource-方法"><a href="#2-1-buildProcessEngine-URL-resource-方法" class="headerlink" title="2.1. buildProcessEngine(URL resource) 方法"></a>2.1. buildProcessEngine(URL resource) 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngine <span class="title">buildProcessEngine</span><span class="params">(URL resource)</span> </span>&#123;</span><br><span class="line">    log.debug(<span class="string">"==== BUILDING SPRING APPLICATION CONTEXT AND PROCESS ENGINE ========================================="</span>);</span><br><span class="line"></span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> GenericXmlApplicationContext(<span class="keyword">new</span> UrlResource(resource));</span><br><span class="line">    Map&lt;String, ProcessEngine&gt; beansOfType = applicationContext.getBeansOfType(ProcessEngine.class);</span><br><span class="line">    <span class="keyword">if</span> ((beansOfType == <span class="keyword">null</span>) || (beansOfType.isEmpty())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"no "</span> + ProcessEngine.class.getName() + <span class="string">" defined in the application context "</span> + resource.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ProcessEngine processEngine = beansOfType.values().iterator().next();</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"==== SPRING PROCESS ENGINE CREATED =================================================================="</span>);</span><br><span class="line">    <span class="keyword">return</span> processEngine;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>使用传入的 <code>activiti-context.xml</code> 文件创建 ApplicationContext 对象</li><li>通过 ApplicationContext 获取类型为 <code>ProcessEngine</code> 的所有对象, 返回值为 Map&lt;beanId, ProcessEngine 对象&gt;</li><li>通过遍历获取其中第一个 value 并返回</li></ol><p>在执行第 1 步的时候, 就会触发 Spring Application Context 管理的对应对象的初始化.</p><p>对应开始时贴出来的配置文件范例, 在初始化 <code>&lt;processEngine, ProcessEngineFactoryBean&gt;</code> 前, 需要先初始化 <code>&lt;processEngineConfiguration, SpringProcessEngineConfiguration&gt;</code> 对象</p><h2 id="2-2-SpringProcessEngineConfiguration-对象的默认构造方法"><a href="#2-2-SpringProcessEngineConfiguration-对象的默认构造方法" class="headerlink" title="2.2 SpringProcessEngineConfiguration 对象的默认构造方法"></a>2.2 SpringProcessEngineConfiguration 对象的默认构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringProcessEngineConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.transactionsExternallyManaged = <span class="keyword">true</span>;</span><br><span class="line">    deploymentStrategies.add(<span class="keyword">new</span> DefaultAutoDeploymentStrategy());</span><br><span class="line">    deploymentStrategies.add(<span class="keyword">new</span> SingleResourceAutoDeploymentStrategy());</span><br><span class="line">    deploymentStrategies.add(<span class="keyword">new</span> ResourceParentFolderAutoDeploymentStrategy());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-ProcessEngine-对象的-getObject-方法"><a href="#2-3-ProcessEngine-对象的-getObject-方法" class="headerlink" title="2.3. ProcessEngine 对象的 getObject() 方法"></a>2.3. ProcessEngine 对象的 getObject() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessEngine <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    configureExpressionManager();</span><br><span class="line">    configureExternallyManagedTransactions();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (processEngineConfiguration.getBeans() == <span class="keyword">null</span>) &#123;</span><br><span class="line">      processEngineConfiguration.setBeans(<span class="keyword">new</span> SpringBeanFactoryProxyMap(applicationContext));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.processEngine = processEngineConfiguration.buildProcessEngine();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.processEngine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在分析源码之前, 先贴出一个典型的 Activiti 与 Spring 整合的配置文件:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Activiti源码分析(2)--流程引擎类</title>
    <link href="https://destinywang.github.io/blog/2019/02/18/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2-%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E%E7%B1%BB/"/>
    <id>https://destinywang.github.io/blog/2019/02/18/Activiti源码分析-2-流程引擎类/</id>
    <published>2019-02-18T14:42:12.000Z</published>
    <updated>2019-02-20T13:31:56.733Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章中, 我们跟踪了流程引擎配置类对象的创建过程, 今天紧接着来看 Activiti 在获取到流程引擎配置类之后, 如何完成流程引擎的初始化.</p><h1 id="1-ProcessEngineConfiguration-类"><a href="#1-ProcessEngineConfiguration-类" class="headerlink" title="1. ProcessEngineConfiguration 类"></a>1. ProcessEngineConfiguration 类</h1><h2 id="1-1-buildProcessEngine-URL-resource-方法"><a href="#1-1-buildProcessEngine-URL-resource-方法" class="headerlink" title="1.1. buildProcessEngine(URL resource) 方法"></a>1.1. buildProcessEngine(URL resource) 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessEngine <span class="title">buildProcessEngine</span><span class="params">(URL resource)</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream = resource.openStream();</span><br><span class="line">        ProcessEngineConfiguration processEngineConfiguration = ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream);</span><br><span class="line">        <span class="keyword">return</span> processEngineConfiguration.buildProcessEngine();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"couldn't open resource stream: "</span> + e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtil.closeSilently(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该方法中, 上一篇文章我们讲了第 5 行代码的源码调用关系, 最终创建了 ProcessEngineConfiguration 对象, 这篇文章中我们来讲第 6 行是如何创建 ProcessEngine 对象的.</p><h2 id="1-2-buildProcessEngine-方法"><a href="#1-2-buildProcessEngine-方法" class="headerlink" title="1.2. buildProcessEngine() 方法"></a>1.2. buildProcessEngine() 方法</h2><p>该方法是一个抽象方法, 实现类分别有:</p><ol><li>MultiSchemaMultiTenantProcessEngineConfiguration</li><li>ProcessEngineConfigurationImpl</li><li>SpringProcessEngineConfiguration</li></ol><p>在本例中, 最终会调用 <code>ProcessEngineConfigurationImpl</code> 的 <code>buildProcessEngine()</code> 方法, 因为我们在 <code>activiti.cfg.xml</code> 中的配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用的是 <code>StandaloneProcessEngineConfiguration</code>, 而打开该类发现该类没有 <code>buildProcessEngine()</code> 方法的实现, 因此实现方法在其父类 <code>ProcessEngineConfigurationImpl</code> 中.</p><h1 id="2-ProcessEngineConfigurationImpl-类"><a href="#2-ProcessEngineConfigurationImpl-类" class="headerlink" title="2. ProcessEngineConfigurationImpl 类"></a>2. ProcessEngineConfigurationImpl 类</h1><h2 id="2-1-buildProcessEngine-方法"><a href="#2-1-buildProcessEngine-方法" class="headerlink" title="2.1. buildProcessEngine() 方法"></a>2.1. buildProcessEngine() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessEngine <span class="title">buildProcessEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    ProcessEngineImpl processEngine = <span class="keyword">new</span> ProcessEngineImpl(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// trigger build of Activiti 5 Engine</span></span><br><span class="line">    <span class="keyword">if</span> (isActiviti5CompatibilityEnabled &amp;&amp; activiti5CompatibilityHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Context.setProcessEngineConfiguration(processEngine.getProcessEngineConfiguration());</span><br><span class="line">        activiti5CompatibilityHandler.getRawProcessEngine();</span><br><span class="line">    &#125;</span><br><span class="line">    postProcessEngineInitialisation();</span><br><span class="line">    <span class="keyword">return</span> processEngine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-init"><a href="#2-2-init" class="headerlink" title="2.2. init()"></a>2.2. init()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    initConfigurators();</span><br><span class="line">    configuratorsBeforeInit();</span><br><span class="line">    initProcessDiagramGenerator();</span><br><span class="line">    initHistoryLevel();</span><br><span class="line">    initExpressionManager();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (usingRelationalDatabase) &#123;</span><br><span class="line">      initDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initAgendaFactory();</span><br><span class="line">    initHelpers();</span><br><span class="line">    initVariableTypes();</span><br><span class="line">    initBeans();</span><br><span class="line">    initFormEngines();</span><br><span class="line">    initFormTypes();</span><br><span class="line">    initScriptingEngines();</span><br><span class="line">    initClock();</span><br><span class="line">    initBusinessCalendarManager();</span><br><span class="line">    initCommandContextFactory();</span><br><span class="line">    initTransactionContextFactory();</span><br><span class="line">    initCommandExecutors();</span><br><span class="line">    initServices();</span><br><span class="line">    initIdGenerator();</span><br><span class="line">    initBehaviorFactory();</span><br><span class="line">    initListenerFactory();</span><br><span class="line">    initBpmnParser();</span><br><span class="line">    initProcessDefinitionCache();</span><br><span class="line">    initProcessDefinitionInfoCache();</span><br><span class="line">    initKnowledgeBaseCache();</span><br><span class="line">    initJobHandlers();</span><br><span class="line">    initJobManager();</span><br><span class="line">    initAsyncExecutor();</span><br><span class="line"></span><br><span class="line">    initTransactionFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (usingRelationalDatabase) &#123;</span><br><span class="line">      initSqlSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initSessionFactories();</span><br><span class="line">    initDataManagers();</span><br><span class="line">    initEntityManagers();</span><br><span class="line">    initHistoryManager();</span><br><span class="line">    initJpa();</span><br><span class="line">    initDeployers();</span><br><span class="line">    initDelegateInterceptor();</span><br><span class="line">    initEventHandlers();</span><br><span class="line">    initFailedJobCommandFactory();</span><br><span class="line">    initEventDispatcher();</span><br><span class="line">    initProcessValidator();</span><br><span class="line">    initDatabaseEventLogging();</span><br><span class="line">    initActiviti5CompatibilityHandler();</span><br><span class="line">    configuratorsAfterInit();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>init()</code> 是一个非常大的方法, 其内容主要是各种初始化操作的执行, 其中有些比较重要的需要单独讲解.</p><ul><li>如果使用关系型数据库, 其实 <code>usingRelationalDatabase</code> 变量默认为 true, 代表目前只支持关系型数据库, 就会使用 <code>initRelationalDatabase()</code> 方法完成数据库相关的初始化操作.</li></ul><h2 id="2-3-initRelationalDatabase"><a href="#2-3-initRelationalDatabase" class="headerlink" title="2.3. initRelationalDatabase()"></a>2.3. initRelationalDatabase()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSourceJndiName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                dataSource = (DataSource) <span class="keyword">new</span> InitialContext().lookup(dataSourceJndiName);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"couldn't lookup datasource from "</span> + dataSourceJndiName + <span class="string">": "</span> + e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jdbcUrl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((jdbcDriver == <span class="keyword">null</span>) || (jdbcUsername == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"DataSource or JDBC properties have to be specified in a process engine configuration"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">"initializing datasource to db: &#123;&#125;"</span>, jdbcUrl);</span><br><span class="line"></span><br><span class="line">            PooledDataSource pooledDataSource = <span class="keyword">new</span> PooledDataSource(ReflectUtil.getClassLoader(), jdbcDriver, jdbcUrl, jdbcUsername, jdbcPassword);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (jdbcMaxActiveConnections &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pooledDataSource.setPoolMaximumActiveConnections(jdbcMaxActiveConnections);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (jdbcMaxIdleConnections &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pooledDataSource.setPoolMaximumIdleConnections(jdbcMaxIdleConnections);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (jdbcMaxCheckoutTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pooledDataSource.setPoolMaximumCheckoutTime(jdbcMaxCheckoutTime);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (jdbcMaxWaitTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pooledDataSource.setPoolTimeToWait(jdbcMaxWaitTime);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (jdbcPingEnabled == <span class="keyword">true</span>) &#123;</span><br><span class="line">                pooledDataSource.setPoolPingEnabled(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">if</span> (jdbcPingQuery != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    pooledDataSource.setPoolPingQuery(jdbcPingQuery);</span><br><span class="line">                &#125;</span><br><span class="line">                pooledDataSource.setPoolPingConnectionsNotUsedFor(jdbcPingConnectionNotUsedFor);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (jdbcDefaultTransactionIsolationLevel &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pooledDataSource.setDefaultTransactionIsolationLevel(jdbcDefaultTransactionIsolationLevel);</span><br><span class="line">            &#125;</span><br><span class="line">            dataSource = pooledDataSource;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dataSource <span class="keyword">instanceof</span> PooledDataSource) &#123;</span><br><span class="line">            <span class="comment">// ACT-233: connection pool of Ibatis is not properly</span></span><br><span class="line">            <span class="comment">// initialized if this is not called!</span></span><br><span class="line">            ((PooledDataSource) dataSource).forceCloseAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (databaseType == <span class="keyword">null</span>) &#123;</span><br><span class="line">        initDatabaseType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果 <code>dataSource</code> 对象为空,  就初始化一个 <code>PooledDataSource</code> 对象, 根据默认的 <code>jdbcUrl</code>, <code>jdbcDriver</code>, <code>jdbcUsername</code> 等变量创建一个数据库连接, 而上述的默认值则对应 Activiti 内置的内存数据库 H2, 说明如果不设置 dataSource, Activiti 就会使用内置的 H2 数据库完成 dataSource 的初始化.</li><li><code>databaseType</code> 用于标识数据库类型, 如果该变量为空, 需要调用 <code>initDatabaseType()</code> 来完成数据库类型的赋值.</li></ul><h2 id="2-4-initDatabaseType-方法"><a href="#2-4-initDatabaseType-方法" class="headerlink" title="2.4. initDatabaseType() 方法"></a>2.4. initDatabaseType() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDatabaseType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = dataSource.getConnection();</span><br><span class="line">        DatabaseMetaData databaseMetaData = connection.getMetaData();</span><br><span class="line">        String databaseProductName = databaseMetaData.getDatabaseProductName();</span><br><span class="line">        log.debug(<span class="string">"database product name: '&#123;&#125;'"</span>, databaseProductName);</span><br><span class="line">        databaseType = databaseTypeMappings.getProperty(databaseProductName);</span><br><span class="line">        <span class="keyword">if</span> (databaseType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"couldn't deduct database type from database product name '"</span> + databaseProductName + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"using database type: &#123;&#125;"</span>, databaseType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Special care for MSSQL, as it has a hard limit of 2000 params per statement (incl bulk statement).</span></span><br><span class="line">        <span class="comment">// Especially with executions, with 100 as default, this limit is passed.</span></span><br><span class="line">        <span class="keyword">if</span> (DATABASE_TYPE_MSSQL.equals(databaseType)) &#123;</span><br><span class="line">            maxNrOfStatementsInBulkInsert = DEFAULT_MAX_NR_OF_STATEMENTS_BULK_INSERT_SQL_SERVER;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Exception while initializing Database connection"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Exception while closing the Database connection"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取一个数据库连接</li><li>通过该连接获取元数据信息, 得到数据库产品的名称</li><li>通过该名称去获取内部实现保存的数据库名称 Properties 集合, 如果为空说明不支持该数据库</li><li>通过存在就将 <code>databaseType</code> 完成赋值</li></ul><h2 id="2-5-回到-buildProcessEngine-方法"><a href="#2-5-回到-buildProcessEngine-方法" class="headerlink" title="2.5. 回到 buildProcessEngine() 方法"></a>2.5. 回到 buildProcessEngine() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ProcessEngine <span class="title">buildProcessEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    ProcessEngineImpl processEngine = <span class="keyword">new</span> ProcessEngineImpl(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// trigger build of Activiti 5 Engine</span></span><br><span class="line">    <span class="keyword">if</span> (isActiviti5CompatibilityEnabled &amp;&amp; activiti5CompatibilityHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Context.setProcessEngineConfiguration(processEngine.getProcessEngineConfiguration());</span><br><span class="line">        activiti5CompatibilityHandler.getRawProcessEngine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    postProcessEngineInitialisation();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> processEngine;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>init()</code> 方法结束后, 已经完成了相关资源的初始化</li><li>使用 <code>ProcessEngineConfiguration</code> 对象去创建 <code>ProcessEngineImpl</code>, xxxService 核心服务对象都是通过 <code>ProcessEngineConfiguration</code> 对象中的同类对象完成的初始化.</li><li>如果开启 Activiti5 兼容功能, 并且 <code>activiti5CompatibilityHandler</code>(Activiti5兼容处理器对象) 不为空, 执行兼容初始化逻辑, 正常情况下不走该逻辑.</li><li>执行 <code>postProcessEngineInitialisation()</code></li></ul><h2 id="2-6-postProcessEngineInitialisation"><a href="#2-6-postProcessEngineInitialisation" class="headerlink" title="2.6. postProcessEngineInitialisation()"></a>2.6. postProcessEngineInitialisation()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessEngineInitialisation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (performanceSettings.isValidateExecutionRelationshipCountConfigOnBoot()) &#123;</span><br><span class="line">        commandExecutor.execute(<span class="keyword">new</span> ValidateExecutionRelatedEntityCountCfgCmd());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用该方法来检查是否使用了流程实例相关数量记录(<code>validateExecutionRelationshipCountConfigOnBoot</code> 配置的默认值为 true, 默认开启)</li><li>使用命令执行器执行 <code>ValidateExecutionRelatedEntityCountCfgCmd</code></li></ul><h1 id="3-ValidateExecutionRelatedEntityCountCfgCmd-类"><a href="#3-ValidateExecutionRelatedEntityCountCfgCmd-类" class="headerlink" title="3. ValidateExecutionRelatedEntityCountCfgCmd 类"></a>3. ValidateExecutionRelatedEntityCountCfgCmd 类</h1><p>实现了 <code>Command</code> 接口, 命令执行器执行的时候会自动调用其 <code>execute(CommandContext commandContext)</code> 方法.</p><h2 id="3-1-execute-CommandContext-commandContext-方法"><a href="#3-1-execute-CommandContext-commandContext-方法" class="headerlink" title="3.1. execute(CommandContext commandContext) 方法"></a>3.1. execute(CommandContext commandContext) 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Void <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*  </span></span><br><span class="line"><span class="comment">     * If execution related entity counting is on in config | Current property in database : Result</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     *  A) true | not there : write new property with value 'true'</span></span><br><span class="line"><span class="comment">     *  B) true | true : all good</span></span><br><span class="line"><span class="comment">     *  C) true | false : the feature was disabled before, but it is enabled now. Old executions will have a local flag with false. </span></span><br><span class="line"><span class="comment">     *                    It is now enabled. This is fine, will be handled in logic. Update the property.</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     *  D) false | not there: write new property with value 'false'</span></span><br><span class="line"><span class="comment">     *  E) false | true : the feature was disabled before and enabled now. To guarantee data consistency, we need to remove the flag from all executions.</span></span><br><span class="line"><span class="comment">     *                    Update the property.</span></span><br><span class="line"><span class="comment">     *  F) false | false : all good</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * In case A and D (not there), the property needs to be written to the db</span></span><br><span class="line"><span class="comment">     * Only in case E something needs to be done explicitely, the others are okay.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    PropertyEntityManager propertyEntityManager = commandContext.getPropertyEntityManager();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span> configProperty = commandContext.getProcessEngineConfiguration().getPerformanceSettings().isEnableExecutionRelationshipCounts();</span><br><span class="line">    PropertyEntity propertyEntity = propertyEntityManager.findById(PROPERTY_EXECUTION_RELATED_ENTITY_COUNT);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (propertyEntity == <span class="keyword">null</span>) &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 'not there' case in the table above: easy, simply insert the value</span></span><br><span class="line">      </span><br><span class="line">        PropertyEntity newPropertyEntity = propertyEntityManager.create();</span><br><span class="line">        newPropertyEntity.setName(PROPERTY_EXECUTION_RELATED_ENTITY_COUNT);</span><br><span class="line">        newPropertyEntity.setValue(Boolean.toString(configProperty));</span><br><span class="line">        propertyEntityManager.insert(newPropertyEntity);</span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">boolean</span> propertyValue = Boolean.valueOf(propertyEntity.getValue().toString().toLowerCase());</span><br><span class="line">            <span class="keyword">if</span> (!configProperty &amp;&amp; propertyValue) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    logger.info(<span class="string">"Configuration change: execution related entity counting feature was enabled before, but now disabled. "</span></span><br><span class="line">                            + <span class="string">"Updating all execution entities."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                commandContext.getProcessEngineConfiguration().getExecutionDataManager().updateAllExecutionRelatedEntityCountFlags(configProperty);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Update property</span></span><br><span class="line">            <span class="keyword">if</span> (configProperty != propertyValue) &#123;</span><br><span class="line">                propertyEntity.setValue(Boolean.toString(configProperty));</span><br><span class="line">                propertyEntityManager.update(propertyEntity);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>去数据库中的 <code>ACT_GE_PROPERTY</code> 表查询 id 为 <code>cfg.execution-related-entities-count</code> 的记录.<ul><li>如果没有查到, 则插入一条 <code>cfg.execution-related-entities-count, false</code> 的记录</li><li>如果查到, 将该记录中的值转换为小写字符串, 转换为 boolean 值<ul><li>如果配置的值不等于 DB 中存储的值, 那么将 DB 的值更新为配置的值</li></ul></li></ul></li></ul><p>最终初始化代码执行完成后, 会在 DB 中存在这样一条记录</p><p><img src="https://user-images.githubusercontent.com/17758731/53029162-3bda8100-34a3-11e9-927c-0a9a2450c11d.png" alt="image"></p><hr><p>执行完毕后, 此时 ProcessEngine 对象已经初始化完成.</p><p>调用关系如下:</p><p><img src="https://user-images.githubusercontent.com/17758731/53028730-65df7380-34a2-11e9-9221-124d145046d8.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在上一篇文章中, 我们跟踪了流程引擎配置类对象的创建过程, 今天紧接着来看 Activiti 在获取到流程引擎配置类之后, 如何完成流程引擎的初始化.&lt;/p&gt;
&lt;h1 id=&quot;1-ProcessEngineConfiguration-类&quot;&gt;&lt;a href=&quot;#1-Proce
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关系型数据库的瓶颈与优化</title>
    <link href="https://destinywang.github.io/blog/2019/01/19/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%93%B6%E9%A2%88%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>https://destinywang.github.io/blog/2019/01/19/关系型数据库的瓶颈与优化/</id>
    <published>2019-01-19T13:42:46.000Z</published>
    <updated>2019-01-26T14:03:29.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数据库的分类"><a href="#1-数据库的分类" class="headerlink" title="1. 数据库的分类"></a>1. 数据库的分类</h1><p>数据库大致可以分为两部分:</p><ol><li>传统的关系型数据库, 如: MySQL, Oracle, SQLServer 以及 PostgreSQL; MySQL 是国内使用最广泛的数据库, Oracle 在传统行业应用最为广泛, PostgreSQL 性能和功能都比较完善, 但目前文档和社区还有待成长.</li><li>非关系型数据库, 如 HBase(列式数据库), MongoDB(文档型数据库), Redis(高性能 KV 存储), Lucene(搜索引擎) 等等.</li></ol><h1 id="2-关系型数据库的瓶颈与优化"><a href="#2-关系型数据库的瓶颈与优化" class="headerlink" title="2. 关系型数据库的瓶颈与优化"></a>2. 关系型数据库的瓶颈与优化</h1><h2 id="2-1-为什么数据库的架构需要调整"><a href="#2-1-为什么数据库的架构需要调整" class="headerlink" title="2.1 为什么数据库的架构需要调整"></a>2.1 为什么数据库的架构需要调整</h2><ol><li>互联网的数据增长往往是指数型的;</li><li>读写分离, 分布式: 单机性能上存在瓶颈;</li><li>NoSQL, 搜索引擎: 特殊场景的需求无法满足;</li><li>分析系统: 无法满足大数据的分析需求;</li><li>部署要求: 同城容灾/异地容灾.</li></ol><h2 id="2-2-数据库会遇到什么问题"><a href="#2-2-数据库会遇到什么问题" class="headerlink" title="2.2 数据库会遇到什么问题"></a>2.2 数据库会遇到什么问题</h2><h3 id="2-2-1-性能"><a href="#2-2-1-性能" class="headerlink" title="2.2.1 性能"></a>2.2.1 性能</h3><ul><li>查询性能</li><li>写入更新</li><li>并发, 数据量等</li></ul><h3 id="2-2-2-功能"><a href="#2-2-2-功能" class="headerlink" title="2.2.2 功能"></a>2.2.2 功能</h3><ul><li>新功能: LBS/JSON/特殊业务场景</li><li>数据安全性: 强一致性/非强一致性</li><li>大数据分析</li><li>搜索等</li></ul><h1 id="3-不同业务场景的存储选型"><a href="#3-不同业务场景的存储选型" class="headerlink" title="3. 不同业务场景的存储选型"></a>3. 不同业务场景的存储选型</h1><h2 id="3-1-一个简单的问题"><a href="#3-1-一个简单的问题" class="headerlink" title="3.1 一个简单的问题"></a>3.1 一个简单的问题</h2><h4 id="MySQL-已经有-cache-了-为何还需要加一层-Redis"><a href="#MySQL-已经有-cache-了-为何还需要加一层-Redis" class="headerlink" title="MySQL 已经有 cache 了, 为何还需要加一层 Redis"></a>MySQL 已经有 cache 了, 为何还需要加一层 Redis</h4><h2 id="3-2-数据库查询开销"><a href="#3-2-数据库查询开销" class="headerlink" title="3.2 数据库查询开销"></a>3.2 数据库查询开销</h2><p><img src="https://user-images.githubusercontent.com/17758731/51440848-276d6200-1d06-11e9-8a4e-27a280b1a538.png" alt="image"></p><p>其中比较耗时的步骤有:</p><ul><li>建立 TCP 连接</li><li>生成执行计划</li><li>开表</li><li>从磁盘扫描数据</li><li>关闭连接</li></ul><h3 id="3-2-1-SQL-解析"><a href="#3-2-1-SQL-解析" class="headerlink" title="3.2.1 SQL 解析"></a>3.2.1 SQL 解析</h3><p>假设有如下三条语句, 均是根据主键的查询.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1 </span><br><span class="line">SELECT id, name, price FROM products WHERE id IN (1, 2, 3, 4, ... 30000);           # (1-2s)</span><br><span class="line"></span><br><span class="line"># 2. 将第一条查询转换成 30000 条语句</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line">...</span><br><span class="line">SELECT id, name, price FROM products WHERE id = 30000;                              # (2-3s)</span><br><span class="line"></span><br><span class="line"># 3. 将第一条转换成 OR 语句</span><br><span class="line">SELECT id, name, price FROM products WHERE id = 1 OR id = 2 OR ... OR id = 30000;   # (8-10s)</span><br></pre></td></tr></table></figure><p>造成第三条语句执行时间如此长的主要原因就是大量的 OR 语句会导致 SQL 解析非常耗时.</p><h3 id="3-2-2-以-MySQL-的-InnoDB-存储引擎主键查询为例"><a href="#3-2-2-以-MySQL-的-InnoDB-存储引擎主键查询为例" class="headerlink" title="3.2.2 以 MySQL 的 InnoDB 存储引擎主键查询为例"></a>3.2.2 以 MySQL 的 InnoDB 存储引擎主键查询为例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">id</span> = ?;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/17758731/51441235-71f0dd80-1d0a-11e9-95ef-24b2c481a4f0.png" alt="image"></p><p>常规配置的服务器基本可以达到 400000 QPS.</p><h3 id="3-2-3-如果查询条件不是主键"><a href="#3-2-3-如果查询条件不是主键" class="headerlink" title="3.2.3 如果查询条件不是主键"></a>3.2.3 如果查询条件不是主键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">name</span> = ?;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/17758731/51441306-2ab71c80-1d0b-11e9-9b86-cf7aa0957787.png" alt="image"></p><p>对于非主键的查询, MySQL 会根据二级索引查询到主索引对应节点的位置. 按照图中的情况, 会首先通过三次 IO 找到对应主键, 在二级索引的叶子节点会同时保存索引字段的值以及主键的值, 再回到主索引通过主键查询到整条记录.</p><p>在 MySQL 中, 主键查询时最为高效的一类查询.</p><p>DBA 往往希望所有的 SQL 语句都是 KV 查询, 但是往往是不现实的.</p><ul><li>主键查询有限, 有些主键没有业务含义;</li><li>设计表结构时, 并没有考虑过主键问题.</li></ul><p>SQL 语句允许开发人员用各种方式从表中获取数据, 但 DBA 却不会希望我们这么做.</p><h3 id="3-2-3-数据库的大字段"><a href="#3-2-3-数据库的大字段" class="headerlink" title="3.2.3 数据库的大字段"></a>3.2.3 数据库的大字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content varchar(2046) NOT NULL <span class="keyword">COMMENT</span> <span class="string">'原始消息'</span>;</span><br></pre></td></tr></table></figure><p>以 InnoDB 存储引擎为例:</p><ul><li>TinyText/Text/Mediumtext</li><li>varchar(256)/varchar(500)/varchar(20000)</li><li>tinyBlob/blob/mediumBlob </li></ul><p>text 类型本质上和 varchar 类型没有区别.</p><p><img src="https://user-images.githubusercontent.com/17758731/51544585-3a656b00-1e9b-11e9-9610-28431f9b1b09.png" alt="image"></p><p>MySQL 中, 数据是以页的方式来组织的, 每个数据页默认大小 16 KB, 其中包括页头, 页尾, 中间是一行一行的记录.</p><p>图中的每条记录包括 ID, NAME, AGE 和 DETAIL. 假设 DETAIL 是一个大字段, 达到超过了单页的大小, 此时 DB 会新开一个数据页, 当前页通过指针指向该页. 如果一页依然不够, MySQL 就会不断新加数据页直到能够存下为止.</p><p>一旦存在这样的大字段, 会带来如下问题:</p><ol><li>查询开销大;</li><li>查询影响大, 严重时会触发热页换出, 引起系统抖动. MySQL 将记录从磁盘读取出来的时候, 可能会有很多数据页, MySQL 自带缓存时非常宝贵的, 会导致真正使用频率高的数据页被替换成大字段的数据页. 此外, 对 MySQL 来说, 即便只查记录中的某几个字段, 数据库依然会把整条记录取出, 读进内存, 再进行指定字段的筛选</li></ol><p>对于大字段场景可以尝试的优化方案:</p><ol><li>是否适合存储关系型数据库;</li><li>是否所有数据都需要存数据库;</li><li>是否可以新建一张表存储大字段.</li></ol><h3 id="3-2-4-数据库缓存利用率"><a href="#3-2-4-数据库缓存利用率" class="headerlink" title="3.2.4 数据库缓存利用率"></a>3.2.4 数据库缓存利用率</h3><p>以 InnoDB 存储引擎为例:</p><ol><li>MySQL 默认数据页为 <code>16KB</code>, 哪怕只读一行记录, 也需要从磁盘中取出 <code>16KB</code> 数据取出;</li><li>MySQL 是以页为最小的缓存单位;</li><li>如果每行数据 1kb, 256kb 内存空间能缓存多少行有效数据, 最好的情况是每条数据整齐排列在一个数据页中, 那么可以缓存256条记录, 最坏的情况下每一页只存在一条数据, 那么就只能缓存16条;</li><li>在 256KB 的 Buffer Pool 中, 并不是所有空间都用来做数据页缓存, 有很大的一块在 Write Buffer(MySQL 为了优化写操作, 会将一段时间内的写操作先放在 Write Buffer, 再由后台线程定时异步刷新到磁盘上). 然而剩下的 <code>128KB</code> 中还存在一部分脏页.</li></ol><p><img src="https://user-images.githubusercontent.com/17758731/51545929-02135c00-1e9e-11e9-94ac-d755610749d5.png" alt="image"></p><p>缓存为什么如此重要:</p><ul><li>互联网产品往往读多写少;</li><li>扩展缓存远比扩展 DB 简单;</li><li>数据库缓存利用率很低;</li><li>互联网应用对 DB 响应时间比较敏感, 缓存系统一般性能比较好</li><li>只要符合条件的数据都应该走缓存:<ol><li>修改不频繁的数据;</li><li>非实时的数据, 一致性要求不严的数据;</li><li>查询频率较高, 带有明显热点请求的数据;</li></ol></li></ul><h3 id="3-2-5-缓存带来的问题"><a href="#3-2-5-缓存带来的问题" class="headerlink" title="3.2.5 缓存带来的问题"></a>3.2.5 缓存带来的问题</h3><blockquote><p>用了缓存并不一定代表没有问题</p></blockquote><ol><li>缓存命中</li><li>缓存穿透</li><li>缓存失效</li><li>缓存一致</li></ol><h3 id="3-2-6-选择正确的索引"><a href="#3-2-6-选择正确的索引" class="headerlink" title="3.2.6 选择正确的索引"></a>3.2.6 选择正确的索引</h3><blockquote><p>降低扫描数据量还是降低排序代价</p></blockquote><p>大多数查询只能使用一个索引, 因此在需要对多个列进行操作的 SQL 语句中, 我们需要准确评估每个索引的开销.</p><ul><li>key idx_create_time(createTime)</li><li>key idx_price(price)<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_order <span class="keyword">WHERE</span> createTime &gt; xxx <span class="keyword">AND</span> createTime &lt; xxx <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2-7-索引的使用"><a href="#3-2-7-索引的使用" class="headerlink" title="3.2.7 索引的使用"></a>3.2.7 索引的使用</h3><h4 id="3-2-7-1-索引字段过长-超过索引支持"><a href="#3-2-7-1-索引字段过长-超过索引支持" class="headerlink" title="3.2.7.1 索引字段过长, 超过索引支持"></a>3.2.7.1 索引字段过长, 超过索引支持</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># name varchar(512)</span><br><span class="line"># ket idx_name(name(100))</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">comment</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> &gt;= <span class="string">'destiny'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span> <span class="keyword">ASC</span> <span class="keyword">LIMIT</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>上面的例子在实际场景中执行非常慢, 使用 EXPLAIN 打印查询计划: </p><pre><code>  select_type: SIMPLE        table: comment         type: rangepossible_keys: id_name          key: uk_sess      key_len: 403          ref: NULL         rows: 462642        Extra:Using where; Using filesort1 row in set(0.00sec)</code></pre><p>其中需要重点关注的是: <code>Extra:Using where; Using filesort</code></p><ul><li>Using where: 表用到了索引</li><li>Using filesort: MySQL 自带的磁盘排序, 并没有用到索引的排序</li></ul><p>问题是为什么使用了索引, 查询效率依然非常慢?</p><p>真正的原因是字段太长, 而索引的长度只能覆盖 256 字节, 导致 ORDER BY 无法在内存中完成排序</p><h4 id="3-2-7-2"><a href="#3-2-7-2" class="headerlink" title="3.2.7.2"></a>3.2.7.2</h4><p>查询某个用户 id 的分值总和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- uid varchar(190) NOT NULL DEFAULT '' COMMENT '用户 id',</span></span><br><span class="line"><span class="comment">-- score bigint(20) NOT NULL DEFAULT '0' COMMENT '变动分值, 正增, 负减',</span></span><br><span class="line"><span class="comment">-- primary key ID</span></span><br><span class="line"><span class="comment">-- KEY idx_uid(uid)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(score) <span class="keyword">FROM</span> <span class="keyword">name</span> <span class="keyword">WHERE</span> uid = <span class="string">'5993156'</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/17758731/51613355-3f3f2300-1f5e-11e9-8736-f60fca4007b1.png" alt="image"></p><p>这条 SQL 的执行顺序:</p><ol><li>根据二级索引 uid 找到所有主键 id</li><li>再根据主键逐行找到 score</li><li>对 score 进行聚合</li></ol><p>这个 SQL 的问题在于需要进行大量的回表操作(从二级索引回到一级索引), 然后将全部符合过滤条件的记录放在内存中完成聚合操作.</p><p>改进的方法其实很简单, 可以尝试使用 (uid, score) 建立联合索引, 这样只需要查询二级索引就可以获得全部数据.</p><p><img src="https://user-images.githubusercontent.com/17758731/51614040-d062c980-1f5f-11e9-9960-41cc62ad6c77.png" alt="image"></p><p>随机插入 100W 条数据, 现在对比下两条索引的开销.</p><p><img src="https://user-images.githubusercontent.com/17758731/51614096-f0928880-1f5f-11e9-8c2d-bc625ffb2eb1.png" alt="image"></p><h2 id="3-3-数据库写开销"><a href="#3-3-数据库写开销" class="headerlink" title="3.3 数据库写开销"></a>3.3 数据库写开销</h2><ul><li>对持久化要求严格, 写操作代价大</li><li>日志文件需要 fsync, 硬件存在瓶颈</li><li>数据库写操作很难扩展</li><li>主从要求一致场景下还要算上网络开销</li></ul><p><img src="https://user-images.githubusercontent.com/17758731/51615980-191c8180-1f64-11e9-95db-355d532b58d5.png" alt="image"></p><ol><li>将 3 所在的数据页读到缓存中;</li><li>在内存中将 3 改成 5, 提交事务, 触发 Redo Log 的刷新;</li><li>向用户返回操作成功;</li></ol><h2 id="3-4-业务场景触发的高并发写入"><a href="#3-4-业务场景触发的高并发写入" class="headerlink" title="3.4 业务场景触发的高并发写入"></a>3.4 业务场景触发的高并发写入</h2><h3 id="3-4-1-秒杀"><a href="#3-4-1-秒杀" class="headerlink" title="3.4.1 秒杀"></a>3.4.1 秒杀</h3><ul><li>高并发写入的极端情况</li><li>业务优化(缓存/令牌通/排队/Java 信号量/乐观锁)</li><li>热点资源隔离</li><li>引入数据库线程池</li><li>InnoDB 内核层优化: AliSQL</li></ul><h3 id="3-4-2-私信-站内信消息推送"><a href="#3-4-2-私信-站内信消息推送" class="headerlink" title="3.4.2 私信/站内信消息推送"></a>3.4.2 私信/站内信消息推送</h3><ul><li>高并发写入</li><li>伴随大量的读请求</li><li>系统消息/个人消息区分对待</li><li>消息内容单独对待</li><li>延迟写入, 通过队列/缓存达到限流目的</li></ul><h3 id="3-4-3-听歌量"><a href="#3-4-3-听歌量" class="headerlink" title="3.4.3 听歌量"></a>3.4.3 听歌量</h3><p><img src="https://user-images.githubusercontent.com/17758731/51684703-a1178f80-2027-11e9-94ef-6f320b852c29.png" alt="image"></p><ul><li>业务原因导致写入量非常大</li><li>插入更新比不确定, 更新能力强</li><li>数据库需要具备自动扩展的能力</li><li>数据非强一致</li></ul><h2 id="3-5-死锁和超时"><a href="#3-5-死锁和超时" class="headerlink" title="3.5 死锁和超时"></a>3.5 死锁和超时</h2><ul><li>InnoDB 锁超时默认需要 5s 等待</li><li>死锁马上就能被发现, 然后被 DB 自动回滚</li><li>锁超时一般是索引不对, 或者 SQL 语句执行性能较差</li><li>死锁一般是业务实现有问题</li><li>锁超时一般影响较为可控</li><li>死锁情况比较严重, 会导致全站崩溃</li></ul><h2 id="3-6-数据库并发事务-锁"><a href="#3-6-数据库并发事务-锁" class="headerlink" title="3.6 数据库并发事务, 锁"></a>3.6 数据库并发事务, 锁</h2><ul><li>业务流程中的锁: 减库存, 发优惠券</li></ul><p>悲观锁实现:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span> <span class="keyword">FROM</span> tb <span class="keyword">WHERE</span> <span class="keyword">id</span> = ? <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="comment">-- do sth</span></span><br><span class="line"><span class="keyword">UPDATE</span> tb <span class="keyword">SET</span> <span class="keyword">count</span> = <span class="keyword">count</span> - ? <span class="keyword">WHERE</span> <span class="keyword">id</span> = ?;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure></p><p>乐观锁实现:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span> <span class="keyword">FROM</span> tb <span class="keyword">WHERE</span> <span class="keyword">id</span> = ?;</span><br><span class="line"><span class="keyword">UPDATE</span> tb <span class="keyword">SET</span> <span class="keyword">count</span> = <span class="keyword">count</span> - ? <span class="keyword">WHERE</span> <span class="keyword">id</span> = ? <span class="keyword">AND</span> <span class="keyword">count</span> = :<span class="keyword">count</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- do sth</span></span><br></pre></td></tr></table></figure></p><h1 id="4-数据库的模块化拆分"><a href="#4-数据库的模块化拆分" class="headerlink" title="4. 数据库的模块化拆分"></a>4. 数据库的模块化拆分</h1><h2 id="4-1-单机服务器的局限"><a href="#4-1-单机服务器的局限" class="headerlink" title="4.1 单机服务器的局限"></a>4.1 单机服务器的局限</h2><ul><li>虽然硬件配置越来越高, 但是总有瓶颈(e.g. CPU/内存/网络/IO/容量)</li><li>为了后续业务的可扩展性</li><li>单机系统崩溃风险较高</li><li>优化性能<ul><li>读写分离</li><li>冷热分离, 创建归档库</li><li>关键链路和非关键链路隔离</li><li>系统层面做好降级</li></ul></li></ul><h2 id="4-2-常见拆分方案"><a href="#4-2-常见拆分方案" class="headerlink" title="4.2 常见拆分方案"></a>4.2 常见拆分方案</h2><h3 id="4-2-1-读写分离"><a href="#4-2-1-读写分离" class="headerlink" title="4.2.1 读写分离"></a>4.2.1 读写分离</h3><p>读写分离的原理就是将数据库读写操作分散到不同的节点上</p><p><img src="https://user-images.githubusercontent.com/17758731/51689739-3586ef80-2032-11e9-8d0a-3bfcb7ac34d3.png" alt="image"></p><p>读写分离的基本原理就是:</p><ul><li>数据库服务器搭建主从集群;</li><li>数据库主机负责写操作, 从机只负责读操作;</li><li>数据库主机通过复制将数据同步到从机, 每台数据库服务器都存储了所有业务数据.</li><li>业务服务器将写操作发给数据库主机, 将读操作发给数据库从机.</li></ul><p>使用读写分离之后, 可能会引入两个问题:</p><ol><li>主从复制延迟</li><li>分配机制</li></ol><h4 id="4-2-1-1-复制延迟"><a href="#4-2-1-1-复制延迟" class="headerlink" title="4.2.1.1 复制延迟"></a>4.2.1.1 复制延迟</h4><p>主从复制的延迟可能达到秒级, 如果有大量数据短时间需要完成同步, 延迟甚至可能达到分钟.</p><p>主从复制所带来的问题: </p><blockquote><p>如果业务服务器将数据写入到主库后进行读取, 此时读操作访问从库, 而主库的数据没有完全复制过来, 从库是无法读取到最新数据的.</p></blockquote><p>解决方案:</p><ol><li>写操作后的读操作指定发给主库, 逻辑会和业务强绑定, 对业务侵入较大.</li><li>读从库失败后再读一次主库, 如果有大量没有命中从库的读请求, 会给主库带来较大压力.</li><li>关键业务读写操作全部走主库, 非关键业务采用读写分离.</li></ol><h4 id="4-2-1-2-分配机制"><a href="#4-2-1-2-分配机制" class="headerlink" title="4.2.1.2 分配机制"></a>4.2.1.2 分配机制</h4><p>将读写操作区分开来, 然后访问不同的数据库服务器, 一般有两种方式: 程序代码封装和中间件封装</p><h5 id="1-程序代码封装"><a href="#1-程序代码封装" class="headerlink" title="1. 程序代码封装"></a>1. 程序代码封装</h5><p>在代码中抽象一个数据访问层, 实现读写操作分离和数据库服务器连接的管理.</p><p><img src="https://user-images.githubusercontent.com/17758731/51787744-9c321780-21b0-11e9-864b-933a0bde94e3.png" alt="image"></p><p>特点:</p><ol><li>实现简单, 可以根据业务定制化;</li><li>无法做到多语言通用, 容易重复开发;</li><li>故障情况下, 如果主从发生切换, 需要将系统配置手动修改.</li></ol><h5 id="2-中间件封装"><a href="#2-中间件封装" class="headerlink" title="2. 中间件封装"></a>2. 中间件封装</h5><p>独立一套系统出来, 实现读写分离和数据库服务器连接的管理, 中间件对业务服务器提供 SQL 兼容的协议, 业务服务器无需自己进行读写分离, 对于业务服务器来说, 访问中间件和访问数据库没有区别</p><p><img src="https://user-images.githubusercontent.com/17758731/51787885-19aa5780-21b2-11e9-8df2-cba6fb8fcc3e.png" alt="image"></p><p>特点:</p><ol><li>能够支持多种编程语言, 因为数据库中间件对业务提供的是标准的 SQL 接口.</li><li>实现较为复杂, 需要完整支持 SQL 语法和数据库服务器的协议.</li><li>性能要求很高, 容易成为瓶颈.</li><li>数据库主从切换对业务服务器无感知, 数据库中间件可以探测数据库服务器的主从状态(e.g. 向某个测试库写入一条数据, 成功的是主机, 失败的是从机)</li></ol><h3 id="4-2-2-分布式"><a href="#4-2-2-分布式" class="headerlink" title="4.2.2 分布式"></a>4.2.2 分布式</h3><p>读写分离分散了读写操作的压力, 但没有分散存储的压力, 当数据量达到千万级以上的时候, 单台数据库服务器的存储能力就会成为瓶颈:</p><ol><li>数据量太大, 读写的性能会大幅下降.</li><li>数据文件备份和恢复都会很困难.</li></ol><p><img src="https://user-images.githubusercontent.com/17758731/51788030-3051ae00-21b4-11e9-99ca-cdd067495813.png" alt="image"></p><ul><li>垂直分表: 适合将某些表中不常用且占用大量空间的列拆分出去. 代价是操作表的数量增加.</li><li>水平拆分: 适合行数较大的表, 会引入更多的复杂度: <code>路由</code>, <code>join 操作</code>, <code>count 操作</code> 等</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-数据库的分类&quot;&gt;&lt;a href=&quot;#1-数据库的分类&quot; class=&quot;headerlink&quot; title=&quot;1. 数据库的分类&quot;&gt;&lt;/a&gt;1. 数据库的分类&lt;/h1&gt;&lt;p&gt;数据库大致可以分为两部分:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;传统的关系型数据库, 如: MyS
      
    
    </summary>
    
      <category term="MySQL" scheme="https://destinywang.github.io/blog/categories/MySQL/"/>
    
    
      <category term="关系型数据库" scheme="https://destinywang.github.io/blog/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Redis详解(1)--数据结构</title>
    <link href="https://destinywang.github.io/blog/2019/01/16/Redis%E8%AF%A6%E8%A7%A3-1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://destinywang.github.io/blog/2019/01/16/Redis详解-1-数据结构/</id>
    <published>2019-01-16T15:34:03.000Z</published>
    <updated>2019-01-16T15:34:03.868Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Activiti源码分析(1)--流程引擎配置类</title>
    <link href="https://destinywang.github.io/blog/2018/12/31/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1-%E5%BC%95%E6%93%8E%E9%85%8D%E7%BD%AE%E7%B1%BB/"/>
    <id>https://destinywang.github.io/blog/2018/12/31/Activiti源码分析-1-引擎配置类/</id>
    <published>2018-12-31T15:19:13.000Z</published>
    <updated>2019-02-18T16:31:12.891Z</updated>
    
    <content type="html"><![CDATA[<p>Activiti 配置风格获取引擎源码分析: </p><p>流程引擎管理类 ProcessEngines</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    log.info(<span class="string">"processEngine: &#123;&#125;"</span>, processEngine);   <span class="comment">// org.activiti.engine.impl.ProcessEngineImpl@66ea1466</span></span><br><span class="line">    Class&lt;? extends ProcessEngine&gt; processEngineClass = processEngine.getClass();</span><br><span class="line">    log.info(<span class="string">"class: &#123;&#125;"</span>, processEngineClass);      <span class="comment">// org.activiti.engine.impl.ProcessEngineImpl</span></span><br><span class="line">    DynamicBpmnService dynamicBpmnService = processEngine.getDynamicBpmnService();</span><br><span class="line">    FormService formEngineFormService = processEngine.getFormEngineFormService();</span><br><span class="line">    FormRepositoryService formEngineRepositoryService = processEngine.getFormEngineRepositoryService();</span><br><span class="line">    org.activiti.engine.FormService formService = processEngine.getFormService();</span><br><span class="line">    HistoryService historyService = processEngine.getHistoryService();</span><br><span class="line">    IdentityService identityService = processEngine.getIdentityService();</span><br><span class="line">    ManagementService managementService = processEngine.getManagementService();</span><br><span class="line">    ProcessEngineConfiguration processEngineConfiguration = processEngine.getProcessEngineConfiguration();  <span class="comment">// 流程引擎配置类</span></span><br><span class="line">    RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line">    RuntimeService runtimeService = processEngine.getRuntimeService();                                      <span class="comment">// 运行时</span></span><br><span class="line">    TaskService taskService = processEngine.getTaskService();                                               <span class="comment">// 任务相关</span></span><br><span class="line">    log.info(<span class="string">"dynamicBpmnService: &#123;&#125;"</span>, dynamicBpmnService);                     <span class="comment">// org.activiti.engine.impl.DynamicBpmnServiceImpl@1601e47</span></span><br><span class="line">    log.info(<span class="string">"formEngineFormService: &#123;&#125;"</span>, formEngineFormService);               <span class="comment">// null</span></span><br><span class="line">    log.info(<span class="string">"formEngineRepositoryService: &#123;&#125;"</span>, formEngineRepositoryService);   <span class="comment">// null</span></span><br><span class="line">    log.info(<span class="string">"formService: &#123;&#125;"</span>, formService);                                   <span class="comment">// org.activiti.engine.impl.FormServiceImpl@3bffddff</span></span><br><span class="line">    log.info(<span class="string">"historyService: &#123;&#125;"</span>, historyService);                             <span class="comment">// org.activiti.engine.impl.HistoryServiceImpl@66971f6b</span></span><br><span class="line">    log.info(<span class="string">"identityService: &#123;&#125;"</span>, identityService);                           <span class="comment">// org.activiti.engine.impl.IdentityServiceImpl@50687efb</span></span><br><span class="line">    log.info(<span class="string">"managementService: &#123;&#125;"</span>, managementService);                       <span class="comment">// org.activiti.engine.impl.ManagementServiceImpl@517bd097</span></span><br><span class="line">    log.info(<span class="string">"processEngineConfiguration: &#123;&#125;"</span>, processEngineConfiguration);     <span class="comment">// org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration@142eef62</span></span><br><span class="line">    log.info(<span class="string">"repositoryService: &#123;&#125;"</span>, repositoryService);                       <span class="comment">// org.activiti.engine.impl.RepositoryServiceImpl@4a9cc6cb</span></span><br><span class="line">    log.info(<span class="string">"runtimeService: &#123;&#125;"</span>, runtimeService);                             <span class="comment">// org.activiti.engine.impl.RuntimeServiceImpl@5990e6c5</span></span><br><span class="line">    log.info(<span class="string">"taskService: &#123;&#125;"</span>, taskService);                                   <span class="comment">// org.activiti.engine.impl.TaskServiceImpl@56e07a08</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总的来说流程引擎配置类(ProcessEngineConfiguration) 的获取比较简单, 通过默认配置找到 classpath 下的 activiti.cfg.xml 配置文件, 再将该配置文件使用 Spring 的组件完成读取, 将 id 为 <code>processEngineConfiguration</code> 的 bean 完成初始化并返回.</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/52964570-96a9a500-33dd-11e9-93fb-e677b4d880ff.png" alt="image"></p><h1 id="1-ProcessEngines"><a href="#1-ProcessEngines" class="headerlink" title="1. ProcessEngines"></a>1. ProcessEngines</h1><p>包含四个重要的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;流程引擎名称, 流程引擎实例&gt;</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Map&lt;String, ProcessEngine&gt; processEngines = <span class="keyword">new</span> HashMap&lt;String, ProcessEngine&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;流程引擎名称, 流程引擎信息类实例&gt;</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByName = <span class="keyword">new</span> HashMap&lt;String, ProcessEngineInfo&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;构造流程引擎的资源名称(如文件路径名), 流程引擎信息类实例&gt;</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByResourceUrl = <span class="keyword">new</span> HashMap&lt;String, ProcessEngineInfo&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储流程引擎信息类实例对象</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> List&lt;ProcessEngineInfo&gt; processEngineInfos = <span class="keyword">new</span> ArrayList&lt;ProcessEngineInfo&gt;();</span><br></pre></td></tr></table></figure><h2 id="1-1-getDefaultProcessEngine"><a href="#1-1-getDefaultProcessEngine" class="headerlink" title="1.1. getDefaultProcessEngine"></a>1.1. getDefaultProcessEngine</h2><p>方法体中只有一行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngine <span class="title">getDefaultProcessEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getProcessEngine(NAME_DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类中 NAME_DEFAULT 的值是 <code>default</code></p><h2 id="1-2-getProcessEngine-String-processEngineName"><a href="#1-2-getProcessEngine-String-processEngineName" class="headerlink" title="1.2. getProcessEngine(String processEngineName)"></a>1.2. getProcessEngine(String processEngineName)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngine <span class="title">getProcessEngine</span><span class="params">(String processEngineName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isInitialized()) &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> processEngines.get(processEngineName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>判断该类是否已经被初始化<ol><li>如果没有初始化, 执行 <code>init()</code> 方法</li></ol></li><li>返回 <code>Map&lt;String, ProcessEngine&gt; processEngines</code> 对应 key 的实例对象</li></ol><h3 id="1-2-1-isInitialized"><a href="#1-2-1-isInitialized" class="headerlink" title="1.2.1. isInitialized()"></a>1.2.1. isInitialized()</h3><p>返回类中一个静态常量, 用于标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isInitialized;</span><br></pre></td></tr></table></figure><h2 id="1-3-init"><a href="#1-3-init" class="headerlink" title="1.3. init()"></a>1.3. init()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isInitialized()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (processEngines == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Create new map to store process-engines if current map is</span></span><br><span class="line">            <span class="comment">// null</span></span><br><span class="line">            processEngines = <span class="keyword">new</span> HashMap&lt;String, ProcessEngine&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        ClassLoader classLoader = ReflectUtil.getClassLoader();</span><br><span class="line">        Enumeration&lt;URL&gt; resources = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resources = classLoader.getResources(<span class="string">"activiti.cfg.xml"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"problem retrieving activiti.cfg.xml resources on the classpath: "</span> + System.getProperty(<span class="string">"java.class.path"</span>), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Remove duplicated configuration URL's using set. Some</span></span><br><span class="line">        <span class="comment">// classloaders may return identical URL's twice, causing duplicate</span></span><br><span class="line">        <span class="comment">// startups</span></span><br><span class="line">        Set&lt;URL&gt; configUrls = <span class="keyword">new</span> HashSet&lt;URL&gt;();</span><br><span class="line">        <span class="keyword">while</span> (resources.hasMoreElements()) &#123;</span><br><span class="line">            configUrls.add(resources.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;URL&gt; iterator = configUrls.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">            URL resource = iterator.next();</span><br><span class="line">            log.info(<span class="string">"Initializing process engine using configuration '&#123;&#125;'"</span>, resource.toString());</span><br><span class="line">            initProcessEngineFromResource(resource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resources = classLoader.getResources(<span class="string">"activiti-context.xml"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"problem retrieving activiti-context.xml resources on the classpath: "</span> + System.getProperty(<span class="string">"java.class.path"</span>), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (resources.hasMoreElements()) &#123;</span><br><span class="line">            URL resource = resources.nextElement();</span><br><span class="line">            log.info(<span class="string">"Initializing process engine using Spring configuration '&#123;&#125;'"</span>, resource.toString());</span><br><span class="line">            initProcessEngineFromSpringResource(resource);</span><br><span class="line">        &#125;</span><br><span class="line">        setInitialized(<span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.info(<span class="string">"Process engines already initialized"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>再判断是否已经初始化<ol><li>如果未初始化, 先初始化 <code>Map&lt;String, ProcessEngine&gt; processEngines</code></li><li>获取当前类加载器</li><li>使用该类加载器指定加载 <code>activiti.cfg.xml</code> 路径下的资源, 并保存在 Set 中</li><li>遍历 Set 集合执行 <code>initProcessEngineFromResource(URL resource)</code></li><li>获取 spring 风格配置文件</li><li>将类中 <code>initialized</code> 设置为 true</li></ol></li><li>如果已被初始化, 直接返回</li></ol><h2 id="1-4-initProcessEngineFromResource-URL-resourceUrl"><a href="#1-4-initProcessEngineFromResource-URL-resourceUrl" class="headerlink" title="1.4. initProcessEngineFromResource(URL resourceUrl)"></a>1.4. initProcessEngineFromResource(URL resourceUrl)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessEngineInfo <span class="title">initProcessEngineFromResource</span><span class="params">(URL resourceUrl)</span> </span>&#123;</span><br><span class="line">    ProcessEngineInfo processEngineInfo = processEngineInfosByResourceUrl.get(resourceUrl.toString());</span><br><span class="line">    <span class="comment">// if there is an existing process engine info</span></span><br><span class="line">    <span class="keyword">if</span> (processEngineInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// remove that process engine from the member fields</span></span><br><span class="line">        processEngineInfos.remove(processEngineInfo);</span><br><span class="line">        <span class="keyword">if</span> (processEngineInfo.getException() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String processEngineName = processEngineInfo.getName();</span><br><span class="line">            processEngines.remove(processEngineName);</span><br><span class="line">            processEngineInfosByName.remove(processEngineName);</span><br><span class="line">        &#125;</span><br><span class="line">        processEngineInfosByResourceUrl.remove(processEngineInfo.getResourceUrl());</span><br><span class="line">    &#125;</span><br><span class="line">    String resourceUrlString = resourceUrl.toString();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">"initializing process engine for resource &#123;&#125;"</span>, resourceUrl);</span><br><span class="line">        ProcessEngine processEngine = buildProcessEngine(resourceUrl);</span><br><span class="line">        String processEngineName = processEngine.getName();</span><br><span class="line">        log.info(<span class="string">"initialised process engine &#123;&#125;"</span>, processEngineName);</span><br><span class="line">        processEngineInfo = <span class="keyword">new</span> ProcessEngineInfoImpl(processEngineName, resourceUrlString, <span class="keyword">null</span>);</span><br><span class="line">        processEngines.put(processEngineName, processEngine);</span><br><span class="line">        processEngineInfosByName.put(processEngineName, processEngineInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        log.error(<span class="string">"Exception while initializing process engine: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">        processEngineInfo = <span class="keyword">new</span> ProcessEngineInfoImpl(<span class="keyword">null</span>, resourceUrlString, getExceptionString(e));</span><br><span class="line">    &#125;</span><br><span class="line">    processEngineInfosByResourceUrl.put(resourceUrlString, processEngineInfo);</span><br><span class="line">    processEngineInfos.add(processEngineInfo);</span><br><span class="line">    <span class="keyword">return</span> processEngineInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>根据路径尝试从 <code>Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByResourceUrl</code> 获取流程引擎类实例<ol><li>如果不为空</li><li>将 <code>List&lt;ProcessEngineInfo&gt; processEngineInfos</code> 中对应的元素删除</li><li>流程引擎信息类实例没有 Exception, 将 <code>Map&lt;String, ProcessEngine&gt; processEngines</code> 和 <code>Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByName</code> 中 key 对应的元素都删除</li><li><code>Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByResourceUrl</code> 中 key 对应的元素也删除.</li></ol></li><li>通过 <code>buildProcessEngine</code> 方法获取 ProcessEngine 对象</li><li>将 <code>Map&lt;String, ProcessEngine&gt; processEngines</code> 和 <code>Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByName</code> 设置对应的 key 和 value</li><li>将 <code>Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByResourceUrl</code> 和 <code>List&lt;ProcessEngineInfo&gt; processEngineInfos</code> 也添加对应元素</li></ol><h2 id="1-5-buildProcessEngine-URL-resource"><a href="#1-5-buildProcessEngine-URL-resource" class="headerlink" title="1.5. buildProcessEngine(URL resource)"></a>1.5. buildProcessEngine(URL resource)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessEngine <span class="title">buildProcessEngine</span><span class="params">(URL resource)</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream = resource.openStream();</span><br><span class="line">        ProcessEngineConfiguration processEngineConfiguration = ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream);</span><br><span class="line">        <span class="keyword">return</span> processEngineConfiguration.buildProcessEngine();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"couldn't open resource stream: "</span> + e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtil.closeSilently(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过传入的 URL 获取输入流;</li><li>通过 <code>createProcessEngineConfigurationFromInputStream()</code> 方法获取流程引擎配置对象</li><li>根据流程引擎配置类实例返回流程引擎实例</li><li>关闭流</li></ol><h1 id="2-ProcessEngineConfiguration-类"><a href="#2-ProcessEngineConfiguration-类" class="headerlink" title="2. ProcessEngineConfiguration 类"></a>2. ProcessEngineConfiguration 类</h1><h2 id="2-1-createProcessEngineConfigurationFromInputStream-InputStream-inputStream"><a href="#2-1-createProcessEngineConfigurationFromInputStream-InputStream-inputStream" class="headerlink" title="2.1. createProcessEngineConfigurationFromInputStream(InputStream inputStream)"></a>2.1. createProcessEngineConfigurationFromInputStream(InputStream inputStream)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngineConfiguration <span class="title">createProcessEngineConfigurationFromInputStream</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createProcessEngineConfigurationFromInputStream(inputStream, <span class="string">"processEngineConfiguration"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法只有一行, 用来添加默认的 beanName: <code>processEngineConfiguration</code></p><p>这个 beanName 非常重要, Activiti 要求在配置文件中必须完成 id 为 <code>processEngineConfiguration</code> 的 bean</p><h2 id="2-2-createProcessEngineConfigurationFromInputStream-InputStream-inputStream-String-beanName"><a href="#2-2-createProcessEngineConfigurationFromInputStream-InputStream-inputStream-String-beanName" class="headerlink" title="2.2. createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName)"></a>2.2. createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngineConfiguration <span class="title">createProcessEngineConfigurationFromInputStream</span><span class="params">(InputStream inputStream, String beanName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BeansConfigurationHelper.parseProcessEngineConfigurationFromInputStream(inputStream, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-BeansConfigurationHelper-类"><a href="#3-BeansConfigurationHelper-类" class="headerlink" title="3. BeansConfigurationHelper 类"></a>3. BeansConfigurationHelper 类</h1><h2 id="3-1-parseProcessEngineConfigurationFromInputStream-InputStream-inputStream-String-beanName"><a href="#3-1-parseProcessEngineConfigurationFromInputStream-InputStream-inputStream-String-beanName" class="headerlink" title="3.1. parseProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName)"></a>3.1. parseProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngineConfiguration <span class="title">parseProcessEngineConfigurationFromInputStream</span><span class="params">(InputStream inputStream, String beanName)</span> </span>&#123;</span><br><span class="line">    Resource springResource = <span class="keyword">new</span> InputStreamResource(inputStream);</span><br><span class="line">    <span class="keyword">return</span> parseProcessEngineConfiguration(springResource, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>将输入流转化为 <code>org.springframework.core.io.Resource</code>, Spring 的资源抽象接口, 用于后续的 spring 风格配置文件解析;</li><li>将配置文件解析为 bean, 最终构造 ProcessEngineConfiguration 并返回</li></ol><h2 id="3-2-parseProcessEngineConfiguration-Resource-springResource-String-beanName"><a href="#3-2-parseProcessEngineConfiguration-Resource-springResource-String-beanName" class="headerlink" title="3.2. parseProcessEngineConfiguration(Resource springResource, String beanName)"></a>3.2. parseProcessEngineConfiguration(Resource springResource, String beanName)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngineConfiguration <span class="title">parseProcessEngineConfiguration</span><span class="params">(Resource springResource, String beanName)</span> </span>&#123;</span><br><span class="line">    DefaultListableBeanFactory beanFactory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line">    XmlBeanDefinitionReader xmlBeanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line">    xmlBeanDefinitionReader.setValidationMode(XmlBeanDefinitionReader.VALIDATION_XSD);</span><br><span class="line">    xmlBeanDefinitionReader.loadBeanDefinitions(springResource);</span><br><span class="line">    ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) beanFactory.getBean(beanName);</span><br><span class="line">    processEngineConfiguration.setBeans(<span class="keyword">new</span> SpringBeanFactoryProxyMap(beanFactory));</span><br><span class="line">    <span class="keyword">return</span> processEngineConfiguration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建 BeanFactory;</li><li>创建 XmlBeanDefinitionReader, 用于读取 XML 中的 bean 定义;</li><li>指定 XML 验证方式为 XSD;</li><li>读取配置文件资源;</li><li>根据 beanName 从 beanFactory 中获取指定对象, 并强转为 ProcessEngineConfigurationImpl;</li></ol><h1 id="4-回到-ProcessEngines-类中"><a href="#4-回到-ProcessEngines-类中" class="headerlink" title="4. 回到 ProcessEngines 类中"></a>4. 回到 ProcessEngines 类中</h1><p>此时已经完成了 <code>ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream);</code> 的执行, 得到了 ProcessEngineConfiguration 对象, 接下来调用 <code>processEngineConfiguration.buildProcessEngine()</code> 来获取 ProcessEngine 并返回.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Activiti 配置风格获取引擎源码分析: &lt;/p&gt;
&lt;p&gt;流程引擎管理类 ProcessEngines&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="activiti" scheme="https://destinywang.github.io/blog/categories/activiti/"/>
    
      <category term="源码" scheme="https://destinywang.github.io/blog/categories/activiti/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="activiti" scheme="https://destinywang.github.io/blog/tags/activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti(7)--加签功能的实现</title>
    <link href="https://destinywang.github.io/blog/2018/12/23/Activiti-7-%E5%8A%A0%E7%AD%BE%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://destinywang.github.io/blog/2018/12/23/Activiti-7-加签功能的实现/</id>
    <published>2018-12-22T18:08:46.000Z</published>
    <updated>2019-03-12T14:53:00.219Z</updated>
    
    <content type="html"><![CDATA[<p>加签的概念</p><p>思路:</p><ol><li>直接需改模板, 在模板中添加节点以及连线, 并修改实例的走向;</li><li>直接修改路程定义对应的缓存数据, 不修改模板, 新增节点与当前需要加签的实例挂钩.</li></ol><h1 id="1-方案一"><a href="#1-方案一" class="headerlink" title="1. 方案一"></a>1. 方案一</h1><h2 id="1-1-实现方式"><a href="#1-1-实现方式" class="headerlink" title="1.1. 实现方式"></a>1.1. 实现方式</h2><ol><li>找到当前实例对象的模板数据</li><li>在模板数据的基础上添加新节点以及修改连线, 并更新数据库中的模板.</li><li>更新模板对应的流程定义缓存, 必须更新缓存否则加签的节点不会生效. 因为 Activiti 在查找流程定义的时候会先尝试从缓存中进行获取.</li><li>完成新增节点额任务后, 再把新增节点以及连线删除, 即还原模板.</li></ol><h2 id="1-2-优缺点"><a href="#1-2-优缺点" class="headerlink" title="1.2. 优缺点"></a>1.2. 优缺点</h2><ul><li>模板是共享的, 因此修改模板就会将所有运行实例对象的模板修改.</li><li>实例间应该相互独立, 不能让针对某个实例的加签影响到其他实例.</li><li>修改模板容易导致当前实例影响其他实例, 因此该方案不可取;</li></ul><h1 id="2-方案二"><a href="#2-方案二" class="headerlink" title="2. 方案二"></a>2. 方案二</h1><ul><li>模板是共享的, 因此不能修改模板, 否则会影响其他实例.</li><li>也不需要修改原有流程的入线即出线, 不修改原有的走向.</li></ul><blockquote><p>由于流程运转的过程中, 需要实时的获取该实例对应的模板数据才能知道应该如何运转.</p><ol><li>从流程定义缓存中获取模板数据</li><li>如果流程定义缓存丢失, 则需要重新执行模板的解析工作并补充到流程定义缓存中.</li></ol></blockquote><p>因此可以直接修改流程定义缓存数据.</p><h2 id="2-1-思路"><a href="#2-1-思路" class="headerlink" title="2.1. 思路"></a>2.1. 思路</h2><p><img src="https://user-images.githubusercontent.com/17758731/53721331-f7d17e00-3e9d-11e9-9680-6d8d463a5ad6.png" alt="image"></p><ol><li>在流程缓存中添加一个任务节点, 并未任务节点添加出线信息, 出线连接的是需要到达的目标节点.</li><li>添加的目标节点并没有入线, 并不会影响其他实例, 因此其他流程没有机会走到该节点.</li><li>加签完成后触发执行实例走到新增的任务节点, 这样当前实例就按照最新的路线进行运转;</li><li>如果当前节点在加签后不想直接运转到最新节点, 则可以复制一个当前节点, 继续让流程运转.</li><li>加签的最终目的是让实例按照最新的路线走, 与模板中规划的路线脱离关系.</li></ol><p><img src="https://user-images.githubusercontent.com/17758731/53721687-c4dbba00-3e9e-11e9-9432-0223776ba620.png" alt="image"></p><h2 id="2-2-引入的问题"><a href="#2-2-引入的问题" class="headerlink" title="2.2. 引入的问题"></a>2.2. 引入的问题</h2><ol><li>新增的任务节点及连线如何存储</li><li>流程定义缓存如何修改</li><li>加签的节点以及连线信息如何持久化</li><li>如果我们重新修改的流程定义缓存丢失, 引擎依然会解析数据库中保存的原有定义, 新增的节点并没有持久化到 DB</li><li>流程实例结束后, 当前加签的节点以及连线如何删除.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddOneTask</span><span class="params">(String taskId, String targetActivityId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前的任务</span></span><br><span class="line">    TaskEntity taskEntity = (TaskEntity) activitiRule.getTaskService().createTaskQuery().taskId(taskId).singleResult();</span><br><span class="line">    log.info(<span class="string">"taskEntity: &#123;&#125;"</span>, taskEntity);</span><br><span class="line">    String processDefinitionId = taskEntity.getProcessDefinitionId();</span><br><span class="line">    ManagementService managementService = activitiRule.getManagementService();</span><br><span class="line">    Process process = managementService.executeCommand(<span class="keyword">new</span> GetProcessCmd(processDefinitionId));</span><br><span class="line">    log.info(<span class="string">"process: &#123;&#125;"</span>, process);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建新节点</span></span><br><span class="line">    UserTask userTask = <span class="keyword">new</span> UserTask();</span><br><span class="line">    userTask.setId(<span class="string">"destinyD"</span>);</span><br><span class="line">    userTask.setName(<span class="string">"加签节点 destinyD"</span>);</span><br><span class="line">    userTask.setAssignee(<span class="string">"destiny-d"</span>);</span><br><span class="line">    userTask.setBehavior(createUserTaskBehavior(userTask));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新节点的目标连线</span></span><br><span class="line">    SequenceFlow sequenceFlow = <span class="keyword">new</span> SequenceFlow();</span><br><span class="line">    sequenceFlow.setId(<span class="string">"extra"</span>);</span><br><span class="line">    userTask.setOutgoingFlows(Arrays.asList(sequenceFlow));</span><br><span class="line">    sequenceFlow.setTargetFlowElement(process.getFlowElement(targetActivityId));</span><br><span class="line">    sequenceFlow.setTargetRef(targetActivityId);</span><br><span class="line"></span><br><span class="line">    process.addFlowElement(userTask);</span><br><span class="line">    process.addFlowElement(sequenceFlow);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新缓存</span></span><br><span class="line">    ProcessDefinitionCacheEntry processDefinitionCacheEntry = managementService.executeCommand(<span class="keyword">new</span> GetProcessDefinitionCacheEntryCmd(processDefinitionId));</span><br><span class="line">    processDefinitionCacheEntry.setProcess(process);</span><br><span class="line">    Process processCache = managementService.executeCommand(<span class="keyword">new</span> GetProcessDefinitionCacheEntryCmd(processDefinitionId)).getProcess();</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"processCache: &#123;&#125;"</span>, processCache);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳转</span></span><br><span class="line">    managementService.executeCommand(<span class="keyword">new</span> JumpCmd(taskId, userTask.getId()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但该方法产生跳转后的新 task 仍然无法提交, 会报一下错误:</p><pre><code>17:59:18.971 [main] [ERROR] Error while closing command context  o.a.e.i.i.CommandContext.logException:122org.activiti.engine.ActivitiException: Programmatic error: no current flow element found or invalid type: null. Halting.at org.activiti.engine.impl.agenda.TriggerExecutionOperation.run(TriggerExecutionOperation.java:49)at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperation(CommandInvoker.java:73)at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperations(CommandInvoker.java:57)at org.activiti.engine.impl.interceptor.CommandInvoker.execute(CommandInvoker.java:42)at org.activiti.engine.impl.interceptor.TransactionContextInterceptor.execute(TransactionContextInterceptor.java:48)at org.activiti.engine.impl.interceptor.CommandContextInterceptor.execute(CommandContextInterceptor.java:63)at org.activiti.engine.impl.interceptor.LogInterceptor.execute(LogInterceptor.java:29)at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:44)at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:39)at org.activiti.engine.impl.TaskServiceImpl.complete(TaskServiceImpl.java:182)at org.destiny.activiti.addsign1.ClientTest.complete(ClientTest.java:56)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)at org.activiti.engine.test.ActivitiRule$1.evaluate(ActivitiRule.java:116)</code></pre><p>出线错误的原因是加签方法执行完成后, 缓存中的数据已经被释放, complete 的时候无法继续, 需要在 complete 之前重新向缓存中添加之前的节点和连线</p><p>在修改流程定义缓存而不修改模板的实现中, 我们需要一个额外的持久化方式去实现加签部分的持久化</p><h2 id="2-3-持久化加签现场数据"><a href="#2-3-持久化加签现场数据" class="headerlink" title="2.3. 持久化加签现场数据"></a>2.3. 持久化加签现场数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ACT_ADD_SIGN`</span> (</span><br><span class="line">  <span class="string">`ID_`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`PROCESS_DEFINITION_ID_`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'流程定义 ID'</span>,</span><br><span class="line">  <span class="string">`ASSIGNEE_`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'操作人 ID'</span>,</span><br><span class="line">  <span class="string">`ACT_ID_`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'活动 ID'</span>,</span><br><span class="line">  <span class="string">`PROCESS_INSTANCE_`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'流程实例 ID'</span>,</span><br><span class="line">  <span class="string">`PROPERTIES_TEXT_`</span> <span class="built_in">varchar</span>(<span class="number">2000</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'参数'</span>,</span><br><span class="line">  <span class="string">`STATE_`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'状态位, 0-有效, 1-无效'</span>,</span><br><span class="line">  <span class="string">`CREATE_TIME`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`ID_`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><p>以及对应的 Mapper 文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AddSignMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from ACT_ADD_SIGN where STATE_ = 0 AND PROCESS_INSTANCE_ID_ = #&#123;processInstanceId&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"id"</span>, column = <span class="string">"ID_"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"processDefinitionId"</span>, column = <span class="string">"PROCESS_DEFINITION_ID_"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"assignee"</span>, column = <span class="string">"ASSIGNEE_"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"processInstanceId"</span>, column = <span class="string">"PROCESS_INSTANCE_ID_"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"propertiesText"</span>, column = <span class="string">"PROPERTIES_TEXT_"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"state"</span>, column = <span class="string">"STATE_"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"createTime"</span>, column = <span class="string">"CREATE_TIME_"</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;AddSign&gt; <span class="title">find</span><span class="params">(String processInstanceId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into act_creation(PROCESS_DEFINITION_ID_, PROCESS_INSTANCE_ID_, PROPERTIES_TEXT_, CREATE_TIME_) values(#&#123;processDefinitionId&#125;, #&#123;processInstanceId&#125;, #&#123;propertiesText&#125;, #&#123;createTime&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(AddSign addSign)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-模型定义"><a href="#2-4-模型定义" class="headerlink" title="2.4. 模型定义"></a>2.4. 模型定义</h2><h3 id="2-4-1-AddSign"><a href="#2-4-1-AddSign" class="headerlink" title="2.4.1. AddSign"></a>2.4.1. AddSign</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddSign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String processDefinitionId; <span class="comment">// 流程定义 id</span></span><br><span class="line">    <span class="keyword">private</span> String assignee;            <span class="comment">// 加签用户</span></span><br><span class="line">    <span class="keyword">private</span> String activityId;          <span class="comment">// 节点 id</span></span><br><span class="line">    <span class="keyword">private</span> String processInstanceId;   <span class="comment">// 流程实例 id</span></span><br><span class="line">    <span class="keyword">private</span> String propertiesText;      <span class="comment">// 参数(复合字段)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;                  <span class="comment">// 状态 0-可用, 1-不可用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> createTime;            <span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-TaskModel"><a href="#2-4-2-TaskModel" class="headerlink" title="2.4.2. TaskModel"></a>2.4.2. TaskModel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskModel</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String assignee;    <span class="comment">// 处理人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type = <span class="number">1</span>;       <span class="comment">// 任务类型, 1-任务节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-TmpActivityModel"><a href="#2-4-3-TmpActivityModel" class="headerlink" title="2.4.3. TmpActivityModel"></a>2.4.3. TmpActivityModel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TmpActivityModel</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String activityIds;     <span class="comment">// 加签的节点id, 多个的话逗号分隔</span></span><br><span class="line">    <span class="keyword">private</span> String firstId;</span><br><span class="line">    <span class="keyword">private</span> String lastId;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TaskModel&gt; activityList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-加签功能实现类"><a href="#2-5-加签功能实现类" class="headerlink" title="2.5. 加签功能实现类"></a>2.5. 加签功能实现类</h2><p><img src="https://user-images.githubusercontent.com/17758731/53778078-75e16380-3f36-11e9-91e6-ae241c08447a.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddSignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> procDefId     流程定义 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> procInstId    流程实例 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processEngine 流程引擎</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskModelList 加签节点列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstNodeId   加签开始节点 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastNodeId    加签结束节点 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> persistence   是否持久化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onset         是否需要立即跳转</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskId        taskID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetNodeId  跳转的目标节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUserTask</span><span class="params">(String procDefId, String procInstId, ProcessEngine processEngine, List&lt;TaskModel&gt; taskModelList,</span></span></span><br><span class="line"><span class="function"><span class="params">                            String firstNodeId, String lastNodeId, <span class="keyword">boolean</span> persistence, <span class="keyword">boolean</span> onset, String taskId, String targetNodeId)</span> </span>&#123;</span><br><span class="line">        ManagementService managementService = processEngine.getManagementService();</span><br><span class="line">        ProcessDefinitionCacheEntry processDefinitionCacheEntry = managementService.executeCommand(<span class="keyword">new</span> GetProcessDefinitionCacheEntryCmd(procDefId));</span><br><span class="line">        <span class="comment">// 通过缓存获取</span></span><br><span class="line">        Process process = processDefinitionCacheEntry.getProcess();</span><br><span class="line">        <span class="comment">// 批量生成任务, 循环遍历 TaskModel</span></span><br><span class="line">        List&lt;UserTask&gt; userTaskList = Lists.newArrayList();</span><br><span class="line">        taskModelList.forEach(taskModel -&gt; &#123;</span><br><span class="line">            UserTask userTask = ActivityUtils.convertToUserTask(taskModel, processEngine);</span><br><span class="line">            userTaskList.add(userTask);</span><br><span class="line">            process.addFlowElement(userTask);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 构造并添加连线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userTaskList.size(); ++i) &#123;</span><br><span class="line">            UserTask userTask = userTaskList.get(i);</span><br><span class="line">            SequenceFlow sequenceFlow = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == userTaskList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果是最后一个节点</span></span><br><span class="line">                sequenceFlow = ActivityUtils.buildSequenceFlow(userTask.getId() + <span class="string">"--&gt;"</span> + lastNodeId,</span><br><span class="line">                        userTask.getId() + <span class="string">"--&gt;"</span> + lastNodeId, userTask.getId(), lastNodeId);</span><br><span class="line">                sequenceFlow.setTargetRef(lastNodeId);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果不是最后一个</span></span><br><span class="line">                ActivityUtils.buildSequenceFlow(userTask.getId() + <span class="string">"--&gt;"</span> + userTaskList.get(i + <span class="number">1</span>).getId(),</span><br><span class="line">                        userTask.getId() + <span class="string">"--&gt;"</span> + userTaskList.get(i + <span class="number">1</span>).getId(),</span><br><span class="line">                        userTask.getId(), userTaskList.get(i + <span class="number">1</span>).getId());</span><br><span class="line">                sequenceFlow.setTargetFlowElement(userTaskList.get(i + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            userTask.setOutgoingFlows(Arrays.asList());</span><br><span class="line">            process.addFlowElement(sequenceFlow);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"process: &#123;&#125;"</span>, process);</span><br><span class="line">        <span class="comment">// 更新缓存</span></span><br><span class="line">        processDefinitionCacheEntry.setProcess(process);</span><br><span class="line">        <span class="comment">// 如果需要立即生效(直接跳转)</span></span><br><span class="line">        <span class="keyword">if</span> (onset) &#123;</span><br><span class="line">            managementService.executeCommand(<span class="keyword">new</span> JumpCmd(taskId, targetNodeId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果需要持久化</span></span><br><span class="line">        <span class="keyword">if</span> (persistence) &#123;</span><br><span class="line">            persistenceToDB(procDefId, procInstId, firstNodeId, lastNodeId, taskModelList, processEngine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将加签的任务节点添加到数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> procDefId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> procInstId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstNodeId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastNodeId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskModelList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processEngine</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">persistenceToDB</span><span class="params">(String procDefId, String procInstId, String firstNodeId, String lastNodeId, List&lt;TaskModel&gt; taskModelList, ProcessEngine processEngine)</span> </span>&#123;</span><br><span class="line">        ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) processEngine.getProcessEngineConfiguration();</span><br><span class="line">        SqlSession sqlSession = processEngineConfiguration.getSqlSessionFactory().openSession();</span><br><span class="line">        AddSignMapper mapper = sqlSession.getMapper(AddSignMapper.class);</span><br><span class="line">        TmpActivityModel tmpActivityModel = <span class="keyword">new</span> TmpActivityModel();</span><br><span class="line">        tmpActivityModel.setFirstId(firstNodeId);</span><br><span class="line">        tmpActivityModel.setLastId(lastNodeId);</span><br><span class="line">        tmpActivityModel.setActivityList(taskModelList);</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (TaskModel taskModel : taskModelList) &#123;</span><br><span class="line">            stringBuilder.append(taskModel.getId() + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        tmpActivityModel.setActivityIds(stringBuilder.toString());</span><br><span class="line"></span><br><span class="line">        AddSign addSign = <span class="keyword">new</span> AddSign();</span><br><span class="line">        addSign.setProcessDefinitionId(procDefId);</span><br><span class="line">        addSign.setProcessInstanceId(procInstId);</span><br><span class="line">        addSign.setPropertiesText(JSON.toJSONString(tmpActivityModel));</span><br><span class="line">        addSign.setCreateTime(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">int</span> insert = mapper.insert(addSign);</span><br><span class="line">        log.info(<span class="string">"insert 结果: &#123;&#125;"</span>, insert);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-测试代码"><a href="#2-6-测试代码" class="headerlink" title="2.6. 测试代码"></a>2.6. 测试代码</h2><p>部署流程后, 通过测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSignTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String taskId = <span class="string">"17508"</span>;</span><br><span class="line">    TaskEntity taskEntity = (TaskEntity) activitiRule.getTaskService().createTaskQuery()</span><br><span class="line">            .taskId(taskId)</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"taskEntity: &#123;&#125;"</span>, taskEntity);</span><br><span class="line">    String firstNodeId = <span class="string">"destinyA"</span>;</span><br><span class="line">    String lastNodeId = <span class="string">"destinyB"</span>;</span><br><span class="line">    List&lt;TaskModel&gt; taskModelList = Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">    TaskModel taskModel1 = ActivityUtils.buildTaskModel(<span class="string">"destinyD"</span>, <span class="string">"destinyD"</span>, <span class="string">"destiny-d"</span>);</span><br><span class="line">    TaskModel taskModel2 = ActivityUtils.buildTaskModel(<span class="string">"destinyD"</span>, <span class="string">"destinyD"</span>, <span class="string">"destiny-d"</span>);</span><br><span class="line"></span><br><span class="line">    taskModelList.add(taskModel1);</span><br><span class="line">    taskModelList.add(taskModel2);</span><br><span class="line"></span><br><span class="line">    AddSignService addSignService = <span class="keyword">new</span> AddSignService();</span><br><span class="line">    addSignService.addUserTask(taskEntity.getProcessDefinitionId(), taskEntity.getProcessInstanceId(),</span><br><span class="line">            activitiRule.getProcessEngine(), taskModelList, firstNodeId, lastNodeId, <span class="keyword">true</span>, <span class="keyword">true</span>,</span><br><span class="line">            taskEntity.getId(), taskModelList.get(<span class="number">0</span>).getId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结束后我们就已经将 <code>destinyD -&gt; destinyE</code> 两个节点加签到 <code>destinyA</code> 之后, <code>destinyB</code> 之前.</p><p><code>select NAME_ from ACT_RU_TASK where PROC_INST_ID_ = &#39;17504&#39;;</code> 的执行结果已经变成: <code>destinyD</code></p><p>现在已经完成了加签的一部分代码, 但此时的任务是不能被正确提交的, 会报如下异常:</p><pre><code>org.activiti.engine.ActivitiException: Programmatic error: no current flow element found or invalid type: null. Halting.at org.activiti.engine.impl.agenda.TriggerExecutionOperation.run(TriggerExecutionOperation.java:49)at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperation(CommandInvoker.java:73)at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperations(CommandInvoker.java:57)at org.activiti.engine.impl.interceptor.CommandInvoker.execute(CommandInvoker.java:42)at org.activiti.engine.impl.interceptor.TransactionContextInterceptor.execute(TransactionContextInterceptor.java:48)at org.activiti.engine.impl.interceptor.CommandContextInterceptor.execute(CommandContextInterceptor.java:63)at org.activiti.engine.impl.interceptor.LogInterceptor.execute(LogInterceptor.java:29)at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:44)at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:39)at org.activiti.engine.impl.TaskServiceImpl.complete(TaskServiceImpl.java:182)at org.destiny.activiti.addsign1.ClientTest.complete(ClientTest.java:61)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)at org.activiti.engine.test.ActivitiRule$1.evaluate(ActivitiRule.java:116)</code></pre><h2 id="2-7-流程引擎启动时从-DB-加载流程定义信息"><a href="#2-7-流程引擎启动时从-DB-加载流程定义信息" class="headerlink" title="2.7. 流程引擎启动时从 DB 加载流程定义信息"></a>2.7. 流程引擎启动时从 DB 加载流程定义信息</h2><p>当流程引擎启动的时候, 如果 <code>ACT_ADD_SIGN</code> 表有数据, 就需要将对应的加签现场数据保存并添加到缓存中.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;加签的概念&lt;/p&gt;
&lt;p&gt;思路:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接需改模板, 在模板中添加节点以及连线, 并修改实例的走向;&lt;/li&gt;
&lt;li&gt;直接修改路程定义对应的缓存数据, 不修改模板, 新增节点与当前需要加签的实例挂钩.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;1-方案一
      
    
    </summary>
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/categories/Activiti/"/>
    
      <category term="工作流" scheme="https://destinywang.github.io/blog/categories/Activiti/%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti(5)--任意节点跳转</title>
    <link href="https://destinywang.github.io/blog/2018/12/22/Activiti-5-%E4%BB%BB%E6%84%8F%E8%8A%82%E7%82%B9%E8%B7%B3%E8%BD%AC/"/>
    <id>https://destinywang.github.io/blog/2018/12/22/Activiti-5-任意节点跳转/</id>
    <published>2018-12-22T13:00:18.000Z</published>
    <updated>2019-03-04T08:18:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-任意节点跳转以及原理"><a href="#1-任意节点跳转以及原理" class="headerlink" title="1. 任意节点跳转以及原理"></a>1. 任意节点跳转以及原理</h1><ul><li>常规节点跳转<ul><li>跳转到目标节点</li><li>跳转到目标节点的入线</li><li>跳转到目标节点的上一个节点并触发连线的条件计算</li></ul></li><li>多实例节点的跳转<ul><li>普通节点跳转到多实例节点</li><li>多实例节点跳转到普通节点</li></ul></li></ul><p>比如总经理审批节点跳转到请假申请节点:</p><p><img src="https://user-images.githubusercontent.com/17758731/50369657-2bf20e00-05d4-11e9-9af3-9416a020adae.png" alt="image"></p><p>思路:</p><ol><li>可以获取总经理审批节点对应的任务 ID, 实例 ID, 执行实例 ID</li><li>可以通过 <code>planContiuneProcessInCompensation</code> 方法让当前执行的实例按照我们预期的效果流转</li><li>我们可以将当前执行实例中的 <code>currentFlowElement</code> 字段设置为 <code>请假申请</code> 节点 XML 中的 id 值;</li><li>因为执行实例运转之后, 当前的任务节点并没有被删除, 所以需要手工删除;</li><li>历史表跳转之前的任务节点也不会被完成, 需要手工进行完成.</li></ol><h2 id="1-1-实现方案"><a href="#1-1-实现方案" class="headerlink" title="1.1. 实现方案"></a>1.1. 实现方案</h2><ul><li>获取 <code>ActivitiEngineAgenda</code></li><li><code>commandContext.getExecutionEntityManager()</code> 获取 ExecutionEntityManager</li><li><code>commandContext.getTaskEntityManager()</code> 获取 TaskEntityManager</li><li>设置执行实例的运行节点</li><li>触发执行实例运转</li><li>设置删除当前的任务节点</li><li>更新历史实例表以及历史任务表, 当前的任务节点为完成状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpCmd</span> <span class="keyword">implements</span> <span class="title">Command</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String taskId;</span><br><span class="line">    <span class="keyword">private</span> String targetNodeId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">        ActivitiEngineAgenda agenda = commandContext.getAgenda();</span><br><span class="line">        TaskEntityManager taskEntityManager = commandContext.getTaskEntityManager();</span><br><span class="line">        TaskEntity taskEntity = taskEntityManager.findById(taskId);</span><br><span class="line">        <span class="comment">// 执行实例 id</span></span><br><span class="line">        String executionId = taskEntity.getExecutionId();</span><br><span class="line">        String processDefinitionId = taskEntity.getProcessDefinitionId();</span><br><span class="line">        ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();</span><br><span class="line">        HistoryManager historyManager = commandContext.getHistoryManager();</span><br><span class="line">        <span class="comment">// 执行实例对象</span></span><br><span class="line">        ExecutionEntity executionEntity = executionEntityManager.findById(executionId);</span><br><span class="line">        Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);</span><br><span class="line">        FlowElement flowElement = process.getFlowElement(targetNodeId);</span><br><span class="line">        <span class="keyword">if</span> (flowElement == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"目标节点不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将历史活动表更新</span></span><br><span class="line">        historyManager.recordActivityEnd(executionEntity, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="comment">// 设置当前流程</span></span><br><span class="line">        executionEntity.setCurrentFlowElement(flowElement);</span><br><span class="line">        <span class="comment">// 跳转, 触发执行实例运转</span></span><br><span class="line">        agenda.planContinueProcessInCompensation(executionEntity);</span><br><span class="line">        <span class="comment">// 从runtime 表中删除当前任务</span></span><br><span class="line">        taskEntityManager.delete(taskId);</span><br><span class="line">        <span class="comment">// 将历史任务表更新, 历史任务标记为完成</span></span><br><span class="line">        historyManager.recordTaskEnd(taskId, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-测试场景"><a href="#1-2-测试场景" class="headerlink" title="1.2. 测试场景"></a>1.2. 测试场景</h2><p>假设有如下流程定义:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"userTask1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask1"</span> <span class="attr">name</span>=<span class="string">"userTask1"</span> <span class="attr">activiti:assignee</span>=<span class="string">"destiny1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"userTask1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask2"</span> <span class="attr">name</span>=<span class="string">"userTask2"</span> <span class="attr">activiti:assignee</span>=<span class="string">"destiny2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow3"</span> <span class="attr">sourceRef</span>=<span class="string">"userTask2"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结构如下:</p><pre><code>start -&gt; userTask1 -&gt; userTask2 -&gt; end</code></pre><p>使用如下的执行顺序:</p><ol><li>startProcessInstance</li><li>complete 任务 userTask1</li><li>执行 <code>ManagementService().executeCommand(new JumpCmd(&quot;7502&quot;, &quot;userTask1&quot;))</code></li><li>complete 任务 userTask1</li><li>执行 <code>ManagementService().executeCommand(new JumpCmd(&quot;7502&quot;, &quot;userTask1&quot;))</code></li></ol><p>然后查询 <code>ACT_HI_ACTINST</code> 表, 能够看到如下执行轨迹:</p><table><thead><tr><th>ID_</th><th>PROC_DEF_ID_</th><th>PROC_INST_ID_</th><th>EXECUTION_ID_</th><th>ACT_ID_</th><th>TASK_ID_</th><th>CALL_PROC_INST_ID_</th><th>ACT_NAME_</th><th>ACT_NAME_</th><th>ASSIGNEE_</th><th>START_TIME_</th><th>END_TIME_</th><th>DURATION_</th><th>DELETE_REASON_</th><th>TENANT_ID_</th></tr></thead><tbody><tr><td>6</td><td>my-process:1:3</td><td>4</td><td>5</td><td>start</td><td></td><td></td><td>startEvent</td><td></td><td>2019-03-04 00:37:54.328</td><td>2019-03-04 00:37:54.330</td><td>2</td><td>“”</td></tr><tr><td>7</td><td>my-process:1:3</td><td>4</td><td>5</td><td>userTask1</td><td>8</td><td></td><td>userTask1</td><td>userTask</td><td>destiny1</td><td>2019-03-04 00:37:54.331</td><td>2019-03-04 00:38:19.920</td><td>25589</td><td></td><td>“”</td></tr><tr><td>2501</td><td>my-process:1:3</td><td>4</td><td>5</td><td>userTask2</td><td>2502</td><td></td><td>userTask2</td><td>userTask</td><td>destiny2</td><td>2019-03-04 00:38:19.933</td><td>2019-03-04 00:38:44.834</td><td>24901</td><td>jump</td><td>“”</td></tr><tr><td>5001</td><td>my-process:1:3</td><td>4</td><td>5</td><td>userTask1</td><td>5002</td><td></td><td>userTask1</td><td>userTask</td><td>destiny1</td><td>2019-03-04 00:38:44.848</td><td>2019-03-04 00:39:02.232</td><td>17384</td><td></td><td>“”</td></tr><tr><td>7501</td><td>my-process:1:3</td><td>4</td><td>5</td><td>userTask2</td><td>7502</td><td></td><td>userTask2</td><td>userTask</td><td>destiny2</td><td>2019-03-04 00:39:02.245</td><td>2019-03-04 00:39:19.718</td><td>17473</td><td>jump</td><td>“”</td></tr><tr><td>10001</td><td>my-process:1:3</td><td>4</td><td>5</td><td>userTask1</td><td>10002</td><td>userTask1</td><td>userTask</td><td>destiny1</td><td>2019-03-04 00:39:19.743</td><td></td><td></td><td></td><td>“”</td></tr></tbody></table><p>可以看到我们已经完成了简单条件下的跳转</p><h2 id="1-3-关于自由跳转时历史活动不更新问题的解决"><a href="#1-3-关于自由跳转时历史活动不更新问题的解决" class="headerlink" title="1.3. 关于自由跳转时历史活动不更新问题的解决"></a>1.3. 关于自由跳转时历史活动不更新问题的解决</h2><p>之前遇到一个错误的写法: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpCmd</span> <span class="keyword">implements</span> <span class="title">Command</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String taskId;</span><br><span class="line">    <span class="keyword">private</span> String targetNodeId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">        ActivitiEngineAgenda agenda = commandContext.getAgenda();</span><br><span class="line">        TaskEntityManager taskEntityManager = commandContext.getTaskEntityManager();</span><br><span class="line">        TaskEntity taskEntity = taskEntityManager.findById(taskId);</span><br><span class="line">        <span class="comment">// 执行实例 id</span></span><br><span class="line">        String executionId = taskEntity.getExecutionId();</span><br><span class="line">        String processDefinitionId = taskEntity.getProcessDefinitionId();</span><br><span class="line">        ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();</span><br><span class="line">        HistoryManager historyManager = commandContext.getHistoryManager();</span><br><span class="line">        <span class="comment">// 执行实例对象</span></span><br><span class="line">        ExecutionEntity executionEntity = executionEntityManager.findById(executionId);</span><br><span class="line">        Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);</span><br><span class="line">        FlowElement flowElement = process.getFlowElement(targetNodeId);</span><br><span class="line">        <span class="keyword">if</span> (flowElement == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"目标节点不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置当前流程</span></span><br><span class="line">        executionEntity.setCurrentFlowElement(flowElement);</span><br><span class="line">        <span class="comment">// 跳转, 触发执行实例运转</span></span><br><span class="line">        agenda.planContinueProcessInCompensation(executionEntity);</span><br><span class="line">        <span class="comment">// 从runtime 表中删除当前任务</span></span><br><span class="line">        taskEntityManager.delete(taskId);</span><br><span class="line">        <span class="comment">// 将历史活动表更新</span></span><br><span class="line">        historyManager.recordActivityEnd(executionEntity, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="comment">// 将历史任务表更新, 历史任务标记为完成</span></span><br><span class="line">        historyManager.recordTaskEnd(taskId, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上文中正确写法的不同之处在于数据库更新操作的顺序. 但仅仅更换顺序也会到导致历史表中数据无法正确结束.</p><p>问题的原因在于第 25 行的时候已经为执行实例执行了 <code>setCurrentFlowElement()</code> 操作, 设置了最新的流程元素, 所以如果在后面再执行对 <code>ACT_HI_ACTINST</code> 的更新, 就无法找到正确的 FlowElement. 所以需要将 <code>historyManager.recordActivityEnd(executionEntity, &quot;jump&quot;);</code> 放在第 25 行之前</p><h1 id="2-跳转到目标节点的入线"><a href="#2-跳转到目标节点的入线" class="headerlink" title="2. 跳转到目标节点的入线"></a>2. 跳转到目标节点的入线</h1><p>假设有如下流程定义:</p><p><img src="https://user-images.githubusercontent.com/17758731/53717197-598beb00-3e92-11e9-884e-67d2c77fe042.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask1"</span> <span class="attr">name</span>=<span class="string">"userTask1"</span> <span class="attr">activiti:assignee</span>=<span class="string">"destiny1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask2"</span> <span class="attr">name</span>=<span class="string">"userTask2"</span> <span class="attr">activiti:assignee</span>=<span class="string">"destiny2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask3"</span> <span class="attr">name</span>=<span class="string">"userTask3"</span> <span class="attr">activiti:assignee</span>=<span class="string">"destiny3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"userTask1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"userTask1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">conditionExpression</span>&gt;</span>$&#123;condition==1&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"userTask1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">conditionExpression</span>&gt;</span>$&#123;condition==2&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"userTask2"</span> <span class="attr">targetRef</span>=<span class="string">"end1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"userTask3"</span> <span class="attr">targetRef</span>=<span class="string">"end2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将原先的跳转命令类稍作修改:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceFlowJumpCmd</span> <span class="keyword">implements</span> <span class="title">Command</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String taskId;</span><br><span class="line">    <span class="keyword">private</span> String targetNodeId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">        ActivitiEngineAgenda agenda = commandContext.getAgenda();</span><br><span class="line">        TaskEntityManager taskEntityManager = commandContext.getTaskEntityManager();</span><br><span class="line">        TaskEntity taskEntity = taskEntityManager.findById(taskId);</span><br><span class="line">        <span class="comment">// 执行实例 id</span></span><br><span class="line">        String executionId = taskEntity.getExecutionId();</span><br><span class="line">        String processDefinitionId = taskEntity.getProcessDefinitionId();</span><br><span class="line">        ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();</span><br><span class="line">        HistoryManager historyManager = commandContext.getHistoryManager();</span><br><span class="line">        <span class="comment">// 执行实例对象</span></span><br><span class="line">        ExecutionEntity executionEntity = executionEntityManager.findById(executionId);</span><br><span class="line">        Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);</span><br><span class="line">        FlowElement flowElement = process.getFlowElement(targetNodeId);</span><br><span class="line">        <span class="keyword">if</span> (flowElement == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"目标节点不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SequenceFlow sequenceFlow = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (flowElement <span class="keyword">instanceof</span> FlowNode) &#123;</span><br><span class="line">            FlowNode flowNode = (FlowNode) flowElement;</span><br><span class="line">            <span class="comment">// 找到所有的入线, 并取其中唯一的一条</span></span><br><span class="line">            List&lt;SequenceFlow&gt; incomingFlows = flowNode.getIncomingFlows();</span><br><span class="line">            sequenceFlow = incomingFlows.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sequenceFlow == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"目标连线不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将历史活动表更新</span></span><br><span class="line">        historyManager.recordActivityEnd(executionEntity, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="comment">// 设置当前流程</span></span><br><span class="line">        executionEntity.setCurrentFlowElement(sequenceFlow);</span><br><span class="line">        <span class="comment">// 触发执行实例运转, 第二个参数为是否参与计算</span></span><br><span class="line">        agenda.planTakeOutgoingSequenceFlowsOperation(executionEntity, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 从runtime 表中删除当前任务</span></span><br><span class="line">        taskEntityManager.delete(taskId);</span><br><span class="line">        <span class="comment">// 将历史任务表更新, 历史任务标记为完成</span></span><br><span class="line">        historyManager.recordTaskEnd(taskId, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过连线触发实例的时候, 连线上的条件不会参与计算</li><li>只有实例经过节点, 网关的时候, 连线上的条件才会经过计算</li></ul><h1 id="3-跳转到目标节点入线连接的节点"><a href="#3-跳转到目标节点入线连接的节点" class="headerlink" title="3. 跳转到目标节点入线连接的节点"></a>3. 跳转到目标节点入线连接的节点</h1><p>因为实例是从节点离开, 因此后面的连线是可以参与运算的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceFlowSourceJumpCmd</span> <span class="keyword">implements</span> <span class="title">Command</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String taskId;</span><br><span class="line">    <span class="keyword">private</span> String targetNodeId;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; condition;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">        ActivitiEngineAgenda agenda = commandContext.getAgenda();</span><br><span class="line">        TaskEntityManager taskEntityManager = commandContext.getTaskEntityManager();</span><br><span class="line">        TaskEntity taskEntity = taskEntityManager.findById(taskId);</span><br><span class="line">        <span class="comment">// 执行实例 id</span></span><br><span class="line">        String executionId = taskEntity.getExecutionId();</span><br><span class="line">        String processDefinitionId = taskEntity.getProcessDefinitionId();</span><br><span class="line">        ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();</span><br><span class="line">        HistoryManager historyManager = commandContext.getHistoryManager();</span><br><span class="line">        <span class="comment">// 执行实例对象</span></span><br><span class="line">        ExecutionEntity executionEntity = executionEntityManager.findById(executionId);</span><br><span class="line">        Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);</span><br><span class="line">        FlowElement flowElement = process.getFlowElement(targetNodeId);</span><br><span class="line">        <span class="keyword">if</span> (flowElement == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"目标节点不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SequenceFlow sequenceFlow = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (flowElement <span class="keyword">instanceof</span> FlowNode) &#123;</span><br><span class="line">            FlowNode flowNode = (FlowNode) flowElement;</span><br><span class="line">            <span class="comment">// 找到所有的入线, 并取其中唯一的一条</span></span><br><span class="line">            List&lt;SequenceFlow&gt; incomingFlows = flowNode.getIncomingFlows();</span><br><span class="line">            sequenceFlow = incomingFlows.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sequenceFlow == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"目标连线不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FlowElement sourceFlowElement = sequenceFlow.getSourceFlowElement();</span><br><span class="line">        executionEntity.setVariables(condition);</span><br><span class="line">        <span class="comment">// 将历史活动表更新</span></span><br><span class="line">        historyManager.recordActivityEnd(executionEntity, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="comment">// 设置当前流程</span></span><br><span class="line">        executionEntity.setCurrentFlowElement(sourceFlowElement);</span><br><span class="line">        <span class="comment">// 触发执行实例运转, 第二个参数为是否参与计算</span></span><br><span class="line">        agenda.planTakeOutgoingSequenceFlowsOperation(executionEntity, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 从runtime 表中删除当前任务</span></span><br><span class="line">        taskEntityManager.delete(taskId);</span><br><span class="line">        <span class="comment">// 将历史任务表更新, 历史任务标记为完成</span></span><br><span class="line">        historyManager.recordTaskEnd(taskId, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-任意节点跳转以及原理&quot;&gt;&lt;a href=&quot;#1-任意节点跳转以及原理&quot; class=&quot;headerlink&quot; title=&quot;1. 任意节点跳转以及原理&quot;&gt;&lt;/a&gt;1. 任意节点跳转以及原理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;常规节点跳转&lt;ul&gt;
&lt;li&gt;跳转到目标节点
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Activiti(6)--加签功能的实现</title>
    <link href="https://destinywang.github.io/blog/2018/12/22/Activiti-6-%E5%8A%A0%E7%AD%BE%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://destinywang.github.io/blog/2018/12/22/Activiti-6-加签功能的实现/</id>
    <published>2018-12-22T02:18:37.000Z</published>
    <updated>2018-12-22T13:01:27.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>假设有如下流程:</p><p><img src="https://user-images.githubusercontent.com/17758731/50369657-2bf20e00-05d4-11e9-9af3-9416a020adae.png" alt="image"></p><p>我们在流程进行的时候, 需要在申请和经理审批之间临时新增一个节点, 达到如下的效果:</p><p><img src="https://user-images.githubusercontent.com/17758731/50369682-6a87c880-05d4-11e9-8b4e-232ab3e708c5.png" alt="image"></p><p>该行为我们称之为加签.</p><p>加签的两种思路</p><ol><li>直接修改模板, 在模板中添加节点以及连线, 并修改实例的走向;</li><li>直接修改流程定义对应的缓存数据, 不修改模板, 新增的节点与当前需要加签的实例挂钩.</li></ol><h1 id="2-实现方式"><a href="#2-实现方式" class="headerlink" title="2. 实现方式"></a>2. 实现方式</h1><h2 id="2-1-修改模板"><a href="#2-1-修改模板" class="headerlink" title="2.1. 修改模板"></a>2.1. 修改模板</h2><p>步骤:</p><ol><li>找到当前实例对象对应的模板数据;</li><li>在模板数据的基础上添加新节点, 修改连线, 并更新数据库中的模板;</li><li>更新模板对应的流程定义缓存, 否则加签节点不会生效;</li><li>完成新增的节点任务后, 再把新增的节点以及连线删除, 即还原流程模板.</li></ol><ul><li>模板是共享的, 所以把模板修改了, 所有运行实例对应的模板也会被修改;</li><li>修改模板容易导致当前实例影响到其他实例, 这种方法并不可取;</li></ul><h2 id="2-2-修改流程定义缓存"><a href="#2-2-修改流程定义缓存" class="headerlink" title="2.2 修改流程定义缓存"></a>2.2 修改流程定义缓存</h2><p>因为模板是共享的, 不修改模板就不会影响其他实例;</p><p>也不需要修改原有流程的流向, 要让流程按照新的流向运行.</p><blockquote><p>因为流程在运转过程中, 需要实时获取该实例对应的模板数据才能知道应该如何流转</p></blockquote><ol><li>首先从流程定义缓存中获取模板数据;</li><li>如果流程缓存定义丢失, 则需要重新执行模板的解析工作并将其防止到流程缓存中;</li></ol><p>因此修改流程定义缓存就可以实现功能.</p><p>但仍有一个问题需要解决: 如果流程定义缓存丢失, 引擎默认解析的是数据库中存在的模板数据, 而新增的临时节点不会存在与 XML 中.</p><h3 id="2-2-1-步骤"><a href="#2-2-1-步骤" class="headerlink" title="2.2.1 步骤"></a>2.2.1 步骤</h3><p><img src="https://user-images.githubusercontent.com/17758731/50369997-a5402f80-05d9-11e9-9ef3-a8549723f74b.png" alt="image"></p><ol><li>在流程缓存中添加一个任务节点并为任务节点添加出线信息, 出线信息是需要到达的目标节点;</li><li>添加的目标节点并没有入线, 也就是说不会影响到其他的实例, 正常的流程实例启动的时候不会走到这个节点;</li><li>加签完成后可以触发执行实例走到新增的任务节点, 这样当前实例就按照最新的路线进行运转;</li><li>如果当前的节点加签后不想让实例运转到最新的节点, 可以复制一个当前节点, 继续让实例运转;</li><li>加签的最终目的是让实例按照最新的路线走, 与模板中规划的路线脱离关系.</li></ol><p>需要解决的问题:</p><ol><li>新增的节点以及连线如何存储;</li><li>流程定义缓存如何修改;</li><li>加签的节点以及连线信息如何持久化;</li><li>缓存丢失, 新的路线图丢失;</li><li>流程实例结束, 当前加签的节点以及连线已经不需要应该如何删除;</li></ol><p>修改流程定义缓存后, 由于缓存失效, 依然会报错</p><p>此时就需要先添加缓存, 然后完成任务</p><h1 id="3-加签原理代码讲解"><a href="#3-加签原理代码讲解" class="headerlink" title="3. 加签原理代码讲解"></a>3. 加签原理代码讲解</h1><h1 id="4-加签节点存储表设计"><a href="#4-加签节点存储表设计" class="headerlink" title="4. 加签节点存储表设计"></a>4. 加签节点存储表设计</h1><blockquote><p>Activiti 继承了 MyBatis 框架, 因此可以让我们注入配置文件或者注解类使用 MyBatis.</p></blockquote><h2 id="4-1-表结构"><a href="#4-1-表结构" class="headerlink" title="4.1. 表结构"></a>4.1. 表结构</h2><h2 id="4-2-实体类"><a href="#4-2-实体类" class="headerlink" title="4.2. 实体类"></a>4.2. 实体类</h2><h2 id="4-3-Mapper-类"><a href="#4-3-Mapper-类" class="headerlink" title="4.3. Mapper 类"></a>4.3. Mapper 类</h2><h2 id="4-4-注入流程引擎"><a href="#4-4-注入流程引擎" class="headerlink" title="4.4. 注入流程引擎"></a>4.4. 注入流程引擎</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h1&gt;&lt;p&gt;假设有如下流程:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercont
      
    
    </summary>
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/categories/Activiti/"/>
    
      <category term="工作流" scheme="https://destinywang.github.io/blog/categories/Activiti/%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti(4)--多实例实现会签功能</title>
    <link href="https://destinywang.github.io/blog/2018/12/16/Activiti-4-%E5%A4%9A%E5%AE%9E%E4%BE%8B%E5%AE%9E%E7%8E%B0%E4%BC%9A%E7%AD%BE%E5%8A%9F%E8%83%BD/"/>
    <id>https://destinywang.github.io/blog/2018/12/16/Activiti-4-多实例实现会签功能/</id>
    <published>2018-12-16T03:19:58.000Z</published>
    <updated>2018-12-24T15:52:14.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Activiti-多实例"><a href="#1-Activiti-多实例" class="headerlink" title="1. Activiti 多实例"></a>1. Activiti 多实例</h1><blockquote><p>多实例节点是在业务流程中定义重复环节的一种方式</p></blockquote><p>从开发角度讲, 多实例类似于循环, 可以根据给定的集合, 为每个元素执行一个环境甚至一个子流程, 既可以顺序依次执行也可以并发同步执行.</p><p>多实例是在一个普通节点上添加额外的属性定义, 这样被多实例修饰的节点就会执行多次, 在 BPMN 规范中, 下面的节点都可以成为一个多实例节点:</p><ul><li>UserTask</li><li>Script Task</li><li>Java Service Task</li><li>Web Service Task</li><li>Business Rule Task</li><li>Email Task</li><li>Manual Task</li><li>Receive Task</li><li>Sub-Process</li><li>Call Activity</li></ul><p>每个上级流程为每个实例创建分支的时候都要提供如下变量:</p><ol><li>nrOfInstances: 实例总数</li><li>nrOfActiveInstances: 当前活动的实例数量, 对于顺序执行的多实例, 该值始终为1</li><li>nrOfCompletedInstances: 已经完成的实例数量</li><li>loopCounter: 当前实例所在循环的索引值, 其他实例不可见, 不会保存到流程实例级别.</li></ol><p>可以通过 <code>execution.getVariable(String key)</code> 方法获得这些变量</p><h3 id="1-1-isSequential"><a href="#1-1-isSequential" class="headerlink" title="1.1. isSequential"></a>1.1. <code>isSequential</code></h3><p>表示节点时顺序执行还是并行执行, 默认为 <code>false</code>, 表示并行执行</p><h2 id="1-2-指定实例数量"><a href="#1-2-指定实例数量" class="headerlink" title="1.2. 指定实例数量"></a>1.2. 指定实例数量</h2><p>实例的数量会在进入节点时进行计算, 但也可以直接指定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以使用loopCardinality子元素直接指定一个数字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loopCardinality</span>&gt;</span>5<span class="tag">&lt;/<span class="name">loopCardinality</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 也可以使用结果为整数的表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loopCardinality</span>&gt;</span>$&#123;nrOfOrders-nrOfCancellations&#125;<span class="tag">&lt;/<span class="name">loopCardinality</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">multiInstanceLoopCharacteristics</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-接收并遍历集合"><a href="#1-3-接收并遍历集合" class="headerlink" title="1.3. 接收并遍历集合"></a>1.3. 接收并遍历集合</h2><p>除此之外还可以通过 <code>loopDataInputRef</code> 元素设置一个类型为集合的流程变量名, 对于集合中的每个元素都会创建一个实例, 也可以通过 <code>inputDataItem</code> 子元素指定集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loopDataInputRef</span>&gt;</span>userList<span class="tag">&lt;/<span class="name">loopDataInputRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inputDataItem</span> <span class="attr">name</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">multiInstanceLoopCharacteristics</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>loopDataInputRef 中的 userList 表示需要遍历的元素列表</li><li>inputDataItem 中的 user 表示每个分支都会拥有一个名为 user 的流程变量, 这个变量会包含集合中的对应元素, 在例子中用来设置用户任务的办理者, 也就是说 userTask 中的 <code>activiti:assignee</code> 属性的值需要和 <code>inputDataItem</code> 一致.</li></ul><p>此外, 上述的变量名存在如下缺点:</p><ol><li>名称复杂</li><li>BPMN2.0 规定不能该节点不能包含表达式</li></ol><p>Activiti 通过 multiInstanceCharacteristics 中设置 <code>collection</code> 和 <code>elementVariable</code> 属性来解决这个问题:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">"false"</span> <span class="attr">activiti:collection</span>=<span class="string">"$&#123;userList&#125;"</span> <span class="attr">activiti:elementVariable</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二者实现的功能是相同的, 不过后者可以支持表达式, 这是我们动态配置用户任务属性的重要功能</p><h2 id="1-4-结束条件"><a href="#1-4-结束条件" class="headerlink" title="1.4. 结束条件"></a>1.4. 结束条件</h2><p>多实例节点默认会在所有节点完成后结束, 也可以指定一个表达式在每个实例结束时执行, 如果表达式返回 true, 所有其他的实例都会销毁, 多实例节点也会结束, 流程会继续执行.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">"false"</span> <span class="attr">activiti:collection</span>=<span class="string">"$&#123;userList&#125;"</span> <span class="attr">activiti:elementVariable</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果有 60% 的任务完成时, 其他任务会被删除, 流程继续进行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">completionCondition</span>&gt;</span>$&#123;nrOfCompletedInstances/nrOfInstances &gt;= 0.6&#125;<span class="tag">&lt;/<span class="name">completionCondition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">multiInstanceLoopCharacteristics</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-会签逻辑"><a href="#2-会签逻辑" class="headerlink" title="2. 会签逻辑"></a>2. 会签逻辑</h1><p>经过以上对 Activiti 多实例的介绍可知, 实现会签功能几个重要的点在于:</p><ol><li>利用多实例完成动态实例的创建</li><li>根据业务设置合适的结束条件</li></ol><h2 id="2-1-流程定义"><a href="#2-1-流程定义" class="headerlink" title="2.1. 流程定义"></a>2.1. 流程定义</h2><h3 id="2-1-1-XML-格式"><a href="#2-1-1-XML-格式" class="headerlink" title="2.1.1. XML 格式"></a>2.1.1. XML 格式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">"false"</span> <span class="attr">activiti:collection</span>=<span class="string">"$&#123;userList&#125;"</span> <span class="attr">activiti:elementVariable</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-BpmnModel-模型"><a href="#2-1-2-BpmnModel-模型" class="headerlink" title="2.1.2. BpmnModel 模型"></a>2.1.2. BpmnModel 模型</h3><p>用到的测试类: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersBean</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUsers</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"userId: &#123;&#125;"</span>, userId);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(userId + <span class="string">"1"</span>, userId + <span class="string">"2"</span>, userId + <span class="string">"3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExclusionGatewayModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BpmnModel bpmnModel = <span class="keyword">new</span> BpmnModel();</span><br><span class="line">    Process process = <span class="keyword">new</span> Process();</span><br><span class="line">    process.setId(<span class="string">"my-process"</span>);</span><br><span class="line">    StartEvent startEvent = <span class="keyword">new</span> StartEvent();</span><br><span class="line">    startEvent.setId(<span class="string">"startEvent"</span>);</span><br><span class="line">    UserTask someTask = <span class="keyword">new</span> UserTask();</span><br><span class="line">    someTask.setId(<span class="string">"someTask"</span>);</span><br><span class="line">    someTask.setName(<span class="string">"Activiti is awesome!"</span>);</span><br><span class="line">    someTask.setAssignee(<span class="string">"$&#123;user&#125;"</span>);</span><br><span class="line">    MultiInstanceLoopCharacteristics multiInstanceLoopCharacteristics = <span class="keyword">new</span> MultiInstanceLoopCharacteristics();</span><br><span class="line">    multiInstanceLoopCharacteristics.setSequential(<span class="keyword">false</span>);</span><br><span class="line">    multiInstanceLoopCharacteristics.setInputDataItem(<span class="string">"$&#123;usersBean.getUsers(name)&#125;"</span>);</span><br><span class="line">    multiInstanceLoopCharacteristics.setElementVariable(<span class="string">"user"</span>);</span><br><span class="line">    multiInstanceLoopCharacteristics.setCompletionCondition(<span class="string">"$&#123;nrOfCompletedInstances &gt; 0&#125;"</span>);</span><br><span class="line">    someTask.setLoopCharacteristics(multiInstanceLoopCharacteristics);</span><br><span class="line">    EndEvent endEvent = <span class="keyword">new</span> EndEvent();</span><br><span class="line">    endEvent.setId(<span class="string">"endEvent"</span>);</span><br><span class="line">    SequenceFlow flow1 = createSequence(<span class="string">"startEvent"</span>, <span class="string">"someTask"</span>, <span class="string">"flow1"</span>, <span class="string">"flow1"</span>, <span class="keyword">null</span>);</span><br><span class="line">    SequenceFlow flow2 = createSequence(<span class="string">"someTask"</span>, <span class="string">"endEvent"</span>, <span class="string">"flow2"</span>, <span class="string">"flow2"</span>, <span class="keyword">null</span>);</span><br><span class="line">    process.addFlowElement(startEvent);</span><br><span class="line">    process.addFlowElement(someTask);</span><br><span class="line">    process.addFlowElement(endEvent);</span><br><span class="line">    process.addFlowElement(flow1);</span><br><span class="line">    process.addFlowElement(flow2);</span><br><span class="line">    bpmnModel.addProcess(process);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// client</span></span><br><span class="line">    Deployment deployment = activitiRule.getRepositoryService().createDeployment()</span><br><span class="line">            .addBpmnModel(<span class="string">"bpmn"</span>, bpmnModel)</span><br><span class="line">            .deploy();</span><br><span class="line">    log.info(<span class="string">"deployment: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(deployment, ToStringStyle.JSON_STYLE));</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"usersBean"</span>, usersBean);</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"wk"</span>);</span><br><span class="line">    </span><br><span class="line">    ProcessInstance processInstance = activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>, map);</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(processInstance, ToStringStyle.JSON_STYLE));</span><br><span class="line">    List&lt;Task&gt; taskList = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"当前 taskList 数量: &#123;&#125;"</span>, taskList.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        log.info(<span class="string">"task: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(task, ToStringStyle.JSON_STYLE));</span><br><span class="line">    &#125;</span><br><span class="line">    activitiRule.getTaskService().complete(taskList.get(<span class="number">0</span>).getId());</span><br><span class="line">    log.info(<span class="string">"其中一个节点完成审批"</span>);</span><br><span class="line">    taskList = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"第一个节点审批完成后 taskList 数量: &#123;&#125;"</span>, taskList.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        log.info(<span class="string">"第一个节点审批完成后 task: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(task, ToStringStyle.JSON_STYLE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-日志输出"><a href="#2-1-3-日志输出" class="headerlink" title="2.1.3. 日志输出"></a>2.1.3. 日志输出</h3><pre><code>09:55:17,517 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - processInstance: {&quot;currentFlowElement&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;processInstance&quot;:&quot;ProcessInstance[4]&quot;,&quot;parent&quot;:null,&quot;executions&quot;:[Multi instance root execution[ id &apos;8&apos; ] - activity &apos;someTask - parent &apos;4&apos;],&quot;superExecution&quot;:null,&quot;subProcessInstance&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;name&quot;:null,&quot;description&quot;:null,&quot;localizedName&quot;:null,&quot;localizedDescription&quot;:null,&quot;lockTime&quot;:null,&quot;isActive&quot;:true,&quot;isScope&quot;:true,&quot;isConcurrent&quot;:false,&quot;isEnded&quot;:false,&quot;isEventScope&quot;:false,&quot;isMultiInstanceRoot&quot;:false,&quot;isCountEnabled&quot;:false,&quot;eventName&quot;:null,&quot;eventSubscriptions&quot;:[],&quot;jobs&quot;:[],&quot;timerJobs&quot;:[],&quot;tasks&quot;:[],&quot;identityLinks&quot;:[IdentityLinkEntity[id=24, type=participant, userId=wk1, processInstanceId=4], IdentityLinkEntity[id=27, type=participant, userId=wk2, processInstanceId=4], IdentityLinkEntity[id=30, type=participant, userId=wk3, processInstanceId=4]],&quot;deleteReason&quot;:null,&quot;suspensionState&quot;:1,&quot;startUserId&quot;:null,&quot;startTime&quot;:&quot;Sun Dec 16 21:55:17 CST 2018&quot;,&quot;eventSubscriptionCount&quot;:0,&quot;taskCount&quot;:0,&quot;jobCount&quot;:0,&quot;timerJobCount&quot;:0,&quot;suspendedJobCount&quot;:0,&quot;deadLetterJobCount&quot;:0,&quot;variableCount&quot;:0,&quot;identityLinkCount&quot;:0,&quot;processDefinitionId&quot;:&quot;my-process:1:3&quot;,&quot;processDefinitionKey&quot;:&quot;my-process&quot;,&quot;processDefinitionName&quot;:null,&quot;processDefinitionVersion&quot;:1,&quot;deploymentId&quot;:null,&quot;activityId&quot;:null,&quot;activityName&quot;:null,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;businessKey&quot;:null,&quot;parentId&quot;:null,&quot;superExecutionId&quot;:null,&quot;rootProcessInstanceId&quot;:&quot;4&quot;,&quot;rootProcessInstance&quot;:null,&quot;forcedUpdate&quot;:false,&quot;queryVariables&quot;:null,&quot;isDeleted&quot;:false,&quot;variableInstances&quot;:{usersBean=VariableInstanceEntity[id=6, name=usersBean, type=serializable, byteArrayValueId=5]},&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;4&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:true,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}09:59:03,449 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - 当前 taskList 数量: 309:59:03,450 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - task: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:1,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:&quot;wk1&quot;,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Activiti is awesome!&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:null,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sun Dec 16 21:59:03 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;14&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;my-process:1:3&quot;,&quot;taskDefinitionKey&quot;:&quot;someTask&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;24&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}09:59:03,450 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - task: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:1,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:&quot;wk2&quot;,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Activiti is awesome!&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:null,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sun Dec 16 21:59:03 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;15&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;my-process:1:3&quot;,&quot;taskDefinitionKey&quot;:&quot;someTask&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;27&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}09:59:03,451 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - task: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:1,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:&quot;wk3&quot;,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Activiti is awesome!&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:null,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sun Dec 16 21:59:03 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;16&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;my-process:1:3&quot;,&quot;taskDefinitionKey&quot;:&quot;someTask&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;30&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}...09:55:17,585 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - 其中一个节点完成审批09:55:17,587 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - 第一个节点审批完成后 taskList 数量: 0</code></pre><h1 id="3-多实例任务节点完成自定义条件"><a href="#3-多实例任务节点完成自定义条件" class="headerlink" title="3. 多实例任务节点完成自定义条件"></a>3. 多实例任务节点完成自定义条件</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Activiti-多实例&quot;&gt;&lt;a href=&quot;#1-Activiti-多实例&quot; class=&quot;headerlink&quot; title=&quot;1. Activiti 多实例&quot;&gt;&lt;/a&gt;1. Activiti 多实例&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;多实例节点是在
      
    
    </summary>
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/categories/Activiti/"/>
    
      <category term="Java" scheme="https://destinywang.github.io/blog/categories/Activiti/Java/"/>
    
      <category term="工作流" scheme="https://destinywang.github.io/blog/categories/Activiti/Java/%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti(3)--数据模型设计</title>
    <link href="https://destinywang.github.io/blog/2018/12/11/Activiti-3-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/"/>
    <id>https://destinywang.github.io/blog/2018/12/11/Activiti-3-数据模型设计/</id>
    <published>2018-12-11T14:24:27.000Z</published>
    <updated>2018-12-12T13:32:47.165Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td>ACT_GE_*</td><td>通用数据表</td></tr><tr><td>ACT_RE_*</td><td>流程定义存储表</td></tr><tr><td>ACT_ID_*</td><td>身份信息表</td></tr><tr><td>ACT_RU_*</td><td>运行时数据库表</td></tr><tr><td>ACT_HI_*</td><td>历史数据库表, 为了保证运行时数据尽可能少, 流程执行完就会将相关数据迁移到历史表中</td></tr></tbody></table><ul><li>核心引擎: activiti.mysql.create.engine.sql</li><li>历史数据: activiti.mysql.create.history.sql</li><li>身份数据: activiti.mysql.create.identity.sql</li></ul><p>Activiti 除了核心引擎以外, 其他都是可选的.</p><p>首先创建 <code>ACT_GE_PROPERTY</code> 表, 并写入:</p><ol><li><code>schema.version</code>(schema 版本)</li><li><code>schema.history</code>(schema 历史)</li><li><code>next.dbid</code>(自增 id)<br>三条记录</li></ol><h1 id="1-通用数据库"><a href="#1-通用数据库" class="headerlink" title="1. 通用数据库"></a>1. 通用数据库</h1><table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td>ACT_GE_PROPERTY</td><td>属性表(保存流程引擎的 kv 键值属性)</td></tr><tr><td>ACT_GE_BYTEARRAY</td><td>资源表(存储流程定义相关的资源, 如 xml, 流程定义图)</td></tr></tbody></table><h2 id="1-1-ACT-GE-PROPERTY"><a href="#1-1-ACT-GE-PROPERTY" class="headerlink" title="1.1. ACT_GE_PROPERTY"></a>1.1. ACT_GE_PROPERTY</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.PropertyEntityImpl</code></p><p><img src="https://user-images.githubusercontent.com/17758731/49807932-40ddce80-fd96-11e8-8959-b2ccad75a9c1.png" alt="image"></p><h2 id="1-2-ACT-GE-BYTEARRAY"><a href="#1-2-ACT-GE-BYTEARRAY" class="headerlink" title="1.2 ACT_GE_BYTEARRAY"></a>1.2 ACT_GE_BYTEARRAY</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.ByteArrayEntityImpl</code></p><p><img src="https://user-images.githubusercontent.com/17758731/49808023-797da800-fd96-11e8-9940-8aa8ac085e7f.png" alt="image"></p><p>其中 GENERATED_ 字段标识该资源文件是自动生成还是人工上传</p><p>如果不想添加身份信息相关数据库和历史数据相关数据库, 可以在配置中显式指定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000;MVCC=TRUE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"sa"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不创建 ACT_ID_* 相关的表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbIdentityUsed"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不创建 ACT_HI_* 相关的表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbHistoryUsed"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-流程定义存储表"><a href="#2-流程定义存储表" class="headerlink" title="2. 流程定义存储表"></a>2. 流程定义存储表</h1><table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td>ACT_RE_DEPLOYMENT</td><td>流程部署记录表</td></tr><tr><td>ACT_RE_PROCDEF</td><td>流程定义信息表</td></tr><tr><td>ACT_RE_MODEL</td><td>模型信息表(用于 web 设计器)</td></tr><tr><td>ACT_PROCDEF_INFO</td><td>流程定义动态改变信息表</td></tr></tbody></table><h2 id="2-1-ACT-RE-DEPLOYMENT"><a href="#2-1-ACT-RE-DEPLOYMENT" class="headerlink" title="2.1. ACT_RE_DEPLOYMENT"></a>2.1. ACT_RE_DEPLOYMENT</h2><p>对应实体 <code>org.activiti.engine.impl.persistence.entity.DeploymentEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td></tr><tr><td>NAME_</td><td>名称</td></tr><tr><td>CATEGORY_</td><td>分类</td></tr><tr><td>TENANT_ID_</td><td>多租户标志</td></tr><tr><td>DEPLOY_TIME_</td><td>部署时间</td></tr><tr><td>KEY_</td><td>标志 key</td></tr><tr><td>ENGINE_VERSION_</td><td>兼容版本, 如果使用 Activiti5, 在升级到6后会有特殊标志</td></tr></tbody></table><h2 id="2-2-ACT-RE-PROCDEF"><a href="#2-2-ACT-RE-PROCDEF" class="headerlink" title="2.2 ACT_RE_PROCDEF"></a>2.2 ACT_RE_PROCDEF</h2><p>对应实体 <code>org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>DEPLOYMENT_ID_</td><td>关联部署 id</td></tr><tr><td>RESOURCE_NAME_</td><td>流程定义资源名称</td></tr><tr><td>DGRM_RESOURCE_NAME_</td><td>流程图片资源名称</td></tr><tr><td>HAS_START_FORM_KEY_</td><td>是否存在开始表单标志</td></tr><tr><td>HAS_GRAPHICAL_NOTATION_</td><td>是否有图形信息</td></tr><tr><td>SUSPENSION_STATE_</td><td>挂起状态 1 正常, 2 挂起</td></tr></tbody></table><h2 id="2-3-测试代码"><a href="#2-3-测试代码" class="headerlink" title="2.3. 测试代码"></a>2.3. 测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeploy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    activitiRule.getRepositoryService()</span><br><span class="line">            .createDeployment()</span><br><span class="line">            .name(<span class="string">"二次审批流程"</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">"org/destiny/activiti/SecondApprove.bpmn20.xml"</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ACT_RE_DEPLOYMENT 表内容:</p></blockquote><pre><code>mysql&gt; select * from ACT_RE_DEPLOYMENT \G;*************************** 1. row ***************************            ID_: 1          NAME_: 二次审批流程      CATEGORY_: NULL           KEY_: NULL     TENANT_ID_:   DEPLOY_TIME_: 2018-12-11 09:11:27.538ENGINE_VERSION_: NULL</code></pre><blockquote><p>ACT_RE_PROCDEF 表内容:</p></blockquote><pre><code>mysql&gt; select * from ACT_RE_PROCDEF \G;*************************** 1. row ***************************                    ID_: SecondApprove:1:4                   REV_: 1              CATEGORY_: http://www.activiti.org/test                  NAME_: 二级审批                   KEY_: SecondApprove               VERSION_: 1         DEPLOYMENT_ID_: 1         RESOURCE_NAME_: org/destiny/activiti/SecondApprove.bpmn20.xml    DGRM_RESOURCE_NAME_: org/destiny/activiti/SecondApprove.SecondApprove.png           DESCRIPTION_: NULL    HAS_START_FORM_KEY_: 0HAS_GRAPHICAL_NOTATION_: 1      SUSPENSION_STATE_: 1             TENANT_ID_:        ENGINE_VERSION_: NULL</code></pre><p>可以看到, 其中 <code>HAS_START_FORM_KEY_</code> 为 0, <code>DESCRIPTION_</code> 为 NULL, 二者都需要去流程定义文件中设置</p><ul><li><code>HAS_START_FORM_KEY_</code> 需要在 startEvent 中设置 actviti:formKey;</li><li><code>DESCRIPTION</code> 需要设置 documentation</li></ul><p>修改流程定义文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span> <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"SecondApprove"</span> <span class="attr">name</span>=<span class="string">"二级审批"</span> <span class="attr">isExecutable</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>审批流程描述<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"startEvent"</span> <span class="attr">name</span>=<span class="string">"开始"</span> <span class="attr">activiti:formKey</span>=<span class="string">"/process/form/key"</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"submitApprove"</span> <span class="attr">name</span>=<span class="string">"填写申请信息"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后重新部署即可看到: </p><pre><code>mysql&gt; select * from ACT_RE_PROCDEF \G;*************************** 1. row ***************************                    ID_: SecondApprove:1:4                   REV_: 1              CATEGORY_: http://www.activiti.org/test                  NAME_: 二级审批                   KEY_: SecondApprove               VERSION_: 1         DEPLOYMENT_ID_: 1         RESOURCE_NAME_: org/destiny/activiti/SecondApprove.bpmn20.xml    DGRM_RESOURCE_NAME_: org/destiny/activiti/SecondApprove.SecondApprove.png           DESCRIPTION_: NULL    HAS_START_FORM_KEY_: 0HAS_GRAPHICAL_NOTATION_: 1      SUSPENSION_STATE_: 1             TENANT_ID_:        ENGINE_VERSION_: NULL*************************** 2. row ***************************                    ID_: SecondApprove:2:2504                   REV_: 1              CATEGORY_: http://www.activiti.org/test                  NAME_: 二级审批                   KEY_: SecondApprove               VERSION_: 2         DEPLOYMENT_ID_: 2501         RESOURCE_NAME_: org/destiny/activiti/SecondApprove.bpmn20.xml    DGRM_RESOURCE_NAME_: org/destiny/activiti/SecondApprove.SecondApprove.png           DESCRIPTION_: 审批流程描述    HAS_START_FORM_KEY_: 0HAS_GRAPHICAL_NOTATION_: 1      SUSPENSION_STATE_: 1             TENANT_ID_:        ENGINE_VERSION_: NULL</code></pre><p>ACT_RE_PROCDEF 是基于 KEY_ 去升级版本号, 当原有的 key 已经存在, 就会升级版本号, 其中 KEY_, VERSION_, TENANT_ID_ 共同组成一个唯一键</p><h1 id="3-身份数据表设计"><a href="#3-身份数据表设计" class="headerlink" title="3. 身份数据表设计"></a>3. 身份数据表设计</h1><table><thead><tr><th>数据表设计</th><th>描述</th></tr></thead><tbody><tr><td>ACT_ID_USER</td><td>用户的基本信息</td></tr><tr><td>ACT_ID_INFO</td><td>用户的扩展信息</td></tr><tr><td>ACT_ID_GROUP</td><td>群组</td></tr><tr><td>ACT_ID_MEMBERSHIP</td><td>用户与群组关系</td></tr></tbody></table><h2 id="3-1-用户信息表"><a href="#3-1-用户信息表" class="headerlink" title="3.1. 用户信息表"></a>3.1. 用户信息表</h2><p>对应实体 <code>org.activiti.engine.impl.persistence.entity.UserEntityImpl</code></p><pre><code>+-------------+--------------+------+-----+---------+-------+| Field       | Type         | Null | Key | Default | Extra |+-------------+--------------+------+-----+---------+-------+| ID_         | varchar(64)  | NO   | PRI | NULL    |       || REV_        | int(11)      | YES  |     | NULL    |       || FIRST_      | varchar(255) | YES  |     | NULL    |       || LAST_       | varchar(255) | YES  |     | NULL    |       || EMAIL_      | varchar(255) | YES  |     | NULL    |       || PWD_        | varchar(255) | YES  |     | NULL    |       || PICTURE_ID_ | varchar(64)  | YES  |     | NULL    |       |+-------------+--------------+------+-----+---------+-------+</code></pre><h2 id="3-2-用户扩展信息"><a href="#3-2-用户扩展信息" class="headerlink" title="3.2. 用户扩展信息"></a>3.2. 用户扩展信息</h2><p>对应实体 <code>org.activiti.engine.impl.persistence.entity.IdentityInfoEntityImpl</code></p><pre><code>+------------+--------------+------+-----+---------+-------+| Field      | Type         | Null | Key | Default | Extra |+------------+--------------+------+-----+---------+-------+| ID_        | varchar(64)  | NO   | PRI | NULL    |       || REV_       | int(11)      | YES  |     | NULL    |       || USER_ID_   | varchar(64)  | YES  |     | NULL    |       || TYPE_      | varchar(64)  | YES  |     | NULL    |       || KEY_       | varchar(255) | YES  |     | NULL    |       || VALUE_     | varchar(255) | YES  |     | NULL    |       || PASSWORD_  | longblob     | YES  |     | NULL    |       || PARENT_ID_ | varchar(255) | YES  |     | NULL    |       |+------------+--------------+------+-----+---------+-------+</code></pre><ul><li>USER_ID_: 关联用户 id</li><li>TYPE_: 类型(固定值)</li><li>KEY_: 属性名</li><li>VALUE_: 属性值</li><li>PASSWORD_: 密码(未使用)</li><li>PARENT_ID_: 上级关联(不建议使用)</li></ul><h2 id="3-3-ACT-ID-GROUP"><a href="#3-3-ACT-ID-GROUP" class="headerlink" title="3.3. ACT_ID_GROUP"></a>3.3. ACT_ID_GROUP</h2><p>对应实体 <code>org.activiti.engine.impl.persistence.entity.GroupEntityImpl</code></p><pre><code>+-------+--------------+------+-----+---------+-------+| Field | Type         | Null | Key | Default | Extra |+-------+--------------+------+-----+---------+-------+| ID_   | varchar(64)  | NO   | PRI | NULL    |       || REV_  | int(11)      | YES  |     | NULL    |       || NAME_ | varchar(255) | YES  |     | NULL    |       || TYPE_ | varchar(255) | YES  |     | NULL    |       |+-------+--------------+------+-----+---------+-------+</code></pre><h2 id="3-4-用户组关系表"><a href="#3-4-用户组关系表" class="headerlink" title="3.4. 用户组关系表"></a>3.4. 用户组关系表</h2><p>对应实体 <code>org.activiti.engine.impl.persistence.entity.MembershipEntityImpl</code></p><pre><code>+-----------+-------------+------+-----+---------+-------+| Field     | Type        | Null | Key | Default | Extra |+-----------+-------------+------+-----+---------+-------+| USER_ID_  | varchar(64) | NO   | PRI | NULL    |       || GROUP_ID_ | varchar(64) | NO   | PRI | NULL    |       |+-----------+-------------+------+-----+---------+-------+</code></pre><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIdentity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IdentityService identityService = activitiRule.getIdentityService();</span><br><span class="line">    User user1 = identityService.newUser(<span class="string">"user1"</span>);</span><br><span class="line">    user1.setFirstName(<span class="string">"firstName"</span>);</span><br><span class="line">    user1.setLastName(<span class="string">"lastName"</span>);</span><br><span class="line">    user1.setEmail(<span class="string">"user1@126.com"</span>);</span><br><span class="line">    user1.setPassword(<span class="string">"pwd"</span>);</span><br><span class="line">    identityService.saveUser(user1);</span><br><span class="line">    User user2 = identityService.newUser(<span class="string">"user2"</span>);</span><br><span class="line">    identityService.saveUser(user2);</span><br><span class="line">    Group group1 = identityService.newGroup(<span class="string">"group1"</span>);</span><br><span class="line">    group1.setName(<span class="string">"for test"</span>);</span><br><span class="line">    identityService.saveGroup(group1);</span><br><span class="line">    identityService.createMembership(user1.getId(), group1.getId());</span><br><span class="line">    identityService.createMembership(user2.getId(), group1.getId());</span><br><span class="line">    <span class="comment">// 扩展信息</span></span><br><span class="line">    identityService.setUserInfo(user1.getId(), <span class="string">"age"</span>, <span class="string">"18"</span>);</span><br><span class="line">    identityService.setUserInfo(user1.getId(), <span class="string">"identity"</span>, <span class="string">"destiny"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-运行时流程数据表"><a href="#4-运行时流程数据表" class="headerlink" title="4. 运行时流程数据表"></a>4. 运行时流程数据表</h1><table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td>ACT_RU_EXECUTION</td><td>流程实例与分支执行信息</td></tr><tr><td>ACT_RU_TASK</td><td>用户任务信息</td></tr><tr><td>ACT_RU_VARIABLE</td><td>变量信息</td></tr><tr><td>ACT_RU_IDENTITYLINK</td><td>参与者相关信息</td></tr><tr><td>ACT_RU_EVENT_SUBSCR</td><td>事件监听表</td></tr><tr><td>ACT_RU_JOB</td><td>作业表</td></tr><tr><td>ACT_RU_TIMER_JOB</td><td>定时器表</td></tr><tr><td>ACT_RU_SUSPENDED_JOB</td><td>暂停作业表</td></tr><tr><td>ACT_RU_DEADLETTER_JOB</td><td>死信表</td></tr></tbody></table><h2 id="4-1-ACT-RU-EXECUTION"><a href="#4-1-ACT-RU-EXECUTION" class="headerlink" title="4.1. ACT_RU_EXECUTION"></a>4.1. ACT_RU_EXECUTION</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.ExecutionEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>PROC_INST_ID_</td><td>流程实例 ID</td></tr><tr><td>BUSINESS_KEY_</td><td>业务标志</td></tr><tr><td>PARENT_ID_</td><td>父执行信息</td></tr><tr><td>PROC_DEF_ID_</td><td>流程定义 ID</td></tr><tr><td>SUPER_EXEC_</td><td>父流程实例对应的执行</td></tr><tr><td>ACT_ID_</td><td>流程定义节点 ID</td></tr><tr><td>IS_ACTIVE</td><td>是否活动的执行 0-非活动, 1-活动</td></tr><tr><td>IS_CONCURRENT_</td><td>是否并行分支 0-非, 1-是</td></tr><tr><td>IS_SCOPE_</td><td>是否全局流程执行 0-非, 1-是</td></tr><tr><td>IS_EVENT_SCOPE_</td><td>是否激活状态</td></tr><tr><td>SUSPENSION_STATE</td><td>挂起状态 1-正常, 2-挂起</td></tr><tr><td>LOCK_TIME_</td><td>锁定时间</td></tr></tbody></table><h2 id="4-2-ACT-RU-TASK"><a href="#4-2-ACT-RU-TASK" class="headerlink" title="4.2. ACT_RU_TASK"></a>4.2. ACT_RU_TASK</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.TaskEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>EXECUTION_ID_</td><td>执行流 id</td></tr><tr><td>PROC_INST_ID_</td><td>流程实例 ID</td></tr><tr><td>PROC_DEF_ID_</td><td>流程定义 ID</td></tr><tr><td>PARENT_TASK_ID_</td><td>父任务</td></tr><tr><td>TASK_DEF_KEY_</td><td>任务定义 ID</td></tr><tr><td>NAME_</td><td>任务定义名称</td></tr><tr><td>OWNER_</td><td>拥有人</td></tr><tr><td>ASSIGNEE_</td><td>代理人</td></tr><tr><td>DELEGATION_</td><td>委托状态 PENDING-委托中, RESOLVED 已处理</td></tr><tr><td>PRIORITY_</td><td>优先级</td></tr><tr><td>DUE_DATE_</td><td>过期时间</td></tr><tr><td>FORM_KEY_</td><td>表单标志</td></tr></tbody></table><h2 id="4-3-ACT-RU-VARIABLE"><a href="#4-3-ACT-RU-VARIABLE" class="headerlink" title="4.3. ACT_RU_VARIABLE"></a>4.3. ACT_RU_VARIABLE</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.VariableInstanceEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>TYPE_</td><td>变量名称(integer, string, double, json)</td></tr><tr><td>NAME_</td><td>变量名</td></tr><tr><td>BYTEARRAY_ID_</td><td>资源表 id</td></tr><tr><td>DOUBLE_</td><td>浮点值</td></tr><tr><td>LONG_</td><td>长整型数值</td></tr><tr><td>TEXT_</td><td>文本值</td></tr></tbody></table><h2 id="4-4-ACT-RU-IDENTITYLINK"><a href="#4-4-ACT-RU-IDENTITYLINK" class="headerlink" title="4.4. ACT_RU_IDENTITYLINK"></a>4.4. ACT_RU_IDENTITYLINK</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.IdentityInfoEntityImpl</code></p><blockquote><p>当用户和流程建立关系的时候, 就会在此表中插入记录</p></blockquote><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td></tr><tr><td>GROUP_ID_</td><td>用户组 ID</td></tr><tr><td>TYPE_</td><td>类型 assignee, candidate, owner, starter…</td></tr><tr><td>USER_ID_</td><td>用户 ID</td></tr><tr><td>TASK_ID_</td><td>任务 ID</td></tr><tr><td>PROC_INST_ID_</td><td>流程实例</td></tr></tbody></table><h2 id="4-5-ACT-RU-EVENT-SUBSCR"><a href="#4-5-ACT-RU-EVENT-SUBSCR" class="headerlink" title="4.5. ACT_RU_EVENT_SUBSCR"></a>4.5. ACT_RU_EVENT_SUBSCR</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.EventSubscriptionEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>EVENT_TYPE_</td><td>事件类型 message, signal</td></tr><tr><td>EVENT_NAME_</td><td>事件名称</td></tr><tr><td>EXECUTION_ID_</td><td>流程执行 ID</td></tr><tr><td>PROC_INST_ID_</td><td>流程实例 ID</td></tr><tr><td>ACTIVITY_ID_</td><td>流程定义节点 ID</td></tr><tr><td>CONFIGURATION_</td><td>配置</td></tr></tbody></table><h2 id="4-6-ACT-RU-JOB"><a href="#4-6-ACT-RU-JOB" class="headerlink" title="4.6. ACT_RU_JOB"></a>4.6. ACT_RU_JOB</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.JobEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>TYPE_</td><td>类型</td></tr><tr><td>LOCK_EXP_TIME_</td><td>锁定过期时间</td></tr><tr><td>LOCK_OWNER_</td><td>锁定接点</td></tr><tr><td>EXCLUSIVE_</td><td>是否唯一</td></tr><tr><td>RETRIES_</td><td>重试次数3</td></tr><tr><td>REPEAT_</td><td>重复表达式 R5/PT10S</td></tr><tr><td>EXCEPTION_STACK_ID_</td><td>异常堆栈(资源表 ID)</td></tr><tr><td>EXCEPTION_MSG_</td><td>异常信息</td></tr><tr><td>DUEDATE_</td><td>过期时间</td></tr><tr><td>HANDLER_TYPE_</td><td>处理器类型</td></tr><tr><td>HANDLER_CFG</td><td>处理器配置</td></tr><tr><td>EXECUTION_ID_</td><td>流程执行表 ID</td></tr></tbody></table><h2 id="4-7-测试代码"><a href="#4-7-测试代码" class="headerlink" title="4.7 测试代码"></a>4.7 测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Deployment deployment = activitiRule.getRepositoryService()</span><br><span class="line">            .createDeployment()</span><br><span class="line">            .name(<span class="string">"二次审批"</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">"org/destiny/activiti/SecondApprove.bpmn20.xml"</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">    log.info(<span class="string">"deployment: &#123;&#125;"</span>, deployment);</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">    ProcessInstance processInstance = activitiRule.getRuntimeService()</span><br><span class="line">            .startProcessInstanceByKey(<span class="string">"SecondApprove"</span>, variables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-1-ACT-RU-EXECUTION-表"><a href="#4-7-1-ACT-RU-EXECUTION-表" class="headerlink" title="4.7.1 ACT_RU_EXECUTION 表"></a>4.7.1 ACT_RU_EXECUTION 表</h3><p>执行完成后, <code>ACT_RU_EXECUTION</code> 表会生成如下两条记录, 流程启动和用户任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">                  ID_: 5</span><br><span class="line">                 REV_: 1</span><br><span class="line">        PROC_INST_ID_: 5</span><br><span class="line">        BUSINESS_KEY_: NULL</span><br><span class="line">           PARENT_ID_: NULL</span><br><span class="line">         PROC_DEF_ID_: SecondApprove:1:4</span><br><span class="line">          SUPER_EXEC_: NULL</span><br><span class="line">   ROOT_PROC_INST_ID_: 5</span><br><span class="line">              ACT_ID_: NULL</span><br><span class="line">           IS_ACTIVE_: 1</span><br><span class="line">       IS_CONCURRENT_: 0</span><br><span class="line">            IS_SCOPE_: 1</span><br><span class="line">      IS_EVENT_SCOPE_: 0</span><br><span class="line">          IS_MI_ROOT_: 0</span><br><span class="line">    SUSPENSION_STATE_: 1</span><br><span class="line">    CACHED_ENT_STATE_: NULL</span><br><span class="line">           TENANT_ID_:</span><br><span class="line">                NAME_: NULL</span><br><span class="line">          START_TIME_: 2018-12-12 03:40:16.634</span><br><span class="line">       START_USER_ID_: NULL</span><br><span class="line">           LOCK_TIME_: NULL</span><br><span class="line">    IS_COUNT_ENABLED_: 0</span><br><span class="line">    EVT_SUBSCR_COUNT_: 0</span><br><span class="line">          TASK_COUNT_: 0</span><br><span class="line">           JOB_COUNT_: 0</span><br><span class="line">     TIMER_JOB_COUNT_: 0</span><br><span class="line">      SUSP_JOB_COUNT_: 0</span><br><span class="line">DEADLETTER_JOB_COUNT_: 0</span><br><span class="line">           VAR_COUNT_: 0</span><br><span class="line">       ID_LINK_COUNT_: 0</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">                  ID_: 7</span><br><span class="line">                 REV_: 1</span><br><span class="line">        PROC_INST_ID_: 5</span><br><span class="line">        BUSINESS_KEY_: NULL</span><br><span class="line">           PARENT_ID_: 5</span><br><span class="line">         PROC_DEF_ID_: SecondApprove:1:4</span><br><span class="line">          SUPER_EXEC_: NULL</span><br><span class="line">   ROOT_PROC_INST_ID_: 5</span><br><span class="line">              ACT_ID_: submitApprove</span><br><span class="line">           IS_ACTIVE_: 1</span><br><span class="line">       IS_CONCURRENT_: 0</span><br><span class="line">            IS_SCOPE_: 0</span><br><span class="line">      IS_EVENT_SCOPE_: 0</span><br><span class="line">          IS_MI_ROOT_: 0</span><br><span class="line">    SUSPENSION_STATE_: 1</span><br><span class="line">    CACHED_ENT_STATE_: NULL</span><br><span class="line">           TENANT_ID_:</span><br><span class="line">                NAME_: NULL</span><br><span class="line">          START_TIME_: 2018-12-12 03:40:16.636</span><br><span class="line">       START_USER_ID_: NULL</span><br><span class="line">           LOCK_TIME_: NULL</span><br><span class="line">    IS_COUNT_ENABLED_: 0</span><br><span class="line">    EVT_SUBSCR_COUNT_: 0</span><br><span class="line">          TASK_COUNT_: 0</span><br><span class="line">           JOB_COUNT_: 0</span><br><span class="line">     TIMER_JOB_COUNT_: 0</span><br><span class="line">      SUSP_JOB_COUNT_: 0</span><br><span class="line">DEADLETTER_JOB_COUNT_: 0</span><br><span class="line">           VAR_COUNT_: 0</span><br><span class="line">       ID_LINK_COUNT_: 0</span><br></pre></td></tr></table></figure><ul><li>两条记录的 <code>PROC_DEF_ID_</code> 相同, 说明是同一个流程的实例.</li><li>第一条记录的 <code>ID_</code> 是5, 第二条记录的 <code>PARENT_ID_</code> 是 5, 说明第二条是第一条生成的.</li><li>第二条记录的 <code>ACT_ID_</code> 值为 submitApprove, 代表 userTask 的一个节点</li><li>第二条记录的 <code>IS_SCOPE</code> 值为 0, 代表不是一个全局的执行流, 而第一条是一个全局执行流.</li></ul><h3 id="4-7-2-ACT-RU-TASK-表"><a href="#4-7-2-ACT-RU-TASK-表" class="headerlink" title="4.7.2 ACT_RU_TASK 表"></a>4.7.2 ACT_RU_TASK 表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">              ID_: 10</span><br><span class="line">             REV_: 1</span><br><span class="line">    EXECUTION_ID_: 7</span><br><span class="line">    PROC_INST_ID_: 5</span><br><span class="line">     PROC_DEF_ID_: SecondApprove:1:4</span><br><span class="line">            NAME_: 填写申请信息</span><br><span class="line">  PARENT_TASK_ID_: NULL</span><br><span class="line">     DESCRIPTION_: NULL</span><br><span class="line">    TASK_DEF_KEY_: submitApprove</span><br><span class="line">           OWNER_: NULL</span><br><span class="line">        ASSIGNEE_: NULL</span><br><span class="line">      DELEGATION_: NULL</span><br><span class="line">        PRIORITY_: 50</span><br><span class="line">     CREATE_TIME_: 2018-12-12 03:40:16.641</span><br><span class="line">        DUE_DATE_: NULL</span><br><span class="line">        CATEGORY_: NULL</span><br><span class="line">SUSPENSION_STATE_: 1</span><br><span class="line">       TENANT_ID_:</span><br><span class="line">        FORM_KEY_: NULL</span><br><span class="line">      CLAIM_TIME_: NULL</span><br></pre></td></tr></table></figure><ul><li><code>PROC_DEF_ID_</code> 为 SecondApprove:1:4</li></ul><h3 id="4-7-3-ACT-RU-VARIABLE-表"><a href="#4-7-3-ACT-RU-VARIABLE-表" class="headerlink" title="4.7.3. ACT_RU_VARIABLE 表"></a>4.7.3. ACT_RU_VARIABLE 表</h3><blockquote><p>保存启动时候设置的变量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">          ID_: 6</span><br><span class="line">         REV_: 1</span><br><span class="line">        TYPE_: string</span><br><span class="line">        NAME_: k1</span><br><span class="line">EXECUTION_ID_: 5</span><br><span class="line">PROC_INST_ID_: 5</span><br><span class="line">     TASK_ID_: NULL</span><br><span class="line">BYTEARRAY_ID_: NULL</span><br><span class="line">      DOUBLE_: NULL</span><br><span class="line">        LONG_: NULL</span><br><span class="line">        TEXT_: v1</span><br><span class="line">       TEXT2_: NULL</span><br></pre></td></tr></table></figure><p>执行设置所属人的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetOwner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TaskService taskService = activitiRule.getTaskService();</span><br><span class="line">    Task task = taskService</span><br><span class="line">            .createTaskQuery()</span><br><span class="line">            .processDefinitionKey(<span class="string">"SecondApprove"</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">// 设置所属人</span></span><br><span class="line">    taskService.setOwner(task.getId(), <span class="string">"destiny"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-4-ACT-RU-IDENTITYLINK"><a href="#4-7-4-ACT-RU-IDENTITYLINK" class="headerlink" title="4.7.4 ACT_RU_IDENTITYLINK"></a>4.7.4 ACT_RU_IDENTITYLINK</h3><pre><code>*************************** 1. row ***************************          ID_: 2501         REV_: 1    GROUP_ID_: NULL        TYPE_: participant     USER_ID_: destiny     TASK_ID_: NULLPROC_INST_ID_: 5 PROC_DEF_ID_: NULL</code></pre><p>而此时在 <code>ACT_RU_TASK</code> 表, 对应的 task 的 <code>OWNER_</code> 字段已经赋值为 destiny</p><h3 id="4-7-5-ACT-RU-TASK"><a href="#4-7-5-ACT-RU-TASK" class="headerlink" title="4.7.5 ACT_RU_TASK"></a>4.7.5 ACT_RU_TASK</h3><pre><code>*************************** 1. row ***************************              ID_: 10             REV_: 2    EXECUTION_ID_: 7    PROC_INST_ID_: 5     PROC_DEF_ID_: SecondApprove:1:4            NAME_: 填写申请信息  PARENT_TASK_ID_: NULL     DESCRIPTION_: NULL    TASK_DEF_KEY_: submitApprove           OWNER_: destiny        ASSIGNEE_: NULL      DELEGATION_: NULL        PRIORITY_: 50     CREATE_TIME_: 2018-12-12 07:19:33.134        DUE_DATE_: NULL        CATEGORY_: NULLSUSPENSION_STATE_: 1       TENANT_ID_:        FORM_KEY_: NULL      CLAIM_TIME_: NULL</code></pre><h1 id="5-历史流程数据表"><a href="#5-历史流程数据表" class="headerlink" title="5. 历史流程数据表"></a>5. 历史流程数据表</h1><table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td>ACT_HI_PROCINST</td><td>历史流程实例表</td></tr><tr><td>ACT_HI_ACTINST</td><td>历史节点信息表, 执行过程中每经过一个节点就会插入一条记录</td></tr><tr><td>ACT_HI_TASKINST</td><td>历史任务表</td></tr><tr><td>ACT_HI_VARINST</td><td>历史变量</td></tr><tr><td>ACT_HI_IDENTITYLINK</td><td>历史参与者</td></tr><tr><td>ACT_HI_DETAIL</td><td>历史变更, 当使用 FormService 提交表单时, 表单的属性就会存储在该表, 以及变量的更改</td></tr><tr><td>ACT_HI_ATTACHMENT</td><td>附件</td></tr><tr><td>ACT_HI_COMMENT</td><td>评论</td></tr><tr><td>ACT_EVT_LOG</td><td>事件日志</td></tr></tbody></table><h2 id="5-1-ACT-HI-PROCINST"><a href="#5-1-ACT-HI-PROCINST" class="headerlink" title="5.1 ACT_HI_PROCINST"></a>5.1 ACT_HI_PROCINST</h2><p>| 关键字段 | </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据表分类&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ACT_GE_*&lt;/td&gt;
&lt;td&gt;通用数据表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACT_RE_*&lt;/td&gt;
&lt;t
      
    
    </summary>
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/categories/Activiti/"/>
    
      <category term="Java" scheme="https://destinywang.github.io/blog/categories/Activiti/Java/"/>
    
      <category term="工作流" scheme="https://destinywang.github.io/blog/categories/Activiti/Java/%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti(2)--BPMN2.0规范</title>
    <link href="https://destinywang.github.io/blog/2018/12/08/Activiti-2-BPMN2-0%E8%A7%84%E8%8C%83/"/>
    <id>https://destinywang.github.io/blog/2018/12/08/Activiti-2-BPMN2-0规范/</id>
    <published>2018-12-07T16:08:52.000Z</published>
    <updated>2018-12-08T10:30:53.174Z</updated>
    
    <content type="html"><![CDATA[<p>BPMN2.0:</p><ul><li>是一套业务流程模型与符号建模标准</li><li>精准的执行语义来描述元素的操作</li><li>以 XML 为载体, 以符号可视化业务</li></ul><p>BPMN2.0元素:</p><ul><li>流对象</li><li>连接对象</li><li>数据</li><li>泳道</li><li>描述对象</li></ul><blockquote><p>其中最重要的流对象, 流对象包括活动, 事件和网关, 通过连接对象连接起来, 用来表示数据的流转, 泳道用来对业务的范围做区分, 描述对象并不影响业务的进行, 为流程图的可读性做补充性的描述.</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49372749-a26ac100-f736-11e8-89f1-b01d14fa6f1d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/17758731/49372819-d0e89c00-f736-11e8-984f-34464892a1b9.png" alt="image"></p><h1 id="1-事件"><a href="#1-事件" class="headerlink" title="1. 事件"></a>1. 事件</h1><h2 id="1-1-分类"><a href="#1-1-分类" class="headerlink" title="1.1 分类"></a>1.1 分类</h2><p>按照位置分类:</p><ul><li>开始事件</li><li>中间事件/边界事件(中间事件是指出现在流程中, 可以单独作为流程节点的事件, 而边界事件指的是附属于某个流程节点的事件)</li><li>结束事件</li></ul><p>按照特征分类:</p><ul><li>捕获时间, 捕获事件是一直在等待被触发的事件, 所有的开始事件都是等待被触发的事件</li><li>抛出事件, 执行到节点会自动执行并抛出结果, 结束事件都属于抛出事件.</li></ul><p>按照定义分类:</p><ul><li>定时事件</li><li>错误事件</li><li>信号事件</li><li>消息事件</li></ul><h3 id="1-1-1-定时事件"><a href="#1-1-1-定时事件" class="headerlink" title="1.1.1 定时事件"></a>1.1.1 定时事件</h3><blockquote><p>在使用定时事件时, 首先需要流程引擎的异步开关打开</p></blockquote><ul><li>指定时间(timeDate)</li><li>指定持续时间(timeDuration)</li><li>周期执行(timeCycle)</li></ul><p>定时事件的定义方式: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定定时时间的类型: timeDate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timeDate</span>&gt;</span>2018-01-01T10:10:10<span class="tag">&lt;/<span class="name">timeDate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">timerEventDefinition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-1-1-1-定时开始事件"><a href="#1-1-1-1-定时开始事件" class="headerlink" title="1.1.1.1 定时开始事件"></a>1.1.1.1 定时开始事件</h4><p><img src="https://user-images.githubusercontent.com/17758731/49680055-62576580-facb-11e8-97d2-daa701f4993f.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"timerStartEvent"</span> <span class="attr">name</span>=<span class="string">"Timer Start"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在流程部署完成 5 分钟后,  执行5次 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timeCycle</span>&gt;</span>R5/PT5M<span class="tag">&lt;/<span class="name">timeCycle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-1-1-2-定时边界事件"><a href="#1-1-1-2-定时边界事件" class="headerlink" title="1.1.1.2 定时边界事件"></a>1.1.1.2 定时边界事件</h4><blockquote><p>流程流转到一个普通任务时, 如果在指定时间内没有完成, 就会触发定时边界事件</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49680088-d1cd5500-facb-11e8-8cd7-94c1b85d7402.png" alt="image"></p><h5 id="流程定义"><a href="#流程定义" class="headerlink" title="流程定义"></a>流程定义</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"startEvent"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"commonTask"</span> <span class="attr">name</span>=<span class="string">"Common Task"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明边界事件, attachedToRef 指定边界事件的宿主 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">boundaryEvent</span> <span class="attr">id</span>=<span class="string">"boundaryEvent"</span> <span class="attr">name</span>=<span class="string">"Timer"</span> <span class="attr">attachedToRef</span>=<span class="string">"commonTask"</span> <span class="attr">cancelActivity</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 部署完 5 秒之后 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timeDuration</span>&gt;</span>PT5S<span class="tag">&lt;/<span class="name">timeDuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">boundaryEvent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"timeoutTask"</span> <span class="attr">name</span>=<span class="string">"Timeout Task"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end2"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 构建顺序流 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"startEvent"</span> <span class="attr">targetRef</span>=<span class="string">"commonTask"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"commonTask"</span> <span class="attr">targetRef</span>=<span class="string">"end1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"boundaryEvent"</span> <span class="attr">targetRef</span>=<span class="string">"timeoutTask"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"timeoutTask"</span> <span class="attr">targetRef</span>=<span class="string">"end2"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超时边界事件</span></span><br><span class="line"><span class="comment"> * 流程启动之后, 流转到 commonTask, 此时让当前线程休眠 10 秒(5秒就会超时)</span></span><br><span class="line"><span class="comment"> * 定时任务超时后执行 timeoutTask</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-time-boundary.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTimerBoundary</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">    <span class="comment">// task 列表</span></span><br><span class="line">    List&lt;Task&gt; taskList = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"task 总数: &#123;&#125;"</span>, taskList.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        log.info(<span class="string">"task.name = &#123;&#125;"</span>, task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 强制睡眠等待边界事件触发</span></span><br><span class="line">    Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// task 列表</span></span><br><span class="line">    taskList = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"休眠后 task 总数: &#123;&#125;"</span>, taskList.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        log.info(<span class="string">"休眠后 task.name = &#123;&#125;"</span>, task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>11:06:06,568 [main] INFO  org.destiny.activiti.bpmn20.TimerEventTest  - task 总数: 111:06:06,568 [main] INFO  org.destiny.activiti.bpmn20.TimerEventTest  - task.name = Common Task...11:06:16,573 [main] INFO  org.destiny.activiti.bpmn20.TimerEventTest  - 休眠后 task 总数: 111:06:16,573 [main] INFO  org.destiny.activiti.bpmn20.TimerEventTest  - 休眠后 task.name = Timeout Task</code></pre><h3 id="1-1-2-错误事件"><a href="#1-1-2-错误事件" class="headerlink" title="1.1.2 错误事件"></a>1.1.2 错误事件</h3><blockquote><p>网关中由提交的表单信息判断正常结束还是异常结束, 错误事件会被错误信息所触发, 主要用于处理业务异常</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49682183-c3dafc80-faea-11e8-9160-48f2f59d1c3f.png" alt="image"></p><blockquote><h4 id="流程图简单分析"><a href="#流程图简单分析" class="headerlink" title="流程图简单分析"></a>流程图简单分析</h4><blockquote><p>提交一个新的 <code>sales leader</code>, 创建一个子流程, 在子流程中同时对 <code>customer rating</code> 以及 <code>profitability</code> 进行考察, 如果同时通过, 则结束子流程, 完成主流程的 <code>Store lead in CRM system</code> 任务以及结束节点</p><blockquote><p>如果 <code>profitability</code> 任务没有提供足够的信息, 则会抛出错误事件, 错误事件被边界事件所捕获, 进入 <code>Provide additional details</code> 流程, 并进入开始子流程</p></blockquote></blockquote></blockquote><h4 id="流程定义-1"><a href="#流程定义-1" class="headerlink" title="流程定义"></a>流程定义</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error</span> <span class="attr">id</span>=<span class="string">"notEnoughInfoError"</span> <span class="attr">errorCode</span>=<span class="string">"not_enough_info"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"reviewSaledLead"</span> <span class="attr">name</span>=<span class="string">"Review sales lead"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"theStart"</span> <span class="attr">activiti:initiator</span>=<span class="string">"initiator"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"theStart"</span> <span class="attr">targetRef</span>=<span class="string">"provideNewSalesLead"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"provideNewSalesLead"</span> <span class="attr">name</span>=<span class="string">"Provide new sales lead"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;initiator&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"customerName"</span> <span class="attr">name</span>=<span class="string">"Customer name"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">required</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"potentialProfit"</span> <span class="attr">name</span>=<span class="string">"Potential profit"</span> <span class="attr">type</span>=<span class="string">"long"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"details"</span> <span class="attr">name</span>=<span class="string">"Details"</span> <span class="attr">type</span>=<span class="string">"string"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"provideNewSalesLead"</span> <span class="attr">targetRef</span>=<span class="string">"reviewSalesLeadSubProcess"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子流程 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">subProcess</span> <span class="attr">id</span>=<span class="string">"reviewSalesLeadSubProcess"</span> <span class="attr">name</span>=<span class="string">"Review sales lead"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"subProcessStart"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow3"</span> <span class="attr">sourceRef</span>=<span class="string">"subProcessStart"</span> <span class="attr">targetRef</span>=<span class="string">"fork"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow4"</span> <span class="attr">sourceRef</span>=<span class="string">"fork"</span> <span class="attr">targetRef</span>=<span class="string">"reviewProfitability"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">"fork"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow5"</span> <span class="attr">sourceRef</span>=<span class="string">"fork"</span> <span class="attr">targetRef</span>=<span class="string">"reviewCustomerRating"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"reviewCustomerRating"</span> <span class="attr">name</span>=<span class="string">"Review customer rating"</span> <span class="attr">activiti:candidateGroups</span>=<span class="string">"accountancy"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow6"</span> <span class="attr">sourceRef</span>=<span class="string">"reviewCustomerRating"</span> <span class="attr">targetRef</span>=<span class="string">"subProcessEnd1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"subProcessEnd1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"reviewProfitability"</span> <span class="attr">name</span>=<span class="string">"Review profitability"</span> <span class="attr">activiti:candidateGroups</span>=<span class="string">"management"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">documentation</span>&gt;</span></span><br><span class="line">                $&#123;initiator&#125; has published a new sales lead: $&#123;customerName&#125;. Details: $&#123;details&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"notEnoughInformation"</span> <span class="attr">name</span>=<span class="string">"Do you believe this customer is profitable?"</span> <span class="attr">type</span>=<span class="string">"enum"</span> <span class="attr">required</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">activiti:value</span> <span class="attr">id</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"Yes"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">activiti:value</span> <span class="attr">id</span>=<span class="string">"true"</span> <span class="attr">name</span>=<span class="string">"No (= request more info)"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">activiti:formProperty</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow7"</span> <span class="attr">sourceRef</span>=<span class="string">"reviewProfitability"</span> <span class="attr">targetRef</span>=<span class="string">"enoughInformationCheck"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">"enoughInformationCheck"</span> <span class="attr">name</span>=<span class="string">"Enough information?"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow8"</span> <span class="attr">sourceRef</span>=<span class="string">"enoughInformationCheck"</span> <span class="attr">targetRef</span>=<span class="string">"notEnoughInformationEnd"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">conditionExpression</span>&gt;</span>$&#123;notEnoughInformation == 'true'&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow9"</span> <span class="attr">sourceRef</span>=<span class="string">"enoughInformationCheck"</span> <span class="attr">targetRef</span>=<span class="string">"subProcessEnd2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">conditionExpression</span>&gt;</span>$&#123;notEnoughInformation == 'false'&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"subProcessEnd2"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"notEnoughInformationEnd"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">errorEventDefinition</span> <span class="attr">errorRef</span>=<span class="string">"notEnoughInfoError"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">subProcess</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow10"</span> <span class="attr">sourceRef</span>=<span class="string">"reviewSalesLeadSubProcess"</span> <span class="attr">targetRef</span>=<span class="string">"storeLeadInCrmSystem"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">boundaryEvent</span> <span class="attr">attachedToRef</span>=<span class="string">"reviewSalesLeadSubProcess"</span> <span class="attr">cancelActivity</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"catchNotEnoughInformationError"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">errorEventDefinition</span> <span class="attr">errorRef</span>=<span class="string">"notEnoughInfoError"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">boundaryEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow11"</span> <span class="attr">sourceRef</span>=<span class="string">"catchNotEnoughInformationError"</span> <span class="attr">targetRef</span>=<span class="string">"provideAdditionalDetails"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"provideAdditionalDetails"</span> <span class="attr">name</span>=<span class="string">"Provide additional details"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;initiator&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>Provide additional details for $&#123;customerName&#125;.<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"details"</span> <span class="attr">name</span>=<span class="string">"Additional details"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">required</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow12"</span> <span class="attr">sourceRef</span>=<span class="string">"provideAdditionalDetails"</span> <span class="attr">targetRef</span>=<span class="string">"reviewSalesLeadSubProcess"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task</span> <span class="attr">id</span>=<span class="string">"storeLeadInCrmSystem"</span> <span class="attr">name</span>=<span class="string">"Store lead in CRM system"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow13"</span> <span class="attr">sourceRef</span>=<span class="string">"storeLeadInCrmSystem"</span> <span class="attr">targetRef</span>=<span class="string">"processEnd"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"processEnd"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoundaryErrorEventTest</span> <span class="keyword">extends</span> <span class="title">PluggableActivitiTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule = <span class="keyword">new</span> ActivitiRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setUp();</span><br><span class="line">        <span class="comment">// 设置当前用户</span></span><br><span class="line">        Authentication.setAuthenticatedUserId(<span class="string">"destiny"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Authentication.setAuthenticatedUserId(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">super</span>.tearDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/reviewSalesLead.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReviewSalesLeadProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; variables = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">"details"</span>, <span class="string">"interesting"</span>);</span><br><span class="line">        variables.put(<span class="string">"customerName"</span>, <span class="string">"Camery"</span>);</span><br><span class="line"></span><br><span class="line">        ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"reviewSaledLead"</span>, variables);</span><br><span class="line">        log.info(<span class="string">"processInstance: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(processInstance, ToStringStyle.JSON_STYLE));</span><br><span class="line"></span><br><span class="line">        Task task = taskService.createTaskQuery()</span><br><span class="line">                .taskAssignee(<span class="string">"destiny"</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"task: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(task, ToStringStyle.JSON_STYLE));</span><br><span class="line">        <span class="comment">// 使用断言确认</span></span><br><span class="line">        assertEquals(task.getName(), <span class="string">"Provide new sales lead"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交节点</span></span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进入并行网关, 会同时生成两个 task</span></span><br><span class="line">        Task ratingTask = taskService.createTaskQuery().taskCandidateGroup(<span class="string">"accountancy"</span>).singleResult();</span><br><span class="line">        log.info(<span class="string">"ratingTask: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(ratingTask, ToStringStyle.JSON_STYLE));</span><br><span class="line">        assertEquals(ratingTask.getName(), <span class="string">"Review customer rating"</span>);</span><br><span class="line"></span><br><span class="line">        Task profitabilityTask = taskService.createTaskQuery().taskCandidateGroup(<span class="string">"management"</span>).singleResult();</span><br><span class="line">        log.info(<span class="string">"profitabilityTask: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(profitabilityTask, ToStringStyle.JSON_STYLE));</span><br><span class="line">        assertEquals(profitabilityTask.getName(), <span class="string">"Review profitability"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Review profitability 提交后就会触发 errorEvent</span></span><br><span class="line">        variables = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">"notEnoughInformation"</span>, <span class="keyword">true</span>);</span><br><span class="line">        taskService.complete(profitabilityTask.getId(), variables);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找流程发起者 destiny 对应的 task</span></span><br><span class="line">        <span class="comment">// 此时 errorEvent 会被边界条件捕获, 流转到 Review profitability</span></span><br><span class="line">        Task provideDetailsTask = taskService.createTaskQuery().taskAssignee(<span class="string">"destiny"</span>).singleResult();</span><br><span class="line">        log.info(<span class="string">"provideDetailsTask: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(provideDetailsTask, ToStringStyle.JSON_STYLE));</span><br><span class="line">        assertEquals(provideDetailsTask.getName(), <span class="string">"Provide additional details"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完成 Review profitability 节点后, 会重新进入子流程</span></span><br><span class="line">        taskService.complete(provideDetailsTask.getId());</span><br><span class="line">        List&lt;Task&gt; reviewTasks = taskService.createTaskQuery().orderByTaskName().asc().list();</span><br><span class="line">        <span class="keyword">for</span> (Task reviewTask : reviewTasks) &#123;</span><br><span class="line">            log.info(<span class="string">"reviewTask: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(reviewTask, ToStringStyle.JSON_STYLE));</span><br><span class="line">        &#125;</span><br><span class="line">        assertEquals(reviewTasks.get(<span class="number">0</span>).getName(), <span class="string">"Review customer rating"</span>);</span><br><span class="line">        assertEquals(reviewTasks.get(<span class="number">1</span>).getName(), <span class="string">"Review profitability"</span>);</span><br><span class="line"></span><br><span class="line">        taskService.complete(reviewTasks.get(<span class="number">0</span>).getId());</span><br><span class="line">        variables.put(<span class="string">"notEnoughInformation"</span>, <span class="keyword">false</span>);</span><br><span class="line">        taskService.complete(reviewTasks.get(<span class="number">1</span>).getId(), variables);</span><br><span class="line">        assertProcessEnded(processInstance.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志输出-1"><a href="#日志输出-1" class="headerlink" title="日志输出"></a>日志输出</h4><blockquote><p>分析日志可以看到, 没有错误所有的断言全部通过, 证明整个流程无误(日志量比较大, 为了能够清晰描述流程特地将日志格式调整)</p></blockquote><pre><code>03:53:20,823 [main] INFO  org.activiti.engine.ProcessEngines  - initialised process engine default03:53:23,006 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,008 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : theStart (StartEvent, parent id 5 (active)03:53:23,009 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,009 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : theStart (StartEvent, parent id 5 (active)03:53:23,010 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,010 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : theStart -&gt; provideNewSalesLead, parent id 5 (active)03:53:23,010 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,011 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : provideNewSalesLead (UserTask, parent id 5 (active)03:53:23,053 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - processInstance: {&quot;currentFlowElement&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;processInstance&quot;:&quot;ProcessInstance[5]&quot;,&quot;parent&quot;:null,&quot;executions&quot;:[Execution[ id &apos;10&apos; ] - activity &apos;provideNewSalesLead - parent &apos;5&apos;],&quot;superExecution&quot;:null,&quot;subProcessInstance&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;name&quot;:null,&quot;description&quot;:null,&quot;localizedName&quot;:null,&quot;localizedDescription&quot;:null,&quot;lockTime&quot;:null,&quot;isActive&quot;:true,&quot;isScope&quot;:true,&quot;isConcurrent&quot;:false,&quot;isEnded&quot;:false,&quot;isEventScope&quot;:false,&quot;isMultiInstanceRoot&quot;:false,&quot;isCountEnabled&quot;:false,&quot;eventName&quot;:null,&quot;eventSubscriptions&quot;:[],&quot;jobs&quot;:[],&quot;timerJobs&quot;:[],&quot;tasks&quot;:[],&quot;identityLinks&quot;:[IdentityLinkEntity[id=7, type=starter, userId=destiny, processInstanceId=5]],&quot;deleteReason&quot;:null,&quot;suspensionState&quot;:1,&quot;startUserId&quot;:&quot;destiny&quot;,&quot;startTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;eventSubscriptionCount&quot;:0,&quot;taskCount&quot;:0,&quot;jobCount&quot;:0,&quot;timerJobCount&quot;:0,&quot;suspendedJobCount&quot;:0,&quot;deadLetterJobCount&quot;:0,&quot;variableCount&quot;:0,&quot;identityLinkCount&quot;:0,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;processDefinitionKey&quot;:&quot;reviewSaledLead&quot;,&quot;processDefinitionName&quot;:&quot;Review sales lead&quot;,&quot;processDefinitionVersion&quot;:1,&quot;deploymentId&quot;:null,&quot;activityId&quot;:null,&quot;activityName&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;businessKey&quot;:null,&quot;parentId&quot;:null,&quot;superExecutionId&quot;:null,&quot;rootProcessInstanceId&quot;:&quot;5&quot;,&quot;rootProcessInstance&quot;:null,&quot;forcedUpdate&quot;:false,&quot;queryVariables&quot;:null,&quot;isDeleted&quot;:false,&quot;variableInstances&quot;:{details=VariableInstanceEntity[id=8, name=details, type=string, textValue=interesting], customerName=VariableInstanceEntity[id=9, name=customerName, type=string, textValue=Camery], initiator=VariableInstanceEntity[id=6, name=initiator, type=string, textValue=destiny]},&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;5&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:true,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,075 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - task: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:1,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:&quot;destiny&quot;,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Provide new sales lead&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:null,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;10&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;taskDefinitionKey&quot;:&quot;provideNewSalesLead&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;13&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,081 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :03:53:23,082 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : provideNewSalesLead (UserTask, parent id 5 (active)03:53:23,083 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,083 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : provideNewSalesLead (UserTask, parent id 5 (active)03:53:23,084 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,084 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : provideNewSalesLead -&gt; reviewSalesLeadSubProcess, parent id 5 (active)03:53:23,084 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,084 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active)03:53:23,086 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,087 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    └── 17 : subProcessStart (StartEvent, parent id 14 (active)03:53:23,087 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,087 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    └── 17 : subProcessStart (StartEvent, parent id 14 (active)03:53:23,087 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,088 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    └── 17 : subProcessStart -&gt; fork, parent id 14 (active)03:53:23,088 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,088 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    └── 17 : fork (ParallelGateway, parent id 14 (active)03:53:23,088 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,089 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    └── 17 : fork (ParallelGateway, parent id 14 (not active)03:53:23,089 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,089 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : fork -&gt; reviewProfitability, parent id 14 (active)    └── 20 : fork -&gt; reviewCustomerRating, parent id 14 (active)03:53:23,089 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,090 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : reviewProfitability (UserTask, parent id 14 (active)    └── 20 : fork -&gt; reviewCustomerRating, parent id 14 (active)03:53:23,090 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,090 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : reviewProfitability (UserTask, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,092 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,092 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : reviewProfitability (UserTask, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,114 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - ratingTask: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:0,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:null,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Review customer rating&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:null,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;20&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;taskDefinitionKey&quot;:&quot;reviewCustomerRating&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;25&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,116 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - profitabilityTask: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:0,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:null,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Review profitability&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:&quot;destiny has published a new sales lead: Camery. Details: interesting&quot;,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;17&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;taskDefinitionKey&quot;:&quot;reviewProfitability&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;22&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,122 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :03:53:23,125 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : reviewProfitability (UserTask, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,126 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,126 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : reviewProfitability (UserTask, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,126 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,127 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : reviewProfitability -&gt; enoughInformationCheck, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,127 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,127 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : enoughInformationCheck (ExclusiveGateway, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,131 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,131 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : enoughInformationCheck -&gt; notEnoughInformationEnd, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,132 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,132 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : enoughInformationCheck -&gt; notEnoughInformationEnd, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,132 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,132 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : notEnoughInformationEnd (EndEvent, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,133 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :03:53:23,134 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : notEnoughInformationEnd (EndEvent, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,139 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,139 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 17 : notEnoughInformationEnd (EndEvent, parent id 14 (not active) (ended)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (not active) (ended)└── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 5 (active)03:53:23,139 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,139 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 17 : notEnoughInformationEnd (EndEvent, parent id 14 (not active) (ended)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (not active) (ended)└── 16 : catchNotEnoughInformationError -&gt; provideAdditionalDetails, parent id 5 (active)03:53:23,139 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,140 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 17 : notEnoughInformationEnd (EndEvent, parent id 14 (not active) (ended)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (not active) (ended)└── 16 : provideAdditionalDetails (UserTask, parent id 5 (active)03:53:23,150 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - provideDetailsTask: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:1,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:&quot;destiny&quot;,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Provide additional details&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:&quot;Provide additional details for Camery.&quot;,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;16&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;taskDefinitionKey&quot;:&quot;provideAdditionalDetails&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;32&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,152 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :03:53:23,153 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : provideAdditionalDetails (UserTask, parent id 5 (active)03:53:23,154 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,154 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : provideAdditionalDetails (UserTask, parent id 5 (active)03:53:23,155 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,155 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : provideAdditionalDetails -&gt; reviewSalesLeadSubProcess, parent id 5 (active)03:53:23,155 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,155 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active)03:53:23,156 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,157 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : subProcessStart (StartEvent, parent id 33 (active)03:53:23,157 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,157 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : subProcessStart (StartEvent, parent id 33 (active)03:53:23,157 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,158 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : subProcessStart -&gt; fork, parent id 33 (active)03:53:23,158 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,158 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : fork (ParallelGateway, parent id 33 (active)03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : fork (ParallelGateway, parent id 33 (not active)03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    ├── 36 : fork -&gt; reviewProfitability, parent id 33 (active)    └── 39 : fork -&gt; reviewCustomerRating, parent id 33 (active)03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    ├── 36 : reviewProfitability (UserTask, parent id 33 (active)    └── 39 : fork -&gt; reviewCustomerRating, parent id 33 (active)03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,160 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    ├── 36 : reviewProfitability (UserTask, parent id 33 (active)    └── 39 : reviewCustomerRating (UserTask, parent id 33 (active)03:53:23,161 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,162 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    ├── 36 : reviewProfitability (UserTask, parent id 33 (active)    └── 39 : reviewCustomerRating (UserTask, parent id 33 (active)03:53:23,180 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - reviewTask: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:0,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:null,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Review customer rating&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:null,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;39&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;taskDefinitionKey&quot;:&quot;reviewCustomerRating&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;44&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,180 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - reviewTask: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:0,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:null,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Review profitability&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:&quot;destiny has published a new sales lead: Camery. Details: interesting&quot;,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;36&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;taskDefinitionKey&quot;:&quot;reviewProfitability&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;41&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,183 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :03:53:23,190 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 39 : reviewCustomerRating (UserTask, parent id 33 (active)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,190 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,190 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 39 : reviewCustomerRating (UserTask, parent id 33 (active)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,191 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,191 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 39 : reviewCustomerRating -&gt; subProcessEnd1, parent id 33 (active)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,191 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,191 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 39 : subProcessEnd1 (EndEvent, parent id 33 (active)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,191 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,192 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 39 : subProcessEnd1 (EndEvent, parent id 33 (active)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,192 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.EndExecutionOperation :03:53:23,193 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 39 : subProcessEnd1 (EndEvent, parent id 33 (active)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,203 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :03:53:23,204 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,205 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,205 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,206 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,206 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability -&gt; enoughInformationCheck, parent id 33 (active)03:53:23,206 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,206 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : enoughInformationCheck (ExclusiveGateway, parent id 33 (active)03:53:23,206 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,206 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : enoughInformationCheck -&gt; subProcessEnd2, parent id 33 (active)03:53:23,207 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,207 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : enoughInformationCheck -&gt; subProcessEnd2, parent id 33 (active)03:53:23,207 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,207 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (active)03:53:23,207 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,207 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (active)03:53:23,208 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.EndExecutionOperation :03:53:23,208 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (active)03:53:23,211 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,211 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active)03:53:23,211 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,211 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : reviewSalesLeadSubProcess -&gt; storeLeadInCrmSystem, parent id 5 (active)03:53:23,211 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : storeLeadInCrmSystem (ManualTask, parent id 5 (active)03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : storeLeadInCrmSystem (ManualTask, parent id 5 (active)03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : storeLeadInCrmSystem -&gt; processEnd, parent id 5 (active)03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : processEnd (EndEvent, parent id 5 (active)03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,213 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : processEnd (EndEvent, parent id 5 (active)03:53:23,213 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.EndExecutionOperation :03:53:23,213 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : processEnd (EndEvent, parent id 5 (active)03:53:23,281 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - database was clean</code></pre><h3 id="1-1-3-信号事件"><a href="#1-1-3-信号事件" class="headerlink" title="1.1.3. 信号事件"></a>1.1.3. 信号事件</h3><h4 id="1-1-3-1-信号开始事件"><a href="#1-1-3-1-信号开始事件" class="headerlink" title="1.1.3.1. 信号开始事件"></a>1.1.3.1. 信号开始事件</h4><blockquote><p>信号开始事件的启动方式与普通开始事件启动方式很接近, 需要发出对应的信号去启动它</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49683712-2bea0c80-fb04-11e8-9a9d-f580144f604d.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">signal</span> <span class="attr">id</span>=<span class="string">"theSignal"</span> <span class="attr">name</span>=<span class="string">"The signal"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"processWithSignalStart1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"theStart"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">signalEventDefinition</span> <span class="attr">id</span>=<span class="string">"theSignalEventDefinition"</span> <span class="attr">signalRef</span>=<span class="string">"theSignal"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-1-3-2-信号中间事件"><a href="#1-1-3-2-信号中间事件" class="headerlink" title="1.1.3.2 信号中间事件"></a>1.1.3.2 信号中间事件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">signal</span> <span class="attr">id</span>=<span class="string">"alterSignal"</span> <span class="attr">name</span>=<span class="string">"alter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"catchSignal"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 信号抛出事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intermediateThrowEvent</span> <span class="attr">id</span>=<span class="string">"throwSignalEvent"</span> <span class="attr">name</span>=<span class="string">"Alter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">signalEventDefinition</span> <span class="attr">signalRef</span>=<span class="string">"alterSignal"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intermediateThrowEvent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 信号捕获事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intermediateCatchEvent</span> <span class="attr">id</span>=<span class="string">"throwSignalEvent"</span> <span class="attr">name</span>=<span class="string">"On Alter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">signalEventDefinition</span> <span class="attr">signalRef</span>=<span class="string">"alterSignal"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intermediateCatchEvent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-4-消息事件"><a href="#1-1-4-消息事件" class="headerlink" title="1.1.4 消息事件"></a>1.1.4 消息事件</h3><blockquote><p>消息事件的定义和信号事件的定义非常相近</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">id</span>=<span class="string">"newInvoice"</span> <span class="attr">name</span>=<span class="string">"newInvoiceMessage"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">id</span>=<span class="string">"payment"</span> <span class="attr">name</span>=<span class="string">"paymentMessage"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"catchSignal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"messageStart"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">messsageEventDefinition</span> <span class="attr">messageRef</span>=<span class="string">"newInvoice"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 信号捕获事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intermediateCatchEvent</span> <span class="attr">id</span>=<span class="string">"paymentEvt"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">messageEventDefinition</span> <span class="attr">messageRef</span>=<span class="string">"payment"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intermediateCatchEvent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-顺序流和和网关"><a href="#3-顺序流和和网关" class="headerlink" title="3. 顺序流和和网关"></a>3. 顺序流和和网关</h1><p>顺序流的分类: </p><ul><li>顺序流</li><li>条件顺序流</li><li>默认顺序流</li></ul><h2 id="3-1-网关"><a href="#3-1-网关" class="headerlink" title="3.1. 网关"></a>3.1. 网关</h2><p>网关的分类:</p><ul><li>排他网关(Exclusive Gateway)</li><li>并行网关(Parallel Gateway)</li><li>包容网关(Inclusive Gateway), 类似排他网关和并行网关的组合体, 即支持多条路, 有支持表达式</li><li>事件网关(Event-based Gateway), 每个分支都有一个捕获事件等待被触发, 一个触发后, 其他都会失效</li></ul><h3 id="3-1-1-排他网关"><a href="#3-1-1-排他网关" class="headerlink" title="3.1.1. 排他网关"></a>3.1.1. 排他网关</h3><blockquote><p>分支判断<br>只能选一<br>支持默认</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49684049-f562c080-fb08-11e8-9c3f-ef357ceb32b7.png" alt="image"></p><h4 id="流程定义-2"><a href="#流程定义-2" class="headerlink" title="流程定义"></a>流程定义</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">"exclusiveGateway1"</span> <span class="attr">name</span>=<span class="string">"Exclusive Gateway"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask1"</span> <span class="attr">name</span>=<span class="string">"精英"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask2"</span> <span class="attr">name</span>=<span class="string">"优秀"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask3"</span> <span class="attr">name</span>=<span class="string">"普通"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"exclusiveGateway1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">"tFormalExpression"</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[score &gt;= 90]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow3"</span> <span class="attr">sourceRef</span>=<span class="string">"exclusiveGateway1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">"tFormalExpression"</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[score &gt;= 75 &amp;&amp; score &lt; 90]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认数据流 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow4"</span> <span class="attr">sourceRef</span>=<span class="string">"exclusiveGateway1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-exclusive.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExclusiveGateway</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; variables = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">"key1"</span>, <span class="number">3</span>);</span><br><span class="line">    variables.put(<span class="string">"score"</span>, <span class="number">91</span>);</span><br><span class="line">    ProcessInstance processInstance = activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    Task task = activitiRule.getTaskService().createTaskQuery().singleResult();</span><br><span class="line">    <span class="comment">// org.destiny.activiti.bpmn20.GatewayTest  - task.name = 精英</span></span><br><span class="line">    log.info(<span class="string">"task.name = &#123;&#125;"</span>, task.getName());     </span><br><span class="line">    assertEquals(task.getName(), <span class="string">"精英"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-并行网关"><a href="#3-1-2-并行网关" class="headerlink" title="3.1.2. 并行网关"></a>3.1.2. 并行网关</h3><blockquote><p>让流程从单线程变为并发情况, 原有的一条流转数据变为两条, 可以同时进行确认支付和确认收货, 当这两个条件同时满足时, 继续进行后面的操作</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49684527-edf2e580-fb0f-11e8-9c43-d8e34140d663.png" alt="image"></p><ul><li>流程并发</li><li>分支</li><li>合并</li><li>忽略条件(即使填了条件也不会生效)</li><li>非对称(不要求所有的分支最终都合并在一起)</li></ul><h4 id="流程定义-3"><a href="#流程定义-3" class="headerlink" title="流程定义"></a>流程定义</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">"parallelGateway1"</span> <span class="attr">name</span>=<span class="string">"Parallel Gateway"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask1"</span> <span class="attr">name</span>=<span class="string">"确认支付"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask2"</span> <span class="attr">name</span>=<span class="string">"确认收货"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow3"</span> <span class="attr">sourceRef</span>=<span class="string">"parallelGateway1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow4"</span> <span class="attr">sourceRef</span>=<span class="string">"parallelGateway1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">"parallelGateway2"</span> <span class="attr">name</span>=<span class="string">"parallelGateway"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow8"</span> <span class="attr">sourceRef</span>=<span class="string">"userTask1"</span> <span class="attr">targetRef</span>=<span class="string">"parallelGateway2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow9"</span> <span class="attr">sourceRef</span>=<span class="string">"userTask2"</span> <span class="attr">targetRef</span>=<span class="string">"parallelGateway2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask3"</span> <span class="attr">name</span>=<span class="string">"订单完成"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow10"</span> <span class="attr">sourceRef</span>=<span class="string">"parallelGateway2"</span> <span class="attr">targetRef</span>=<span class="string">"userTask3"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-parallel.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParallelGateway</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">    List&lt;Task&gt; taskList = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"过并行网关时的 task 数量: &#123;&#125;"</span>, taskList.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        log.info(<span class="string">"task name: &#123;&#125;"</span>, task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    assertEquals(<span class="number">2</span>, taskList.size());</span><br><span class="line">    activitiRule.getTaskService().complete(taskList.get(<span class="number">0</span>).getId());</span><br><span class="line">    List&lt;Task&gt; taskList1 = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"提交第 1 个任务时的 task 数量: [&#123;&#125;]"</span>, taskList1.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList1) &#123;</span><br><span class="line">        log.info(<span class="string">"task name: &#123;&#125;"</span>, task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    assertEquals(<span class="number">1</span>, taskList1.size());</span><br><span class="line">    activitiRule.getTaskService().complete(taskList.get(<span class="number">1</span>).getId());</span><br><span class="line">    List&lt;Task&gt; taskList2 = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"提交第 2 个任务时的 task 数量: [&#123;&#125;]"</span>, taskList2.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList2) &#123;</span><br><span class="line">        log.info(<span class="string">"task name: &#123;&#125;"</span>, task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    assertEquals(<span class="number">1</span>, taskList1.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志输出-2"><a href="#日志输出-2" class="headerlink" title="日志输出"></a>日志输出</h4><pre><code>06:17:51,705 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - 过并行网关时的 task 数量: 206:17:51,705 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - task name: 确认支付06:17:51,706 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - task name: 确认收货06:17:51,710 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :06:17:51,721 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - 提交第 1 个任务时的 task 数量: [1]06:17:51,721 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - task name: 确认收货06:17:51,724 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :06:17:51,738 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - 提交第 2 个任务时的 task 数量: [1]06:17:51,738 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - task name: 订单完成</code></pre><h3 id="3-1-3-包容性网关"><a href="#3-1-3-包容性网关" class="headerlink" title="3.1.3. 包容性网关"></a>3.1.3. 包容性网关</h3><blockquote><p>可以理解为排他网关和并行网关的结合体</p></blockquote><ul><li>排他网关有条件, 只能选择一条路径</li><li>并行网关不带条件, 所有路径都会执行</li><li>包容性网关有条件, 且支持并行运行</li></ul><ol><li>并发</li><li>分支</li><li>合并</li><li>条件</li><li>非对称</li></ol><h4 id="事件网关"><a href="#事件网关" class="headerlink" title="事件网关"></a>事件网关</h4><blockquote><p>会根据连接的捕获时间决定流程的走向, 只能走一条线路</p></blockquote><ol><li>流程暂停</li><li>事件订阅</li><li>捕获事件</li><li>单一执行</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;BPMN2.0:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是一套业务流程模型与符号建模标准&lt;/li&gt;
&lt;li&gt;精准的执行语义来描述元素的操作&lt;/li&gt;
&lt;li&gt;以 XML 为载体, 以符号可视化业务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BPMN2.0元素:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流对象&lt;/l
      
    
    </summary>
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/categories/Activiti/"/>
    
      <category term="工作流" scheme="https://destinywang.github.io/blog/categories/Activiti/%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
      <category term="Java" scheme="https://destinywang.github.io/blog/categories/Activiti/%E5%B7%A5%E4%BD%9C%E6%B5%81/Java/"/>
    
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti6.0用户指引中文版</title>
    <link href="https://destinywang.github.io/blog/2018/12/05/Activiti6-0%E7%94%A8%E6%88%B7%E6%8C%87%E5%BC%95%E4%B8%AD%E6%96%87%E7%89%88/"/>
    <id>https://destinywang.github.io/blog/2018/12/05/Activiti6-0用户指引中文版/</id>
    <published>2018-12-05T14:20:30.000Z</published>
    <updated>2018-12-07T15:38:59.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-引导"><a href="#1-引导" class="headerlink" title="1. 引导"></a>1. 引导</h1><h2 id="1-1-License-许可"><a href="#1-1-License-许可" class="headerlink" title="1.1. License 许可"></a>1.1. License 许可</h2><p>Activiti 是在 <a href="http://www.apache.org/licenses/LICENSE-2.0.html" target="_blank" rel="noopener">Apache V2 license</a> 许可下发布的.</p><h2 id="1-2-下载"><a href="#1-2-下载" class="headerlink" title="1.2. 下载"></a>1.2. 下载</h2><p><a href="http://activiti.org/download.html" target="_blank" rel="noopener">http://activiti.org/download.html</a></p><h2 id="1-3-源代码"><a href="#1-3-源代码" class="headerlink" title="1.3. 源代码"></a>1.3. 源代码</h2><p>该发行版以 jar 文件的形式包含了大多数源代码, Activiti 的源代码可以在 <a href="https://github.com/Activiti/Activiti" target="_blank" rel="noopener">https://github.com/Activiti/Activiti</a> 找到.</p><h2 id="1-4-Required-software-必需的软件"><a href="#1-4-Required-software-必需的软件" class="headerlink" title="1.4. Required software 必需的软件"></a>1.4. Required software 必需的软件</h2><h3 id="1-4-1-JDK-7"><a href="#1-4-1-JDK-7" class="headerlink" title="1.4.1. JDK 7+"></a>1.4.1. JDK 7+</h3><p>Activiti 需要 JDK 版本高于或等于 7, 前往 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Oracle Java SE downloads</a> 进行下载. 在该页面上有相关的下载说明, 可以通过在命令行运行 <code>java -version</code> 命令来验证安装是否成功. 该命令会打印出安装的 JDK 版本.</p><h3 id="1-4-2-IDE"><a href="#1-4-2-IDE" class="headerlink" title="1.4.2. IDE"></a>1.4.2. IDE</h3><h1 id="2-Getting-Started-启动"><a href="#2-Getting-Started-启动" class="headerlink" title="2. Getting Started 启动"></a>2. Getting Started 启动</h1><h2 id="2-1-One-minute-version-一分钟版"><a href="#2-1-One-minute-version-一分钟版" class="headerlink" title="2.1. One minute version 一分钟版"></a>2.1. One minute version 一分钟版</h2><p>在从 <a href="http://www.activiti.org/" target="_blank" rel="noopener">Activiti website</a> 下载了 Activiti UI 的 WAR 包之后, 按照这些步骤去以默认配置运行样例. 你需要安装 <a href="http://java.sun.com/javase/downloads/index.jsp" target="_blank" rel="noopener">Java runtime</a> 和 <a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">Apache Tomcat</a>(实际上, 任意一个 web 容器都可以正常运行, 因为我们只依赖与 Servlet 的能力, 但我们主要在 Tomcat 上进行测试)</p><ul><li>将下载的 activiti-app.war 文件复制到 Tomcat 的 webapps 路径下</li><li>通过 bin 路径下的 startup.sh 或 startop.bat 启动 Tomcat</li><li>当 Tomcat 启动后, 打开浏览器并前往 <a href="http://localhost:8080/activiti-app" target="_blank" rel="noopener">http://localhost:8080/activiti-app</a>, 使用账号 admin, 密码 test 登录</li></ul><p>这样就可以了, ActivitiUI 应用默认使用基于内存的 H2 数据库</p><h2 id="2-2-Activiti-setup-Activiti-的安装"><a href="#2-2-Activiti-setup-Activiti-的安装" class="headerlink" title="2.2 Activiti setup Activiti 的安装"></a>2.2 Activiti setup Activiti 的安装</h2><p>要安装 Activiti, 需要安装 <a href="http://java.sun.com/javase/downloads/index.jsp" target="_blank" rel="noopener">Java runtime</a> 和 <a href="http://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">Apache Tomcat</a>, 并且确认系统变量 <code>JAVA_HOME</code> 已经正确的设置, 具体设置的方式取决于你的操作系统.</p><p>只需要将 war 文件从 Activiti 下载页面下载到 Tomcat 安装路径下的 <code>webapps</code> 路径就可以让 Activiti UI 和 REST 应用启动. 默认情况下 UI 应用使用内存数据库运行.</p><p>示例用户:</p><table><thead><tr><th>userId</th><th>Password</th><th>Security roles</th></tr></thead><tbody><tr><td>admin</td><td>test</td><td>admin</td></tr></tbody></table><p>现在可以访问的应用:</p><table><thead><tr><th>Webapp Name</th><th>URL</th><th>Description</th></tr></thead><tbody><tr><td>Activiti UI</td><td><a href="http://localhost:8080/activiti-app" target="_blank" rel="noopener">http://localhost:8080/activiti-app</a></td><td>流程引擎用户控制台, 通过该工具可以开启新的流程, 分配任务, 查看和认领任务等</td></tr></tbody></table><p>需要注意的是, Activiti UI 项目实例的启动只是一个简单快速演示功能的方式, 并不是说只能使用这种方式使用 Activiti. Activiti 只是一个 jar 文件, 可以嵌入到任何 Java 环境中, 比如 swing, Tomcat, JBoss, WebSphere 等. 或者也可以选择将Activiti作为一个典型的独立BPM服务器来运行, 只要能在 Java 中完成的, 就能使用 Activiti.</p><h2 id="2-3-Activiti-database-setup-数据库安装"><a href="#2-3-Activiti-database-setup-数据库安装" class="headerlink" title="2.3. Activiti database setup 数据库安装"></a>2.3. Activiti database setup 数据库安装</h2><p>如同在一分钟版示例说的, Activiti UI 应用默认使用内存数据库 H2. 要让 Activiti UI  应用使用独立的 H2 或者其他的数据库, 可以修改 <code>WEB-INF/classes/META-INF/activiti-app</code> 路径下的 <code>activiti-app.properties</code> 文件</p><h2 id="2-4-Include-the-Activiti-jar-and-its-denpendices-包含-jar-及其依赖"><a href="#2-4-Include-the-Activiti-jar-and-its-denpendices-包含-jar-及其依赖" class="headerlink" title="2.4 Include the Activiti jar and its denpendices 包含 jar 及其依赖"></a>2.4 Include the Activiti jar and its denpendices 包含 jar 及其依赖</h2><p>为了包含 Activiti jar 和它的依赖库, 我们决定使用 maven, 因为它简化了我们双方的依赖管理. 根据引导 <a href="http://www.activiti.org/community.html#maven.repository" target="_blank" rel="noopener">http://www.activiti.org/community.html#maven.repository</a> 来引入必要的依赖.</p><p>作为选择, 如果你不想使用 maven, 可以直接在项目中引入 jar 文件. Activiti 下载的压缩包包含一个文件夹 <code>libs</code>, 其中包含了所有 Activiti jar 文件(以及源代码 jar). 依赖不是通过这种方式提供的, Activiti 必须的依赖如下所示(使用 <code>mvn dependency:tree</code> 生成):</p><pre><code>org.activiti:activiti-engine:jar:6.x+- org.activiti:activiti-bpmn-converter:jar:6.x:compile|  \- org.activiti:activiti-bpmn-model:jar:6.x:compile|     +- com.fasterxml.jackson.core:jackson-core:jar:2.2.3:compile|     \- com.fasterxml.jackson.core:jackson-databind:jar:2.2.3:compile|        \- com.fasterxml.jackson.core:jackson-annotations:jar:2.2.3:compile+- org.activiti:activiti-process-validation:jar:6.x:compile+- org.activiti:activiti-image-generator:jar:6.x:compile+- org.apache.commons:commons-email:jar:1.2:compile|  +- javax.mail:mail:jar:1.4.1:compile|  \- javax.activation:activation:jar:1.1:compile+- org.apache.commons:commons-lang3:jar:3.3.2:compile+- org.mybatis:mybatis:jar:3.3.0:compile+- org.springframework:spring-beans:jar:4.1.6.RELEASE:compile|  \- org.springframework:spring-core:jar:4.1.6.RELEASE:compile+- joda-time:joda-time:jar:2.6:compile+- org.slf4j:slf4j-api:jar:1.7.6:compile+- org.slf4j:jcl-over-slf4j:jar:1.7.6:compile</code></pre><p>注意, 如果需要使用 <a href="https://www.activiti.org/userguide/#bpmnEmailTask" target="_blank" rel="noopener">mail service task</a> 才需要引入 mail 依赖 jar.</p><p>所有的依赖可以很轻松的通过使用 <code>mvn denpendency:cpoy-dependencies</code> 在 <a href="https://github.com/Activiti/Activiti" target="_blank" rel="noopener">activiti源代码</a> 上下载.</p><h2 id="2-5-Next-steps-下一步"><a href="#2-5-Next-steps-下一步" class="headerlink" title="2.5. Next steps 下一步"></a>2.5. Next steps 下一步</h2><h1 id="3-Configuration-配置"><a href="#3-Configuration-配置" class="headerlink" title="3. Configuration 配置"></a>3. Configuration 配置</h1><h2 id="3-1-Creating-a-ProcessEngine-创建一个流程引擎"><a href="#3-1-Creating-a-ProcessEngine-创建一个流程引擎" class="headerlink" title="3.1. Creating a ProcessEngine 创建一个流程引擎"></a>3.1. Creating a ProcessEngine 创建一个流程引擎</h2><p>Activiti 流程引擎通过 XML 文件 <code>activiti.cfg.xml</code> 配置, 需要注意的是不适用于 <a href="https://www.activiti.org/userguide/#springintegration" target="_blank" rel="noopener">Spring 风格下的流程引擎创建</a>.</p><p>获取 <code>流程引擎</code> 最简单的方式是使用 <code>org.activiti.engine.ProcessEngines</code> 类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngine processEngine = ProcessEngines.getDefauleProcesEngine();</span><br></pre></td></tr></table></figure><p>这样的方式会在 classpath 上寻找 <code>activiti.cfg.xml</code> 文件, 并且基于文件中的配置去构造引擎. 下面的片段展示了一个配置文件的样例, 后面的章节会给出配置参数的详细介绍.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"sa"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"asyncExecutorActivate"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mailServerHost"</span> <span class="attr">value</span>=<span class="string">"mail.my-corp.com"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mailServerPort"</span> <span class="attr">value</span>=<span class="string">"5025"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>值得注意的是, 这个 XML 配置文件实际上是一个 Spring 配置文件. 这并不意味着 Activiti 只能运行在 Spring 环境中. 我们仅仅是在内部利用 Spring 解析和依赖注入的能力来构建引擎.</p><p><code>ProcessEngineConfiguration</code> 对象也可以被配置文件编程式的创建, 也可以用一个不同 bean id.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于默认配置文件 activiti.cfg.xml</span></span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault();</span><br><span class="line"><span class="comment">// 指定路径</span></span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource);</span><br><span class="line"><span class="comment">// 指定路径和提取的 bean id</span></span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);</span><br><span class="line"><span class="comment">// 指定输入流</span></span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream);</span><br><span class="line"><span class="comment">// 指定输入流和 bean id</span></span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName);</span><br></pre></td></tr></table></figure><p>与此同时, 也可以不使用配置文件, 直接通过默认创建配置(参考<a href="https://www.activiti.org/userguide/#configurationClasses" target="_blank" rel="noopener">不同的支持类</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngineConfiguraion.createStandaloneProcessEngineConfiguration();</span><br><span class="line">ProcessEngineConfiguraion.createStandaloneInMemProcessEngineConfiguration();</span><br></pre></td></tr></table></figure><p>所有这些 <code>ProcessEngineConfiguraion.createXXX()</code> 方法返回一个后续可调整的 <code>ProcessEngineConfiguraion</code> 方便链式调用, 在调用 <code>buildProcessEngine()</code> 操作后, 就会创建一个 <code>ProcessEngine</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngine processEngine = ProcessEngineConfiguraion.createStandaloneInMemProcessEngineConfiguration()</span><br><span class="line">    .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)</span><br><span class="line">    .setJdbcUrl(<span class="string">"jdbc:h2:mem:my-own-db;DB_CLOSE_DELAY=1000"</span>)</span><br><span class="line">    .setAsyncExcutorActivate(<span class="keyword">false</span>)</span><br><span class="line">    .buildProcessEngine();</span><br></pre></td></tr></table></figure><h2 id="3-2-ProcessEngineConfiguration-bean"><a href="#3-2-ProcessEngineConfiguration-bean" class="headerlink" title="3.2. ProcessEngineConfiguration bean"></a>3.2. ProcessEngineConfiguration bean</h2><p><code>activiti.cfg.xml</code> 必须包含一个 id 为 <code>processEngineConfiguraion</code> 的 bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个 bean 会用来构建 <code>ProceeEngine</code>, 有多个类可以用来定义 <code>processEngineConfiguration</code>, 这些类代表了不同的环境, 并且设置了对应的默认值. 最佳的实践是选择与你当前环境最符合的类, 这样可以少配置几个引擎的参数, 下面是当前可用的类:</p><ul><li><strong>org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration</strong>: 这个 ProcessEngine 单独运行, Activiti 会自己处理事务, 默认情况下, 数据库只会在引擎启动的时候检查(并且如果没有 Activiti 的表或者表的版本不正确时会抛出异常);</li><li><strong>org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration</strong>: 这是一个方便的单元测试类, Activiti 会自己控制事务, 默认使用一个基于内存的 H2 数据库, 数据库分别会在启动和关闭的时候创建以及销毁, 当使用它的时候, 或许不需要额外的配置(除了使用 job 执行器或者邮件功能以外);</li><li><strong>org.activiti.spring.SpringProcessEngineConfiguration</strong>: 在 Spring 环境下使用流程引擎, 参考 <a href>Spring 集成</a>;</li><li><strong>org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration</strong>: 单独运行的流程引擎, 并使用 JTA 事务.</li></ul><h2 id="3-3-Database-Configuration-数据库配置"><a href="#3-3-Database-Configuration-数据库配置" class="headerlink" title="3.3. Database Configuration 数据库配置"></a>3.3. Database Configuration 数据库配置</h2><p>有两种方式配置数据库给 Activiti 引擎使用, 第一种方式是定义 JDBC 的数据库配置文件</p><ul><li>jdbcUrl: 数据库连接</li><li>jdbcDriver: 驱动类</li><li>jdbcUsername: 数据库用户名</li><li>jdbcPassword: 数据库用户密码</li></ul><p>基于 JDBC 配置文件构造出的数据源将默认使用 MyBatis 连接池, 下面的配置可以用来构造连接池:</p><ul><li>jdbcMaxActiveConnections: 任意时间数据库连接池中的最大连接数, 默认为 10;</li><li>jdbcMaxIdleConnections: 连接池中处于空闲状态的连接的最大值;</li><li>jdbcMaxCheckoutTime: 连接被取出使用的最长时间, 超过时间会被强制回收. 默认为20000(20 秒);</li><li>jdbcMaxWaitTime: 这是一个底层配置, 当获得的时间较长时, 给连接池一个打印日志并重新尝试获得连接的机会, 默认为20000(20 秒).</li></ul><p>数据库连接池默认配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"sa"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>我们的基准表明, MyBatis 连接池在大量并发请求下并不是最有效率的, 因此, 建议使用 <code>javax.sql.DataSource</code> 的实现 并且注入到 <code>ProcessEngine</code> 配置中(比如 DBCP, C3P0, Hikari, Tomcat Connection Pool等):</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/activiti"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"activiti"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"activiti"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultAutoCommit"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>注意, Activiti 并没有包含这些数据源, 因此你必须确保这些类库在你的类路径下.</p><p>不管是采用 JDBC 还是 DataSource 的方式, 下面的配置可以被设置:</p><ul><li>databaseType: 通常是不需要去单独制定这项配置, 因为会被数据库连接的元数据自动分析出来, 只有当自动制定失败的时候才需要被设置. 可能的值有 {h2, mysql, oracle, postgres, mssql, db2}. 这项配置会决定哪些创建/删除脚本和查询语句会被使用. 参考 <a href="https://www.activiti.org/userguide/#supporteddatabases" target="_blank" rel="noopener">支持数据库章节</a> 了解支持哪些类型.</li><li>databaseSchemaUpdate: 允许设置的策略去决定数据库表在流程启动和结束的时候被如何处理:<ul><li>false(默认): 当 <code>ProcessEngine</code> 启动的时候, 检查数据库表的版本是否匹配依赖库的版本, 并在不匹配的时候抛出异常;</li><li>true: 在 <code>ProcessEngine</code> 构建时, 执行检查, 如果有需要就执行更新, 如果数据库表不存在, 就重新创建;</li><li>create-drop: 在 <code>ProcessEngine</code> 启动的时候创建数据库表, 并且在 <code>ProcessEngine</code> 关闭的时候删除数据库表.</li></ul></li></ul><h1 id="4-The-Activiti-API-Activiti-API"><a href="#4-The-Activiti-API-Activiti-API" class="headerlink" title="4. The Activiti API Activiti API"></a>4. The Activiti API Activiti API</h1><h2 id="4-1-The-Process-Engine-API-ans-Service-ProcessEngine-的-API-和服务"><a href="#4-1-The-Process-Engine-API-ans-Service-ProcessEngine-的-API-和服务" class="headerlink" title="4.1. The Process Engine API ans Service ProcessEngine 的 API 和服务"></a>4.1. The Process Engine API ans Service <code>ProcessEngine</code> 的 API 和服务</h2><p>引擎的相关 API 是与 Activiti 交互最多的方式, 最重要的开始点就是 <code>ProcessEngine</code>, 它可以被多种在 <a href>配置部分</a> 描述的方式创建, 你可以获得多种包含 工作流/BPM 方法的服务. <code>ProcessEngine</code> 和服务对象都是线程安全的, 因此可以在整个应用中维护一个实例.</p><p><img src="https://www.activiti.org/userguide/images/api.services.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"></span><br><span class="line">Engine.getRuntimeService();</span><br><span class="line">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line">TaskService taskService = processEngine.getTaskService();</span><br><span class="line">ManagementService managementService = processEngine.getManagementService();</span><br><span class="line">IdentityService identityService = processEngine.getIdentityService();</span><br><span class="line">HistoryService historyService = processEngine.getHistoryService();</span><br><span class="line">FormService formService = processEngine.getFormService();</span><br><span class="line">DynamicBpmnService dynamicBpmnService = processEngine.getDynamicBpmnService();</span><br></pre></td></tr></table></figure><ul><li><code>ProcessEngines.getDefaultProcessEngine()</code> 会在第一次调用时初始化并构建一个 <code>ProcessEngine</code>, 并且后面始终返回相同的实例. 对应的可以创建和关闭所有 <code>ProcessEngine</code>: <code>ProcessEngine.init()</code> 和 <code>ProcessEngine.destroy()</code></li><li><code>ProcessEngine</code> 类会扫描所有的 <code>activiti.cfg.xml</code> 和 <code>activiti-context.xml</code> 文件, 对于 <code>activtivi.cfg.xml</code> 文件, 流程引擎会使用专有的方式构建: <code>ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream).buildProcessEngine()</code></li><li><code></code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-引导&quot;&gt;&lt;a href=&quot;#1-引导&quot; class=&quot;headerlink&quot; title=&quot;1. 引导&quot;&gt;&lt;/a&gt;1. 引导&lt;/h1&gt;&lt;h2 id=&quot;1-1-License-许可&quot;&gt;&lt;a href=&quot;#1-1-License-许可&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/categories/Activiti/"/>
    
      <category term="工作流" scheme="https://destinywang.github.io/blog/categories/Activiti/%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
      <category term="翻译" scheme="https://destinywang.github.io/blog/categories/Activiti/%E5%B7%A5%E4%BD%9C%E6%B5%81/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti工作流引擎</title>
    <link href="https://destinywang.github.io/blog/2018/11/26/Activiti%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/"/>
    <id>https://destinywang.github.io/blog/2018/11/26/Activiti工作流引擎/</id>
    <published>2018-11-26T14:25:27.000Z</published>
    <updated>2018-12-03T16:01:10.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前段时间入职字节跳动, 目前负责 Lark 工作流审批功能的开发, 选用工作流引擎 <code>Activiti</code> 进行开发, 因此在此记录下对 <code>Activiti</code> 的学习过程.</p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><blockquote><p>工作流引擎是用来驱动业务, 按照流程图次逐步流转的核心框架, 在复杂多变的场景下采用工作流引擎可以大大降低业务部署成本. 通过标准的业务流程模型作为业务与开发工作的桥梁, 有效减少业务团队与技术交流的障碍.</p></blockquote><p>工作流引擎最早用于企业 OA, CRM, 流程审批等系统的流程审批.<br>现在的工作流引擎已经大量运用到互联网电商, 金融出行, 中台支撑等.</p><p>工作流引擎在互联网公司快速盛行, 掌握工作流引擎技术可以提升技术架构和业务建模能力. </p><p>目录:</p><ul><li>工作流入门</li><li>Activiti 6.0 源码浅析</li><li>Activiti 6.0 引擎配置</li><li>Activiti 6.0 核心 API</li><li>数据设计与模型映射</li><li>BPMN 2.0 规范</li><li>集成 SpringBoot 2.0</li><li>搭建工作流平台</li></ul><h1 id="1-工作流入门"><a href="#1-工作流入门" class="headerlink" title="1. 工作流入门"></a>1. 工作流入门</h1><h2 id="1-1-工作流介绍"><a href="#1-1-工作流介绍" class="headerlink" title="1.1 工作流介绍"></a>1.1 工作流介绍</h2><h3 id="1-1-1-出差流程"><a href="#1-1-1-出差流程" class="headerlink" title="1.1.1 出差流程"></a>1.1.1 出差流程</h3><p>审批业务场景:</p><p><img src=".Activiti工作流引擎_images/08008382.png" alt> </p><p>审批流程模型化:</p><p><img src=".Activiti工作流引擎_images/835a7f82.png" alt></p><p>从一个开始节点, 经过多个任务节点和分支节点, 最终流向结束节点.</p><h3 id="1-1-2-电商购物流程"><a href="#1-1-2-电商购物流程" class="headerlink" title="1.1.2 电商购物流程"></a>1.1.2 电商购物流程</h3><p><img src=".Activiti工作流引擎_images/0b951608.png" alt></p><p>抽象成泳道图:</p><p><img src=".Activiti工作流引擎_images/3a10b0ab.png" alt></p><table><thead><tr><th style="text-align:center">节点</th><th style="text-align:center">抽象名称</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">电商购物流程</td><td style="text-align:center">泳池(Pool)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">用户/电商平台/仓储物流</td><td style="text-align:center">泳道(Line)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">校验库存</td><td style="text-align:center">服务任务(Service Task)</td><td style="text-align:center">不需要人工参与, 需要系统自动化完成的操作节点</td></tr></tbody></table><h3 id="1-1-3-工作流是什么"><a href="#1-1-3-工作流是什么" class="headerlink" title="1.1.3 工作流是什么"></a>1.1.3 工作流是什么</h3><blockquote><h4 id="工作流"><a href="#工作流" class="headerlink" title="工作流:"></a>工作流:</h4><p>是对工作流程以及各个步骤之间的业务规则的抽象, 概括描述.</p></blockquote><blockquote><h4 id="工作流建模"><a href="#工作流建模" class="headerlink" title="工作流建模:"></a>工作流建模:</h4><p>将工作流程中的工作如何前后组织在一起的逻辑和规则, 在计算机中以恰当的模型表达并对其实施计算.</p></blockquote><blockquote><h4 id="要解决的问题"><a href="#要解决的问题" class="headerlink" title="要解决的问题:"></a>要解决的问题:</h4><p>为实现某个业务目标, 利用计算机在多个参与者之间按某种预定规则自动传递文档, 信息或任务.</p></blockquote><table><thead><tr><th>关键词</th><th>概念</th></tr></thead><tbody><tr><td>工作流管理系统</td><td>处理工作流的电脑软件系统, 主要功能是通过计算机技术的支持去定义, 执行和管理工作流, 协调工作流执行过程中工作之间以及群体之间的信息交互</td></tr><tr><td>计算机支持的协同工作</td><td>研究一个群体如何在计算机的帮助下实现协同工作的, 工作流属于计算机支持的协同工作的一部分</td></tr><tr><td>工作流管理联盟</td><td>工作流技术标准化的工业组织, 发布了用于工作流管理系统之间互操作的工作流参考模型, 并相继制定了一些列工业标准</td></tr></tbody></table><h3 id="1-1-4-为什么需要工作流"><a href="#1-1-4-为什么需要工作流" class="headerlink" title="1.1.4 为什么需要工作流"></a>1.1.4 为什么需要工作流</h3><h4 id="日常开发中经常遇到的问题"><a href="#日常开发中经常遇到的问题" class="headerlink" title="日常开发中经常遇到的问题:"></a>日常开发中经常遇到的问题:</h4><ol><li>产品需求遗漏, 开发上线之后需求经常改;</li><li>业务代码复杂, 开发时间紧迫;</li><li>代码后期维护不足, 逐渐难以维护.</li></ol><h4 id="使用工作流能够带来的改变"><a href="#使用工作流能够带来的改变" class="headerlink" title="使用工作流能够带来的改变:"></a>使用工作流能够带来的改变:</h4><ol><li>可以快速响应, 灵活调整线上产品流程;</li><li>业务和开发基于流程模型沟通, 基于业务建模快速部署;</li><li>流程可视化, 方便查看流程的运行进展.</li></ol><h4 id="使用工作流对团队的作用"><a href="#使用工作流对团队的作用" class="headerlink" title="使用工作流对团队的作用:"></a>使用工作流对团队的作用:</h4><ol><li>提高效率, 减少等待;</li><li>规范行为, 落实制度;</li><li>协同内外, 快速响应;</li><li>监控全面, 提升执行.</li></ol><h2 id="1-2-工作流技术选型"><a href="#1-2-工作流技术选型" class="headerlink" title="1.2 工作流技术选型"></a>1.2 工作流技术选型</h2><blockquote><p>二者都是成熟的工作流框架</p></blockquote><table><thead><tr><th>jBPM</th><th>Activiti</th></tr></thead><tbody><tr><td>Hibernate</td><td>ByBatis</td></tr><tr><td>Drools Flow</td><td>JBPM4</td></tr><tr><td>JPA</td><td>Spring</td></tr><tr><td>Message</td><td>RESTful</td></tr></tbody></table><h2 id="1-3-Activiti6-0-快速体验"><a href="#1-3-Activiti6-0-快速体验" class="headerlink" title="1.3 Activiti6.0 快速体验"></a>1.3 Activiti6.0 快速体验</h2><h3 id="1-3-1-准备物料"><a href="#1-3-1-准备物料" class="headerlink" title="1.3.1 准备物料"></a>1.3.1 准备物料</h3><ul><li>Activiti 软件包: <code>activiti-6.0.0.zip</code></li><li>JDK</li><li>Servlet 容器 (如 Tomcat)</li></ul><h4 id="安装-sdkman"><a href="#安装-sdkman" class="headerlink" title="安装 sdkman"></a>安装 sdkman</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">"https://get.sdkman.io"</span> | bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">"<span class="variable">$HOME</span>/.sdkman/bin/sdkman-init.sh"</span></span><br><span class="line"></span><br><span class="line">sdk version</span><br></pre></td></tr></table></figure><h4 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sdk install java 8u161-oracle</span><br><span class="line"></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure><h4 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirror.bit.edu.cn/apache/tomcat/tomcat/8/v8.0.50/bin/apache-tomcat-8.0.50.zip</span><br><span class="line"></span><br><span class="line">tar -zxvf apache-tomcat-8.0.50.zip</span><br><span class="line"></span><br><span class="line">./apache-tomcat-8.0.50/bin/startup.sh</span><br><span class="line"></span><br><span class="line">jdp-mlv</span><br></pre></td></tr></table></figure><h4 id="部署-Activiti"><a href="#部署-Activiti" class="headerlink" title="部署 Activiti"></a>部署 Activiti</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/Activiti/Activiti/releases/download/activiti-6.0.0/activiti-6.0.0.zip</span><br><span class="line"></span><br><span class="line">tar -zxvf activiti-6.0.0.zip</span><br><span class="line"></span><br><span class="line">cp activiti-6.0.0/wars/activiti-app.war apache-tomcat-8.0.50/webapps</span><br><span class="line">cp activiti-6.0.0/wars/activiti-admin.war apache-tomcat-8.0.50/webapps</span><br></pre></td></tr></table></figure><p>此时打开浏览器, 输入 <a href="http://localhost:8080/activiti-app" target="_blank" rel="noopener">http://localhost:8080/activiti-app</a> 即可进入流程引擎的登录界面</p><pre><code>账号: admin密码: test</code></pre><h3 id="1-3-2-设计一个审批流程"><a href="#1-3-2-设计一个审批流程" class="headerlink" title="1.3.2 设计一个审批流程"></a>1.3.2 设计一个审批流程</h3><p>设计如下流程:</p><p>开始 -&gt; TL 审批 -&gt; HR 审批 -&gt; 结束</p><h4 id="流程参与者"><a href="#流程参与者" class="headerlink" title="流程参与者"></a>流程参与者</h4><table><thead><tr><th>ID</th><th>Email</th><th>Name</th></tr></thead><tbody><tr><td>admin</td><td>admin</td><td>Administrator</td></tr><tr><td>userdev</td><td><a href="mailto:userdev@126.com" target="_blank" rel="noopener">userdev@126.com</a></td><td>userdevDEV</td></tr><tr><td>userhr</td><td><a href="mailto:userhr@126.com" target="_blank" rel="noopener">userhr@126.com</a></td><td>userhrHR</td></tr><tr><td>usertl</td><td><a href="mailto:usertl@126.com" target="_blank" rel="noopener">usertl@126.com</a></td><td>usertlTL</td></tr></tbody></table><h1 id="2-源码概述"><a href="#2-源码概述" class="headerlink" title="2. 源码概述"></a>2. 源码概述</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:DestinyWang/Activiti.git</span><br><span class="line"></span><br><span class="line">git checkout -b study6 activiti-6.0.0</span><br><span class="line"></span><br><span class="line">mvn clean <span class="built_in">test</span>-compile</span><br></pre></td></tr></table></figure><table><thead><tr><th>路径</th><th>功能</th></tr></thead><tbody><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/cfg</code></td><td>Activiti 的启动依赖 <code>activiti.cfg.xml</code>, 在该目录完成</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/compatibility</code></td><td>Activiti 从 5 升级到 6 的时候有部分不兼容, 在该目录完成适配</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/debug</code></td><td>调试相关目录</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/delegate</code></td><td>需要制定的节点 Task 都需要实现 <code>JavaDelegate</code></td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/event</code></td><td>定义了事件和监听机制</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/form</code></td><td>通用表单</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/history</code></td><td>历史数据归档</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/identity</code></td><td>身份认证相关操作</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/impl</code></td><td>各个接口层的实现</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/logging</code></td><td>LogMDC 将重要的变量(如流程 id 放在上下文, logback 可以打印出来)</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/management</code></td><td>管理相关</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/parse</code></td><td>流程文件是 xml, 需要解析和验证</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/query</code></td><td>抽象了一些查询接口, 基于 mybatis</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/repository</code></td><td>抽象流程部署到数据库的过程</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/runtime</code></td><td>与 history 相对应, 是流程在流转过程中的数据</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/task</code></td><td>每个流程在需要人工处理的时候都会对应一个 task</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/test</code></td><td>支持集成测试的帮助类</td></tr></tbody></table><p>核心模块:</p><ul><li><code>module/activiti-engine</code>: 核心引擎</li><li><code>module/activiti-spring</code>: Spring 集成模块</li><li><code>module/activiti-spring-boot</code>: SpringBoot 集成模块</li><li><code>module/activiti-rest</code>: 对外提供 rest api 模块</li><li><code>module/activiti-form-engine</code>: 表单引擎模块</li><li><code>module/activiti-ldap</code>: 集成 ldap 用户模块</li></ul><p>Activiti-engine 依赖的模块:</p><ul><li>bpmn-converter: 模型转换</li><li>process-validation: 流程校验</li><li>image-generator: 流程图绘制(BPMN 转 PNG)</li><li>dmn-api: 决策标准</li><li>form-api/form-model: form 表单相关</li></ul><h2 id="2-1-基于源码运行-activiti-app"><a href="#2-1-基于源码运行-activiti-app" class="headerlink" title="2.1 基于源码运行 activiti-app"></a>2.1 基于源码运行 activiti-app</h2><h3 id="2-1-1-启动-activiti-app"><a href="#2-1-1-启动-activiti-app" class="headerlink" title="2.1.1 启动 activiti-app"></a>2.1.1 启动 activiti-app</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> modules/activiti-ui/activiti-app</span><br><span class="line"></span><br><span class="line">mvn clean tomcat7:run</span><br><span class="line"></span><br><span class="line">open http://localhost:9999/activi-app</span><br></pre></td></tr></table></figure><h2 id="2-2-剖析-activiti-app"><a href="#2-2-剖析-activiti-app" class="headerlink" title="2.2 剖析 activiti-app"></a>2.2 剖析 activiti-app</h2><p>activiti-ui 的组成:</p><ul><li>activiti-app: 集成发布的 war 工程</li><li>activiti-app-conf: UI 独立域业务外的配置</li><li>activiti-app-logic: UI 的业务逻辑</li><li>activiti-app-rest: 提供接口的 rest api</li></ul><h1 id="3-HelloWorld"><a href="#3-HelloWorld" class="headerlink" title="3. HelloWorld"></a>3. HelloWorld</h1><p><img src="https://user-images.githubusercontent.com/17758731/49322695-b05cee00-f54c-11e8-8aeb-8f47882a7de9.png" alt="image"></p><ul><li>填写审批信息: 姓名, 时间, 是否提交</li><li>主管审批: 审批结果, 备注</li><li>审批结果, 备注</li></ul><h2 id="3-1-在-IDEA-中完成流程图的设计并配置"><a href="#3-1-在-IDEA-中完成流程图的设计并配置" class="headerlink" title="3.1 在 IDEA 中完成流程图的设计并配置"></a>3.1 在 IDEA 中完成流程图的设计并配置</h2><p><img src="https://user-images.githubusercontent.com/17758731/49323198-d7b6b980-f552-11e8-960e-271783710299.png" alt="image"></p><p>配置点:</p><ol><li>节点 id, 名称;</li><li>对每个网关的分支做判断(基于填写信息);</li><li>Task 节点接收的表单信息.</li></ol><h3 id="3-1-2-Task-节点接收的表单信息"><a href="#3-1-2-Task-节点接收的表单信息" class="headerlink" title="3.1.2 Task 节点接收的表单信息"></a>3.1.2 Task 节点接收的表单信息</h3><h4 id="填写申请信息"><a href="#填写申请信息" class="headerlink" title="填写申请信息"></a>填写申请信息</h4><table><thead><tr><th>Id</th><th>Name</th><th>Type</th><th>Expression</th><th>Variable</th><th>Default</th><th>Date Pattern</th><th>Readable</th><th>Writable</th><th>Required</th><th>Values</th></tr></thead><tbody><tr><td>message</td><td>申请信息</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>True</td><td></td></tr><tr><td>name</td><td>申请人姓名</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>True</td><td></td></tr><tr><td>submitTime</td><td>提交时间</td><td>date</td><td></td><td></td><td></td><td>yyyy-MM-dd</td><td></td><td></td><td>True</td><td></td></tr><tr><td>submitType</td><td>确认申请</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>True</td></tr></tbody></table><h4 id="主管审批"><a href="#主管审批" class="headerlink" title="主管审批"></a>主管审批</h4><table><thead><tr><th>Id</th><th>Name</th><th>Type</th><th>Expression</th><th>Variable</th><th>Default</th><th>Date Pattern</th><th>Readable</th><th>Writable</th><th>Required</th><th>Values</th></tr></thead><tbody><tr><td>tlApprove</td><td>主管审批结果</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>false</td><td></td></tr><tr><td>tlMessage</td><td>主管审批备注</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>true</td></tr></tbody></table><h4 id="人事审批"><a href="#人事审批" class="headerlink" title="人事审批"></a>人事审批</h4><table><thead><tr><th>Id</th><th>Name</th><th>Type</th><th>Expression</th><th>Variable</th><th>Default</th><th>Date Pattern</th><th>Readable</th><th>Writable</th><th>Required</th><th>Values</th></tr></thead><tbody><tr><td>hrApprove</td><td>人事审批结果</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>true</td><td></td></tr><tr><td>hrMessage</td><td>人事审批备注</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>true</td></tr></tbody></table><h3 id="3-1-3-排他网关配置"><a href="#3-1-3-排他网关配置" class="headerlink" title="3.1.3 排他网关配置"></a>3.1.3 排他网关配置</h3><blockquote><p>排他网关需要对流入网关的某个值做判断, 从而决定流程后续的流向</p></blockquote><h4 id="flow3-配置"><a href="#flow3-配置" class="headerlink" title="flow3 配置"></a>flow3 配置</h4><pre><code>${submitType==&quot;Y&quot; || submitType==&quot;y&quot;}</code></pre><h4 id="flow4-配置"><a href="#flow4-配置" class="headerlink" title="flow4 配置"></a>flow4 配置</h4><pre><code>${submitType==&quot;N&quot; || submitType==&quot;n&quot;}</code></pre><h4 id="flow6-配置"><a href="#flow6-配置" class="headerlink" title="flow6 配置"></a>flow6 配置</h4><pre><code>${tlApprove == &quot;Y&quot; || tlApprove == &quot;y&quot;}</code></pre><h4 id="flow7-配置"><a href="#flow7-配置" class="headerlink" title="flow7 配置"></a>flow7 配置</h4><pre><code>${tlApprove == &quot;N&quot; || tlApprove == &quot;n&quot;}</code></pre><h4 id="flow9-配置"><a href="#flow9-配置" class="headerlink" title="flow9 配置"></a>flow9 配置</h4><pre><code>${hrApprove == &quot;Y&quot; || tlApprove == &quot;y&quot;}</code></pre><h4 id="flow10-配置"><a href="#flow10-配置" class="headerlink" title="flow10 配置"></a>flow10 配置</h4><pre><code>${hrApprove == &quot;N&quot; || tlApprove == &quot;n&quot;}</code></pre><p>配置后的流程图</p><p><img src="https://user-images.githubusercontent.com/17758731/49323670-e18feb00-f559-11e8-9967-a2bac264e9fe.png" alt="image"></p><h3 id="3-2-helloworld程序"><a href="#3-2-helloworld程序" class="headerlink" title="3.2 helloworld程序"></a>3.2 helloworld程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DemoMain.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"----- 启动我们的程序 -----"</span>);</span><br><span class="line">        <span class="comment">// 1. 创建流程引擎</span></span><br><span class="line">        ProcessEngine processEngine = getProcessEngine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 部署流程定义文件</span></span><br><span class="line">        ProcessDefinition processDefinition = getProcessDefinition(processEngine);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 启动运行流程</span></span><br><span class="line">        ProcessInstance processInstance = getProcessInstance(processEngine, processDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 处理流程任务</span></span><br><span class="line">        processTask(processEngine, processInstance);</span><br><span class="line">        logger.info(<span class="string">"----- 结束我们的程序 -----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理流程任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processEngine   流程引擎</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processInstance 流程实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processTask</span><span class="params">(ProcessEngine processEngine, ProcessInstance processInstance)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (processInstance != <span class="keyword">null</span> &amp;&amp; !processInstance.isEnded()) &#123;</span><br><span class="line">            logger.info(<span class="string">"processInstanceId: [&#123;&#125;]"</span>, processInstance.getId());</span><br><span class="line">            logger.info(<span class="string">"processInstance.processInstanceId: [&#123;&#125;]"</span>, processInstance.getProcessInstanceId());</span><br><span class="line">            TaskService taskService = processEngine.getTaskService();</span><br><span class="line">            List&lt;Task&gt; list = taskService.createTaskQuery().list();</span><br><span class="line">            logger.info(<span class="string">"待处理任务数量: [&#123;&#125;]"</span>, list.size());</span><br><span class="line">            <span class="keyword">for</span> (Task task : list) &#123;</span><br><span class="line">                logger.info(<span class="string">"待处理任务: [&#123;&#125;]"</span>, task.getName());</span><br><span class="line">                Map&lt;String, Object&gt; variables = getVariables(processEngine, scanner, task);</span><br><span class="line">                taskService.complete(task.getId(), variables);</span><br><span class="line">                processInstance = processEngine.getRuntimeService()</span><br><span class="line">                        .createProcessInstanceQuery()</span><br><span class="line">                        .processInstanceId(processInstance.getId())</span><br><span class="line">                        .singleResult();</span><br><span class="line">                logger.info(<span class="string">"当前 ProcessInstance :&#123;&#125;"</span>, processInstance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取变量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processEngine</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scanner</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getVariables</span><span class="params">(ProcessEngine processEngine, Scanner scanner, Task task)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        FormService formService = processEngine.getFormService();</span><br><span class="line">        TaskFormData taskFormData = formService.getTaskFormData(task.getId());</span><br><span class="line">        List&lt;FormProperty&gt; formProperties = taskFormData.getFormProperties();</span><br><span class="line">        Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">        <span class="keyword">for</span> (FormProperty property : formProperties) &#123;</span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (StringFormType.class.isInstance(property.getType())) &#123;</span><br><span class="line">                <span class="comment">// 如果是 String 类型, 不需要做任何格式化</span></span><br><span class="line">                logger.info(<span class="string">"请输入 [&#123;&#125;] ?"</span>, property.getName());</span><br><span class="line">                line = scanner.nextLine();</span><br><span class="line">                variables.put(property.getId(), line);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DateFormType.class.isInstance(property.getType())) &#123;</span><br><span class="line">                <span class="comment">// 如果是日期类型</span></span><br><span class="line">                logger.info(<span class="string">"请输入 [&#123;&#125;] ?, 格式 (yyyy-MM-dd)"</span>, property.getName());</span><br><span class="line">                line = scanner.nextLine();</span><br><span class="line">                SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">                Date date = simpleDateFormat.parse(line);</span><br><span class="line">                variables.put(property.getId(), date);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.info(<span class="string">"类型不支持: &#123;&#125;"</span>, property.getType());</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"您输入的内容是 [&#123;&#125;]"</span>, line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> variables;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessInstance <span class="title">getProcessInstance</span><span class="params">(ProcessEngine processEngine, ProcessDefinition processDefinition)</span> </span>&#123;</span><br><span class="line">        RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line">        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinition.getId());</span><br><span class="line">        logger.info(<span class="string">"启动流程: [&#123;&#125;]"</span>, processInstance.getProcessDefinitionKey());</span><br><span class="line">        <span class="keyword">return</span> processInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessDefinition <span class="title">getProcessDefinition</span><span class="params">(ProcessEngine processEngine)</span> </span>&#123;</span><br><span class="line">        RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line">        DeploymentBuilder deploymentBuilder = repositoryService.createDeployment();</span><br><span class="line">        deploymentBuilder.addClasspathResource(<span class="string">"SecondApprove.bpmn20.xml"</span>);</span><br><span class="line">        Deployment deployment = deploymentBuilder.deploy();</span><br><span class="line"></span><br><span class="line">        String deploymentId = deployment.getId();</span><br><span class="line">        <span class="comment">// deploymentId: 1</span></span><br><span class="line">        logger.info(<span class="string">"deploymentId: [&#123;&#125;]"</span>, deploymentId);</span><br><span class="line">        ProcessDefinition processDefinition = repositoryService.</span><br><span class="line">                createProcessDefinitionQuery().</span><br><span class="line">                deploymentId(deploymentId)</span><br><span class="line">                .singleResult();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// processDefinition.getId() 是 SecondApprove:1:4, 根据部署 id 和流程 id 组装出的数据</span></span><br><span class="line">        logger.info(<span class="string">"流程定义文件: [&#123;&#125;], 流程 id: [&#123;&#125;]"</span>, processDefinition.getName(), processDefinition.getId());</span><br><span class="line">        <span class="keyword">return</span> processDefinition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessEngine <span class="title">getProcessEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();</span><br><span class="line">        ProcessEngine processEngine = configuration.buildProcessEngine();</span><br><span class="line">        String name = processEngine.getName();</span><br><span class="line">        String version = ProcessEngine.VERSION;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"流程引擎名称: [&#123;&#125;], 版本: [&#123;&#125;]"</span>, name, version);</span><br><span class="line">        <span class="keyword">return</span> processEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-Activiti-引擎配置"><a href="#4-Activiti-引擎配置" class="headerlink" title="4. Activiti 引擎配置"></a>4. Activiti 引擎配置</h1><h2 id="4-1-流程引擎配置"><a href="#4-1-流程引擎配置" class="headerlink" title="4.1 流程引擎配置"></a>4.1 流程引擎配置</h2><p>流程引擎配置的载体就是 <code>ProcessEngineConfiguration</code> 及其子类, Activiti 是通过 <code>activiti.cfg.xml</code> 来完成配置</p><p>然后构建出流程引擎 <code>ProcessEngine</code>, 最终获取业务开发中需要的各个 Service.</p><p><img src="https://user-images.githubusercontent.com/17758731/49327683-12deda00-f59f-11e8-8a37-b02ee297e713.png" alt="image"></p><p>ProcessorEngineConfiguration:</p><ol><li>查找并解析 XML 配置文件 <code>activiti.cfg.xml</code></li><li>提供多个静态方法创建配置对象</li><li>实现几个基于不同场景的子类, 配置方式灵活</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 ProcessEngineConfiguration  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/activitiDB?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- false: 不会自动创建表, 没有表, 则抛异常 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- create-drop: 先删除, 再创建表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- true: 没有表时，自动创建--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ProcessEngineConfigurationImpl: 抽象类, 配置了 ProcessEngineConfiguration 大部分属性;<br>StandaloneProcessEngineConfiguration: 独立部署运行, 可以通过 new 的方式创建;<br>SpringProcessEngineConfiguration: 完成与 Spring 的集成, 同时扩展了数据源配置, 事务, 自动装载部署文件的目录.</p><h2 id="4-2-数据库配置"><a href="#4-2-数据库配置" class="headerlink" title="4.2 数据库配置"></a>4.2 数据库配置</h2><ul><li>缺省配置默认使用 H2 内存数据库;</li><li>配置 JDBC 属性, 使用 MyBatis 提供的连接池;</li><li>配置 DataSource, 可自选第三方实现.</li></ul><p>配置 JDBC 属性使用 MyBatis 提供的连接池</p><table><thead><tr><th>基本属性</th><th>连接池配置</th></tr></thead><tbody><tr><td>jdbcUrl</td><td>jdbcMaxActiveConnections(最大活跃连接数)</td></tr><tr><td>jdbcDriver</td><td>jdbcMaxIdleConnections(最大空闲连接数)</td></tr><tr><td>jdbcUsername</td><td>jdbcMaxCheckoutTime(最大)</td></tr><tr><td>jdbcPassword</td><td>jdbcMaxWaitTIme(最大等待时间)</td></tr></tbody></table><p>配置第三方实现的 DataSource</p><ul><li>Druid: 为监控而生的数据库连接池</li><li>Dbcp: Tomcat 自带</li><li>HikariCP: 极速数据源连接池, Spring 默认</li></ul><h3 id="4-2-1-Druid-数据源连接池"><a href="#4-2-1-Druid-数据源连接池" class="headerlink" title="4.2.1 Druid 数据源连接池"></a>4.2.1 Druid 数据源连接池</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- false: 不会自动创建表, 没有表, 则抛异常 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- create-drop: 先删除, 再创建表 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- true: 没有表时，自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/activitiDB"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat,slf4f"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-数据库更新策略"><a href="#4-2-2-数据库更新策略" class="headerlink" title="4.2.2 数据库更新策略"></a>4.2.2 数据库更新策略</h3><ol><li>配置 databaseSchemaUpdate:<ul><li>false: 启动时检查数据库版本, 发生不匹配则抛出异常(线上默认)</li><li>true: 启动时自动检查并更新数据库表, 不存在会创建(开发环境默认)</li><li>create-drop: 启动时创建数据库表结构, 结束时删除表结构</li></ul></li></ol><h2 id="4-3-日志和数据记录配置"><a href="#4-3-日志和数据记录配置" class="headerlink" title="4.3 日志和数据记录配置"></a>4.3 日志和数据记录配置</h2><h3 id="4-3-1-日志组件的关系及-MDC"><a href="#4-3-1-日志组件的关系及-MDC" class="headerlink" title="4.3.1 日志组件的关系及 MDC"></a>4.3.1 日志组件的关系及 MDC</h3><table><thead><tr><th>日志分类</th><th>描述</th><th>分类内容</th></tr></thead><tbody><tr><td>日志门面</td><td>直接应用在程序中记录日志的组件</td><td>slf4j, commons-logging, log4j</td></tr><tr><td>日志实现</td><td>日志门面不能直接打日志, 需要日志实现</td><td>logback, log4j, log4j2, Java util logging</td></tr><tr><td>桥接方式</td><td>有些特殊需求, 例如需要 slf4j 作为门面, 但需要以 log4j 作为实现</td><td>slf4j-log4j12, slf4j-jdk14, …</td></tr><tr><td>改变依赖</td><td>将原有门面的功能委托给其他实现, 主要用于解决历史软件内部依赖的改变</td><td>jcl-over-slf4j, log4j-over-slf4j, …</td></tr></tbody></table><p>配置开启 MDC(Mapped Diagnostic Context): 可以理解为将上下文数据存储在 ThreadLocal 中</p><ul><li>默认没有开启, 需要手动设置 <code>LogMDC.setMDCEnable(true)</code></li><li>配置 logback.xml, 日志模板添加 <code>%X{mdcProcessInstanceID}</code>, 即打印当前 instance 的 id</li><li>流程只有在执行过程出现异常的时候才会记录 MDC 信息</li></ul><h4 id="4-3-1-1-默认日志输出"><a href="#4-3-1-1-默认日志输出" class="headerlink" title="4.3.1.1 默认日志输出"></a>4.3.1.1 默认日志输出</h4><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigMDCTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动构建 ProcessEngine</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule = <span class="keyword">new</span> ActivitiRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProcessInstance processInstance = activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">        assertNotNull(processInstance);</span><br><span class="line">        Task task = activitiRule.getTaskService().createTaskQuery().singleResult();</span><br><span class="line">        assertEquals(<span class="string">"Activiti is awesome!"</span>, task.getName());</span><br><span class="line">        activitiRule.getTaskService().complete(task.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"30 seconds"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.dir"</span> <span class="attr">value</span>=<span class="string">"target/logs"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plain"</span> <span class="attr">value</span>=<span class="string">"%msg%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"std"</span> <span class="attr">value</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%thread] [%level] %msg %X&#123;user&#125; %logger&#123;10&#125;.%M:%L%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"normal"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;10&#125;.%M:%L - %msg%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;std&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;encoding&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>00:19:43.624 [main] [INFO] Loading XML bean definitions from class path resource [activiti.cfg.xml]  o.s.b.f.x.XmlBeanDefinitionReader.loadBeanDefinitions:31600:19:45.162 [main] [INFO] Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.  o.a.e.c.DefaultActiviti5CompatibilityHandlerFactory.createActiviti5CompatibilityHandler:3800:19:45.174 [main] [INFO] performing create on engine with resource org/activiti/db/create/activiti.mysql.create.engine.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:19:45.176 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7  o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:19:46.466 [main] [INFO] performing create on history with resource org/activiti/db/create/activiti.mysql.create.history.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:19:46.466 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7  o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:19:46.922 [main] [INFO] performing create on identity with resource org/activiti/db/create/activiti.mysql.create.identity.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:19:46.922 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7  o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:19:47.035 [main] [INFO] ProcessEngine default created  o.a.e.i.ProcessEngineImpl.&lt;init&gt;:87</code></pre><h4 id="4-3-1-2-MDC-日志输出"><a href="#4-3-1-2-MDC-日志输出" class="headerlink" title="4.3.1.2 MDC 日志输出"></a>4.3.1.2 MDC 日志输出</h4><h5 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigMDCTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule = <span class="keyword">new</span> ActivitiRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 开启 MDC, 整个过程在正常情况下是不会激活 MDC 的</span></span><br><span class="line">        LogMDC.setMDCEnabled(<span class="keyword">true</span>);</span><br><span class="line">        ProcessInstance processInstance = activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">        assertNotNull(processInstance);</span><br><span class="line">        Task task = activitiRule.getTaskService().createTaskQuery().singleResult();</span><br><span class="line">        assertEquals(<span class="string">"Activiti is awesome!"</span>, task.getName());</span><br><span class="line">        activitiRule.getTaskService().complete(task.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="BPMN-流程图"><a href="#BPMN-流程图" class="headerlink" title="BPMN 流程图"></a>BPMN 流程图</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- org.destiny.activiti.delegate.MDCErrorDelegate 是一个会自动抛出异常 "test only" 的JavaDelegate --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">activiti:class</span>=<span class="string">"org.destiny.activiti.delegate.MDCErrorDelegate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"30 seconds"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.dir"</span> <span class="attr">value</span>=<span class="string">"target/logs"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plain"</span> <span class="attr">value</span>=<span class="string">"%msg%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"std"</span> <span class="attr">value</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%thread] [%level] %msg %X&#123;user&#125; %logger&#123;10&#125;.%M:%L%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     - MDC 配置:</span></span><br><span class="line"><span class="comment">     - ProcessDefinitionId: 流程定义 id</span></span><br><span class="line"><span class="comment">     - executionId:</span></span><br><span class="line"><span class="comment">     - mdcProcessInstanceId: 流程实例 id</span></span><br><span class="line"><span class="comment">     - mdcBusinessKey: 业务 key</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mdc"</span> <span class="attr">value</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%thread] [%level] %msg ProcessDefinitionId=%X&#123;mdcProcessDefinitionID&#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    executionId=%X&#123;mdcExecutionId&#125; mdcProcessInstanceId=%X&#123;mdcProcessInstanceId&#125; mdcBusinessKey=%X&#123;mdcBusinessKey&#125; %logger&#123;10&#125;.%M:%L%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"normal"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;10&#125;.%M:%L - %msg%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处将默认值输出由 std 改为 mdc --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;pattern&gt;$&#123;std&#125;&lt;/pattern&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;mdc&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;pattern&gt;$&#123;mdc&#125;&lt;/pattern&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;encoding&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="日志输出-1"><a href="#日志输出-1" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>00:32:57.204 [main] [INFO] Loading XML bean definitions from class path resource [activiti.cfg.xml] ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.s.b.f.x.XmlBeanDefinitionReader.loadBeanDefinitions:31600:32:58.659 [main] [INFO] Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled. ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.c.DefaultActiviti5CompatibilityHandlerFactory.createActiviti5CompatibilityHandler:3800:32:58.671 [main] [INFO] performing create on engine with resource org/activiti/db/create/activiti.mysql.create.engine.sql ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:32:58.673 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:33:00.219 [main] [INFO] performing create on history with resource org/activiti/db/create/activiti.mysql.create.history.sql ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:33:00.220 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:33:00.657 [main] [INFO] performing create on identity with resource org/activiti/db/create/activiti.mysql.create.identity.sql ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:33:00.657 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:33:00.771 [main] [INFO] ProcessEngine default created ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.ProcessEngineImpl.&lt;init&gt;:8700:33:00.932 [main] [INFO] MDCErrorDelegate.execute ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.d.MDCErrorDelegate.execute:2400:33:00.935 [main] [ERROR] Error while closing command context ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.CommandContext.logException:122java.lang.RuntimeException: test only...</code></pre><p>可以看到, 在 ERROR 行中, 打印出了 MDC 信息</p><h4 id="4-3-1-3-使用拦截器让每个流程节点都把-MDC-信息打印出来"><a href="#4-3-1-3-使用拦截器让每个流程节点都把-MDC-信息打印出来" class="headerlink" title="4.3.1.3 使用拦截器让每个流程节点都把 MDC 信息打印出来"></a>4.3.1.3 使用拦截器让每个流程节点都把 MDC 信息打印出来</h4><h5 id="新建拦截器"><a href="#新建拦截器" class="headerlink" title="新建拦截器"></a>新建拦截器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MDCCommandInvoker</span> <span class="keyword">extends</span> <span class="title">DebugCommandInvoker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先判断可运行的对象是不是 Activiti 支持的 Operation</span></span><br><span class="line"><span class="comment">     * 如果是, 将它强转, 并取出执行对象并输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> runnable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeOperation</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> mdcEnabled = LogMDC.isMDCEnabled();</span><br><span class="line">        LogMDC.setMDCEnabled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (runnable <span class="keyword">instanceof</span> AbstractOperation) &#123;</span><br><span class="line">            AbstractOperation operation = (AbstractOperation) runnable;</span><br><span class="line">            <span class="keyword">if</span> (operation.getExecution() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果是可操作对象, 将该信息放入 MDC 上下文对象</span></span><br><span class="line">                LogMDC.putMDCExecution(operation.getExecution());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.executeOperation(runnable);</span><br><span class="line">        LogMDC.clear();</span><br><span class="line">        <span class="keyword">if</span> (!mdcEnabled) &#123;</span><br><span class="line">            <span class="comment">// 如果 MDC 原本不生效, 需要将 MDC 重新置为 false</span></span><br><span class="line">            LogMDC.setMDCEnabled(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置该拦截器"><a href="#配置该拦截器" class="headerlink" title="配置该拦截器"></a>配置该拦截器</h5><blockquote><p>修改默认配置文件 activiti.cfg.xml, 新增该 MDCCommandInvoker</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 ProcessEngineConfiguration  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/activitiDB?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;useSSL=false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"commandInvoker"</span> <span class="attr">ref</span>=<span class="string">"commandInvoker"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"commandInvoker"</span> <span class="attr">class</span>=<span class="string">"org.destiny.activiti.interceptor.MDCCommandInvoker"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="最终产出日志"><a href="#最终产出日志" class="headerlink" title="最终产出日志"></a>最终产出日志</h5><pre><code>00:56:35.631 [main] [INFO] Loading XML bean definitions from class path resource [activiti_mdc.cfg.xml] ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.s.b.f.x.XmlBeanDefinitionReader.loadBeanDefinitions:31600:56:37.141 [main] [INFO] Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled. ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.c.DefaultActiviti5CompatibilityHandlerFactory.createActiviti5CompatibilityHandler:3800:56:37.153 [main] [INFO] performing create on engine with resource org/activiti/db/create/activiti.mysql.create.engine.sql ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:56:37.154 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:56:38.655 [main] [INFO] performing create on history with resource org/activiti/db/create/activiti.mysql.create.history.sql ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:56:38.656 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:56:39.109 [main] [INFO] performing create on identity with resource org/activiti/db/create/activiti.mysql.create.identity.sql ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:56:39.110 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:56:39.218 [main] [INFO] ProcessEngine default created ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.ProcessEngineImpl.&lt;init&gt;:8700:56:39.403 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.407 [main] [INFO] 4 (process instance)└── 5 : start (StartEvent, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.409 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.410 [main] [INFO] 4 (process instance)└── 5 : start (StartEvent, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.411 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.412 [main] [INFO] 4 (process instance)└── 5 : start -&gt; someTask, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.412 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.412 [main] [INFO] 4 (process instance)└── 5 : someTask (UserTask, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.497 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.501 [main] [INFO] 4 (process instance)└── 5 : someTask (UserTask, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.502 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.503 [main] [INFO] 4 (process instance)└── 5 : someTask (UserTask, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.504 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.504 [main] [INFO] 4 (process instance)└── 5 : someTask -&gt; end, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.505 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.505 [main] [INFO] 4 (process instance)└── 5 : end (EndEvent, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.505 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.506 [main] [INFO] 4 (process instance)└── 5 : end (EndEvent, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.507 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.EndExecutionOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.507 [main] [INFO] 4 (process instance)└── 5 : end (EndEvent, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:34</code></pre><blockquote><p>可以看到最终所有级别的日志都输出了 MDC 信息</p></blockquote><h3 id="4-3-2-配置历史记录级别"><a href="#4-3-2-配置历史记录级别" class="headerlink" title="4.3.2 配置历史记录级别"></a>4.3.2 配置历史记录级别</h3><p>配置 HistoryLevel:</p><ul><li>none: 不记录历史记录, 性能高, 流程结束后不可读取;</li><li>activiti: 归档流程实例和活动实例, 流程变量不同步;</li><li>audit: 默认值, 在 activiti 基础上同步变量值, 保存表单属性;</li><li>full: 性能较差, 记录所有实例和变量细节变化.</li></ul><h3 id="4-3-3-配置基于-DB-的事件日志"><a href="#4-3-3-配置基于-DB-的事件日志" class="headerlink" title="4.3.3 配置基于 DB 的事件日志"></a>4.3.3 配置基于 DB 的事件日志</h3><p>配置 Event Logging</p><ul><li>实验性的事件记录机制, 性能影响较大;</li><li>开启默认记录所有数据的变化过程, 导致表记录快速增长;</li><li>日志内容基于 JSON 格式, 建议存入 MongoDB, Elastic Search;</li></ul><h2 id="4-4-命令拦截器的配置"><a href="#4-4-命令拦截器的配置" class="headerlink" title="4.4 命令拦截器的配置"></a>4.4 命令拦截器的配置</h2><h3 id="4-4-1-命令模式与责任链模式"><a href="#4-4-1-命令模式与责任链模式" class="headerlink" title="4.4.1 命令模式与责任链模式"></a>4.4.1 命令模式与责任链模式</h3><h4 id="4-4-1-1-Command"><a href="#4-4-1-1-Command" class="headerlink" title="4.4.1.1 Command"></a>4.4.1.1 Command</h4><blockquote><p>命令拦截器使用命令模式实现, 多个拦截器会组成一个拦截器链, 实现了责任链模式</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49334530-3e031100-f613-11e8-9e2c-9e32150b0f33.png" alt="image"></p><ul><li>Command: 命令接口</li><li>ConcreteCommand: 命令实现, 构造命令的时候, 需要传入接受者, 即 Received</li><li>Receiver: Client 在实现 Command 接口的时候传入</li><li>Invoker: 调用者, 最终调用 ConcreteCommand 对象</li></ul><p><img src="https://user-images.githubusercontent.com/17758731/49334596-9edf1900-f614-11e8-99e2-ee9049405f55.png" alt="image"></p><h4 id="4-4-1-2-Chain-of-Responsibility"><a href="#4-4-1-2-Chain-of-Responsibility" class="headerlink" title="4.4.1.2 Chain of Responsibility"></a>4.4.1.2 Chain of Responsibility</h4><p><img src="https://user-images.githubusercontent.com/17758731/49334608-dea60080-f614-11e8-95e0-d55a75405c27.png" alt="image"></p><blockquote><p>customPre, default, customPost 中 <code>execute()</code> 的实现基本都是调用了 <code>next</code> 的 <code>execute()</code>, 只有 CommandInvoker 真正完成了执行器.</p></blockquote><ul><li>CustomPre: default 之前的拦截器</li><li>default: Activiti 默认的 CommandInterceptor</li><li>CustomPost: default 之后的拦截器</li><li>CommandInvoker: 最终的命令执行者</li></ul><h3 id="4-4-2-命令拦截器的配置"><a href="#4-4-2-命令拦截器的配置" class="headerlink" title="4.4.2 命令拦截器的配置"></a>4.4.2 命令拦截器的配置</h3><ul><li>配置Interceptor<ul><li>customProCommandInterceptors: 配置在默认拦截器之前</li><li>customPostCommandInterceptors: 配置在默认拦截器之后</li><li>commandInvoker: 配置在最后的执行器</li></ul></li></ul><h3 id="4-4-3-示例"><a href="#4-4-3-示例" class="headerlink" title="4.4.3 示例"></a>4.4.3 示例</h3><blockquote><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>实现一个可以统计所有命令完成时间的拦截器</p></blockquote><h4 id="拦截器实现"><a href="#拦截器实现" class="headerlink" title="拦截器实现"></a>拦截器实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DurationCommandInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractCommandInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DurationCommandInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(CommandConfig config, Command&lt;T&gt; command)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 记录当前时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getNext().execute(config, command);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> duration = System.currentTimeMillis() - start;</span><br><span class="line">            logger.info(<span class="string">"&#123;&#125; 执行时长: &#123;&#125; 毫秒"</span>, command.getClass().getSimpleName(), duration);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 ProcessEngineConfiguration  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"commandInvoker"</span> <span class="attr">ref</span>=<span class="string">"commandInvoker"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customPreCommandInterceptors"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.destiny.activiti.interceptor.DurationCommandInterceptor"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"commandInvoker"</span> <span class="attr">class</span>=<span class="string">"org.destiny.activiti.interceptor.MDCCommandInvoker"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="日志输出-2"><a href="#日志输出-2" class="headerlink" title="日志输出"></a>日志输出</h4><pre><code>10:10:09.371 [main] [INFO] SchemaOperationsProcessEngineBuild 执行时长: 113 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.372 [main] [INFO] ProcessEngine default created ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.ProcessEngineImpl.&lt;init&gt;:8710:10:09.391 [main] [INFO] ValidateExecutionRelatedEntityCountCfgCmd 执行时长: 14 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.394 [main] [INFO]  执行时长: 1 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.401 [main] [INFO] GetNextIdBlockCmd 执行时长: 4 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.508 [main] [INFO] GetProcessDefinitionInfoCmd 执行时长: 2 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.513 [main] [INFO] DeployCmd 执行时长: 116 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.616 [main] [INFO] CompleteTaskCmd 执行时长: 22 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.630 [main] [INFO] DeleteDeploymentCmd 执行时长: 14 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:33</code></pre><h2 id="4-5-作业执行器-Job-Executor"><a href="#4-5-作业执行器-Job-Executor" class="headerlink" title="4.5 作业执行器 Job Executor"></a>4.5 作业执行器 Job Executor</h2><h3 id="4-5-1-作业执行器的配置"><a href="#4-5-1-作业执行器的配置" class="headerlink" title="4.5.1 作业执行器的配置"></a>4.5.1 作业执行器的配置</h3><ul><li>asyncExecutorActivate: 激活作业执行器</li><li>asyncExecutorXXX: 异步执行器的属性配置</li><li><p>asyncExecutor: 异步执行器 bean</p></li><li><p>定时开始事件</p><ul><li>timeDate: 指定启动时间</li><li>timeDuration: 指定持续时间间隔后执行</li><li>timeCycle:R5/P1DT1H 指定时间段后周期执行</li></ul></li></ul><h3 id="4-5-2-配置自定义线程池"><a href="#4-5-2-配置自定义线程池" class="headerlink" title="4.5.2 配置自定义线程池"></a>4.5.2 配置自定义线程池</h3><ul><li>corePoolSize: 核心线程数</li><li>maxPoolSize: 最大线程数</li><li>queueCapacity: 阻塞队列大小</li></ul><blockquote><p>如果核心线程数没满, 每当有一个任务, 不管原有线程是否空闲都会开启一个新的线程去执行, 直到达到核心线程数;<br>如果所有核心线程都在运行, 每当有一个任务, 会先放在阻塞队列等待, 直到核心线程执行完上一个任务, 会取阻塞队列第一个任务继续执行;<br>如果队列已满, 会继续创建新的线程, 直到达到最大线程数;<br>如果最大线程数和队列都已满, 此时会执行拒绝策略.</p></blockquote><h3 id="4-5-3-流程定义定时启动流程"><a href="#4-5-3-流程定义定时启动流程" class="headerlink" title="4.5.3 流程定义定时启动流程"></a>4.5.3 流程定义定时启动流程</h3><h3 id="4-5-4-Demo"><a href="#4-5-4-Demo" class="headerlink" title="4.5.4 Demo"></a>4.5.4 Demo</h3><h4 id="配置异步执行器"><a href="#配置异步执行器" class="headerlink" title="配置异步执行器"></a>配置异步执行器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 ProcessEngineConfiguration  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"commandInvoker"</span> <span class="attr">ref</span>=<span class="string">"commandInvoker"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打开异步执行器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"asyncExecutorActivate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"asyncExecutor"</span> <span class="attr">value</span>=<span class="string">"asyncExecutor"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件监听 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"eventListeners"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.destiny.activiti.listener.JobEventListener"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"asyncExecutor"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.asyncexecutor.DefaultAsyncJobExecutor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"executorService"</span> <span class="attr">ref</span>=<span class="string">"executorService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"executorService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"threadNamePrefix"</span> <span class="attr">value</span>=<span class="string">"activiti-job-"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"corePoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queueCapacity"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rejectedExecutionHandler"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"java.util.concurrent.ThreadPoolExecutor$AbortPolicy"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"commandInvoker"</span> <span class="attr">class</span>=<span class="string">"org.destiny.activiti.interceptor.MDCCommandInvoker"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="流程定义文件"><a href="#流程定义文件" class="headerlink" title="流程定义文件"></a>流程定义文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;startEvent id="start"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每 10 秒执行一次, 共执行 5 次 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeCycle</span>&gt;</span>R5/PT10S<span class="tag">&lt;/<span class="name">timeCycle</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加监听器"><a href="#添加监听器" class="headerlink" title="添加监听器"></a>添加监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobEventListener</span> <span class="keyword">implements</span> <span class="title">ActivitiEventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JobEventListener.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(ActivitiEvent event)</span> </span>&#123;</span><br><span class="line">        ActivitiEventType eventType = event.getType();</span><br><span class="line">        String name = eventType.name();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">"TIMER"</span>) || name.startsWith(<span class="string">"JOB"</span>)) &#123;</span><br><span class="line">            logger.info(<span class="string">"监听 Job 事件: &#123;&#125; \t &#123;&#125;"</span>, eventType, event.getProcessInstanceId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFailOnException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志输出-3"><a href="#日志输出-3" class="headerlink" title="日志输出"></a>日志输出</h4><pre><code>11:34:50.048 [main] [INFO] 监听 Job 事件: TIMER_SCHEDULED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:34:50.056 [main] [INFO] start ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.c.ConfigJobTest.test:3311:34:50.080 [main] [INFO] 定时任务 TimerJobEntity [id=4], 默认重试次数: 3 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.c.ConfigJobTest.test:3611:34:50.080 [main] [INFO] jobList.size: 1 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.c.ConfigJobTest.test:3811:35:09.981 [activiti-job-1] [INFO] 监听 Job 事件: TIMER_FIRED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:09.990 [activiti-job-1] [INFO] 监听 Job 事件: TIMER_SCHEDULED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:09.990 [activiti-job-1] [INFO] 监听 Job 事件: JOB_EXECUTION_SUCCESS      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:19.950 [activiti-job-2] [INFO] 监听 Job 事件: TIMER_FIRED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:19.951 [activiti-job-2] [INFO] 监听 Job 事件: TIMER_SCHEDULED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:19.951 [activiti-job-2] [INFO] 监听 Job 事件: JOB_EXECUTION_SUCCESS      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:29.958 [activiti-job-3] [INFO] 监听 Job 事件: TIMER_FIRED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:29.959 [activiti-job-3] [INFO] 监听 Job 事件: TIMER_SCHEDULED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:29.960 [activiti-job-3] [INFO] 监听 Job 事件: JOB_EXECUTION_SUCCESS      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:39.966 [activiti-job-4] [INFO] 监听 Job 事件: TIMER_FIRED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:39.970 [activiti-job-4] [INFO] 监听 Job 事件: TIMER_SCHEDULED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:39.971 [activiti-job-4] [INFO] 监听 Job 事件: JOB_EXECUTION_SUCCESS      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:49.975 [activiti-job-5] [INFO] 监听 Job 事件: TIMER_FIRED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:49.975 [activiti-job-5] [INFO] 监听 Job 事件: JOB_EXECUTION_SUCCESS      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:34</code></pre><h2 id="4-6-Activiti-与-Spring-集成"><a href="#4-6-Activiti-与-Spring-集成" class="headerlink" title="4.6 Activiti 与 Spring 集成"></a>4.6 Activiti 与 Spring 集成</h2><h3 id="4-6-1-集成-Spring-配置"><a href="#4-6-1-集成-Spring-配置" class="headerlink" title="4.6.1 集成 Spring 配置"></a>4.6.1 集成 Spring 配置</h3><ul><li>添加依赖:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>基于 Spring 的默认配置: <code>activiti-context.xml</code>, 如果配置该文件, Activiti 在启动过程中就会查找基于 Spring 的 <code>ProcessEngineConfiguration</code> 对象;</li><li>Activiti 核心服务注入 Spring 容器</li></ul><h3 id="4-6-2-基于-Spring-对-Activiti-的管理"><a href="#4-6-2-基于-Spring-对-Activiti-的管理" class="headerlink" title="4.6.2 基于 Spring 对 Activiti 的管理"></a>4.6.2 基于 Spring 对 Activiti 的管理</h3><h4 id="4-6-2-1-集成-Spring-事务管理器"><a href="#4-6-2-1-集成-Spring-事务管理器" class="headerlink" title="4.6.2.1  集成 Spring 事务管理器"></a>4.6.2.1  集成 Spring 事务管理器</h4><h4 id="activiti-context-xml"><a href="#activiti-context-xml" class="headerlink" title="activiti-context.xml"></a>activiti-context.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 ProcessEngineConfiguration  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.SpringProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring 需要单独配置 DataSource --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"sa"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 流程引擎对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngine"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.ProcessEngineFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">ref</span>=<span class="string">"processEngineConfiguration"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将服务暴露给 Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"runtimeService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getRuntimeService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"repositoryService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getRepositoryService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"formService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getFormService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getTaskService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"historyService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getHistoryService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 activitiRule 用于测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"activitiRule"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.test.ActivitiRule"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngine"</span> <span class="attr">ref</span>=<span class="string">"processEngine"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-6-2-2-定义文件表达式中使用-Spring-Bean"><a href="#4-6-2-2-定义文件表达式中使用-Spring-Bean" class="headerlink" title="4.6.2.2 定义文件表达式中使用 Spring Bean"></a>4.6.2.2 定义文件表达式中使用 Spring Bean</h4><h5 id="HelloBean"><a href="#HelloBean" class="headerlink" title="HelloBean"></a>HelloBean</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HelloBean.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"sayHello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="my-process-spring-bpmn20-xml"><a href="#my-process-spring-bpmn20-xml" class="headerlink" title="my-process-spring.bpmn20.xml"></a>my-process-spring.bpmn20.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"helloBean"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 从 Spring 容器中查找 Hello bean, 并且调用 sayHello() 方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">"helloBean"</span> <span class="attr">activiti:expression</span>=<span class="string">"$&#123;helloBean.sayHello()&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow3"</span> <span class="attr">sourceRef</span>=<span class="string">"helloBean"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试类-2"><a href="#测试类-2" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:activiti-context.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigSpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ConfigSpringTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"my-process-spring.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">        Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();</span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"processInstance: [&#123;&#125;]"</span>, processInstance);</span><br><span class="line">        logger.info(<span class="string">"task: [&#123;&#125;]"</span>, task);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-2-3-自动部署资源文件"><a href="#4-6-2-3-自动部署资源文件" class="headerlink" title="4.6.2.3 自动部署资源文件"></a>4.6.2.3 自动部署资源文件</h4><h3 id="4-6-3-基于-Spring-的流程单元测试"><a href="#4-6-3-基于-Spring-的流程单元测试" class="headerlink" title="4.6.3 基于 Spring 的流程单元测试"></a>4.6.3 基于 Spring 的流程单元测试</h3><ul><li>添加依赖 <code>spring-test</code></li><li>辅助测试 Rule: ActivitiRule</li><li>辅助测试 TestCase: SpringActivitiTestCase</li></ul><h1 id="5-Activiti-核心-API"><a href="#5-Activiti-核心-API" class="headerlink" title="5. Activiti 核心 API"></a>5. Activiti 核心 API</h1><table><thead><tr><th>服务名称</th><th>功能</th></tr></thead><tbody><tr><td>RepositoryServie</td><td>负责对静态文件的管理, 涉及部署对象和资源对象, 其二者是一对多的关系</td></tr><tr><td>RuntimeService</td><td>负责对流程进行控制的服务, 可以对流程实例完成启动, 暂停, 挂起等操作</td></tr><tr><td>TaskService</td><td>负责管理运行中的 UserTask(人工任务)</td></tr><tr><td>IdentityService</td><td>负责对用户和用户组的管理</td></tr><tr><td>FormService</td><td>负责解析流程定义中的表单, 对表单的数据类型做渲染</td></tr><tr><td>HistoryService</td><td>提供了对运行结束的流程实例的查询和删除操作</td></tr><tr><td>ManagementService</td><td>提供了对流程引擎基础的管理, 提供对定时任务 Job 的管理, 获取表结构, 表明的操作</td></tr><tr><td>DynamicBpmnService</td><td>提供了对动态的流程定义模型做修改</td></tr></tbody></table><h2 id="5-1-RepositoryService"><a href="#5-1-RepositoryService" class="headerlink" title="5.1 RepositoryService"></a>5.1 RepositoryService</h2><ul><li>管理流程定义文件 xml 及静态资源服务</li><li>对特定的流程的暂停和激活</li><li>流程定义启动权限管理</li><li>部署文件构造器 <code>DeploymentBuilder</code></li><li>部署文件查询器 <code>DeploymentQuery</code></li><li>流程定义文件查询对象 <code>ProcessDefinitionQuery</code></li><li>流程部署文件对象 <code>Deployment</code></li><li>流程定义文件对象 <code>ProcessDefinition</code></li><li>流程定义的 Java 格式 <code>BpmnModel</code></li></ul><p>RepositoryService API:</p><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>createDeployment</td><td>添加资源文件</td></tr><tr><td>deleteDeployment</td><td>删除资源文件</td></tr><tr><td>setDeploymentCategory</td><td>指定分类名称</td></tr><tr><td>createProcessDefinitionQuery</td><td>创建流程定义查询对象</td></tr><tr><td>createNativeProcessDefinitionQuery</td><td>通过 SQL 查询流程定义对象</td></tr><tr><td>suspendProcessDefinitionByXX</td><td>通过某些条件暂停/挂起流程定义对象, 使之不能再生成新的流程实例</td></tr><tr><td>activateProcessDefinitionByXX</td><td>通过某些条件激活流程定义对象, 使之可以继续生成新的流程实例</td></tr><tr><td>getProcssDiagram</td><td>获取流程图的数据流</td></tr><tr><td>getBpmnModel</td><td>获取 BpmnModel 对象</td></tr><tr><td>addCandidateStarterUser</td><td>设置某个流程文件只能由指定的用户去启动</td></tr><tr><td>addCandidateStarterGroup</td><td>设置某个流程文件只能由指定的用户组去启动</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h3 id="5-1-1-ProcessDefinitionId-的含义"><a href="#5-1-1-ProcessDefinitionId-的含义" class="headerlink" title="5.1.1 ProcessDefinitionId 的含义"></a>5.1.1 ProcessDefinitionId 的含义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RepositoryService repositoryService = activitiRule.getRepositoryService();</span><br><span class="line">    DeploymentBuilder deploymentBuilder1 = repositoryService.createDeployment();</span><br><span class="line">    deploymentBuilder1   <span class="comment">// 一个部署对象就记录了一次部署</span></span><br><span class="line">            .name(<span class="string">"测试部署资源1"</span>)                 <span class="comment">// 设置名称</span></span><br><span class="line">            .addClasspathResource(<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">"org/destiny/activiti/SecondApprove.bpmn20.xml"</span>)</span><br><span class="line">            .deploy();                          <span class="comment">// 完成部署</span></span><br><span class="line"></span><br><span class="line">    DeploymentBuilder deploymentBuilder2 = repositoryService.createDeployment();</span><br><span class="line">    deploymentBuilder2   <span class="comment">// 一个部署对象就记录了一次部署</span></span><br><span class="line">            .name(<span class="string">"测试部署资源2"</span>)                 <span class="comment">// 设置名称</span></span><br><span class="line">            .addClasspathResource(<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">"org/destiny/activiti/SecondApprove.bpmn20.xml"</span>)</span><br><span class="line">            .deploy();                          <span class="comment">// 完成部署</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询部署对象</span></span><br><span class="line">    List&lt;Deployment&gt; deploymentList = repositoryService.createDeploymentQuery()</span><br><span class="line">            .orderByDeploymenTime().asc()</span><br><span class="line">            .list();</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"size of deploymentList: &#123;&#125;"</span>, deploymentList.size());</span><br><span class="line">    <span class="keyword">for</span> (Deployment deployment : deploymentList) &#123;</span><br><span class="line">        logger.info(<span class="string">"deployment: &#123;&#125;"</span>, deployment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 流程定义</span></span><br><span class="line">    List&lt;ProcessDefinition&gt; processDefinitionList = repositoryService</span><br><span class="line">            .createProcessDefinitionQuery()</span><br><span class="line">            .orderByProcessDefinitionKey().asc()</span><br><span class="line">            .listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (ProcessDefinition processDefinition : processDefinitionList) &#123;</span><br><span class="line">        logger.info(<span class="string">"processDefinition: &#123;&#125;, version: &#123;&#125;, key: &#123;&#125;, name: &#123;&#125;"</span>,</span><br><span class="line">                processDefinition, processDefinition.getVersion(), processDefinition.getKey(), processDefinition.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的日志:</p><pre><code>08:42:45,507 [main] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from class path resource [activiti.cfg.xml]08:42:47,193 [main] INFO  org.activiti.engine.compatibility.DefaultActiviti5CompatibilityHandlerFactory  - Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.08:42:47,207 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql08:42:47,268 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql08:42:47,274 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql08:42:47,280 [main] INFO  org.activiti.engine.impl.ProcessEngineImpl  - ProcessEngine default created08:42:49,736 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - size of deploymentList: 208:42:49,736 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - deployment: DeploymentEntity[id=1, name=测试部署资源1]08:42:49,736 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - deployment: DeploymentEntity[id=7, name=测试部署资源2]08:42:49,742 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - processDefinition: ProcessDefinitionEntity[SecondApprove:1:5], version: 1, key: SecondApprove, name: 二级审批08:42:49,742 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - processDefinition: ProcessDefinitionEntity[SecondApprove:2:11], version: 2, key: SecondApprove, name: 二级审批08:42:49,742 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - processDefinition: ProcessDefinitionEntity[my-process:1:6], version: 1, key: my-process, name: null08:42:49,743 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - processDefinition: ProcessDefinitionEntity[my-process:2:12], version: 2, key: my-process, name: null</code></pre><p>两个 DeploymentEntity, 一个 id 为 1, 一个 id 为 7,  id 的设置使用全局自增, 说明在两个 Deployment 对象的部署过程中插入了 6 条记录:</p><ol><li>1 个部署记录;</li><li>2 个流程定义记录;</li><li>2 个 xml 文件对应的数据流记录;</li><li>1 个流程定义所生成的图片记录;(my-process 没有生成图片)</li></ol><h3 id="5-1-2-流程挂起-激活"><a href="#5-1-2-流程挂起-激活" class="headerlink" title="5.1.2 流程挂起/激活"></a>5.1.2 流程挂起/激活</h3><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@org</span>.activiti.engine.test.Deployment(resources = <span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSuspend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RepositoryService repositoryService = activitiRule.getRepositoryService();</span><br><span class="line">    ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().singleResult();</span><br><span class="line">    String processDefinitionId = processDefinition.getId();</span><br><span class="line">    logger.info(<span class="string">"processDefinitionId: &#123;&#125;"</span>, processDefinitionId);</span><br><span class="line"></span><br><span class="line">    repositoryService.suspendProcessDefinitionById(processDefinitionId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        logger.info(<span class="string">"开始启动"</span>);</span><br><span class="line">        activitiRule.getRuntimeService().startProcessInstanceById(processDefinitionId);</span><br><span class="line">        logger.info(<span class="string">"启动成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"启动失败, 原因: &#123;&#125;"</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repositoryService.activateProcessDefinitionById(processDefinitionId);</span><br><span class="line">    logger.info(<span class="string">"激活后开始启动"</span>);</span><br><span class="line">    activitiRule.getRuntimeService().startProcessInstanceById(processDefinitionId);</span><br><span class="line">    logger.info(<span class="string">"激活后启动成功"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出日志:</p><pre><code>09:12:42,071 [main] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from class path resource [activiti.cfg.xml]09:12:43,614 [main] INFO  org.activiti.engine.compatibility.DefaultActiviti5CompatibilityHandlerFactory  - Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.09:12:43,627 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql09:12:43,682 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql09:12:43,688 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql09:12:43,692 [main] INFO  org.activiti.engine.impl.ProcessEngineImpl  - ProcessEngine default created09:12:43,882 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - processDefinitionId: my-process:1:309:12:43,887 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - 开始启动09:12:43,893 [main] ERROR org.activiti.engine.impl.interceptor.CommandContext  - Error while closing command contextorg.activiti.engine.ActivitiException: Cannot start process instance. Process definition null (id = my-process:1:3) is suspended    at org.activiti.engine.impl.util.ProcessInstanceHelper.createAndStartProcessInstance(ProcessInstanceHelper.java:67)    at org.activiti.engine.impl.util.ProcessInstanceHelper.createAndStartProcessInstance(ProcessInstanceHelper.java:51)    at org.activiti.engine.impl.cmd.StartProcessInstanceCmd.createAndStartProcessInstance(StartProcessInstanceCmd.java:109)    at org.activiti.engine.impl.cmd.StartProcessInstanceCmd.execute(StartProcessInstanceCmd.java:102)    at org.activiti.engine.impl.cmd.StartProcessInstanceCmd.execute(StartProcessInstanceCmd.java:37)    at org.activiti.engine.impl.interceptor.CommandInvoker$1.run(CommandInvoker.java:37)    at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperation(CommandInvoker.java:78)    at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperations(CommandInvoker.java:57)    at org.activiti.engine.impl.interceptor.CommandInvoker.execute(CommandInvoker.java:42)    at org.activiti.engine.impl.interceptor.TransactionContextInterceptor.execute(TransactionContextInterceptor.java:48)    at org.activiti.engine.impl.interceptor.CommandContextInterceptor.execute(CommandContextInterceptor.java:63)    at org.activiti.engine.impl.interceptor.LogInterceptor.execute(LogInterceptor.java:29)    at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:44)    at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:39)    at org.activiti.engine.impl.RuntimeServiceImpl.startProcessInstanceById(RuntimeServiceImpl.java:114)    at org.destiny.activiti.coreapi.RepositoryServiceTest.testSuspend(RepositoryServiceTest.java:86)    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)    at java.lang.reflect.Method.invoke(Method.java:498)    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)    at org.activiti.engine.test.ActivitiRule$1.evaluate(ActivitiRule.java:116)    at org.junit.rules.RunRules.evaluate(RunRules.java:20)    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)    at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)09:12:43,895 [main] ERROR org.destiny.activiti.coreapi.RepositoryServiceTest  - 启动失败, 原因: Cannot start process instance. Process definition null (id = my-process:1:3) is suspended09:12:43,897 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - 激活后开始启动09:12:43,923 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - 激活后启动成功</code></pre><h3 id="5-1-3-绑定用户-用户组"><a href="#5-1-3-绑定用户-用户组" class="headerlink" title="5.1.3 绑定用户/用户组"></a>5.1.3 绑定用户/用户组</h3><blockquote></blockquote><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试用户组</span></span><br><span class="line"><span class="comment"> * repositoryService 只提供了构建关系的方式, 具体的校验逻辑需要自己完成</span></span><br><span class="line"><span class="comment"> * 可以取出用户/用户组信息, 自行通过逻辑判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@org</span>.activiti.engine.test.Deployment(resources = <span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCandidateStarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RepositoryService repositoryService = activitiRule.getRepositoryService();</span><br><span class="line">    ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().singleResult();</span><br><span class="line">    String processDefinitionId = processDefinition.getId();</span><br><span class="line">    logger.info(<span class="string">"processDefinitionId: &#123;&#125;"</span>, processDefinitionId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// userId/groupM 是对应的用户/用户组管理服务中创建的 id</span></span><br><span class="line">    repositoryService.addCandidateStarterUser(processDefinitionId, <span class="string">"user"</span>);</span><br><span class="line">    repositoryService.addCandidateStarterGroup(processDefinitionId, <span class="string">"groupM"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;IdentityLink&gt; identityLinkList = repositoryService.getIdentityLinksForProcessDefinition(processDefinitionId);</span><br><span class="line">    <span class="keyword">for</span> (IdentityLink identityLink : identityLinkList) &#123;</span><br><span class="line">        logger.info(<span class="string">"删除前: identityLink: [&#123;&#125;]"</span>, identityLink);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repositoryService.deleteCandidateStarterGroup(processDefinitionId, <span class="string">"groupM"</span>);</span><br><span class="line">    repositoryService.deleteCandidateStarterUser(processDefinitionId, <span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;IdentityLink&gt; identityLinkList1 = repositoryService.getIdentityLinksForProcessDefinition(processDefinitionId);</span><br><span class="line">    <span class="keyword">for</span> (IdentityLink identityLink : identityLinkList1) &#123;</span><br><span class="line">        logger.info(<span class="string">"删除后: identityLink: [&#123;&#125;]"</span>, identityLink);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志输出:</p><pre><code>10:08:35,380 [main] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from class path resource [activiti.cfg.xml]10:08:36,784 [main] INFO  org.activiti.engine.compatibility.DefaultActiviti5CompatibilityHandlerFactory  - Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.10:08:36,796 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql10:08:36,842 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql10:08:36,846 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql10:08:36,849 [main] INFO  org.activiti.engine.impl.ProcessEngineImpl  - ProcessEngine default created10:08:37,009 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - processDefinitionId: my-process:1:310:08:37,016 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - 删除前: identityLink: [IdentityLinkEntity[id=4, type=candidate, userId=user, processDefId=my-process:1:3]]10:08:37,016 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - 删除前: identityLink: [IdentityLinkEntity[id=5, type=candidate, groupId=groupM, processDefId=my-process:1:3]]</code></pre><h2 id="5-2-RuntimeService-流程运行控制服务"><a href="#5-2-RuntimeService-流程运行控制服务" class="headerlink" title="5.2 RuntimeService 流程运行控制服务"></a>5.2 RuntimeService 流程运行控制服务</h2><p>功能:</p><ul><li>启动流程及对流程数据的控制</li><li>流程实例(ProcessInstance)与执行流(Execution)查询(当创建实例的时候, 一般也会创建一个执行流)</li><li>触发流程操作, 接受信号的消息</li></ul><p>Runtime 启动流程及变量管理:</p><ul><li>启动流程的常用方式(id, key, message)</li><li>启动流程可选参数:<ul><li>businessKey</li><li>variables</li><li>tenantId</li></ul></li><li>变量(variables)的设置和获取</li></ul><h3 id="5-2-1-基本操作"><a href="#5-2-1-基本操作" class="headerlink" title="5.2.1 基本操作"></a>5.2.1 基本操作</h3><h4 id="5-2-1-1-根据流程定义-key-启动流程"><a href="#5-2-1-1-根据流程定义-key-启动流程" class="headerlink" title="5.2.1.1 根据流程定义 key 启动流程"></a>5.2.1.1 根据流程定义 key 启动流程</h4><blockquote><p>每次流程部署时, 对应 ProcessDefintion 的 id 和 version 都会改变, 根据 ProcessDefintionKey 默认取最后一个版本的数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStartProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    </span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-1-2-根据流程定义-id"><a href="#5-2-1-2-根据流程定义-id" class="headerlink" title="5.2.1.2 根据流程定义 id"></a>5.2.1.2 根据流程定义 id</h4><blockquote><p>使用 ProcessDefintionId 进行获取的时候, 需要先通过 <code>RepositoryService</code> 获取到对应的 id</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据流程定义 id 启动流程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStartProcessById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RepositoryService repositoryService = activitiRule.getRepositoryService();</span><br><span class="line">    ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().singleResult();</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinition.getId(), variables);</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-1-3-通过-ProcessInstanceBuilder-完成流程的设置以及启动"><a href="#5-2-1-3-通过-ProcessInstanceBuilder-完成流程的设置以及启动" class="headerlink" title="5.2.1.3 通过 ProcessInstanceBuilder 完成流程的设置以及启动"></a>5.2.1.3 通过 ProcessInstanceBuilder 完成流程的设置以及启动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    ProcessInstance processInstance = runtimeService.createProcessInstanceBuilder()</span><br><span class="line">            .businessKey(<span class="string">"businessKey001"</span>)</span><br><span class="line">            .processDefinitionKey(<span class="string">"my-process"</span>)</span><br><span class="line">            .variables(variables)</span><br><span class="line">            .start();</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-1-4-设置和获取流程变量"><a href="#5-2-1-4-设置和获取流程变量" class="headerlink" title="5.2.1.4 设置和获取流程变量"></a>5.2.1.4 设置和获取流程变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVariables</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    variables.put(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">    variables.put(<span class="string">"key3"</span>, <span class="string">"value3"</span>);</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">    <span class="comment">// 覆盖原有内容</span></span><br><span class="line">    runtimeService.setVariable(processInstance.getId(), <span class="string">"key3"</span>, <span class="string">"newValue4"</span>);</span><br><span class="line">    runtimeService.setVariable(processInstance.getId(), <span class="string">"key4"</span>, <span class="string">"value4"</span>);</span><br><span class="line">    <span class="comment">// 根据流程实例 id 获取流程变量</span></span><br><span class="line">    Map&lt;String, Object&gt; map = runtimeService.getVariables(processInstance.getId());</span><br><span class="line">    log.info(<span class="string">"variable map: &#123;&#125;"</span>, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志输出:</p><pre><code>11:55:06.844 [main] [INFO] variable map: {key1=value1, key2=value2, key3=newValue4, key4=value4}  o.d.a.c.RuntimeServiceTest.testVariables:94</code></pre><h4 id="5-2-1-5-对流程实例的查询"><a href="#5-2-1-5-对流程实例的查询" class="headerlink" title="5.2.1.5 对流程实例的查询"></a>5.2.1.5 对流程实例的查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessInstanceQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">    ProcessInstance processInstance1 = runtimeService.createProcessInstanceQuery()</span><br><span class="line">            .processInstanceId(processInstance.getId())</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"processInstance1: &#123;&#125;"</span>, processInstance1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-1-6-对执行流的查询"><a href="#5-2-1-6-对执行流的查询" class="headerlink" title="5.2.1.6 对执行流的查询"></a>5.2.1.6 对执行流的查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecutionQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">    List&lt;Execution&gt; executionList = runtimeService.createExecutionQuery()</span><br><span class="line">            .listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (Execution execution : executionList) &#123;</span><br><span class="line">        log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-流程实例与执行流"><a href="#5-2-2-流程实例与执行流" class="headerlink" title="5.2.2 流程实例与执行流"></a>5.2.2 流程实例与执行流</h3><ul><li><code>流程实例(ProcessInstance)</code> 表示一次工作流业务的数据实体, 当每次启动流程的时候, 生成一个流程实例</li><li><code>执行流(Execution)</code> 表示流程实例中具体的执行路径, 如果简单的流程只有一条执行路径, 那么此时流程实例和执行流是一对一的关系</li><li>流程实例接口继承与执行流</li></ul><h3 id="5-2-3-流程触发"><a href="#5-2-3-流程触发" class="headerlink" title="5.2.3 流程触发"></a>5.2.3 流程触发</h3><ul><li>使用 trigger 触发 receiveTask 节点</li><li>触发信号捕获事件 singalEventRecivied(信号可以全局发送)</li><li>触发消息捕获事件 messageEventReceived(消息只能针对某一个流程实例)</li></ul><h4 id="5-2-3-1-流程触发-trigger"><a href="#5-2-3-1-流程触发-trigger" class="headerlink" title="5.2.3.1 流程触发 trigger"></a>5.2.3.1 流程触发 trigger</h4><p><img src="https://i.stack.imgur.com/CoNyK.png" alt></p><h5 id="流程配置文件"><a href="#流程配置文件" class="headerlink" title="流程配置文件"></a>流程配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;userTask id="someTask" name="Activiti is awesome!"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiveTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-trigger.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">    <span class="comment">// 开始流程后流程实例就会在 receiveTask 节点等待处理</span></span><br><span class="line">    Execution execution = runtimeService.createExecutionQuery()</span><br><span class="line">            .activityId(<span class="string">"someTask"</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">    runtimeService.trigger(execution.getId());</span><br><span class="line">    <span class="comment">// 再次查询</span></span><br><span class="line">    execution = runtimeService.createExecutionQuery()</span><br><span class="line">            .activityId(<span class="string">"someTask"</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">14:59:58.256 [main] [INFO] execution: Execution[ id &apos;5&apos; ] - activity &apos;someTask - parent &apos;4&apos;  o.d.a.c.RuntimeServiceTest.testTrigger:137</span><br><span class="line">14:59:58.291 [main] [INFO] execution: null  o.d.a.c.RuntimeServiceTest.testTrigger:142]</span><br></pre></td></tr></table></figure><blockquote><p>当完成了触发之后, 执行对象已经执行完成</p></blockquote><h4 id="5-2-3-2-流程触发-singalEventReceived"><a href="#5-2-3-2-流程触发-singalEventReceived" class="headerlink" title="5.2.3.2 流程触发 singalEventReceived"></a>5.2.3.2 流程触发 singalEventReceived</h4><blockquote><p>流程开始后, 流程会暂停在中间节点(SingalCatchingEvent), 当它获取到信号时间的时候, 才会继续流转</p></blockquote><p><img src="https://i.stack.imgur.com/TJv25.png" alt></p><h5 id="流程定义文件-1"><a href="#流程定义文件-1" class="headerlink" title="流程定义文件"></a>流程定义文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">signal</span> <span class="attr">id</span>=<span class="string">"signalStart"</span> <span class="attr">name</span>=<span class="string">"my-signal"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"signal-received"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义捕获边界事件, 当该节点接收到 my-signal 信号后会继续向后流转 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intermediateCatchEvent</span> <span class="attr">id</span>=<span class="string">"signal-received"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">signalEventDefinition</span> <span class="attr">signalRef</span>=<span class="string">"signalStart"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intermediateCatchEvent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;userTask id="someTask" name="Activiti is awesome!"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"signal-received"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-signal.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSignalEventReceived</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">    <span class="comment">// 查询数据库是否有一个正在等待信号的节点</span></span><br><span class="line">    Execution execution = runtimeService.createExecutionQuery()</span><br><span class="line">            .signalEventSubscriptionName(<span class="string">"my-signal"</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">    <span class="comment">// 触发信号</span></span><br><span class="line">    runtimeService.signalEventReceived(<span class="string">"my-signal"</span>);</span><br><span class="line">    <span class="comment">// 重新执行查询</span></span><br><span class="line">    execution = runtimeService.createExecutionQuery()</span><br><span class="line">            .signalEventSubscriptionName(<span class="string">"my-signal"</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="日志输出-4"><a href="#日志输出-4" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>15:14:42.184 [main] [INFO] execution: Execution[ id &apos;5&apos; ] - activity &apos;signal-received - parent &apos;4&apos;  o.d.a.c.RuntimeServiceTest.testSignalEventReceived:15515:14:42.216 [main] [INFO] execution: null  o.d.a.c.RuntimeServiceTest.testSignalEventReceived:163</code></pre><h4 id="5-2-3-3-流程触发-messageEventReceived"><a href="#5-2-3-3-流程触发-messageEventReceived" class="headerlink" title="5.2.3.3 流程触发 messageEventReceived"></a>5.2.3.3 流程触发 messageEventReceived</h4><blockquote><p>消息触发与信号触发非常相似, 唯一的不同是: 信号与具体的流程实例无关, 消息在执行过程中必须制定流程实例 id</p></blockquote><p><img src="https://i.stack.imgur.com/KxdJB.png" alt></p><h4 id="流程定义文件-2"><a href="#流程定义文件-2" class="headerlink" title="流程定义文件"></a>流程定义文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">message</span> <span class="attr">id</span>=<span class="string">"messageStart"</span> <span class="attr">name</span>=<span class="string">"my-message"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"message-received"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义捕获边界事件, 当该节点接收到 my-message 消息后会继续向后流转 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intermediateCatchEvent</span> <span class="attr">id</span>=<span class="string">"message-received"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">messageEventDefinition</span> <span class="attr">messageRef</span>=<span class="string">"messageStart"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intermediateCatchEvent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;userTask id="someTask" name="Activiti is awesome!"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"message-received"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-message.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMessageEventReceived</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">    <span class="comment">// 查询数据库是否有一个正在等待信号的节点</span></span><br><span class="line">    Execution execution = runtimeService.createExecutionQuery()</span><br><span class="line">            .messageEventSubscriptionName(<span class="string">"my-message"</span>)   <span class="comment">// 查询订阅了该信号的执行流</span></span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">    <span class="comment">// 触发消息, 不同于信号的触发, message 在触发时需要指定 executionId</span></span><br><span class="line">    runtimeService.messageEventReceived(<span class="string">"my-message"</span>, execution.getId());</span><br><span class="line">    <span class="comment">// 重新执行查询</span></span><br><span class="line">    execution = runtimeService.createExecutionQuery()</span><br><span class="line">            .messageEventSubscriptionName(<span class="string">"my-message"</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="日志输出-5"><a href="#日志输出-5" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>15:37:52.024 [main] [INFO] execution: Execution[ id &apos;5&apos; ] - activity &apos;message-received - parent &apos;4&apos;  o.d.a.c.RuntimeServiceTest.testMessageEventReceived:17515:37:52.054 [main] [INFO] execution: null  o.d.a.c.RuntimeServiceTest.testMessageEventReceived:183</code></pre><h4 id="5-2-3-4-流程基于-message-启动"><a href="#5-2-3-4-流程基于-message-启动" class="headerlink" title="5.2.3.4 流程基于 message 启动"></a>5.2.3.4 流程基于 message 启动</h4><h5 id="流程定义"><a href="#流程定义" class="headerlink" title="流程定义"></a>流程定义</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此时既可以基于 key 启动, 也可以基于 message 启动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">message</span> <span class="attr">id</span>=<span class="string">"messageStart"</span> <span class="attr">name</span>=<span class="string">"my-message"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 需要将 messageEventDefinition 放在开始节点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">messageEventDefinition</span> <span class="attr">messageRef</span>=<span class="string">"messageStart"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-message-start.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMessageStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByMessage(<span class="string">"my-message"</span>);</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="日志输出-6"><a href="#日志输出-6" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>15:45:12.844 [main] [INFO] processInstance: ProcessInstance[5]  o.d.a.c.RuntimeServiceTest.testMessageStart:195</code></pre><blockquote><p>基于 message 启动流程时, ProcessInstance 的 id 是 5, 意味着在流程订阅表中多插入了一条数据, 在实际启动过程中, 还是通过 message 找到 ProcessDefinition 的 key, 最终根据 key 来启动</p></blockquote><h2 id="5-3-TaskService-任务管理服务"><a href="#5-3-TaskService-任务管理服务" class="headerlink" title="5.3 TaskService 任务管理服务"></a>5.3 TaskService 任务管理服务</h2><p>TaskService 提供的功能:</p><ul><li>对用户任务管理和流程的控制</li><li>设置用户任务的权限信息(拥有者/候选人/办理人)</li><li>针对用户任务添加任务附件, 任务评论和事件记录</li></ul><p>TaskService 对 Task 管理与流程控制:</p><ul><li>Task 对象的创建, 删除</li><li>查询 Task, 并驱动 Task 节点完成执行</li><li>Task 相关参数变量设置<ul><li>local 变量</li><li>非 local 变量</li></ul></li></ul><h3 id="5-3-1-基本操作"><a href="#5-3-1-基本操作" class="headerlink" title="5.3.1 基本操作"></a>5.3.1 基本操作</h3><h4 id="5-3-1-1-获取-task-设置变量-驱动完成"><a href="#5-3-1-1-获取-task-设置变量-驱动完成" class="headerlink" title="5.3.1.1 获取 task/ 设置变量/ 驱动完成"></a>5.3.1.1 获取 task/ 设置变量/ 驱动完成</h4><h5 id="流程定义文件-3"><a href="#流程定义文件-3" class="headerlink" title="流程定义文件"></a>流程定义文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加候选人 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:candidateUsers</span>=<span class="string">"destiny,destiny1,destiny2"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加描述, message 会根据上下文中传入的 message 变量值去替换 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">documentation</span>&gt;</span></span><br><span class="line">                some task $&#123;message&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码-4"><a href="#测试代码-4" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-task.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTaskService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">        variables.put(<span class="string">"message"</span>, <span class="string">"my test message"</span>);</span><br><span class="line">        TaskService taskService = activitiRule.getTaskService();</span><br><span class="line">        <span class="comment">// 部署流程定义文件</span></span><br><span class="line">        ProcessInstance processInstance = activitiRule.getRuntimeService()</span><br><span class="line">                .startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">        Task task = taskService.createTaskQuery().singleResult();</span><br><span class="line">        log.info(<span class="string">"task: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(task, ToStringStyle.JSON_STYLE));</span><br><span class="line">        log.info(<span class="string">"task.description: &#123;&#125;"</span>, task.getDescription());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置变量</span></span><br><span class="line">        taskService.setVariable(task.getId(), <span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">        taskService.setVariableLocal(task.getId(), <span class="string">"localK1"</span>, <span class="string">"localV1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// local 只在 task 范围可见</span></span><br><span class="line">        Map&lt;String, Object&gt; taskServiceVariables = taskService.getVariables(task.getId());</span><br><span class="line">        Map&lt;String, Object&gt; taskServiceVariablesLocal = taskService.getVariablesLocal(task.getId());</span><br><span class="line">        <span class="comment">// 根据流程获取</span></span><br><span class="line">        Map&lt;String, Object&gt; processVariables = activitiRule.getRuntimeService().getVariables(task.getExecutionId());</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"taskServiceVariables: &#123;&#125;"</span>, taskServiceVariables);             <span class="comment">// &#123;k1=v1, localK1=localV1, message=my test message&#125;</span></span><br><span class="line">        log.info(<span class="string">"taskServiceVariablesLocal: &#123;&#125;"</span>, taskServiceVariablesLocal);   <span class="comment">// &#123;localK1=localV1&#125;</span></span><br><span class="line">        log.info(<span class="string">"processVariables: &#123;&#125;"</span>, processVariables);                     <span class="comment">// &#123;k1=v1, message=my test message&#125;</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; completeVar = Maps.newHashMap();</span><br><span class="line">        completeVar.put(<span class="string">"cKey1"</span>, <span class="string">"cValue1"</span>);</span><br><span class="line">        taskService.complete(task.getId(), completeVar);</span><br><span class="line"></span><br><span class="line">        Task task1 = taskService.createTaskQuery().taskId(task.getId()).singleResult();</span><br><span class="line">        log.info(<span class="string">"task1: &#123;&#125;"</span>, task1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="日志输出-7"><a href="#日志输出-7" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>16:13:26.654 [main] [INFO] Loading XML bean definitions from class path resource [activiti.cfg.xml]  o.s.b.f.x.XmlBeanDefinitionReader.loadBeanDefinitions:31616:13:28.438 [main] [INFO] Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.  o.a.e.c.DefaultActiviti5CompatibilityHandlerFactory.createActiviti5CompatibilityHandler:3816:13:28.451 [main] [INFO] performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114716:13:28.527 [main] [INFO] performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114716:13:28.535 [main] [INFO] performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114716:13:28.541 [main] [INFO] ProcessEngine default created  o.a.e.i.ProcessEngineImpl.&lt;init&gt;:8716:13:28.793 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.796 [main] [INFO] 4 (process instance)└── 6 : start (StartEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.798 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.799 [main] [INFO] 4 (process instance)└── 6 : start (StartEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.800 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.800 [main] [INFO] 4 (process instance)└── 6 : start -&gt; someTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.802 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.802 [main] [INFO] 4 (process instance)└── 6 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.878 [main] [INFO] task: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:0,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:null,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Activiti is awesome!&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:&quot;some task my test message&quot;,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Mon Dec 03 16:13:28 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;6&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;my-process:1:3&quot;,&quot;taskDefinitionKey&quot;:&quot;someTask&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;9&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskService:3316:13:28.878 [main] [INFO] task.description: some task my test message  o.d.a.c.TaskServiceTest.testTaskService:3416:13:28.893 [main] [INFO] taskServiceVariables: {k1=v1, localK1=localV1, message=my test message}  o.d.a.c.TaskServiceTest.testTaskService:4616:13:28.893 [main] [INFO] taskServiceVariablesLocal: {localK1=localV1}  o.d.a.c.TaskServiceTest.testTaskService:4716:13:28.893 [main] [INFO] processVariables: {k1=v1, message=my test message}  o.d.a.c.TaskServiceTest.testTaskService:4816:13:28.893 [main] [INFO] 4 (process instance)└── 6 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.893 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.893 [main] [INFO] 4 (process instance)└── 6 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.893 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.893 [main] [INFO] 4 (process instance)└── 6 : someTask -&gt; end, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.893 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.893 [main] [INFO] 4 (process instance)└── 6 : end (EndEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.893 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.893 [main] [INFO] 4 (process instance)└── 6 : end (EndEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.893 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.EndExecutionOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.893 [main] [INFO] 4 (process instance)└── 6 : end (EndEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.893 [main] [INFO] task1: null  o.d.a.c.TaskServiceTest.testTaskService:55</code></pre><h4 id="5-3-1-2-TaskService-设置-Task-权限信息"><a href="#5-3-1-2-TaskService-设置-Task-权限信息" class="headerlink" title="5.3.1.2 TaskService 设置 Task 权限信息"></a>5.3.1.2 TaskService 设置 Task 权限信息</h4><ul><li>候选用户(candidateUser) 和候选组(candidateGroup)</li><li>指定拥有人(Owner)和办理人(Assignee)</li><li>通过 claim 设置办理人(发现 task 已经有指定办理人且不是 claim 指定的人就会抛出异常)</li></ul><h5 id="流程定义-1"><a href="#流程定义-1" class="headerlink" title="流程定义"></a>流程定义</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加候选人 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:candidateUsers</span>=<span class="string">"destiny,destiny1,destiny2"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加描述, message 会根据上下文中传入的 message 变量值去替换 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">documentation</span>&gt;</span></span><br><span class="line">                some task $&#123;message&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码-5"><a href="#测试代码-5" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-task.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTaskServiceUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"message"</span>, <span class="string">"my test message"</span>);</span><br><span class="line">    activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    TaskService taskService = activitiRule.getTaskService();</span><br><span class="line">    Task task = taskService.createTaskQuery().singleResult();</span><br><span class="line">    log.info(<span class="string">"task: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(task, ToStringStyle.JSON_STYLE));</span><br><span class="line">    log.info(<span class="string">"task.description: &#123;&#125;"</span>, task.getDescription());</span><br><span class="line">    taskService.setOwner(task.getId(), <span class="string">"user1"</span>);</span><br><span class="line">    <span class="comment">// 可能存在覆盖已有代办放的问题, 因此不推荐</span></span><br><span class="line">    <span class="comment">// taskService.setAssignee(task.getId(), "destiny");</span></span><br><span class="line">    <span class="comment">// 查询在候选人列表, 且未指定办理人的 task 列表</span></span><br><span class="line">    List&lt;Task&gt; taskList = taskService.createTaskQuery()</span><br><span class="line">            .taskCandidateOrAssigned(<span class="string">"destiny"</span>)</span><br><span class="line">            .taskUnassigned()</span><br><span class="line">            .listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 使用 claim 设置候选人</span></span><br><span class="line">    <span class="keyword">for</span> (Task task1 : taskList) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            taskService.claim(task1.getId(), <span class="string">"destiny"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查看当前 task 的所有用户关系内容</span></span><br><span class="line">    List&lt;IdentityLink&gt; identityLinkList = taskService.getIdentityLinksForTask(task.getId());</span><br><span class="line">    <span class="keyword">for</span> (IdentityLink identityLink : identityLinkList) &#123;</span><br><span class="line">        log.info(<span class="string">"identityLink: &#123;&#125;"</span>, identityLink);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 完成任务, 首先找到处于代办状态的所有 task</span></span><br><span class="line">    List&lt;Task&gt; destinys = taskService.createTaskQuery().taskAssignee(<span class="string">"destiny"</span>).listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (Task destiny : destinys) &#123;</span><br><span class="line">        variables.clear();</span><br><span class="line">        variables.put(<span class="string">"cKey1"</span>, <span class="string">"cValue1"</span>);</span><br><span class="line">        taskService.complete(destiny.getId(), variables);</span><br><span class="line">    &#125;</span><br><span class="line">    destinys = taskService.createTaskQuery().taskAssignee(<span class="string">"destiny"</span>).listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    log.info(<span class="string">"是否存在: &#123;&#125;"</span>, CollectionUtils.isEmpty(destinys));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="输出日志-1"><a href="#输出日志-1" class="headerlink" title="输出日志"></a>输出日志</h5><pre><code>16:41:28.534 [main] [INFO] Loading XML bean definitions from class path resource [activiti.cfg.xml]  o.s.b.f.x.XmlBeanDefinitionReader.loadBeanDefinitions:31616:41:30.373 [main] [INFO] Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.  o.a.e.c.DefaultActiviti5CompatibilityHandlerFactory.createActiviti5CompatibilityHandler:3816:41:30.385 [main] [INFO] performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114716:41:30.443 [main] [INFO] performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114716:41:30.449 [main] [INFO] performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114716:41:30.453 [main] [INFO] ProcessEngine default created  o.a.e.i.ProcessEngineImpl.&lt;init&gt;:8716:41:30.631 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.636 [main] [INFO] 4 (process instance)└── 6 : start (StartEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.638 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.638 [main] [INFO] 4 (process instance)└── 6 : start (StartEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.639 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.640 [main] [INFO] 4 (process instance)└── 6 : start -&gt; someTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.640 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.641 [main] [INFO] 4 (process instance)└── 6 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.715 [main] [INFO] task: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:0,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:null,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Activiti is awesome!&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:&quot;some task my test message&quot;,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Mon Dec 03 16:41:30 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;6&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;my-process:1:3&quot;,&quot;taskDefinitionKey&quot;:&quot;someTask&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;9&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskServiceUser:6916:41:30.715 [main] [INFO] task.description: some task my test message  o.d.a.c.TaskServiceTest.testTaskServiceUser:7016:41:30.739 [main] [INFO] identityLink: IdentityLinkEntity[id=10, type=candidate, userId=destiny, taskId=9]  o.d.a.c.TaskServiceTest.testTaskServiceUser:9416:41:30.740 [main] [INFO] identityLink: IdentityLinkEntity[id=12, type=candidate, userId=destiny1, taskId=9]  o.d.a.c.TaskServiceTest.testTaskServiceUser:9416:41:30.740 [main] [INFO] identityLink: IdentityLinkEntity[id=14, type=candidate, userId=destiny2, taskId=9]  o.d.a.c.TaskServiceTest.testTaskServiceUser:9416:41:30.740 [main] [INFO] identityLink: IdentityLinkEntity[id=null, type=assignee, userId=destiny, taskId=9]  o.d.a.c.TaskServiceTest.testTaskServiceUser:9416:41:30.740 [main] [INFO] identityLink: IdentityLinkEntity[id=null, type=owner, userId=user1, taskId=9]  o.d.a.c.TaskServiceTest.testTaskServiceUser:9416:41:30.749 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.751 [main] [INFO] 4 (process instance)└── 6 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.752 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.753 [main] [INFO] 4 (process instance)└── 6 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.754 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.754 [main] [INFO] 4 (process instance)└── 6 : someTask -&gt; end, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.755 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.755 [main] [INFO] 4 (process instance)└── 6 : end (EndEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.755 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.755 [main] [INFO] 4 (process instance)└── 6 : end (EndEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.757 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.EndExecutionOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.757 [main] [INFO] 4 (process instance)└── 6 : end (EndEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.770 [main] [INFO] 是否存在: true  o.d.a.c.TaskServiceTest.testTaskServiceUser:106</code></pre><h3 id="5-3-2-TaskService-设置-Task-附加信息"><a href="#5-3-2-TaskService-设置-Task-附加信息" class="headerlink" title="5.3.2 TaskService 设置 Task 附加信息"></a>5.3.2 TaskService 设置 Task 附加信息</h3><ul><li>任务附件(Attachment)创建与查询</li><li>任务评论(Comment)创建与查询</li><li>事件记录(Event)创建于查询</li></ul><h4 id="5-3-2-1-任务附件-Attachment-创建与查询"><a href="#5-3-2-1-任务附件-Attachment-创建与查询" class="headerlink" title="5.3.2.1 任务附件(Attachment)创建与查询"></a>5.3.2.1 任务附件(Attachment)创建与查询</h4><h5 id="流程定义-2"><a href="#流程定义-2" class="headerlink" title="流程定义"></a>流程定义</h5><p>同上</p><h4 id="测试代码-6"><a href="#测试代码-6" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-task.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTaskAttachment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"message"</span>, <span class="string">"my test message"</span>);</span><br><span class="line">    activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    TaskService taskService = activitiRule.getTaskService();</span><br><span class="line">    Task task = taskService.createTaskQuery().singleResult();</span><br><span class="line">    <span class="comment">// 可以上传数据流或 url</span></span><br><span class="line">    Attachment attachment = taskService.createAttachment(<span class="string">"url"</span>, task.getId(), task.getProcessInstanceId(), <span class="string">"name"</span>, <span class="string">"desc"</span>, <span class="string">"/url/test.png"</span>);</span><br><span class="line">    log.info(<span class="string">"attachment: &#123;&#125;"</span>, attachment);</span><br><span class="line">    List&lt;Attachment&gt; taskAttachments = taskService.getTaskAttachments(task.getId());</span><br><span class="line">    <span class="keyword">for</span> (Attachment taskAttachment : taskAttachments) &#123;</span><br><span class="line">        log.info(<span class="string">"taskAttachment: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(taskAttachment, ToStringStyle.JSON_STYLE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志输出-8"><a href="#日志输出-8" class="headerlink" title="日志输出"></a>日志输出</h4><pre><code>17:12:47.043 [main] [INFO] attachment: org.activiti.engine.impl.persistence.entity.AttachmentEntityImpl@72b16078  o.d.a.c.TaskServiceTest.testTaskAttachment:11917:12:47.050 [main] [INFO] taskAttachment: {&quot;name&quot;:&quot;name&quot;,&quot;description&quot;:&quot;desc&quot;,&quot;type&quot;:&quot;url&quot;,&quot;taskId&quot;:&quot;9&quot;,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;url&quot;:&quot;/url/test.png&quot;,&quot;contentId&quot;:null,&quot;content&quot;:null,&quot;userId&quot;:null,&quot;time&quot;:&quot;Mon Dec 03 17:12:47 CST 2018&quot;,&quot;id&quot;:&quot;16&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskAttachment:122</code></pre><h4 id="5-3-2-2-任务评论-Comment-创建与查询"><a href="#5-3-2-2-任务评论-Comment-创建与查询" class="headerlink" title="5.3.2.2 任务评论(Comment)创建与查询"></a>5.3.2.2 任务评论(Comment)创建与查询</h4><h5 id="流程定义-3"><a href="#流程定义-3" class="headerlink" title="流程定义"></a>流程定义</h5><p>同上</p><h5 id="测试代码-7"><a href="#测试代码-7" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-task.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTaskComment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"message"</span>, <span class="string">"my test message"</span>);</span><br><span class="line">    activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    TaskService taskService = activitiRule.getTaskService();</span><br><span class="line">    Task task = taskService.createTaskQuery().singleResult();</span><br><span class="line">    <span class="comment">// 添加评论</span></span><br><span class="line">    taskService.addComment(task.getId(), task.getProcessInstanceId(), <span class="string">"record note1"</span>);</span><br><span class="line">    taskService.addComment(task.getId(), task.getProcessInstanceId(), <span class="string">"record note2"</span>);</span><br><span class="line">    List&lt;Comment&gt; taskComments = taskService.getTaskComments(task.getId());</span><br><span class="line">    <span class="keyword">for</span> (Comment taskComment : taskComments) &#123;</span><br><span class="line">        log.info(<span class="string">"taskComment: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(taskComment, ToStringStyle.JSON_STYLE));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 事件记录</span></span><br><span class="line">    List&lt;Event&gt; taskEvents = taskService.getTaskEvents(task.getId());</span><br><span class="line">    <span class="keyword">for</span> (Event taskEvent : taskEvents) &#123;</span><br><span class="line">        log.info(<span class="string">"taskEvent: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(taskEvent, ToStringStyle.JSON_STYLE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="日志输出-9"><a href="#日志输出-9" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>17:05:17.107 [main] [INFO] taskComment: {&quot;type&quot;:&quot;comment&quot;,&quot;userId&quot;:null,&quot;time&quot;:&quot;Mon Dec 03 17:05:17 CST 2018&quot;,&quot;taskId&quot;:&quot;9&quot;,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;action&quot;:&quot;AddComment&quot;,&quot;message&quot;:&quot;record note2&quot;,&quot;fullMessage&quot;:&quot;record note2&quot;,&quot;id&quot;:&quot;17&quot;,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskComment:14017:05:17.107 [main] [INFO] taskComment: {&quot;type&quot;:&quot;comment&quot;,&quot;userId&quot;:null,&quot;time&quot;:&quot;Mon Dec 03 17:05:17 CST 2018&quot;,&quot;taskId&quot;:&quot;9&quot;,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;action&quot;:&quot;AddComment&quot;,&quot;message&quot;:&quot;record note1&quot;,&quot;fullMessage&quot;:&quot;record note1&quot;,&quot;id&quot;:&quot;16&quot;,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskComment:14017:05:17.109 [main] [INFO] taskEvent: {&quot;type&quot;:&quot;comment&quot;,&quot;userId&quot;:null,&quot;time&quot;:&quot;Mon Dec 03 17:05:17 CST 2018&quot;,&quot;taskId&quot;:&quot;9&quot;,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;action&quot;:&quot;AddComment&quot;,&quot;message&quot;:&quot;record note2&quot;,&quot;fullMessage&quot;:&quot;record note2&quot;,&quot;id&quot;:&quot;17&quot;,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskComment:14617:05:17.110 [main] [INFO] taskEvent: {&quot;type&quot;:&quot;comment&quot;,&quot;userId&quot;:null,&quot;time&quot;:&quot;Mon Dec 03 17:05:17 CST 2018&quot;,&quot;taskId&quot;:&quot;9&quot;,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;action&quot;:&quot;AddComment&quot;,&quot;message&quot;:&quot;record note1&quot;,&quot;fullMessage&quot;:&quot;record note1&quot;,&quot;id&quot;:&quot;16&quot;,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskComment:146</code></pre><blockquote><h5 id="Comment-和-Event-的区别"><a href="#Comment-和-Event-的区别" class="headerlink" title="Comment 和 Event 的区别"></a>Comment 和 Event 的区别</h5><p>所有对 task 的操作都会生成新的 Event 记录, comment 只是其中的一种, 比如在上例中新增 owner 或 assignee, 也会产生新的 event 记录</p></blockquote><h2 id="5-4-身份管理服务"><a href="#5-4-身份管理服务" class="headerlink" title="5.4 身份管理服务"></a>5.4 身份管理服务</h2><blockquote><p>Activiti 提供了相对比较简单的用户/用户组管理</p></blockquote><p>主要功能:</p><ul><li>管理用户(User)</li><li>管理用户组(Group)</li><li>用户与用户组的关系(Membership)(多对多关系)</li></ul><h3 id="5-4-1-创建用户-用户组-对应关系"><a href="#5-4-1-创建用户-用户组-对应关系" class="headerlink" title="5.4.1 创建用户/用户组/对应关系"></a>5.4.1 创建用户/用户组/对应关系</h3><h4 id="流程定义-4"><a href="#流程定义-4" class="headerlink" title="流程定义"></a>流程定义</h4><blockquote><p>此处不需要基于流程定义完成</p></blockquote><h4 id="测试代码-8"><a href="#测试代码-8" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentityServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule = <span class="keyword">new</span> ActivitiRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIdentity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IdentityService identityService = activitiRule.getIdentityService();</span><br><span class="line">        User user1 = identityService.newUser(<span class="string">"user1"</span>);</span><br><span class="line">        user1.setEmail(<span class="string">"destinywk@163.com"</span>);</span><br><span class="line">        User user2 = identityService.newUser(<span class="string">"user2"</span>);</span><br><span class="line">        user2.setEmail(<span class="string">"destinywk@126.com"</span>);</span><br><span class="line">        identityService.saveUser(user1);</span><br><span class="line">        identityService.saveUser(user2);</span><br><span class="line"></span><br><span class="line">        Group group1 = identityService.newGroup(<span class="string">"group1"</span>);</span><br><span class="line">        identityService.saveGroup(group1);</span><br><span class="line">        Group group2 = identityService.newGroup(<span class="string">"group2"</span>);</span><br><span class="line">        identityService.saveGroup(group2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建关系</span></span><br><span class="line">        identityService.createMembership(<span class="string">"user1"</span>, <span class="string">"group1"</span>);</span><br><span class="line">        identityService.createMembership(<span class="string">"user2"</span>, <span class="string">"group1"</span>);</span><br><span class="line">        identityService.createMembership(<span class="string">"user1"</span>, <span class="string">"group2"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = identityService.createUserQuery()</span><br><span class="line">                .memberOfGroup(<span class="string">"group1"</span>)</span><br><span class="line">                .listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            log.info(<span class="string">"user: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(user, ToStringStyle.JSON_STYLE));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Group&gt; groupList = identityService.createGroupQuery()</span><br><span class="line">                .groupMember(<span class="string">"user1"</span>).listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (Group group : groupList) &#123;</span><br><span class="line">            log.info(<span class="string">"group: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(group, ToStringStyle.JSON_STYLE));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志输出-10"><a href="#日志输出-10" class="headerlink" title="日志输出"></a>日志输出</h4><pre><code>17:37:12.982 [main] [INFO] Loading XML bean definitions from class path resource [activiti.cfg.xml]  o.s.b.f.x.XmlBeanDefinitionReader.loadBeanDefinitions:31617:37:14.894 [main] [INFO] Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.  o.a.e.c.DefaultActiviti5CompatibilityHandlerFactory.createActiviti5CompatibilityHandler:3817:37:14.910 [main] [INFO] performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114717:37:14.971 [main] [INFO] performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114717:37:14.978 [main] [INFO] performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114717:37:14.982 [main] [INFO] ProcessEngine default created  o.a.e.i.ProcessEngineImpl.&lt;init&gt;:8717:37:15.041 [main] [INFO] user: {&quot;firstName&quot;:null,&quot;lastName&quot;:null,&quot;email&quot;:&quot;destinywk@163.com&quot;,&quot;password&quot;:null,&quot;pictureByteArrayRef&quot;:&quot;ByteArrayRef[id=null, name=null, entity=null]&quot;,&quot;id&quot;:&quot;user1&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.IdentityServiceTest.testIdentity:4617:37:15.042 [main] [INFO] user: {&quot;firstName&quot;:null,&quot;lastName&quot;:null,&quot;email&quot;:&quot;destinywk@126.com&quot;,&quot;password&quot;:null,&quot;pictureByteArrayRef&quot;:&quot;ByteArrayRef[id=null, name=null, entity=null]&quot;,&quot;id&quot;:&quot;user2&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.IdentityServiceTest.testIdentity:4617:37:15.048 [main] [INFO] group: {&quot;name&quot;:null,&quot;type&quot;:null,&quot;id&quot;:&quot;group1&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.IdentityServiceTest.testIdentity:5217:37:15.048 [main] [INFO] group: {&quot;name&quot;:null,&quot;type&quot;:null,&quot;id&quot;:&quot;group2&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.IdentityServiceTest.testIdentity:52</code></pre><p>身份管理服务的调用过程:</p><p><img src="https://user-images.githubusercontent.com/17758731/49366329-08018200-f724-11e8-8b70-9fb9f4f6a6d5.png" alt="image"></p><p>会将 User 封装成一个 Command, 交由命令执行器去执行, 最后调用 MyBatis 底层接口去操作 DB</p><h2 id="5-5-表单管理服务-FormService"><a href="#5-5-表单管理服务-FormService" class="headerlink" title="5.5 表单管理服务 FormService"></a>5.5 表单管理服务 FormService</h2><p>功能:</p><ul><li>解析流程定义中表单项的配置</li><li>提供提交表单的方式驱动用户节点流转</li><li>获取自定义外部表单 key</li></ul><h3 id="5-5-1"><a href="#5-5-1" class="headerlink" title="5.5.1"></a>5.5.1</h3><h4 id="流程定义-5"><a href="#流程定义-5" class="headerlink" title="流程定义"></a>流程定义</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span> <span class="attr">activiti:formKey</span>=<span class="string">"/rest/process/form/start"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置表单项 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">name</span>=<span class="string">"信息"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">required</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:formKey</span>=<span class="string">"/rest/process/form/userTask"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置表单项 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"yesOrNo"</span> <span class="attr">name</span>=<span class="string">"审批"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">required</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码-9"><a href="#测试代码-9" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule = <span class="keyword">new</span> ActivitiRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-form.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFormService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FormService formService = activitiRule.getFormService();</span><br><span class="line">        <span class="comment">// 获取流程定义文件</span></span><br><span class="line">        ProcessDefinition processDefinition = activitiRule.getRepositoryService().createProcessDefinitionQuery().singleResult();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 startForm 的 key 和 data</span></span><br><span class="line">        String startFormKey = formService.getStartFormKey(processDefinition.getId());</span><br><span class="line">        log.info(<span class="string">"startFormKey: &#123;&#125;"</span>, startFormKey);</span><br><span class="line">        StartFormData startFormData = formService.getStartFormData(processDefinition.getId());</span><br><span class="line">        log.info(<span class="string">"startFormKey: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(startFormData, ToStringStyle.JSON_STYLE));</span><br><span class="line">        <span class="keyword">for</span> (FormProperty startFormProperty : startFormData.getFormProperties()) &#123;</span><br><span class="line">            log.info(<span class="string">"startFormProperty: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(startFormProperty, ToStringStyle.JSON_STYLE));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动流程</span></span><br><span class="line">        Map&lt;String, String&gt; properties = Maps.newHashMap();</span><br><span class="line">        properties.put(<span class="string">"message"</span>, <span class="string">"my test message"</span>);</span><br><span class="line">        formService.submitStartFormData(processDefinition.getId(), properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询 task</span></span><br><span class="line">        Task task = activitiRule.getTaskService().createTaskQuery().singleResult();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 taskForm 的 data</span></span><br><span class="line">        TaskFormData taskFormData = formService.getTaskFormData(task.getId());</span><br><span class="line">        log.info(<span class="string">"taskFormData: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(taskFormData, ToStringStyle.JSON_STYLE));</span><br><span class="line">        <span class="keyword">for</span> (FormProperty taskFormProperty : taskFormData.getFormProperties()) &#123;</span><br><span class="line">            log.info(<span class="string">"taskFormProperty: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(taskFormProperty, ToStringStyle.JSON_STYLE));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志输出-11"><a href="#日志输出-11" class="headerlink" title="日志输出"></a>日志输出</h4><pre><code>18:15:27.539 [main] [INFO] startFormKey: /rest/process/form/start  o.d.a.c.FormServiceTest.testFormService:3618:15:27.547 [main] [INFO] startFormKey: {&quot;processDefinition&quot;:&quot;ProcessDefinitionEntity[my-process:1:3]&quot;,&quot;formKey&quot;:&quot;/rest/process/form/start&quot;,&quot;deploymentId&quot;:&quot;1&quot;,&quot;formProperties&quot;:[org.activiti.engine.impl.form.FormPropertyImpl@3bde62ff]}  o.d.a.c.FormServiceTest.testFormService:3818:15:27.547 [main] [INFO] startFormProperty: {&quot;id&quot;:&quot;message&quot;,&quot;name&quot;:&quot;信息&quot;,&quot;type&quot;:&quot;org.activiti.engine.impl.form.StringFormType@2baa8d82&quot;,&quot;isRequired&quot;:true,&quot;isReadable&quot;:true,&quot;isWritable&quot;:true,&quot;value&quot;:null}  o.d.a.c.FormServiceTest.testFormService:4018:15:27.561 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3318:15:27.564 [main] [INFO] 4 (process instance)└── 5 : start (StartEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3418:15:27.565 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3318:15:27.566 [main] [INFO] 4 (process instance)└── 5 : start (StartEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3418:15:27.567 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3318:15:27.567 [main] [INFO] 4 (process instance)└── 5 : start -&gt; someTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3418:15:27.568 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3318:15:27.568 [main] [INFO] 4 (process instance)└── 5 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3418:15:27.602 [main] [INFO] taskFormData: {&quot;task&quot;:&quot;Task[id=10, name=Activiti is awesome!]&quot;,&quot;formKey&quot;:&quot;/rest/process/form/userTask&quot;,&quot;deploymentId&quot;:&quot;1&quot;,&quot;formProperties&quot;:[org.activiti.engine.impl.form.FormPropertyImpl@4e4efc1b]}  o.d.a.c.FormServiceTest.testFormService:5318:15:27.602 [main] [INFO] taskFormProperty: {&quot;id&quot;:&quot;yesOrNo&quot;,&quot;name&quot;:&quot;审批&quot;,&quot;type&quot;:&quot;org.activiti.engine.impl.form.StringFormType@2baa8d82&quot;,&quot;isRequired&quot;:true,&quot;isReadable&quot;:true,&quot;isWritable&quot;:true,&quot;value&quot;:null}  o.d.a.c.FormServiceTest.testFormService:55</code></pre><h2 id="5-6-HistoryService-历史数据管理服务"><a href="#5-6-HistoryService-历史数据管理服务" class="headerlink" title="5.6 HistoryService 历史数据管理服务"></a>5.6 HistoryService 历史数据管理服务</h2><p>作用:</p><ul><li>管理流程实例哦结束后的历史数据</li><li>构建历史数据的查询对象</li><li>根据流程实例 id 删除流程历史数据</li></ul><table><thead><tr><th>历史数据实体</th><th>描述</th></tr></thead><tbody><tr><td>HistoricProcessInstance</td><td>历史流程实例实体类</td></tr><tr><td>HistoricVariableInstance</td><td>流程或任务变量值的实体</td></tr><tr><td>HistoricActivityInstance</td><td>单个活动节点执行的信息</td></tr><tr><td>HistoricTaskInstance</td><td>用户任务实例的信息</td></tr><tr><td>HistoricDetail</td><td>历史流程活动任务详细信息</td></tr></tbody></table><ul><li>HistoryService 构建历史查询对象:<ul><li>create<code>[历史数据实体]</code>Query</li><li>createNative<code>[历史数据实体]</code>Query</li><li>createProcessInstanceHistoryLogQuery: 只能查出一个流程实例的一个对象, 每次只能查出一条记录, 包含流程实体所有的其他数据, 包括task, Activiti, comment 等信息</li></ul></li><li>HistoryService 删除历史操作<ul><li>deleteHistoricProcessInstance, 采用级联操作, 删除与流程实例相关的所有历史信息</li><li>deleteHistoricTaskInstance, 范围相对较小, 只删除 Task 及 Task 相关的变量</li></ul></li></ul><h2 id="5-7-ManagementService-管理服务"><a href="#5-7-ManagementService-管理服务" class="headerlink" title="5.7 ManagementService 管理服务"></a>5.7 ManagementService 管理服务</h2><p>作用:</p><ul><li>Job 任务管理</li><li>数据库相关通用操作</li><li>执行流程引擎命令(Command)</li></ul><h3 id="5-7-1-Job-任务管理"><a href="#5-7-1-Job-任务管理" class="headerlink" title="5.7.1 Job 任务管理"></a>5.7.1 Job 任务管理</h3><table><thead><tr><th>工作查询对象</th><th>描述</th></tr></thead><tbody><tr><td>JobQuery</td><td>查询一般工作</td></tr><tr><td>TimerJobQuery</td><td>查询定时任务</td></tr><tr><td>SuspendedKobQUery</td><td>查询中断工作</td></tr><tr><td>DeadLetterJobQuery</td><td>查询无法执行的工作(一般重试三次)</td></tr></tbody></table><h3 id="5-7-2-数据库相关操作"><a href="#5-7-2-数据库相关操作" class="headerlink" title="5.7.2 数据库相关操作"></a>5.7.2 数据库相关操作</h3><ul><li>查询表结构元数据</li><li>通用表查询</li><li>执行自定义的 sql 查询</li></ul><h2 id="5-8-DynamicBpmnService-动态流程定义服务"><a href="#5-8-DynamicBpmnService-动态流程定义服务" class="headerlink" title="5.8 DynamicBpmnService 动态流程定义服务"></a>5.8 DynamicBpmnService 动态流程定义服务</h2><blockquote><p>不推荐使用</p></blockquote><h1 id="6-数据库设计和模型映射"><a href="#6-数据库设计和模型映射" class="headerlink" title="6 数据库设计和模型映射"></a>6 数据库设计和模型映射</h1><table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td><code>ACT_GE_*</code></td><td>通用数据表</td></tr><tr><td><code>ACT_RE_*</code></td><td>流程定义存储表</td></tr><tr><td><code>ACT_ID_*</code></td><td>身份信息表</td></tr><tr><td><code>ACT_RU_*</code></td><td>运行时数据库表</td></tr><tr><td><code>ACT_HI_*</code></td><td>历史数据库表</td></tr></tbody></table><h2 id="6-1-MySql-建表语句"><a href="#6-1-MySql-建表语句" class="headerlink" title="6.1 MySql 建表语句"></a>6.1 MySql 建表语句</h2><blockquote><p>除了核心引擎是必选的, 其他两个不是必须的</p></blockquote><ul><li>核心引擎: activiti.mysql.create.engine.sql</li><li>历史数据: activiti.mysql.create.history.sql</li><li>身份信息: activiti.mysql.create.identity.sql</li></ul><h3 id="6-1-1-通用数据库"><a href="#6-1-1-通用数据库" class="headerlink" title="6.1.1 通用数据库"></a>6.1.1 通用数据库</h3><table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td>ACT_GE_PROPERTY</td><td>属性表(保存流程引擎的 key-value 键值属性)</td></tr><tr><td>ACT_GE_BYTEARRAY</td><td>资源表(存储流程定义相关的资源)</td></tr></tbody></table><h1 id="7-BPMN2-0-概述"><a href="#7-BPMN2-0-概述" class="headerlink" title="7 BPMN2.0 概述"></a>7 BPMN2.0 概述</h1><ul><li>是一套业务流程模型与符号建模标准</li><li>精准的执行语义来描述元素的操作</li><li>以 XML 为载体, 以符号可视化业务</li></ul><p>BPMN2.0元素:</p><ul><li>流对象</li><li>连接对象</li><li>数据</li><li>泳道</li><li>描述对象</li></ul><p><img src="https://user-images.githubusercontent.com/17758731/49372749-a26ac100-f736-11e8-89f1-b01d14fa6f1d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/17758731/49372819-d0e89c00-f736-11e8-984f-34464892a1b9.png" alt="image"></p><h2 id="7-1-流对象"><a href="#7-1-流对象" class="headerlink" title="7.1 流对象"></a>7.1 流对象</h2><ul><li>活动(Activities): User Task, Service Task…</li><li>事件(Events): Start Event, End Event…</li><li>网关(Gateway): Exclusive Gateway…</li></ul><h1 id="8-Activiti-集成-Spring-Boot"><a href="#8-Activiti-集成-Spring-Boot" class="headerlink" title="8 Activiti 集成 Spring Boot"></a>8 Activiti 集成 Spring Boot</h1><p>Activiti6.0 依赖的 SpringBoot 版本是 1.2.6</p><p>如果直接与 SpringBoot 2.0.0 集成的话, 会出现 ClassNotFound 等问题</p><p>因此在集成 SpringBoot 2.0.0 的时候, 需要 Activiti6.0 源码进行部分改动</p><p>升级 Activiti 6.0 依赖 SpringBoot 版本为 2.0.0 的改动</p><ul><li>升级 SpringBoot 依赖并解决编译错误</li><li>更新 activiti-spring-boot-starter-basic 版本并安装</li><li>集成使用 Activiti 的 AutoConfiguration 功能</li></ul><p>如果直接将 SpringBoot 2.0.0 和 activiti-spring-boot-starter-basic 6.0.0 集成, 会发生如下错误:</p><pre><code>java.lang.IllegalStateException: Failed to load ApplicationContextCaused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;documentationPluginsBootstrapper&apos; defined in URL [jar:file:/Users/destiny/.m2/repository/io/springfox/springfox-spring-web/2.8.0/springfox-spring-web-2.8.0.jar!/springfox/documentation/spring/web/plugins/DocumentationPluginsBootstrapper.class]: Unsatisfied dependency expressed through constructor parameter 1; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;webMvcRequestHandlerProvider&apos; defined in URL [jar:file:/Users/destiny/.m2/repository/io/springfox/springfox-spring-web/2.8.0/springfox-spring-web-2.8.0.jar!/springfox/documentation/spring/web/plugins/WebMvcRequestHandlerProvider.class]: Unsatisfied dependency expressed through constructor parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;requestMappingHandlerMapping&apos; defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Invocation of init method failed; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy...Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;webMvcRequestHandlerProvider&apos; defined in URL [jar:file:/Users/destiny/.m2/repository/io/springfox/springfox-spring-web/2.8.0/springfox-spring-web-2.8.0.jar!/springfox/documentation/spring/web/plugins/WebMvcRequestHandlerProvider.class]: Unsatisfied dependency expressed through constructor parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;requestMappingHandlerMapping&apos; defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Invocation of init method failed; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy...Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;requestMappingHandlerMapping&apos; defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Invocation of init method failed; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy...Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy...</code></pre><p>真正的原因是对应的类无法找到</p><h2 id="8-1-修改-activiti-源码以适应-SpringBoot-2-0-0-版本升级"><a href="#8-1-修改-activiti-源码以适应-SpringBoot-2-0-0-版本升级" class="headerlink" title="8.1 修改 activiti 源码以适应 SpringBoot 2.0.0 版本升级"></a>8.1 修改 activiti 源码以适应 SpringBoot 2.0.0 版本升级</h2><h3 id="8-1-1-将-activiti-中-SpringBoot-依赖升级到-2-0-0"><a href="#8-1-1-将-activiti-中-SpringBoot-依赖升级到-2-0-0" class="headerlink" title="8.1.1 将 activiti 中 SpringBoot 依赖升级到 2.0.0"></a>8.1.1 将 activiti 中 SpringBoot 依赖升级到 2.0.0</h3><p>修改 Activiti 源码中 <code>modules/activiti-spring-boot/pom.xml</code> pom 文件, 将其中 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>1.2.6.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后重新编译源码, 此时以下几个类会报错</p><h4 id="8-1-1-1-org-activiti-spring-boot-actuate-endpoint-ProcessEngineEndpoint"><a href="#8-1-1-1-org-activiti-spring-boot-actuate-endpoint-ProcessEngineEndpoint" class="headerlink" title="8.1.1.1 org.activiti.spring.boot.actuate.endpoint.ProcessEngineEndpoint"></a>8.1.1.1 <code>org.activiti.spring.boot.actuate.endpoint.ProcessEngineEndpoint</code></h4><p><img src="https://user-images.githubusercontent.com/17758731/49379804-fe3f4500-f74a-11e8-85f2-8c8b58390f6d.png" alt="image"></p><blockquote><p>主要的问题是 SpringBoot 从 1 升级到 2 的时候, 对 EndPoint 的使用方式发生了改变:<br>1.x 是继承一个抽象类 AbstractEndpoint<br>2.x 修改为使用对应的注解</p></blockquote><p>修改后的源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.activiti.spring.boot.actuate.endpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.ProcessEngine;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.persistence.deploy.DefaultDeploymentCache;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.persistence.deploy.DeploymentCache;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.persistence.deploy.ProcessDefinitionCacheEntry;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.repository.ProcessDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.endpoint.annotation.Endpoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.endpoint.annotation.ReadOperation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers a Boot Actuator endpoint that provides information on the</span></span><br><span class="line"><span class="comment"> * running process instance and renders BPMN diagrams of the deployed processes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Long</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@ConfigurationProperties(prefix = "endpoints.activiti")</span></span><br><span class="line"><span class="meta">@Endpoint</span>(id = <span class="string">"activiti"</span>)                  <span class="comment">// 使用注解 Endpoint</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessEngineEndpoint</span> </span>&#123;        <span class="comment">// 不再继承 AbstractEndpoint</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProcessEngine processEngine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProcessEngineEndpoint</span><span class="params">(ProcessEngine processEngine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processEngine = processEngine; <span class="comment">// 不再继承 Endpoint, 因此不需要调用 super 构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOperation</span>                          <span class="comment">// 不需要 @Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">activiti</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; metrics = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process definitions</span></span><br><span class="line">        metrics.put(<span class="string">"processDefinitionCount"</span>, processEngine.getRepositoryService().createProcessDefinitionQuery().count());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// List of all process definitions</span></span><br><span class="line">        List&lt;ProcessDefinition&gt; processDefinitions = processEngine.getRepositoryService().createProcessDefinitionQuery().orderByProcessDefinitionKey().asc().list();</span><br><span class="line">        List&lt;String&gt; processDefinitionKeys = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ProcessDefinition processDefinition : processDefinitions) &#123;</span><br><span class="line">            processDefinitionKeys.add(processDefinition.getKey() + <span class="string">" (v"</span> + processDefinition.getVersion() + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        metrics.put(<span class="string">"deployedProcessDefinitions"</span>, processDefinitionKeys);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process instances</span></span><br><span class="line">        Map&lt;String, Object&gt; processInstanceCountMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        metrics.put(<span class="string">"runningProcessInstanceCount"</span>, processInstanceCountMap);</span><br><span class="line">        <span class="keyword">for</span> (ProcessDefinition processDefinition : processDefinitions) &#123;</span><br><span class="line">            processInstanceCountMap.put(processDefinition.getKey() + <span class="string">" (v"</span> + processDefinition.getVersion() + <span class="string">")"</span>,</span><br><span class="line">                    processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).count());</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; completedProcessInstanceCountMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        metrics.put(<span class="string">"completedProcessInstanceCount"</span>, completedProcessInstanceCountMap);</span><br><span class="line">        <span class="keyword">for</span> (ProcessDefinition processDefinition : processDefinitions) &#123;</span><br><span class="line">            completedProcessInstanceCountMap.put(processDefinition.getKey() + <span class="string">" (v"</span> + processDefinition.getVersion() + <span class="string">")"</span>,</span><br><span class="line">                    processEngine.getHistoryService().createHistoricProcessInstanceQuery().finished().processDefinitionId(processDefinition.getId()).count());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Open tasks</span></span><br><span class="line">        metrics.put(<span class="string">"openTaskCount"</span>, processEngine.getTaskService().createTaskQuery().count());</span><br><span class="line">        metrics.put(<span class="string">"completedTaskCount"</span>, processEngine.getHistoryService().createHistoricTaskInstanceQuery().finished().count());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tasks completed today</span></span><br><span class="line">        metrics.put(<span class="string">"completedTaskCountToday"</span>, processEngine.getHistoryService().createHistoricTaskInstanceQuery().finished().taskCompletedAfter(</span><br><span class="line">                <span class="keyword">new</span> Date(System.currentTimeMillis() - secondsForDays(<span class="number">1</span>))).count());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process steps</span></span><br><span class="line">        metrics.put(<span class="string">"completedActivities"</span>, processEngine.getHistoryService().createHistoricActivityInstanceQuery().finished().count());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process definition cache</span></span><br><span class="line">        DeploymentCache&lt;ProcessDefinitionCacheEntry&gt; deploymentCache = ((ProcessEngineConfigurationImpl) processEngine.getProcessEngineConfiguration()).getProcessDefinitionCache();</span><br><span class="line">        <span class="keyword">if</span> (deploymentCache <span class="keyword">instanceof</span> DefaultDeploymentCache) &#123;</span><br><span class="line">            metrics.put(<span class="string">"cachedProcessDefinitionCount"</span>, ((DefaultDeploymentCache) deploymentCache).size());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> metrics;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">secondsForDays</span><span class="params">(<span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hour = <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span> day = <span class="number">24</span> * hour;</span><br><span class="line">        <span class="keyword">return</span> days * day;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-1-2-org-activiti-spring-boot-actuate-endpoint-ProcessEngineMvcEndpoint"><a href="#8-1-1-2-org-activiti-spring-boot-actuate-endpoint-ProcessEngineMvcEndpoint" class="headerlink" title="8.1.1.2 org.activiti.spring.boot.actuate.endpoint.ProcessEngineMvcEndpoint"></a>8.1.1.2 <code>org.activiti.spring.boot.actuate.endpoint.ProcessEngineMvcEndpoint</code></h4><p><img src="https://user-images.githubusercontent.com/17758731/49380305-5a569900-f74c-11e8-8e35-ea7325e21a8d.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.activiti.spring.boot.actuate.endpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.bpmn.BpmnAutoLayout;</span><br><span class="line"><span class="keyword">import</span> org.activiti.bpmn.model.BpmnModel;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.RepositoryService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.repository.ProcessDefinition;</span><br><span class="line"><span class="keyword">import</span> org.activiti.image.ProcessDiagramGenerator;</span><br><span class="line"><span class="keyword">import</span> org.activiti.image.impl.DefaultProcessDiagramGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.InputStreamResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Renders a valid running BPMN process definition as a BPMN diagram.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This is duplicative of the functionality in the full REST API implementation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joram Barrez</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Long</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessEngineMvcEndpoint</span> </span>&#123;                 <span class="comment">// 同样不再继承 EndpointMvcAdapter</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RepositoryService repositoryService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProcessEngineEndpoint processEngineEndpoint;  <span class="comment">// 创建一个 ProcessEngineEndpoint 私有变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProcessEngineMvcEndpoint</span><span class="params">(ProcessEngineEndpoint processEngineEndpoint, RepositoryService repositoryService)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super(processEngineEndpoint);</span></span><br><span class="line">        <span class="keyword">this</span>.processEngineEndpoint = processEngineEndpoint;</span><br><span class="line">        <span class="keyword">this</span>.repositoryService = repositoryService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Look up the process definition by key. For example,</span></span><br><span class="line"><span class="comment">     * this is &lt;A href="http://localhost:8080/activiti/processes/fulfillmentProcess"&gt;process-diagram for&lt;/A&gt;</span></span><br><span class="line"><span class="comment">     * a process definition named &#123;<span class="doctag">@code</span> fulfillmentProcess&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/processes/&#123;processDefinitionKey:.*&#125;"</span>, method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">processDefinitionDiagram</span><span class="params">(@PathVariable String processDefinitionKey)</span> </span>&#123;</span><br><span class="line">      ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()</span><br><span class="line">              .processDefinitionKey(processDefinitionKey)</span><br><span class="line">              .latestVersion()</span><br><span class="line">              .singleResult();</span><br><span class="line">      <span class="keyword">if</span> (processDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ProcessDiagramGenerator processDiagramGenerator = <span class="keyword">new</span> DefaultProcessDiagramGenerator();</span><br><span class="line">      BpmnModel bpmnModel = repositoryService.getBpmnModel(processDefinition.getId());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (bpmnModel.getLocationMap().size() == <span class="number">0</span>) &#123;</span><br><span class="line">          BpmnAutoLayout autoLayout = <span class="keyword">new</span> BpmnAutoLayout(bpmnModel);</span><br><span class="line">          autoLayout.execute();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      InputStream is = processDiagramGenerator.generateJpgDiagram(bpmnModel);</span><br><span class="line">      <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> InputStreamResource(is));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-1-3-org-activiti-spring-boot-EndpointAutoConfiguration"><a href="#8-1-1-3-org-activiti-spring-boot-EndpointAutoConfiguration" class="headerlink" title="8.1.1.3 org.activiti.spring.boot.EndpointAutoConfiguration"></a>8.1.1.3 <code>org.activiti.spring.boot.EndpointAutoConfiguration</code></h4><p><img src="https://user-images.githubusercontent.com/17758731/49380552-f4b6dc80-f74c-11e8-88b1-dd29cba005e1.png" alt="image"></p><blockquote><p>报错原因: SpringBoot2 不再使用 AbstractEndpoint<br>开启该表达式 AutoConfiguration 不会生效, 因此需要删除</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.activiti.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.ProcessEngine;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.RepositoryService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.spring.boot.actuate.endpoint.ProcessEngineEndpoint;</span><br><span class="line"><span class="keyword">import</span> org.activiti.spring.boot.actuate.endpoint.ProcessEngineMvcEndpoint;</span><br><span class="line"><span class="comment">//import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The idea behind this module is that Spring Security could</span></span><br><span class="line"><span class="comment"> * talk to the &#123;<span class="doctag">@link</span> org.activiti.engine.IdentityService&#125;</span></span><br><span class="line"><span class="comment"> * as required.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Long</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ConditionalOnClass (name = "org.springframework.boot.actuate.endpoint.AbstractEndpoint")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EndpointAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProcessEngineEndpoint <span class="title">processEngineEndpoint</span><span class="params">(ProcessEngine engine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProcessEngineEndpoint(engine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProcessEngineMvcEndpoint <span class="title">processEngineMvcEndpoint</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ProcessEngineEndpoint engineEndpoint, RepositoryService repositoryService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProcessEngineMvcEndpoint(engineEndpoint, repositoryService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-1-4-org-activiti-spring-boot-DataSourceProcessEngineAutoConfiguration"><a href="#8-1-1-4-org-activiti-spring-boot-DataSourceProcessEngineAutoConfiguration" class="headerlink" title="8.1.1.4 org.activiti.spring.boot.DataSourceProcessEngineAutoConfiguration"></a>8.1.1.4 <code>org.activiti.spring.boot.DataSourceProcessEngineAutoConfiguration</code></h4><p><img src="https://user-images.githubusercontent.com/17758731/49381205-5cb9f280-f74e-11e8-8a49-e2ced833c6b2.png" alt="image"></p><blockquote><p>报错原因: ConditionalOnMissingClass 注解中的 name 已经不能使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.activiti.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.spring.SpringAsyncExecutor;</span><br><span class="line"><span class="keyword">import</span> org.activiti.spring.SpringProcessEngineConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joram Barrez</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Long</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(DataSourceAutoConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProcessEngineAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//  @ConditionalOnMissingClass(name= "javax.persistence.EntityManagerFactory")</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingClass</span>(value= <span class="string">"javax.persistence.EntityManagerFactory"</span>)   <span class="comment">// 将 name 替换为 value</span></span><br><span class="line">  <span class="meta">@EnableConfigurationProperties</span>(ActivitiProperties.class)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProcessEngineConfiguration</span> <span class="keyword">extends</span> <span class="title">AbstractProcessEngineAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringProcessEngineConfiguration <span class="title">springProcessEngineConfiguration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            DataSource dataSource,</span></span></span><br><span class="line"><span class="function"><span class="params">            PlatformTransactionManager transactionManager,</span></span></span><br><span class="line"><span class="function"><span class="params">            SpringAsyncExecutor springAsyncExecutor)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.baseSpringProcessEngineConfiguration(dataSource, transactionManager, springAsyncExecutor);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-1-4-org-activiti-spring-boot-SecurityAutoConfiguration"><a href="#8-1-1-4-org-activiti-spring-boot-SecurityAutoConfiguration" class="headerlink" title="8.1.1.4 org.activiti.spring.boot.SecurityAutoConfiguration"></a>8.1.1.4 <code>org.activiti.spring.boot.SecurityAutoConfiguration</code></h4><p><img src="https://user-images.githubusercontent.com/17758731/49381360-aa365f80-f74e-11e8-8e61-c70b2fa462ea.png" alt="image"></p><blockquote><p>报错原因: 包结构发生改变, 导致原有的类全路径不可用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.activiti.engine.IdentityService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.rest.security.BasicAuthenticationProvider;</span><br><span class="line"><span class="keyword">import</span> org.activiti.spring.security.IdentityServiceUserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureBefore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.configurers.GlobalAuthenticationConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Installs a Spring Security adapter for the Activiti</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.activiti.engine.IdentityService&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Long</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@AutoConfigureBefore(org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore</span>(org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration.class)   <span class="comment">// 修改类路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>( UserDetailsService.class)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceConfiguration</span></span></span><br><span class="line"><span class="class">          <span class="keyword">extends</span> <span class="title">GlobalAuthenticationConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      auth.userDetailsService( userDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> IdentityServiceUserDetailsService(<span class="keyword">this</span>.identityService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IdentityService identityService;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(name = &#123;<span class="string">"org.activiti.rest.service.api.RestUrls"</span>, <span class="string">"org.springframework.web.servlet.DispatcherServlet"</span>&#125;)</span><br><span class="line">  <span class="meta">@EnableWebSecurity</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationProvider <span class="title">authenticationProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BasicAuthenticationProvider();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      http</span><br><span class="line">        .authenticationProvider(authenticationProvider())</span><br><span class="line">        .csrf().disable()</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">          .anyRequest().authenticated()</span><br><span class="line">          .and()</span><br><span class="line">        .httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-对-Activiti-版本做更改"><a href="#8-2-对-Activiti-版本做更改" class="headerlink" title="8.2 对 Activiti 版本做更改"></a>8.2 对 Activiti 版本做更改</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starters<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starter-basic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在此处新增版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-boot2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;properties&gt; &lt;spring.framework.version&gt;4.1.4.RELEASE&lt;/spring.framework.version&gt; </span></span><br><span class="line"><span class="comment">&lt;/properties&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>尝试执行 <code>mvn clean install</code></p><p>此时 maven 会去尝试下载 <code>6.0.0-boot2</code> 版本, 但显然公网仓库中不会存在</p><pre><code>[INFO] Scanning for projects...[INFO] [INFO] ----------&lt; org.activiti:activiti-spring-boot-starter-basic &gt;-----------[INFO] Building activiti-spring-boot-starter-basic 6.0.0-boot2[INFO] --------------------------------[ jar ]---------------------------------[WARNING] The POM for org.activiti:activiti-engine:jar:6.0.0-boot2 is missing, no dependency information available[WARNING] The POM for org.activiti:activiti-spring:jar:6.0.0-boot2 is missing, no dependency information available[WARNING] The POM for org.activiti:activiti-rest:jar:6.0.0-boot2 is missing, no dependency information available[WARNING] The POM for org.activiti:activiti-common-rest:jar:6.0.0-boot2 is missing, no dependency information available[WARNING] The POM for org.activiti:activiti-image-generator:jar:6.0.0-boot2 is missing, no dependency information available[WARNING] The POM for org.activiti:activiti-bpmn-model:jar:6.0.0-boot2 is missing, no dependency information available[WARNING] The POM for org.activiti:activiti-bpmn-layout:jar:6.0.0-boot2 is missing, no dependency information available[INFO] ------------------------------------------------------------------------[INFO] BUILD FAILURE[INFO] ------------------------------------------------------------------------[INFO] Total time:  0.850 s[INFO] Finished at: 2018-12-03T23:15:57+08:00[INFO] ------------------------------------------------------------------------[ERROR] Failed to execute goal on project activiti-spring-boot-starter-basic: Could not resolve dependencies for project org.activiti:activiti-spring-boot-starter-basic:jar:6.0.0-boot2: The following artifacts could not be resolved: org.activiti:activiti-engine:jar:6.0.0-boot2, org.activiti:activiti-spring:jar:6.0.0-boot2, org.activiti:activiti-rest:jar:6.0.0-boot2, org.activiti:activiti-common-rest:jar:6.0.0-boot2, org.activiti:activiti-image-generator:jar:6.0.0-boot2, org.activiti:activiti-bpmn-model:jar:6.0.0-boot2, org.activiti:activiti-bpmn-layout:jar:6.0.0-boot2: Failure to find org.activiti:activiti-engine:jar:6.0.0-boot2 in http://maven.aliyun.com/nexus/content/groups/public was cached in the local repository, resolution will not be reattempted until the update interval of nexus-aliyun has elapsed or updates are forced -&gt; [Help 1][ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.[ERROR] Re-run Maven using the -X switch to enable full debug logging.[ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles:[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException</code></pre><blockquote><p>错误原因: activiti-spring-boot-starter-basic 的版本号被修改为 6.0.0-boot2, 但安装的时候, 对应的 <code>activiti-engine</code> 版本只有 6.0.0, 并没有 <code>6.0.0-boot2</code><br>可以将所有需要找 <code>6.0.0-boot2</code> 的版本修改为去找 <code>6.0.0</code></p></blockquote><p>将根 pom 中所有的 <code>${project.version}</code> 修改为 <code>6.0.0</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前段时间入职字节跳动, 目前负责 Lark 工作流审批功能的开发, 选用工作流引擎 &lt;code&gt;Activiti&lt;/code&gt; 进行开发, 因此在此记录下对 &lt;code&gt;Activiti&lt;/code&gt; 的学习过程.&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/categories/Activiti/"/>
    
      <category term="Java" scheme="https://destinywang.github.io/blog/categories/Activiti/Java/"/>
    
      <category term="工作流" scheme="https://destinywang.github.io/blog/categories/Activiti/Java/%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
    
      <category term="Activiti" scheme="https://destinywang.github.io/blog/tags/Activiti/"/>
    
  </entry>
  
</feed>
