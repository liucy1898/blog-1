<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ElasticSearch 原理与实践</title>
      <link href="/blog/2020/04/06/ElasticSearch-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
      <url>/blog/2020/04/06/ElasticSearch-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h1 id="1-ElasticSearch-概述"><a href="#1-ElasticSearch-概述" class="headerlink" title="1. ElasticSearch 概述"></a>1. ElasticSearch 概述</h1><h2 id="1-1-生态圈"><a href="#1-1-生态圈" class="headerlink" title="1.1 生态圈"></a>1.1 生态圈</h2><p><img src="https://user-images.githubusercontent.com/17758731/78526882-fba4a200-780d-11ea-8451-2c74d3c5103c.png" alt="image"></p><table><thead><tr><th>组件</th><th>简介</th><th>特性</th></tr></thead><tbody><tr><td>Logstash</td><td>开源的服务端数据处理通道, 支持从不同来源采集和转换数据, 并将数据发送到不同的存储中, 2013 年被 ElasticSearch 收购</td><td>1. 实时解析和转换数据(从 IP 破译出地理坐标)<br>2. 可扩展(200多个插件, 日志/数据库/Arcsign/Netflow)<br>3. 可靠安全性(通过持久化保证至少送达一次, 数据加密传输)<br>4. 监控</td></tr><tr><td>Beats</td><td>轻量的数据采集器</td></tr><tr><td>Kibana</td><td>数据可视化工具, 帮助用户接口对数据的任何疑问.</td></tr><tr><td>X-Pack</td><td>商业化套件</td></tr></tbody></table><h2 id="1-2-ElasticSearch-与数据库集成"><a href="#1-2-ElasticSearch-与数据库集成" class="headerlink" title="1.2 ElasticSearch 与数据库集成"></a>1.2 ElasticSearch 与数据库集成</h2><p><img src="https://user-images.githubusercontent.com/17758731/78528025-fb59d600-7810-11ea-82fc-c69cf4a0e3e5.png" alt="image"></p><blockquote><p>在搜索场景中, ElasticSearch 可以作为存储单独使用, 但如果涉及实时读写以及事务等问题, 还是需要先写入 DB, 再通过一定的同步机制(如 BinLog)存入 ES.</p></blockquote><h2 id="1-3-指标分析-日志分析"><a href="#1-3-指标分析-日志分析" class="headerlink" title="1.3 指标分析, 日志分析"></a>1.3 指标分析, 日志分析</h2><p><img src="https://user-images.githubusercontent.com/17758731/78528881-06ae0100-7813-11ea-9557-248e135d04c3.png" alt="image"></p><p>ElasticStack 是基于 ElasticSearch, Logstash, KiBana 构建出生态系统</p><h1 id="2-安装-ElasticSearch"><a href="#2-安装-ElasticSearch" class="headerlink" title="2. 安装 ElasticSearch"></a>2. 安装 ElasticSearch</h1><h2 id="2-1-ElasticSearch-的文件目录结构"><a href="#2-1-ElasticSearch-的文件目录结构" class="headerlink" title="2.1 ElasticSearch 的文件目录结构"></a>2.1 ElasticSearch 的文件目录结构</h2><p><img src="https://user-images.githubusercontent.com/17758731/78550976-92d21f80-7837-11ea-97ce-c9015434a704.png" alt="image"></p><table><thead><tr><th>目录</th><th>配置文件</th><th>描述</th></tr></thead><tbody><tr><td>bin</td><td></td><td>脚本文件, 包括启动 ElasticSearch, 安装插件, 运行统计数据等.</td></tr><tr><td>config</td><td>elasticsearch.yml</td><td>集群配置文件, user, role based 相关配置</td></tr><tr><td>JDK</td><td></td><td>Java 运行环境</td></tr><tr><td>data</td><td>path.data</td><td>数据文件</td></tr><tr><td>lib</td><td></td><td>Java 类库</td></tr><tr><td>logs</td><td>path.log</td><td>日志文件</td></tr><tr><td>modules</td><td></td><td>包含所有 ES 模块</td></tr><tr><td>plugins</td><td></td><td>包含所有已安装插件</td></tr></tbody></table><h2 id="2-2-JVM-配置"><a href="#2-2-JVM-配置" class="headerlink" title="2.2 JVM 配置"></a>2.2 JVM 配置</h2><ul><li>JVM 相关配置在 <code>config/jvm.options</code>, ElasticSearch 默认设置是 1GB</li><li>配置建议:<ul><li>Xms 和 Xmx 设置成一样</li><li>Xmx 不要超所机器内存的 50%</li><li>Xmx 不要超过 30GB</li></ul></li></ul><h2 id="2-3-启动-ElasticSearch"><a href="#2-3-启动-ElasticSearch" class="headerlink" title="2.3 启动 ElasticSearch"></a>2.3 启动 ElasticSearch</h2><p>执行 <code>bin/elasticsearch</code></p><p><img src="https://user-images.githubusercontent.com/17758731/78551826-f446be00-7838-11ea-8630-591b1ac55581.png" alt="image"></p><p>看到对应的启动日志后在浏览器打开 <code>localhost:9200</code>, 即可返回对应 JSON:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"destiny"</span>,</span><br><span class="line">    <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</span><br><span class="line">    <span class="attr">"cluster_uuid"</span>: <span class="string">"qAoe9AV4SG-NBgIR2j3bpw"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: &#123;</span><br><span class="line">        <span class="attr">"number"</span>: <span class="string">"7.6.2"</span>,</span><br><span class="line">        <span class="attr">"build_flavor"</span>: <span class="string">"default"</span>,</span><br><span class="line">        <span class="attr">"build_type"</span>: <span class="string">"tar"</span>,</span><br><span class="line">        <span class="attr">"build_hash"</span>: <span class="string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span>,</span><br><span class="line">        <span class="attr">"build_date"</span>: <span class="string">"2020-03-26T06:34:37.794943Z"</span>,</span><br><span class="line">        <span class="attr">"build_snapshot"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"lucene_version"</span>: <span class="string">"8.4.0"</span>,</span><br><span class="line">        <span class="attr">"minimum_wire_compatibility_version"</span>: <span class="string">"6.8.0"</span>,</span><br><span class="line">        <span class="attr">"minimum_index_compatibility_version"</span>: <span class="string">"6.0.0-beta1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"tagline"</span>: <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-安装插件"><a href="#2-4-安装插件" class="headerlink" title="2.4 安装插件"></a>2.4 安装插件</h2><ul><li>查看 ElasticSearch 插件列表</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/elasticsearch-plugin list</span><br></pre></td></tr></table></figure><ul><li>安装插件:</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/elasticsearch-plugin install analysis-icu</span><br><span class="line">-&gt; Installing analysis-icu</span><br><span class="line">-&gt; Downloading analysis-icu from elastic</span><br><span class="line">[=================================================] 100%</span><br><span class="line">-&gt; Installed analysis-icu</span><br></pre></td></tr></table></figure><h2 id="2-5-本机运行多个-ElasticSearch-实例"><a href="#2-5-本机运行多个-ElasticSearch-实例" class="headerlink" title="2.5 本机运行多个 ElasticSearch 实例"></a>2.5 本机运行多个 ElasticSearch 实例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/elasticsearch -E node.name=name0 -E cluster.name=destiny -E path.data=node0_data -d</span><br><span class="line">$ ./bin/elasticsearch -E node.name=name1 -E cluster.name=destiny -E path.data=node1_data -d</span><br><span class="line">$ ./bin/elasticsearch -E node.name=name2 -E cluster.name=destiny -E path.data=node2_data -d</span><br><span class="line">$ ./bin/elasticsearch -E node.name=name3 -E cluster.name=destiny -E path.data=node3_data -d</span><br></pre></td></tr></table></figure><p>使用浏览器打开 <code>http://localhost:9200/_cat/nodes</code></p><pre><code>127.0.0.1 31 99 61 21.49   dilm * name0127.0.0.1 22 99 58 21.49   dilm - name2127.0.0.1 21 99 58 21.49   dilm - name1127.0.0.1 17 99 56 21.49   dilm - name3</code></pre><p>可以看到此时集群中有 4 个节点运行.</p><h2 id="2-6-安装-Kibana"><a href="#2-6-安装-Kibana" class="headerlink" title="2.6 安装 Kibana"></a>2.6 安装 Kibana</h2><ol><li>下载并解压缩 Kibaba</li><li>在编辑器打开 <code>config/kibana.yml</code>, 并将 <code>elasticsearch.url</code> 设置为本机的 ElasticSearch 实例</li><li>运行 <code>bin/kinana</code></li><li>在浏览器中打开 <code>http://localhost:5601</code></li></ol><p><img src="https://user-images.githubusercontent.com/17758731/78680973-bf149b80-791e-11ea-8887-4fec79518d9a.png" alt="image"></p><p>此时 Kibana 在开箱即用中准备好了三种版本样例数据, 分别是电商网站订单, 航空公司飞行记录已经交通网站日志三份样例数据. 在 Kibana 的 Dashboard 界面可以根据样例数据生成报表.</p><p>此外 Kibana 还提供了 <code>DevTools</code> 功能, 可以很方便的帮助用户在 Kibana 上执行 ElasticSearch 的 API:</p><p><img src="https://user-images.githubusercontent.com/17758731/78682078-2121d080-7920-11ea-9a3d-dffa50bc634d.png" alt="image"></p><p>dev tool 的一部分快捷键:</p><ul><li><code>cmd + /</code> (查看帮助文档)</li><li><code>cmd + option + I</code></li><li><code>cmd + option + O</code></li><li><code>cmd + option + shift + O</code></li></ul><p><img src="https://user-images.githubusercontent.com/17758731/78691662-74e5e700-792b-11ea-8298-8c7e1616818c.png" alt="image"></p><p>通过 cerebro 可以比较直观的展现 ElasticSearch 集群的名称, 节点数量, 索引树, 分片数, 文档数量以及文件总大小, 以及每个节点的健康情况.</p><h2 id="2-7-Logstash-安装与导入数据"><a href="#2-7-Logstash-安装与导入数据" class="headerlink" title="2.7 Logstash 安装与导入数据"></a>2.7 Logstash 安装与导入数据</h2><p>Logstash: 是一个灵活的数据传输和处理系统, 在beats出来之前, 还负责进行数据收集.Logstash的任务是将各种各样的数据, 经过配置转化规则, 统一化存入Elasticsearch. 使用Ruby 开发的 Logstash 在灵活性上非常出色, 不过性能一直是被诟病的问题.</p><p>由于 Logstash 在数据收集上并不出色, 而且作为 agent, 性能并不达标. elastic 发布了 <code>beats</code> 系列轻量级采集组件. 至此, elastic 形成了一个完整的生态链和技术栈, 成为大数据市场的佼佼者.</p><ol><li>下载并解压缩 <code>logstash</code></li><li>准备 <code>logstash.conf</code> 配置文件</li><li>执行 <code>bin/logstash -f logstash.conf</code></li></ol><p>下载需要导入的数据集(movies.csv):</p><p><a href="https://grouplens.org/datasets/movielens/" target="_blank" rel="noopener">MovieLens</a></p><p><img src="https://user-images.githubusercontent.com/17758731/78797005-b341db80-79e9-11ea-9d89-f976c796bf1b.png" alt="image"></p><blockquote><p>logstash.conf</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/Users/destiny/dev/logstash-7.6.2/bin/movies.csv&quot; # movies 数据所在路径</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    sincedb_path =&gt; &quot;/dev/null&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  csv &#123;</span><br><span class="line">    separator =&gt; &quot;,&quot;</span><br><span class="line">    columns =&gt; [&quot;id&quot;,&quot;content&quot;,&quot;genre&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line">    split =&gt; &#123; &quot;genre&quot; =&gt; &quot;|&quot; &#125;</span><br><span class="line">    remove_field =&gt; [&quot;path&quot;, &quot;host&quot;,&quot;@timestamp&quot;,&quot;message&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line"></span><br><span class="line">    split =&gt; [&quot;content&quot;, &quot;(&quot;]</span><br><span class="line">    add_field =&gt; &#123; &quot;title&quot; =&gt; &quot;%&#123;[content][0]&#125;&quot;&#125;</span><br><span class="line">    add_field =&gt; &#123; &quot;year&quot; =&gt; &quot;%&#123;[content][1]&#125;&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line">    convert =&gt; &#123;</span><br><span class="line">      &quot;year&quot; =&gt; &quot;integer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    strip =&gt; [&quot;title&quot;]</span><br><span class="line">    remove_field =&gt; [&quot;path&quot;, &quot;host&quot;,&quot;@timestamp&quot;,&quot;message&quot;,&quot;content&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">   elasticsearch &#123;</span><br><span class="line">     hosts =&gt; &quot;http://localhost:9200&quot; # 写入 9200 端口, 即 ElasticSearch</span><br><span class="line">     index =&gt; &quot;movies&quot;</span><br><span class="line">     document_id =&gt; &quot;%&#123;id&#125;&quot;</span><br><span class="line">   &#125;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>logstash 的进程会一直阻塞去读取指定路径的文件, 因此看到最后一条记录被导入成功后就可以手动停止.</p><h1 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2. 基本概念"></a>2. 基本概念</h1><h2 id="2-1-文档"><a href="#2-1-文档" class="headerlink" title="2.1 文档"></a>2.1 文档</h2><p>ElasticSearch 是面向文档的存储/搜索引擎, 文档是所有课搜索数据的最小单位, 可以理解为关系型数据中的一条记录, ElasticSearch 中的文档可以是:</p><ul><li>日志文件中的日志项</li><li>一部电影/一张唱片的详细信息</li><li>一篇 PDF 的内容等</li></ul><p>文档会被序列化成 JSON 格式保存在 ElasticSearch 中</p><ul><li>JSON 对象由字段组成</li><li>每个字段都有对应的类型(string/number/bool/date/object/array)</li></ul><p>每个文档都有一个 uniqueId, 可以自己指定, 也可以直接由 ElasticSearch 生成.</p><p>文档中包含了一系列的字段, 类似数据库中的一条记录, 字段的类型可以指定或者通过 ElasticSearch 自动推算, 如之前的 movielens 数据经过 logstash 转化后会变成如下格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movieId,title,genres</span><br><span class="line">1,Toy Story (1995), Adventure|Animation|Children|Comedy|Fantasy</span><br></pre></td></tr></table></figure><p>转换后:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span>: <span class="string">"movies"</span>,</span><br><span class="line">    <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"_score"</span>: <span class="number">14.69302</span>,</span><br><span class="line">    <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"year"</span>: <span class="number">1995</span>,</span><br><span class="line">        <span class="attr">"@version"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"genre"</span>: [</span><br><span class="line">            <span class="string">"Adventure"</span>,</span><br><span class="line">            <span class="string">"Animation"</span>,</span><br><span class="line">            <span class="string">"Children"</span>,</span><br><span class="line">            <span class="string">"Comedy"</span>,</span><br><span class="line">            <span class="string">"Fantasy"</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"Toy Story"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了输入的数据外还有一部分元数据用于标注文档的相关信息:</p><table><thead><tr><th>元数据</th><th>功能</th></tr></thead><tbody><tr><td>_index</td><td>文档所属的索引名</td></tr><tr><td>_type</td><td>文档所属的类型名</td></tr><tr><td>_id</td><td>文档唯一 id</td></tr><tr><td>_source</td><td>文档的原始 Json 数据</td></tr><tr><td>_version</td><td>文档的版本信息</td></tr><tr><td>_score</td><td>相关性打分</td></tr></tbody></table><h2 id="2-2-索引"><a href="#2-2-索引" class="headerlink" title="2.2 索引"></a>2.2 索引</h2><ul><li>名词(index): 是文档的容器, 是一类文档的集合</li><li><p>动词(indexing): 将一个文档保存到 ElasticSearch 的过程(创建倒排索引)</p></li><li><p>index 体现了逻辑空间的概念: 每个索引都有自己的 mapping 定义, 用于定义包含的文档的字段名和字段类型</p></li><li>shard 体现物理空间的概念: 索引中的数据分散在 shard 上</li></ul><p>索引的 mapping 定义文档字段的类型, setting 定义不同的数据分布.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"movies"</span>: &#123;</span><br><span class="line">        <span class="attr">"setting"</span>: &#123;</span><br><span class="line">            <span class="attr">"index"</span>: &#123;</span><br><span class="line">                <span class="attr">"creation_date"</span>: <span class="string">"155273758543"</span>,</span><br><span class="line">                <span class="attr">"number_of_shards"</span>: <span class="string">"2"</span>,</span><br><span class="line">                <span class="attr">"number_of_replicas"</span>: <span class="string">"0"</span>,</span><br><span class="line">                <span class="attr">"uuid"</span>: <span class="string">"Qnd7lmrNQPGdaeJ0oR0tfQ"</span>,</span><br><span class="line">                <span class="attr">"version"</span>: &#123;</span><br><span class="line">                    <span class="attr">"created"</span>: <span class="string">"6060299"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"provided_name"</span>: <span class="string">"movies"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与关系型数据的概念对比:</p><table><thead><tr><th>RDBMS</th><th>ElasticSearch</th></tr></thead><tbody><tr><td>Table</td><td>Index</td></tr><tr><td>Row</td><td>Doc</td></tr><tr><td>Column</td><td>Field</td></tr><tr><td>Schema</td><td>Mapping</td></tr><tr><td>SQL</td><td>DSL</td></tr></tbody></table><p>传统关系型数据库和 ElasticSearch 的区别:</p><ul><li>ElasticSearch: Schemaless/相关性/高性能全文索引</li><li>RDBMS: 事务性/Join</li></ul><h2 id="2-3-集群-节点和分片"><a href="#2-3-集群-节点和分片" class="headerlink" title="2.3 集群, 节点和分片"></a>2.3 集群, 节点和分片</h2><h3 id="2-3-1-集群"><a href="#2-3-1-集群" class="headerlink" title="2.3.1 集群"></a>2.3.1 集群</h3><ul><li>不同的集群通过 name 来区分, 默认 name 是 <code>elasticsearch</code></li><li>通过修改配置文件, 或者在命令行中直接指定 <code>-E cluster.name=xxx</code> 进行设定</li><li>一个集群可以有一个或多个节点</li></ul><h3 id="2-3-2-节点"><a href="#2-3-2-节点" class="headerlink" title="2.3.2 节点"></a>2.3.2 节点</h3><ul><li>节点是一个 ElasticSearch 实例, 本质上是一个 Java 进程, 一台机器可以运行多个 ElasticSearch 实例, 但生产环境一般建议一台机器只运行一个 ElasticSearch 实例</li><li>每个节点都有自己的名字, 可以通过配置文件指定, 也可以在命令行中指定 <code>-E node.name=node1</code> 指定</li><li>每个节点在启动后, 会分配一个 UID, 保存在 data 目录下</li></ul><p>Master-eligible nodes 和 Master Node</p><ul><li>每个节点启动后, 默认就是一个 Master-eligible 节点, 可以通过 <code>node.master: false</code> 禁止</li><li>Master-eligible 节点可以参加选主流程, 成为 Master 节点</li><li>当第一个节点启动的时候, 它会将自己选举成 Master 节点</li><li>每个节点上都保存了集群的状态, 只有 Master 节点才能修改集群的状态信息<ul><li>集群信息(Cluster State), 维护了一个集群中必要的信息:<ul><li>所有的节点信息</li><li>所有的索引和其相关的 mapping 和 setting 信息</li><li>分片的路由信息</li></ul></li><li>任意节点都能修改信息的话会导致数据不一致</li></ul></li></ul><p>Data Node &amp; Coordinating Node</p><ul><li>Data Node: 可以保存数据的节点, 负责保存分片数据, 在数据扩展上起到了重要作用</li><li>Coordinating Node: 负责接受 Client 的请求, 将请求分发到合适的节点, 最终把结果汇集在一起, 每个节点默认都起到了 Coordinating Node 的职责</li></ul><p>其他节点类型:</p><ul><li>Hot &amp; Warm Node: 不同硬件配置的 Data Node, 用来实现 Hot &amp; Warm 架构, 降低集群部署成本(Hot 节点配置较高, 吞吐量较好)</li><li>Machine Learning Node: 负责跑机器学习的 Job, 用来做异常检测</li><li>Tribe Node: (即将淘汰吗 5.3 开始使用 cross cluster serarch)连接到不同的 ElasticSearch 集群, 并支持将这些集群当成一个单独的集群处理.</li></ul><p>配置节点类型:</p><ul><li>开发环境中的一个节点可以承担多种角色</li><li>生产环境中, 应该给每个节点设置单一的角色</li></ul><table><thead><tr><th>节点类型</th><th>配置参数</th><th>默认值</th></tr></thead><tbody><tr><td>master eligible</td><td>node.master</td><td>true</td></tr><tr><td>data</td><td>node.data</td><td>true</td></tr><tr><td>ingest</td><td>node.ingest</td><td>true</td></tr><tr><td>coordinating only</td><td>-</td><td>每个节点默认都是 coordinating 节点, 设置其他类型全部为 false</td></tr><tr><td>machine learning</td><td>node.ml</td><td>true(需 enable x-pack)</td></tr></tbody></table><h3 id="2-3-3-分片"><a href="#2-3-3-分片" class="headerlink" title="2.3.3 分片"></a>2.3.3 分片</h3><ul><li>主分片: 用以解决数据水平扩展的问题, 通过主分片可以将数据分布到集群内的所有节点之上, 每个分片都是 Lucene 实例, 主分片数在创建索引时指定, 后续不允许修改, 除非 reindex</li><li>副本: 用以解决数据高可用的问题, 分片是主分片的拷贝, 副本分片数可以动态调整</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /blogs</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"number_of_reolicas"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的请求, 会创建一个拥有 3 个分片, 1 个副本的 ElasticSearch 集群</p><p><img src="https://user-images.githubusercontent.com/17758731/79042721-87fafe80-7c2c-11ea-9814-d83afe9b90ca.png" alt="image"></p><p>对于生产环境中分片的设定需要提前做好容量规划:</p><ul><li>分片数设置过小会导致后续无法增加节点实现水平扩容, 并且单个分片数据量过大会导致 reindex 耗时较长</li><li>分片数过大会影响搜索结果的相关性打分, 影响统计结果的准确性, 单个节点上过多的分片会导致资源浪费, 同时也会影响性能.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /_cluster/health</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"destiny"</span>,</span><br><span class="line">  <span class="attr">"status"</span> : <span class="string">"green"</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"number_of_nodes"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"number_of_data_nodes"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"active_primary_shards"</span> : <span class="number">6</span>,</span><br><span class="line">  <span class="attr">"active_shards"</span> : <span class="number">12</span>,</span><br><span class="line">  <span class="attr">"relocating_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"initializing_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"unassigned_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"delayed_unassigned_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_pending_tasks"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_in_flight_fetch"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"task_max_waiting_in_queue_millis"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"active_shards_percent_as_number"</span> : <span class="number">100.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Green: 主分片与副本分片都正常分配</li><li>Yellow: 主分片全部正常分片, 有副本分片未能正常分配</li><li>Red: 有主分片未能分配, 如磁盘容量超 85% 的时候创建索引</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>OAuth2 授权认证中文架构和实践</title>
      <link href="/blog/2020/04/05/OAuth2-%E6%8E%88%E6%9D%83%E8%AE%A4%E8%AF%81%E4%B8%AD%E6%96%87%E6%9E%B6%E6%9E%84%E5%92%8C%E5%AE%9E%E8%B7%B5/"/>
      <url>/blog/2020/04/05/OAuth2-%E6%8E%88%E6%9D%83%E8%AE%A4%E8%AF%81%E4%B8%AD%E6%96%87%E6%9E%B6%E6%9E%84%E5%92%8C%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h1 id="1-微服务安全要解决的问题"><a href="#1-微服务安全要解决的问题" class="headerlink" title="1. 微服务安全要解决的问题"></a>1. 微服务安全要解决的问题</h1><p>OAuth2 最初是为了解决开放系统间授权的问题而诞生的</p><p><img src="https://user-images.githubusercontent.com/17758731/78466023-5ca97880-772f-11ea-8c36-5f939f0a335d.png" alt="image"></p><blockquote><p>假设用户有一部分资源放在云存储服务上, 这是用户需要通过客户应用完成对云存储上受保护资源的访问, 此时就需要云存储服务向客户应用授权.</p></blockquote><p>有如下几种方法:</p><table><thead><tr><th>方法名</th><th>描述</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>用户名密码复制</td><td>复制资源拥有者的用户名密码, 将它们传递到受保护的资源</td><td>实现简单, 适用于公司内部应用</td><td>如果开放应用不受信, 对用户安全风险较大, 可能导致严重信息泄露</td></tr><tr><td>万能钥匙</td><td>客户应用和受保护资源间商定一个通用的 develop key</td><td>适用于有合作的公司或部门</td><td>对于不受信的第三方应用不安全, develop key 容易泄露</td></tr><tr><td>特殊令牌</td><td>使用特殊的密码或令牌, 仅能访问受保护的资源</td><td>能较好的保护用户信息不被泄露</td><td>如何产生, 保护及吊销令牌实现复杂</td></tr></tbody></table><pre><code>在传统应用的 web 安全领域中, 比较常见的方案就是通过过滤器拦截应用的请求, 先判断是否完成登录授权, 如果没有就跳转到登录界面, 登录后给客户端种下对应的 cookie, 登录用户携带 cookie 匹配到 session 后验证身份, 再完成后续操作.</code></pre><p><img src="https://user-images.githubusercontent.com/17758731/78468845-fbdd6880-774d-11ea-8ce9-48b47b915a0c.png" alt="image"></p><p><a href="https://insights.thoughtworks.cn/traditional-web-app-authentication/" target="_blank" rel="noopener">传统 web 应用中的身份验证技术</a></p><p>传统的认证方案在微服务架构中, 面临以下问题:</p><ol><li>服务拆分粒度较小, 服务和服务之间如何鉴权?</li><li>服务的应用形态多种多样, 如浏览器, 客户端以及其他应用, 如何处理多样的登录问题?</li></ol><p>OAuth2 解决问题域和场景:</p><ul><li>开放系统间授权<ul><li>社交联合登录</li><li>开放 API 平台</li></ul></li><li>现代微服务安全<ul><li>单页浏览器 App</li><li>无线原生 App</li><li>服务器端 WebApp</li><li>微服务和 API 间调用</li></ul></li><li>企业内部应用认证授权</li></ul><h1 id="2-OAuth2-的定义和原理"><a href="#2-OAuth2-的定义和原理" class="headerlink" title="2. OAuth2 的定义和原理"></a>2. OAuth2 的定义和原理</h1><p>对保存用户资源的服务来说, 一般会通过颁发令牌的方式向第三方应用授权及验证身份</p><p><img src="https://user-images.githubusercontent.com/17758731/78469238-e702d400-7751-11ea-9286-9fcab89b1ed9.png" alt="image"></p><p>OAuth2 定义:</p><ol><li>用于 REST/APIs 的代理授权框架</li><li>基于令牌 Token 的授权, 在无需暴露用户密码的前提下, 使应用能够获取对用户数据的有限访问权限</li><li>解耦认证和授权</li><li>事实上的标准安全框架, 支持多种用例场景:<ol><li>服务器端 WebApp</li><li>浏览器单页 SPA</li><li>无线/原生 APP</li><li>服务器对服务器之间</li></ol></li></ol><p>OAuth 术语:</p><ul><li>客户应用: 通常是一个 Web 应用或无线应用, 它需要访问用户的受保护资源</li><li>资源服务器: 是一个 Web 站点或者 Web Service API, 用户的受保护数据保存于此</li><li>在客户应用成功认证并获得授权之后, 向客户应用颁发访问令牌 Access Token</li><li>资源拥有者: 资源的拥有人, 想要分享某些资源给第三方应用</li><li>客户凭证: 客户的 <code>clientId</code> 和密码, 用于认证客户</li><li>令牌: 授权服务器在接收到用户请求后, 颁发的访问令牌</li><li>作用域: 用户请求访问令牌时, 由资源所有者额外指定的细分权限</li></ul><h1 id="3-OAuth2授权模式"><a href="#3-OAuth2授权模式" class="headerlink" title="3. OAuth2授权模式"></a>3. OAuth2授权模式</h1><h2 id="3-1-授权码模式"><a href="#3-1-授权码模式" class="headerlink" title="3.1 授权码模式"></a>3.1 授权码模式</h2><p><img src="https://user-images.githubusercontent.com/17758731/78469625-9db48380-7755-11ea-8728-c99afdf51345.png" alt="image"></p><ul><li>通过前端渠道获取授权码</li><li>通过后端渠道, 客户使用 authorization code 去交换 access token 和 可选的 refresh token</li><li>假定资源拥有者和客户在不同设备上</li><li>最安全的流程, 因为令牌不会经过 user-agent</li></ul><h2 id="3-2-简化模式"><a href="#3-2-简化模式" class="headerlink" title="3.2 简化模式"></a>3.2 简化模式</h2><p><img src="https://user-images.githubusercontent.com/17758731/78470732-1ae3f680-775e-11ea-9611-cf66b7cd8d54.png" alt="image"></p><ul><li>适用于公开的浏览器单页应用</li><li>AccessToken 直接从授权服务器返回</li><li>不支持 refresh tokens</li><li>假定资源所有者和公开客户应用在同一个设备上</li><li>最容易受安全攻击</li></ul><h2 id="3-3-刷新令牌"><a href="#3-3-刷新令牌" class="headerlink" title="3.3 刷新令牌"></a>3.3 刷新令牌</h2><p>简化令牌的获取, 通过 Refresh Token 快速重新获取令牌</p><p><img src="https://user-images.githubusercontent.com/17758731/78470913-9db98100-775f-11ea-9002-ae4aa70e84b0.png" alt="image"></p><h2 id="3-4-授权类型选型"><a href="#3-4-授权类型选型" class="headerlink" title="3.4 授权类型选型"></a>3.4 授权类型选型</h2><p><img src="https://user-images.githubusercontent.com/17758731/78471132-63e97a00-7761-11ea-9b09-ea48fae9e9e3.png" alt="image"></p><h1 id="4-Spring-Security-OAuth2-架构简介"><a href="#4-Spring-Security-OAuth2-架构简介" class="headerlink" title="4. Spring Security OAuth2 架构简介"></a>4. Spring Security OAuth2 架构简介</h1><p>授权服务器的基本功能: </p><p><img src="https://user-images.githubusercontent.com/17758731/78471359-5634f400-7763-11ea-93db-900a863b45cd.png" alt="image"></p><ol><li>客户端首先需要完成授权, 授权通过后获取 token</li><li>拿到 token 后, 服务可以通过 Introspect 进行校验</li><li>校验过程中如果 token 过期, 可以获取新的 token.</li></ol>]]></content>
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 授权 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入理解 Casbin</title>
      <link href="/blog/2020/04/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-Casbin/"/>
      <url>/blog/2020/04/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-Casbin/</url>
      <content type="html"><![CDATA[<h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>Casbin 是一个强大高效的开源访问控制框架, 支持多种访问控制模型.</p><p>Casbin 能做什么:</p><ol><li>支持自定义请求的格式, 默认的请求格式为 <code>{subject, object, action}</code>.</li><li>具有访问控制模型 model 和策略 policy 两个核心概念.</li><li>支持 RBAC 中的多层角色继承, 不止主体可以有角色, 资源也可以有角色.</li><li>支持超级用户, 如 <code>root</code> 或 <code>admin</code>, 超级用户可以不受授权策略的约束访问任意资源.</li><li>支持多种内置的操作符, 如 <code>keyMatch</code>, 方便对路径式的资源进行管理, 如 <code>/foo/bar</code> 可以映射到 <code>/foo*</code>.</li></ol><p>Casbin 不能做的:</p><ol><li>身份认证 <code>authentication</code>(验证用户名,密码), casbin 只负责访问控制, 应该有其他专门的组件负责身份认证, 然后由 casbin 进行访问控制, 二者是相互配合的关系.</li><li>管理用户列表或角色列表, casbin 认为应该有项目自身来维护用户和用户列表, 用户通常由他们的密码, 但 casbin 解决的核心问题应该是存储 RBAC 方案中用户和角色之间的映射关系.</li></ol><p>安装方式:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/casbin/casbin/v2</span><br></pre></td></tr></table></figure><h2 id="1-2-简单使用"><a href="#1-2-简单使用" class="headerlink" title="1.2 简单使用"></a>1.2 简单使用</h2><p>开发过程分为如下几部:</p><ol><li>编写访问控制文件(model)</li><li>编写策略文件(policy)</li><li>通过 casbin 提供的 API 完成对应的鉴权</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enforcer, err := casbin.NewEnforcer(<span class="string">"conf/model.conf"</span>, <span class="string">"conf/policy.csv"</span>) <span class="comment">// Casbin 决策器需要有模型文件和策略文件作为参数</span></span><br><span class="line">assert.Nil(t, err)</span><br><span class="line">sub := <span class="string">"alice"</span> <span class="comment">// 需要访问资源的用户</span></span><br><span class="line">obj := <span class="string">"data1"</span> <span class="comment">// 将要被访问的资源</span></span><br><span class="line">act := <span class="string">"read"</span>  <span class="comment">// 该用户访问资源的具体操作</span></span><br><span class="line">ok, err := enforcer.Enforce(sub, obj, act)</span><br><span class="line">assert.Nil(t, err)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Logf(<span class="string">"%s has %s on %s"</span>, sub, act, obj)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t.Logf(<span class="string">"%s dosen't has %s on %s"</span>, sub, act, obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><pre><code>=== RUN   TestDemo1TestDemo1: demos_test.go:24: alice has read on data1--- PASS: TestDemo1 (0.00s)PASS</code></pre><h2 id="1-3-工作原理"><a href="#1-3-工作原理" class="headerlink" title="1.3 工作原理"></a>1.3 工作原理</h2><p>在 Casbin 中, 访问控制模型被抽象为 PERM(Policy, Effect, Request, Matcher) 的一个文件, 因此, 切换或升级项目的授权机制时, 只需修改该文件, 开发者可以通过组合可用的模型来指定自己的访问规则:</p><p>Casbin 中最基本最简单的访问控制模型(model)是 ACL, ACL 中 model 的 CONF 为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Request definition</span><br><span class="line">[request_definition]</span><br><span class="line">r = sub, obj, act</span><br><span class="line"></span><br><span class="line"># Policy definition</span><br><span class="line">[policy_definition]</span><br><span class="line">p = sub, obj, act</span><br><span class="line"></span><br><span class="line"># Policy effect</span><br><span class="line">[policy_effect]</span><br><span class="line">e = some(where (p.eft == allow))</span><br><span class="line"></span><br><span class="line"># Matchers</span><br><span class="line">[matchers]</span><br><span class="line">m = r.sub == p.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act</span><br></pre></td></tr></table></figure><p>ACL model 的实例 policy:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p, alice, data1, read</span><br><span class="line">p, bob, data2, write</span><br></pre></td></tr></table></figure><p>含义:</p><ul><li><code>alice</code> 对 <code>data1</code> 有 <code>read</code> 权限</li><li><code>bob</code> 对 <code>data2</code> 有 <code>write</code> 权限</li></ul><h1 id="2-Model-访问控制模型"><a href="#2-Model-访问控制模型" class="headerlink" title="2. Model(访问控制模型)"></a>2. Model(访问控制模型)</h1><h2 id="2-1-Model-语法"><a href="#2-1-Model-语法" class="headerlink" title="2.1 Model 语法"></a>2.1 Model 语法</h2><ul><li>model 配置文件至少应该包含四部分:<ul><li><code>[request_defintion]</code></li><li><code>[policy_destintion]</code></li><li><code>[policy_effect]</code></li><li><code>[mathers]</code></li></ul></li><li>如果 model 使用 RBAC, 还需要添加 <code>[role_defition]</code> 部分</li><li>Model CONF 文件可以包含注释</li></ul><h3 id="2-1-1-Request-定义"><a href="#2-1-1-Request-定义" class="headerlink" title="2.1.1 Request 定义"></a>2.1.1 Request 定义</h3><p><code>[request_defintion]</code> 部分用于 request 的定义, 它明确了 <code>func NewEnforcer(params ...interface{}) (*Enforcer, error) {}</code> 方法的参数列表定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[request_definition]</span><br><span class="line">r = sub, obj, act</span><br></pre></td></tr></table></figure><p><code>sub, obj, act</code> 表示经典三元组: 访问实体, 访问资源和访问方法. 如果不需要指定特定特定资源, 可以定义成 <code>r = sub, obj</code>, 或者如果有两个访问实体, 可以定义成 <code>sub1, sub2, obj, act</code>.</p><h3 id="2-1-2-Policy-定义"><a href="#2-1-2-Policy-定义" class="headerlink" title="2.1.2 Policy 定义"></a>2.1.2 Policy 定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[policy_definition]</span><br><span class="line">p = sub, obj, act</span><br><span class="line">p2 = sub, act</span><br></pre></td></tr></table></figure><p>对 policy 规则的具体描述:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p, alice, data1, read</span><br><span class="line">p2, bob, write-all-objects</span><br></pre></td></tr></table></figure><p><code>[policy_definition]</code> 部分是对策略的定义, 每条规则通常是以行如 p, p2 的 <code>policy type</code> 开头, 如果存在多个 policy 定义, casbin 会根据前文提到的 <code>policy type</code> 与具体的某条规则匹配, 上面的 policy 绑定关系将会在 matcher 中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(alice, data1, read) -&gt; (p.sub, p.obj, p.act)</span><br><span class="line">(bob, write-all-objects) -&gt; (p2.sub, p2.act)</span><br></pre></td></tr></table></figure><h3 id="2-1-3-Policy-Effect-定义"><a href="#2-1-3-Policy-Effect-定义" class="headerlink" title="2.1.3 Policy Effect 定义"></a>2.1.3 Policy Effect 定义</h3><p><code>[policy_effect]</code> 部分是对policy生效范围的定义, 原语定义了当多个 policy rule 同时匹配访问请求 request 时, 该如何对多个决策结果进行集成以实现统一决策. 以下示例展示了一个只有一条规则生效，其余都被拒绝的情况:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[policy_effect]</span><br><span class="line">e = some(where (p.eft == allow))</span><br></pre></td></tr></table></figure><blockquote><p>表示如果存在任意一个决策结果为 allow 的匹配规则, 则最终决策结果为 allow, 其中 p.eft 表示决策规则的决策解雇, 可以为 allow 或者 deny, 当不指定规则的决策结果时, 取默认值 allow, 通常情况下, policy 的 p.eft 默认为 allow</p></blockquote><h3 id="2-1-4-Matchers"><a href="#2-1-4-Matchers" class="headerlink" title="2.1.4 Matchers"></a>2.1.4 Matchers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[matchers]</span><br><span class="line">m = r.sub == p.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act</span><br></pre></td></tr></table></figure><p><code>[matchers]</code> 原语定义了策略规则如何与访问请求进行匹配的匹配器, 其本质上是布尔表达式, 可以理解为 Request, Policy 等原语定义了关于策略和请求的变量, 然后将这些变量代入Matcher原语中求值, 从而进行策略决策.</p><p>可以在 matcher 中定义函数, 可以是内置函数或自定义函数:</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>keyMatch(arg1,arg2)</td><td>arg1 是一个 URL 路径, 如 <code>/alice_data/resource1</code>, arg2 可以是 URL 路径或者一个模式, 如 <code>/alice_data/</code>, 返回 arg1 是否与 arg2 匹配</td></tr><tr><td>keyMatch2(arg1,arg2)</td><td>arg1 是一个 URL 路径, 例如 <code>/alice_data/resource1</code>, arg2 可以是 URL 路径或者是一个 <code>:</code> 模式，例如 <code>/alice_data/:resource</code>. 此函数返回 arg1 是否与 arg2 匹配</td></tr></tbody></table><p>regexMatch(arg1, arg2) | arg1 可以是任何字符串. arg2 是一个正则表达式. 它返回 arg1 是否匹配 arg2.|<br>ipMatch(arg1, arg2) | arg1 是一个 IP 地址, 如 <code>192.168.2.123</code>. arg2 可以是 IP 地址或 CIDR, 如 <code>192.168.2. 0/24</code>. 它返回 arg1 是否匹配 arg2.</p><blockquote><p>添加自定义函数</p></blockquote><p>准备好一个有多个参数以及一个 bool 类型返回值的函数, 然后用 <code>interface{}</code> 类型包装该函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyFunc</span><span class="params">(key1, key2 <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">/// ~</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyFuncAdaptor</span><span class="params">(args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line">    key1 := args[<span class="number">0</span>].(<span class="keyword">string</span>)</span><br><span class="line">    key2 := args[<span class="number">1</span>].(<span class="keyword">string</span>)</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">bool</span>)(MyFunc(key1, key2)), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后注册到 Casbin enforcer 中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.AddFunction(<span class="string">"my_func"</span>, MyFuncAdaptor)</span><br></pre></td></tr></table></figure><p>然后就可以在 model 中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[matchers]</span><br><span class="line">m = r.sub == p.sub &amp;&amp; my_func(r.obj, p.obj) &amp;&amp; r.act == p.act</span><br></pre></td></tr></table></figure><h3 id="2-1-5-Role-定义"><a href="#2-1-5-Role-定义" class="headerlink" title="2.1.5 Role 定义"></a>2.1.5 Role 定义</h3><p><code>[role_defintion]</code> 定义了 RBAC 中的角色继承关系, Casbin 支持 RBAC 系统的多个实例, 用户可以有角色和继承关系, 资源也可以有角色和继承关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[role_definition]</span><br><span class="line">g = _, _</span><br><span class="line">g2 = _, _</span><br></pre></td></tr></table></figure><p>g1 是一个 RBAC 体系, g2 是另一个 RBAC 体系, <code>,</code> 表示角色继承关系的前项和后项, 前项继承后项的角色的权限, 如果需要进行角色和用户的绑定, 直接使用 g 即可, 如果需要标识角色与用户和资源的绑定关系时, 可以使用 g 和 g2, 在 Casbin 中, 我们以 policy 表示实际的用户角色映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p, data2_admin, data2, read</span><br><span class="line">g, alice, data2_admin</span><br></pre></td></tr></table></figure><p>上述策略规则表示 <code>alice</code> 继承或具有角色 <code>data2_admin</code>, 这里的 <code>alice</code> 可以为具体的某个用户, 某种资源抑或某个角色, 在 Casbin 中它将会被当作字符串(string)来对待.</p><p>在 matcher 中, 应该用如下方式校验角色:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[matchers]</span><br><span class="line">m = g(r.sub, p.sub) &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act</span><br></pre></td></tr></table></figure><ol><li>Casbin 只存储用户角色的映射关系;</li><li>Casbin 不验证用户是否为有效用户, 或者角色是否为有效角色. 这应该由身份验证来处理.</li><li>RBAC 系统中的用户名称和角色名称不应相同, 因为Casbin将用户名和角色识别为字符串, 所以当前语境下Casbin无法得出这个字面量到底指代用户 alice 还是角色 alice. 这时, 使用明确的 role_alice, 问题便可迎刃而解;</li><li>假设 A 具有角色 B, B 具有角色 C, 并且 A 有角色 C. 这种传递性在当前版本会造成死循环.</li></ol><p>域租户的角色定义</p><p>在 Casbin 中的 RBAC 角色可以是全局或是基于特定域的, 特定域的角色意味着当用户处于不同的租户时, 用户所关联的角色也不尽相同, 租户角色定义类似如下写法, 第三个 <code>_</code> 表示域的概念</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[role_definition]</span><br><span class="line">g = _, _, _</span><br></pre></td></tr></table></figure><p>对应的策略规则实例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p, admin, tenant1, data1, read</span><br><span class="line">p, admin, tenant2, data2, read</span><br><span class="line"></span><br><span class="line">g, alice, admin, tenant1</span><br><span class="line">g, alice, user, tenant2</span><br></pre></td></tr></table></figure><p>接下来在matcher中, 应该像下面的例子一样检查角色信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[matchers]</span><br><span class="line">m = g(r.sub, p.sub, r.dom) &amp;&amp; r.dom == p.dom &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act</span><br></pre></td></tr></table></figure><h2 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h2><h1 id="3-存储"><a href="#3-存储" class="headerlink" title="3. 存储"></a>3. 存储</h1><h2 id="3-1-Model-存储"><a href="#3-1-Model-存储" class="headerlink" title="3.1 Model 存储"></a>3.1 Model 存储</h2><h3 id="3-1-1-从-CONF-文件中加载-model"><a href="#3-1-1-从-CONF-文件中加载-model" class="headerlink" title="3.1.1 从 CONF 文件中加载 model"></a>3.1.1 从 CONF 文件中加载 model</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Casbin 决策器需要有模型文件和策略文件作为参数</span></span><br><span class="line">enforcer, err := casbin.NewEnforcer(<span class="string">"conf/model.conf"</span>, <span class="string">"conf/policy.csv"</span>)</span><br></pre></td></tr></table></figure><h3 id="3-1-2-从代码加载-model"><a href="#3-1-2-从代码加载-model" class="headerlink" title="3.1.2 从代码加载 model"></a>3.1.2 从代码加载 model</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Go 代码初始化 model</span></span><br><span class="line">m := casbin.NewModel()</span><br><span class="line">m.AddDef(<span class="string">"r"</span>, <span class="string">"r"</span>, <span class="string">"sub, obj, act"</span>)</span><br><span class="line">m.AddDef(<span class="string">"p"</span>, <span class="string">"p"</span>, <span class="string">"sub, obj, act"</span>)</span><br><span class="line">m.AddDef(<span class="string">"g"</span>, <span class="string">"g"</span>, <span class="string">"_, _"</span>)</span><br><span class="line">m.AddDef(<span class="string">"e"</span>, <span class="string">"e"</span>, <span class="string">"some(where (p.eft == allow))"</span>)</span><br><span class="line">m.AddDef(<span class="string">"m"</span>, <span class="string">"m"</span>, <span class="string">"g(r.sub, p.sub) &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act"</span>)</span><br><span class="line"><span class="comment">// 从 .CSV 文件 adapter 中加载 policy 规则。</span></span><br><span class="line"><span class="comment">// 使用自己的 adapter 替换</span></span><br><span class="line">a := persist.NewFileAdapter(<span class="string">"examples/rbac_policy.csv"</span>)</span><br><span class="line"><span class="comment">// 创建一个 enforcer。</span></span><br><span class="line">e := casbin.NewEnforcer(m, a)</span><br></pre></td></tr></table></figure><h3 id="3-1-3-从字符串加载-model"><a href="#3-1-3-从字符串加载-model" class="headerlink" title="3.1.3 从字符串加载 model"></a>3.1.3 从字符串加载 model</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用字符串初始化 model</span></span><br><span class="line">text :=</span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">[request_definition]</span></span><br><span class="line"><span class="string">r = sub, obj, act</span></span><br><span class="line"><span class="string">[policy_definition]</span></span><br><span class="line"><span class="string">p = sub, obj, act</span></span><br><span class="line"><span class="string">[role_definition]</span></span><br><span class="line"><span class="string">g = _, _</span></span><br><span class="line"><span class="string">[policy_effect]</span></span><br><span class="line"><span class="string">e = some(where (p.eft == allow))</span></span><br><span class="line"><span class="string">[matchers]</span></span><br><span class="line"><span class="string">m = g(r.sub, p.sub) &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">m := NewModel(text)</span><br><span class="line"><span class="comment">// 从 .CSV 文件 adapter 中加载 policy 规则。</span></span><br><span class="line"><span class="comment">// 使用自己的 adapter 替换。</span></span><br><span class="line">a := persist.NewFileAdapter(<span class="string">"examples/rbac_policy.csv"</span>)</span><br><span class="line"><span class="comment">// 创建一个 enforcer。</span></span><br><span class="line">e := casbin.NewEnforcer(m, a)</span><br></pre></td></tr></table></figure><h2 id="3-2-Policy-存储"><a href="#3-2-Policy-存储" class="headerlink" title="3.2 Policy 存储"></a>3.2 Policy 存储</h2><h3 id="3-2-1-File-Adapter-内置"><a href="#3-2-1-File-Adapter-内置" class="headerlink" title="3.2.1 File Adapter(内置)"></a>3.2.1 File Adapter(内置)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e := casbin.NewEnforcer(<span class="string">"examples/basic_model.conf"</span>, <span class="string">"examples/basic_policy.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">a := fileadapter.NewAdapter(<span class="string">"examples/basic_policy.csv"</span>)</span><br><span class="line">e := casbin.NewEnforcer(<span class="string">"examples/basic_model.conf"</span>, a)</span><br></pre></td></tr></table></figure><h3 id="3-2-2-MySQL-Adapter"><a href="#3-2-2-MySQL-Adapter" class="headerlink" title="3.2.2 MySQL Adapter"></a>3.2.2 MySQL Adapter</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a := mysqladapter.NewAdapter(<span class="string">"mysql"</span>, <span class="string">"root:@tcp(127.0.0.1:3306)/"</span>)</span><br><span class="line">e := casbin.NewEnforcer(<span class="string">"examples/basic_model.conf"</span>, a)</span><br></pre></td></tr></table></figure><h3 id="3-2-3-自建-Adapter"><a href="#3-2-3-自建-Adapter" class="headerlink" title="3.2.3 自建 Adapter"></a>3.2.3 自建 Adapter</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a := yourpackage.NewAdapter(params)</span><br><span class="line">e := casbin.NewEnforcer(<span class="string">"examples/basic_model.conf"</span>, a)</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>领域驱动设计</title>
      <link href="/blog/2020/03/12/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
      <url>/blog/2020/03/12/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>DDD 是一种处理高度复杂领域的设计思想, 试图分离技术实现的复杂性, 并围绕业务概念构建领域模型来控制业务的复杂性, 以解决软件难以理解和演进的问题. DDD 是一种架构的设计方法论, 通过边界划分将复杂业务领域简单化, 找出领域和应用边界.</p>]]></content>
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领域驱动设计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入理解 nginx</title>
      <link href="/blog/2019/11/17/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-nginx/"/>
      <url>/blog/2019/11/17/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-nginx/</url>
      <content type="html"><![CDATA[<h2 id="1-Nginx-简介"><a href="#1-Nginx-简介" class="headerlink" title="1. Nginx 简介"></a>1. Nginx 简介</h2><h3 id="1-1-Nginx-的三个主要应用场景"><a href="#1-1-Nginx-的三个主要应用场景" class="headerlink" title="1.1 Nginx 的三个主要应用场景"></a>1.1 Nginx 的三个主要应用场景</h3><ol><li>静态资源服务: 通过本地文件系统提供服务</li><li>反向代理服务: 缓存, 负载均衡</li><li>API 服务: OpenResty</li></ol><p><img src="https://user-images.githubusercontent.com/17758731/69009167-cd711380-098d-11ea-8c78-2a5c8d1a713b.png" alt="image"></p><p>用户请求会首先经过 Nginx, 再导应用服务(如 Tomcat, Apache 等), 应用服务根据自身逻辑再去访问存储服务(如 MySQL, Redis, Elasticsearch 等), 通过这样的方式对外部提供最基础的服务.</p><p>这样的一个典型架构模式中, Nginx 往往处于企业内网的边缘节点, 随着网络链路的增长, 用户的请求时延会不断变长, 如果我们能够把所有用户在一段时间内看起来不变的动态内容缓存在 Nginx 上, 由 Nginx 直接向用户提供反馈, 这样时延就会相应得到降低, 因此反向代理会衍生出另一个功能: 缓存加速, 这样能够加速我们的访问. 很多时候当我们在访问 css, JavaScript 以及小图片的时候, 这样的资源没有必要通过应用服务器来返回, 只需要通过本地文件查询系统上放置的静态资源, 由 Nginx 提供访问即可.</p><p>此外由于应用服务普遍运行效率较低, QPS 受限, 因此通常会将多个应用服务组成集群, 向用户提供高性能, 高可用, 可扩展的服务, 此时就需要可以提供反向代理功能的 Nginx 来将动态请求传导给应用服务器. 当多个应用服务器构成集群之后, 就需要能够支持服务的弹性伸缩, 如节点的新增和下线, 因此反向代理服务器必须具备负载均衡功能.</p><p>最后, 由于应用服务的性能存在瓶颈, 但数据库由于使用场景简单, 并发性能较高, 因此性能高于应用服务, 所以 Nginx 可以直接访问数据库, Redis, 利用 Nginx 自身强大的性能实现如 Web 防火墙等功能直接提供给用户, 这要求 API 服务有强大的业务处理功能. 因此向 OpenResty, 以及 Nginx 集成 JavaScript, 利用 JS, LUA 提供完整的 API 服务.</p><h3 id="1-2-Nginx-的优点"><a href="#1-2-Nginx-的优点" class="headerlink" title="1.2 Nginx 的优点"></a>1.2 Nginx 的优点</h3><ol><li>高并发, 高性能: 同时具备高并发和高性能, 高并发往往需要为每个连接分配的资源尽可能少, 高性能需要好的设计, Nginx 在 32 核 64G 内存的服务器上可以达到千万级的并发连接, 对于简单的请求可以达到百万级.</li><li>可扩展性好: 可扩展性主要体现在 Nginx 的模块化设计, 稳定的模块化设计使得第三方模块生态圈非常丰富.</li><li>高可靠性: Nginx 可以在服务器上持续不间断的运行数年. 由于 Nginx 往往出现在企业内网的边缘节点, 直接面向用户, 因此可靠性非常重要, 是企业能够向用户提供 4 个 9 甚至更高可靠性的保障.</li><li>热部署: Nginx 可以在不停止服务的情况下升级重启. 服务器可能同时存在百万级的并发连接, 如果简单 kill 掉进程会导致操作系统向所有正在连接状态的 TCP 客户端发送一个 TCP 中的终端响应. 而热部署可以保证 Nginx 重启的同事连接不会中断.</li><li>BSD 许可证: Nginx 不只是开源免费, 而且可以在有定制需要的场景下修改 Nginx 源代码, 并且运行在商业场景下, 这是合法的.</li></ol><h3 id="1-3-Nginx-的组成"><a href="#1-3-Nginx-的组成" class="headerlink" title="1.3 Nginx 的组成"></a>1.3 Nginx 的组成</h3><ol><li>二进制可执行文件: 由各模块源码编译出的一个文件, 由官方模块以及自定义的第三方模块共同组成.</li><li>Nginx.conf 文件: 控制 Nginx 的行为.</li><li>access.log 访问日志: 记录每一条 HTTP 请求信息.</li><li>error.log 错误日志: 用于定位问题.</li></ol><h3 id="1-4-编译-Nginx"><a href="#1-4-编译-Nginx" class="headerlink" title="1.4 编译 Nginx"></a>1.4 编译 Nginx</h3><p>安装 Nginx 的步骤:</p><ol><li>下载 Nginx: 可以从官网下载压缩包, 或者通过 <code>yum</code>, <code>apt-get</code> 等命令完成;</li><li>执行 <code>configure</code> 文件, 会生成很多中间文件;</li><li>执行编译</li><li>安装</li></ol><h4 id="1-4-1-下载"><a href="#1-4-1-下载" class="headerlink" title="1.4.1 下载"></a>1.4.1 下载</h4><p>可以直接在 <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a> 页面选择合适的版本并下载</p><p><img src="https://user-images.githubusercontent.com/17758731/69018029-4bacd480-09e5-11ea-97cd-dc1a361bb794.png" alt="image"></p><p>Nginx 目录下个各个文件目录的主要功能:</p><table><thead><tr><th style="text-align:center">目录名</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">auto</td><td>用辅助 configure 脚本执行时去判定 Nginx 需要支持的模块, 已经当前操作系统特性等</td></tr><tr><td style="text-align:center">conf</td><td>示例文件的集合, 为了方便运维配置, 可以把示例文件拷贝到安装目录</td></tr><tr><td style="text-align:center">contrib</td><td>提供了两个 peal 脚本和 vim 工具, 由于 vim 默认不支持 Nginx 语法高亮, 我们可以将 contrib/vim 下的所有文件拷贝到本地 vim 配置中 <code>cp -r contrib/vim/* ~/.vim/</code>, 此时 vim 就支持 Nginx 配置文件的语法高亮了 <img src="https://user-images.githubusercontent.com/17758731/69018388-27ea8e00-09e7-11ea-8bde-77bb8c66c3d8.png" alt="image"></td></tr><tr><td style="text-align:center">html</td><td>提供了两个 HTML 文件, 一个是发现 50X 错误时, 可以默认重定向到该页面, 另一个是默认的欢迎界面</td></tr><tr><td style="text-align:center">man</td><td>Linux 对 Nginx 的帮助文件</td></tr><tr><td style="text-align:center">src</td><td>Nginx 的源代码目录</td></tr><tr><td style="text-align:center">CHANGES</td><td>记录了当前 Nginx 版本新增的 feature 以及 bugfix</td></tr><tr><td style="text-align:center">CHANGES.ru</td><td>俄语版 CHANGES文件</td></tr><tr><td style="text-align:center">configure</td><td>用来生成中间文件的脚本, 是执行编译前的一个必备动作</td></tr></tbody></table><h4 id="1-4-2-configure-命令"><a href="#1-4-2-configure-命令" class="headerlink" title="1.4.2 configure 命令"></a>1.4.2 configure 命令</h4><p>configure 命令的参数主要分为几个部分:</p><ol><li>Nginx 运行中辅助文件路径:</li></ol><table><thead><tr><th style="text-align:center">参数名</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>--modules-path=$PATH</code></td><td>nginx 引用动态模块的路径</td></tr><tr><td style="text-align:center"><code>--lock-path=$PATH</code></td><td>设置 nginx.lock 文件的路径</td></tr><tr><td style="text-align:center"><code>--prefix=$PATH</code></td><td>指定编译输出的路径, 其他路径都会使用该前缀路径</td></tr></tbody></table><ol start="2"><li>确定使用/启用模块(前缀通常是 <code>--with/--without</code>)</li></ol><p>以 <code>--with</code> 前缀开始的模块名意味着 Nginx 默认不会编译进来, 而以 <code>--without</code> 前缀开始的模块名意味着 Nginx 默认会编译进来.</p><ol start="3"><li>指定 Nginx 中需要的特殊参数</li></ol><table><thead><tr><th style="text-align:center">参数名</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>--with-debug</code></td><td>编译时打印 debug 参数</td></tr></tbody></table><p>执行完 configure 命令后, Nginx 安装路径下会自动创建一个目录 <code>objs</code>, 其中有一个 <code>ngx_modules.c</code>, 该文件决定后面的编译会引入哪些模块.</p><p><img src="https://user-images.githubusercontent.com/17758731/69063029-c104bd80-0a56-11ea-9059-fa4439c01898.png" alt="image"></p><p>所有被编译的模块会在该文件中被声明为一个 <code>ngx_module_t</code> 类型的数组.</p><p>依次进行 <code>make</code> 和 <code>make install</code> 即可.</p><h3 id="1-5-Nginx-配置语法"><a href="#1-5-Nginx-配置语法" class="headerlink" title="1.5 Nginx 配置语法"></a>1.5 Nginx 配置语法</h3><ol><li>配置文件由指令与指令块构成;</li><li>每条指令以 <code>;</code> 分号结尾, 指令与参数间以空格符号分割;</li><li>指令块以 <code>{}</code> 大括号将多条指令组织在一起;</li><li><code>include</code> 语句允许组合多个配置文件以提升可维护性;</li><li>使用 <code>#</code> 符号添加注释, 提高可读性;</li><li>使用 <code>$</code> 符号使用变量;</li><li>部分指令的参数支持正则表达式;</li></ol><p>如:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">inclue</span>      mime.types;</span><br><span class="line">    <span class="attribute">upstream</span> thwp &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> http2;</span><br><span class="line">        <span class="comment"># Nginx 配置语法</span></span><br><span class="line">        <span class="attribute">limit_req_zone</span> <span class="variable">$binary_remote_addr</span> zone=one:<span class="number">10m</span> rate=1r/s;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg)$</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_cache</span> my_cache;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">3m</span>; <span class="attribute">proxy_cache_key</span> <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">304</span> <span class="number">302</span> <span class="number">1d</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://thwp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置块的主要内容:</p><ol><li>http: 包含的所有的指令都由 http 模块去解析</li><li>upstream: 表示上游服务, 当 Nginx 需要与 Tomcat 等服务交互时, 需要定义 upstream</li><li>server: 定义的一组域名</li><li>location: 一组 url 表达式</li></ol><h4 id="1-5-1-配置参数-时间单位"><a href="#1-5-1-配置参数-时间单位" class="headerlink" title="1.5.1 配置参数: 时间单位"></a>1.5.1 配置参数: 时间单位</h4><table><thead><tr><th style="text-align:center">配置单位</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">ms</td><td style="text-align:center">毫秒</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">秒</td></tr><tr><td style="text-align:center">m</td><td style="text-align:center">分</td></tr><tr><td style="text-align:center">h</td><td style="text-align:center">小时</td></tr><tr><td style="text-align:center">d</td><td style="text-align:center">天</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">周</td></tr><tr><td style="text-align:center">m</td><td style="text-align:center">月, 30 天</td></tr><tr><td style="text-align:center">y</td><td style="text-align:center">年, 365 天</td></tr></tbody></table><h4 id="1-5-2-配置参数-空间单位"><a href="#1-5-2-配置参数-空间单位" class="headerlink" title="1.5.2 配置参数: 空间单位"></a>1.5.2 配置参数: 空间单位</h4><table><thead><tr><th style="text-align:center">配置单位</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">字节</td></tr><tr><td style="text-align:center">k/K</td><td style="text-align:center">kb</td></tr><tr><td style="text-align:center">m/M</td><td style="text-align:center">MB</td></tr><tr><td style="text-align:center">g/G</td><td style="text-align:center">GB</td></tr></tbody></table><h3 id="1-6-Nginx-命令行"><a href="#1-6-Nginx-命令行" class="headerlink" title="1.6 Nginx 命令行"></a>1.6 Nginx 命令行</h3><p>命令行规则:</p><ol><li>格式: nginx + 命令 + 参数, 如 <code>nginx -s reload</code></li><li>帮助: <code>-?</code> 或 <code>-h</code></li><li>使用指定配置文件: <code>-c</code></li><li>指定配置指令: <code>-g</code></li><li>指定运行目录: <code>-p</code></li><li>发送信号: <code>-s</code><ol><li>立刻停止服务: stop</li><li>优雅的停止服务: quit</li><li>重新加载配置文件: reload</li><li>重新开始记录日志文件: reopen</li></ol></li><li>测试配置文件是否有语法错误: <code>-t</code> 或 <code>-T</code></li><li>打印 Nginx 版本信息, 编译信息等: <code>-v</code> 或 <code>-V</code></li></ol><h4 id="1-6-1-重载配置文件"><a href="#1-6-1-重载配置文件" class="headerlink" title="1.6.1 重载配置文件"></a>1.6.1 重载配置文件</h4><p>重载配置文件指的是在 Nginx 不重启的前提下修改配置文件. 在修改了配置文件后, 可以直接执行下面命令, 让 Nginx 进程再不停止的情况下重新加载配置文件.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -s reload</span><br></pre></td></tr></table></figure><h4 id="1-6-2-热部署"><a href="#1-6-2-热部署" class="headerlink" title="1.6.2 热部署"></a>1.6.2 热部署</h4><p>热部署指的是在 Nginx 不重启的前提下更新 Nginx 版本, 此时只需要更换 Nginx 的二进制文件(/sbin/nginx)即可, 将新版本的 nginx 二进制文件放入 sbin 路径下</p><p><img src="https://user-images.githubusercontent.com/17758731/69107614-eb816580-0aac-11ea-993c-354a17eb4db8.png" alt="image"></p><h4 id="1-6-3-日志切割"><a href="#1-6-3-日志切割" class="headerlink" title="1.6.3 日志切割"></a>1.6.3 日志切割</h4><p>当 Nginx 运行一段时间后, 日志量会比较大, 此时可以通过日志切割, 将一段时间范围之外的日志切割出去, 保持当前文件日志量不会太大, 此外, 该过程依然需要保持 Nginx 处于运行状态.</p><p><img src="https://user-images.githubusercontent.com/17758731/69108643-436d9b80-0ab0-11ea-840b-fa35634f73f6.png" alt="image"></p><p>上图的方式就完成了一次日志切割, 利用 <code>nginx -s reopen</code> 实现, 但实际场景中, 我们更多是希望能够每天或者每周自动执行一次日志切割, 这样可以写成一个 bash 脚本, 先复制当前日志文件, 再执行 reopen, 再将该脚本放在 crontab 中定时执行.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">LOGS_PATH=/Users/destiny/dev/nginx/logs/<span class="built_in">history</span></span><br><span class="line">CUR_LOGS_PATH=/Users/destiny/dev/nginx/logs</span><br><span class="line">YESTERDAY=$(date -d <span class="string">"yesterday"</span> +%Y-%m-%d)</span><br><span class="line">mv <span class="variable">$&#123;CUR_LOGS_PATH&#125;</span>/access.log <span class="variable">$&#123;LOGS_PATH&#125;</span>/access_<span class="variable">$&#123;YESTERDAY&#125;</span>.<span class="built_in">log</span></span><br><span class="line">mv <span class="variable">$&#123;CUR_LOGS_PATH&#125;</span>/error.log <span class="variable">$&#123;LOGS_PATH&#125;</span>/error<span class="variable">$&#123;YESTERDAY&#125;</span>.<span class="built_in">log</span></span><br><span class="line"><span class="comment"># 向 Nginx 主进程发送 USR1 信号, USR1 信号是重新打开日志文件, 等同于 reopen</span></span><br><span class="line"><span class="built_in">kill</span> -USR1 $(cat /Users/destiny/dev/nginx/logs/nginx.pid)</span><br></pre></td></tr></table></figure><h3 id="1-7-Nginx-作为静态资源服务器的典型场景"><a href="#1-7-Nginx-作为静态资源服务器的典型场景" class="headerlink" title="1.7 Nginx 作为静态资源服务器的典型场景"></a>1.7 Nginx 作为静态资源服务器的典型场景</h3><h4 id="1-7-1-展示静态页面"><a href="#1-7-1-展示静态页面" class="headerlink" title="1.7.1 展示静态页面"></a>1.7.1 展示静态页面</h4><p>使用 Hadoop 的 HTML 格式文档用来展示, 目录结构如下:</p><p><img src="https://user-images.githubusercontent.com/17758731/69154134-66cd3080-0b1a-11ea-9fa8-def4c162b512.png" alt="image"></p><p>将该路径复制到 Nginx 的安装路径下</p><p><img src="https://user-images.githubusercontent.com/17758731/69154346-cdeae500-0b1a-11ea-8a5c-0b48336e1f00.png" alt="image"></p><p>可以看到此时 Nginx 安装文件下新增了一个 <code>hadoop</code> 文件.</p><p>修改 Nginx 配置文件, <code>conf/nginx.conf</code>:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 配置监听的端口</span></span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8000</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拦截所有的 URL, 都去访问 Nginx 安装路径下的 hadoop/ 路径</span></span><br><span class="line">        <span class="comment"># URL 的后缀需要与文件后缀一一对应</span></span><br><span class="line">        <span class="comment"># localhost:8000/abc.html =&gt; hadoop/abc.html</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">alias</span> hadoop/;</span><br><span class="line">            <span class="comment"># root   html;</span></span><br><span class="line">            <span class="comment"># index  index.html index.htm;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 Nginx 就可以看到效果:</p><p><img src="https://user-images.githubusercontent.com/17758731/69155207-3e463600-0b1c-11ea-8dc4-a649886b801f.png" alt="image"></p><p>此时我们已经完成了 Nginx 最基础的功能之一, 构建静态 web 站点.</p><h4 id="1-7-2-压缩响应"><a href="#1-7-2-压缩响应" class="headerlink" title="1.7.2 压缩响应"></a>1.7.2 压缩响应</h4><p><img src="https://user-images.githubusercontent.com/17758731/69155384-92511a80-0b1c-11ea-8102-6c5b2c0ff529.png" alt="image"></p><p>在上面的请求中, 我们可以看到 <code>hadoop-project-dist/hadoop-common/CLIMiniCluster.html</code> 请求的大小为 23.1KB, 这与实际的文件大小一致, Nginx 提供了GZIP 压缩的功能, 通常文本文件经过 GZIP 压缩后的大小会有大幅的降低, 因此我们可以通过配置开启 GZIP 压缩功能:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启 gzip</span></span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 设置允许压缩的最小长度, 超过大小的文件才会开启压缩功能</span></span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment"># 压缩级别</span></span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment"># 只针对列出类型的文件进行压缩</span></span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时重启 Nginx 后强制刷新页面可以看到文件大小已经大幅降低, 并且响应头中也带上了 <code>Content-Encoding: gzip</code> 标识, 说明经过了压缩.</p><p><img src="https://user-images.githubusercontent.com/17758731/69156437-5d45c780-0b1e-11ea-8163-ca7f04cfe52f.png" alt="image"></p><h4 id="1-7-3-目录浏览"><a href="#1-7-3-目录浏览" class="headerlink" title="1.7.3 目录浏览"></a>1.7.3 目录浏览</h4><p>Nginx 中 <code>auto_index</code> 模块可以提供这样的功能:</p><blockquote><p>当我们访问以 <code>/</code> 结尾的 URL 时, 把目录中的文件结构返回</p></blockquote><p>配置方法也很简单, 在 location 模块中加入启动 autoindex 即可.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">alias</span> hadoop/;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-7-4-响应限流"><a href="#1-7-4-响应限流" class="headerlink" title="1.7.4 响应限流"></a>1.7.4 响应限流</h4><p>由于公网带宽比较有限, 当有大量用户访问大文件时, 请求之间会形成争抢关系, 可能会为了当用户访问大文件时限制其速度, 以期望能够分离出足够的带宽以供用户访问小文件. 此时可以通过 set 命令以及内置的变量完成该功能</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">alias</span> hadoop/;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 限制 Nginx 向客户浏览器发送响应的速度, 每秒最多传输 1k 字节</span></span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$limit_rate</span> <span class="number">1k</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置文件后重启 Nginx</p><p><img src="https://user-images.githubusercontent.com/17758731/69158562-9b90b600-0b21-11ea-9856-339e826d4fd5.png" alt="image"></p><p>再强制刷新页面后可以看到, 此时响应速度维持在 1k/s 的速度. <code>hadoop-project-dist/hadoop-hdfs/HdfsUserGuide.html</code> 文件大小为 13KB, 请求用时 13s.</p><h4 id="1-7-5-访问日志-access-log"><a href="#1-7-5-访问日志-access-log" class="headerlink" title="1.7.5 访问日志(access.log)"></a>1.7.5 访问日志(access.log)</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 日志格式</span></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 日志路径, 对所在模块生效, 第一个参数是日志路径, 第二个是采用的日志格式</span></span><br><span class="line">    <span class="attribute">access_log</span>  logs/access.log  main;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面日志就会按照 main 所规定的格式打印, 此外还有很多不同的参数支持自定义配置, 如 <code>http-core-module</code> 下的 <code>$content_length</code> 等.</p><h3 id="1-8-Nginx-作为具备缓存功能的反向代理服务器应用场景"><a href="#1-8-Nginx-作为具备缓存功能的反向代理服务器应用场景" class="headerlink" title="1.8 Nginx 作为具备缓存功能的反向代理服务器应用场景"></a>1.8 Nginx 作为具备缓存功能的反向代理服务器应用场景</h3><h4 id="1-8-1-反向代理功能"><a href="#1-8-1-反向代理功能" class="headerlink" title="1.8.1 反向代理功能"></a>1.8.1 反向代理功能</h4><p>以上个例子的 Hadoop 文档服务器作为上游服务器, 我们搭建一个用户实现反向代理的 Nginx 服务器, 可以支持反向代理以及缓存.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># upstream 定义一批上游服务器</span></span><br><span class="line">    <span class="attribute">upstream</span> local &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">9000</span>;</span><br><span class="line">        <span class="comment"># 反向代理服务器的域名</span></span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="comment"># 将 HTTP 请求添加自定义的 header 发送给上游</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将 location 匹配到的请求代理到下面的路径</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://local;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的配置中, 我们对作为反向代理的 Nginx 服务器开启了 <code>upstream</code> 配置, 表示上游服务, Nginx 就会将匹配的请求转发到该配置块内部的 server 中, 如果 server 包含多个节点, 我们可以配置分发的策略, 包括 hash, 轮询等. <code>upstream</code> 配置块定义的一批服务器, 可以以一个统一的名字命名, 上例中起名为 <code>local</code>.</p><p><code>location</code> 配置块中通过 <code>proxy_pass</code> 配置, 将匹配的所有请求代理到 <code>local</code> 的所有上游服务中.</p><p>此时通过 <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a> 就可以通过代理服务器访问到 Hadoop 的文档.</p><h4 id="1-8-2-缓存"><a href="#1-8-2-缓存" class="headerlink" title="1.8.2 缓存"></a>1.8.2 缓存</h4><p>在 web 开发中, 通常只有不同用户展示内容不同的动态内容才需要请求应用服务器, 对于一段时间内不会发生变化的内容, 为了减轻上游服务器的压力, 我们可以让 Nginx 把上游服务器返回的内容缓存一段时间. 由于一般情况下, Nginx 的性能远高于普通应用服务器, 因此对于小站点会有较大的性能提升.</p><p>Nginx 缓存的使用方式:</p><ol><li>在 HTTP 配置块中声明缓存配置</li><li>在需要开启缓存的 location 配置块中启用</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置缓存文件路径, 文件的命名方式, 文件的 key(关键字需要放在共享内存中)</span></span><br><span class="line">    <span class="attribute">proxy_cache_path</span> /tmp/nginxcache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=my_cache:<span class="number">10m</span> max_size=<span class="number">10g</span> inactive=<span class="number">60m</span> use_temp_path=<span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">9000</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="comment"># 将 HTTP 请求添加自定义的 header 发送给上游</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 指定使用上面声明的共享内存 my_cache</span></span><br><span class="line">            <span class="attribute">proxy_cache</span> my_cache;</span><br><span class="line">            <span class="comment"># 在共享内存中设置的 key, 由于同一个 uri 不同用户的返回可能不同, 此时需要将参数也作为 key</span></span><br><span class="line">            <span class="attribute">proxy_cache_key</span> <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">            <span class="comment"># 对于哪些响应开启缓存</span></span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">304</span> <span class="number">302</span> <span class="number">1d</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将 location 匹配到的请求代理到下面的路径</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://local;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该配置生效后, 当 Nginx 反向代理服务器拥有缓存时, 即使停掉应用服务器依然可以正常提供服务.</p><h3 id="1-9-access-日志"><a href="#1-9-access-日志" class="headerlink" title="1.9 access 日志"></a>1.9 access 日志</h3><p>access 日志记录了 Nginx 运行时的访问信息, 我们可以通过 access 日志来分析定位问题以及用户的运营数据, 但大部分都是离线场景, 在线实时分析相对比较困难, 而 GoAccess 可以通过图形化的方式, 通过 websocket 协议实时把 access 日志的内容展示出来, 方便我们分析问题.</p><p>原生的 access 日志内容:</p><pre><code>127.0.0.1 - - [21/Nov/2019:23:04:13 +0800] &quot;GET /css/print.css HTTP/1.0&quot; 200 215 &quot;http://127.0.0.1:9000/&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;127.0.0.1 - - [21/Nov/2019:23:04:13 +0800] &quot;GET /images/breadcrumbs.jpg HTTP/1.0&quot; 200 349 &quot;http://127.0.0.1:9000/css/maven-theme.css&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;127.0.0.1 - - [21/Nov/2019:23:04:13 +0800] &quot;GET /images/external.png HTTP/1.0&quot; 200 230 &quot;http://127.0.0.1:9000/css/maven-theme.css&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;127.0.0.1 - - [21/Nov/2019:23:04:13 +0800] &quot;GET /images/h5.jpg HTTP/1.0&quot; 200 357 &quot;http://127.0.0.1:9000/css/maven-theme.css&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;127.0.0.1 - - [21/Nov/2019:23:28:32 +0800] &quot;GET / HTTP/1.0&quot; 200 20536 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;127.0.0.1 - - [21/Nov/2019:23:28:32 +0800] &quot;GET /css/maven-base.css HTTP/1.0&quot; 200 2310 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;127.0.0.1 - - [21/Nov/2019:23:28:32 +0800] &quot;GET /css/maven-theme.css HTTP/1.0&quot; 200 4624 &quot;http://127.0.0.1:9000/&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;127.0.0.1 - - [21/Nov/2019:23:28:32 +0800] &quot;GET /css/site.css HTTP/1.0&quot; 200 936 &quot;http://127.0.0.1:9000/&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;127.0.0.1 - - [21/Nov/2019:23:28:32 +0800] &quot;GET /images/logos/maven-feather.png HTTP/1.0&quot; 200 3330 &quot;http://127.0.0.1:9000/&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;127.0.0.1 - - [21/Nov/2019:23:28:32 +0800] &quot;GET /css/print.css HTTP/1.0&quot; 200 215 &quot;http://127.0.0.1:9000/&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;127.0.0.1 - - [21/Nov/2019:23:28:32 +0800] &quot;GET /images/breadcrumbs.jpg HTTP/1.0&quot; 200 349 &quot;http://127.0.0.1:9000/css/maven-theme.css&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;127.0.0.1 - - [21/Nov/2019:23:28:32 +0800] &quot;GET /images/external.png HTTP/1.0&quot; 200 230 &quot;http://127.0.0.1:9000/css/maven-theme.css&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;127.0.0.1 - - [21/Nov/2019:23:28:32 +0800] &quot;GET /images/h5.jpg HTTP/1.0&quot; 200 357 &quot;http://127.0.0.1:9000/css/maven-theme.css&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot;</code></pre><p><a href="https://goaccess.io/" target="_blank" rel="noopener">GoAccess官网</a></p><p><img src="https://goaccess.io/images/goaccess-dashboard.png?20190828082924" alt="image"></p><p>GoAccess 以一种友好的图形化方式展示, 当我们使用 Nginx 配置中默认的日志格式时, 可以支持使用 <code>goaccess access.log -o report.html --log-format=COMBINED</code> 命令解析, <code>-o</code> 参数会指定生成一个报表 html, <code>--log-format=COMBINED</code> 指定了解析日志的默认格式, 当我们的 access log 格式发生改变的时候, 需要更换解析格式.</p><p>效果展示:</p><ul><li><p>命令行<br><img src="https://user-images.githubusercontent.com/17758731/69478057-d0a24e80-0e28-11ea-88c8-de6a57d575a8.png" alt="image"></p></li><li><p>网页版<br><img src="https://user-images.githubusercontent.com/17758731/69478068-edd71d00-0e28-11ea-9c1c-496be9894f99.png" alt="image"></p></li></ul><h3 id="1-10-SSL-协议"><a href="#1-10-SSL-协议" class="headerlink" title="1.10 SSL 协议"></a>1.10 SSL 协议</h3><p>大部分站点都通过使用 HTTPS 协议保证网络安全.</p><p>SSL 协议(Secure Sockets Layer), 现在更多使用 TLS(Transport Layer Security), SSL 协议是由网井公司在 1995 年推出的, 1999 年 RETF 把 SSL 更名为 TLS1.0.</p><p><img src="https://user-images.githubusercontent.com/17758731/69473898-a8006180-0df4-11ea-8060-7cab57aefdd7.png" alt="image"></p><p>在七层模型中, HTTP 处在应用层, SSL 协议处在表示层, 通过握手, 交换秘钥, 告警和对称加密的方式, 使 HTTP 层在没有感知的情况下做到数据加密.</p><p>当我们抓包时可以看到类似下图的密码配置</p><p><img src="https://user-images.githubusercontent.com/17758731/69473978-85bb1380-0df5-11ea-9122-86811e3eb0fb.png" alt="image"></p><table><thead><tr><th>TLS</th><th>_</th><th>ECDHC</th><th>_</th><th>RSA</th><th>_</th><th>WITH</th><th>_</th><th>AES</th><th>_</th><th>128</th><th>_</th><th>GCM</th><th>_</th><th>SHA256</th></tr></thead><tbody><tr><td></td><td></td><td>秘钥交换</td><td></td><td>身份验证</td><td></td><td></td><td></td><td>算法</td><td></td><td>强度</td><td></td><td>模式</td><td></td><td>MAC 或 PRF</td></tr><tr><td></td><td></td><td>椭圆曲线加密算法, 为了解决浏览器和服务器之间如何各自独立生成相同的秘钥</td><td></td><td>身份验证算法 RSA</td><td></td><td></td><td></td><td>对称加密算法名</td><td></td><td>对称加密算法加密强度</td><td></td><td>对称加密算法分组模式</td><td></td><td>摘要算法, 用来将不定长度的字符串生成定长摘要.</td></tr></tbody></table><h4 id="1-10-1-对称加密"><a href="#1-10-1-对称加密" class="headerlink" title="1.10.1 对称加密"></a>1.10.1 对称加密</h4><p>在对称加密的场景中, A 和 B 共同持有同一把秘钥, A 可以把明文通过秘钥加密生成密文, 而 B拿到密文后可以通过同一个秘钥解密出明文. 除此之外的其他人如果没有秘钥, 即使知道了对称加密的具体算法也无法解密.</p><p>具体的工作原理可以以对称加密的典型算法 <code>RC4</code> 来理解:</p><pre><code>假设我们有秘钥序列 1010, 明文内容是 0110, 通过秘钥的加密过程其实就是二者做异或操作:1010 ^ 0110 = 1100 此时就通过秘钥将原文加密, 生成密文由于异或具有对称的特性, 密文与秘钥做同样的异或操作就可以还原出明文:1100 ^ 0110 = 1010</code></pre><p>由于以上原理, 对称加密的性能较好, 基本上遍历一次就可以完成加密/解密</p><h4 id="1-10-2-非对称加密"><a href="#1-10-2-非对称加密" class="headerlink" title="1.10.2 非对称加密"></a>1.10.2 非对称加密</h4><p>相比对称加密, 非对称加密的性能就会差很多:</p><ol><li>根据数学原理, 首先会生成一对秘钥, 我们称其中一个为公钥, 另一个为私钥, 其特点是同一份明文文档, 如果用公钥加密, 只有用与其一起生成的私钥才能解密, 反之亦然.</li><li>假设 A 生成了一对公钥和私钥, 并将其公钥发布出去, 此时 B 想和 A 通信, 就需要先将自己的明文用 A 发布的公钥加密, A 接收到之后, 再用自己的私钥解密即可.</li><li>此外公钥和私钥还可以用来做身份严重, 假设有一段信息, A 用自己的私钥完成加密, 将密文发给 B, 只要 B 拿到 A 的公钥, 且可以成功解开这段密文, 就证明这段密文确实是 A 发出的.</li></ol><h4 id="1-10-3-SSL-证书的公信力如何保证"><a href="#1-10-3-SSL-证书的公信力如何保证" class="headerlink" title="1.10.3 SSL 证书的公信力如何保证"></a>1.10.3 SSL 证书的公信力如何保证</h4><p>使用公钥私钥进行加密通信的前提条件是首先需要确定消息的发送发身份, 才能使用发送者提供的公钥进行解密, 在多方通信的场景中为了解决这个问题必须有一个工信机构, 即 CA.</p><ol><li>向登记机构申请证书, 需要等级申请人身份</li><li>登记机构通过 CSR发给 CA, CA 通过之后会生成一对公钥和私钥给订阅人, 其中公钥在 CA 自身保存.</li><li>登记人获得公钥和私钥之后, 将其部署到自己的 web 服务器上.</li><li>当浏览器访问 HTTP 站点的时候, 首先会请求证书, web 服务器会将公钥证书发给浏览器, 浏览器会去验证证书是否合法</li><li>CA 会把过期的证书放在 CRL 或 OCSP 服务器上.</li></ol><p>证书的类型:</p><ol><li>域名验证(domain validated, DV) 证书, 验证域名的归属是否正确;</li><li>组织验证(origanization validated, OV)证书, 申请证书时验证企业名称, 申请较慢, 价格较高.</li><li>扩展验证(extended vaiidation, EV)证书, 会把申请证书时填写的地址名称显示出来.</li></ol><p>证书链:</p><p>目前所有站点的主证书都是由 3 个证书构成:</p><ol><li>根证书</li><li>二级证书</li><li>主证书</li></ol><p>根证书的验证非常谨慎, 操作系统每年只会更新一次根证书库, 因此新的根证书 CA 机构很难快速加入到操作系统认可的证书库. 大部分浏览器使用操作系统的证书库. Nginx 在向浏览器发送证书的时候, 只发送二级证书和主证书, 浏览器会验证二级证书的签发机构根证书是否有效.</p><h4 id="1-10-4-TLS-的通信过程"><a href="#1-10-4-TLS-的通信过程" class="headerlink" title="1.10.4 TLS 的通信过程"></a>1.10.4 TLS 的通信过程</h4><p>通信过程需要完成的任务:</p><ol><li>验证身份</li><li>达成安全套件共识</li><li>传递秘钥</li><li>加密通信</li></ol><p>具体通信步骤:</p><ol><li>由浏览器向服务器发送 client hello 消息, 不同的浏览器所支持的安全套件和加速算法都是不同的.</li><li>服务端维护一套自己支持的加密算法列表以及优先选择的加密算法套件. 发送给客户端. 发送最终选择的安全套件.</li><li>Nginx 将自己的公钥证书(包含证书链)发送给浏览器.</li><li>发送 <code>Server Hello Done</code>.</li><li>客户端根据椭圆曲线的公共参数生成自己的私钥, 再把公钥发送给服务器.</li><li>此时 Nginx 有自己的私钥, 并把公钥发送给客户端, 可以根据自己的私钥和客户端的公钥共同生成双发加密的秘钥; 客户端根据服务器发来的公钥和自己生成的私钥也可以生成秘钥, 服务器和客户端分别生成的秘钥是相同的.</li></ol><p>TLS 的工作:</p><ol><li>交换秘钥</li><li>加密数据</li></ol><p>Nginx 优化方式:</p><h4 id="1-10-5-OpenResty"><a href="#1-10-5-OpenResty" class="headerlink" title="1.10.5 OpenResty"></a>1.10.5 OpenResty</h4><h2 id="2-Nginx-架构基础"><a href="#2-Nginx-架构基础" class="headerlink" title="2. Nginx 架构基础"></a>2. Nginx 架构基础</h2><h3 id="2-1-Nginx-请求处理流程"><a href="#2-1-Nginx-请求处理流程" class="headerlink" title="2.1 Nginx 请求处理流程"></a>2.1 Nginx 请求处理流程</h3><p><img src="https://user-images.githubusercontent.com/17758731/69478508-4826ac80-0e2e-11ea-8fe2-e405105bbff5.png" alt="image"></p><ol><li>大致有三种流量会被 Nginx 接收;</li><li>Nginx 有三个主要的状态机, 分别是 处理 TCP/UDP 的传输层状态机, 处理应用层的 HTTP 状态机, 处理邮件的 Mail 状态机. 被称为状态机是因为Nginx 是通过非阻塞事件驱动处理引擎(epoll), 一旦使用异步处理引擎, 通常都需要通过状态机来把请求正确的识别和处理;</li><li>通过解析如果发现请求需要访问静态资源, 就会走磁盘缓存;</li><li>如果发现请求走反向代理, 反向代理的内容可以做磁盘缓存;</li><li>在处理静态资源的时候, 如果内存不足以完全缓存所有资源的时候, <code>sendfile</code> 和 AIO 会退化成阻塞的磁盘调用, 因此需要线程池来处理;</li><li>对于每一个完成的请求, 需要记录 access 日志和 error 日志;</li><li>Nginx 更多是作为负载均衡/反向代理服务器使用, 因此需要把请求通过协议级传输都上游服务器.</li></ol><h3 id="2-2-Nginx-进程结构"><a href="#2-2-Nginx-进程结构" class="headerlink" title="2.2 Nginx 进程结构"></a>2.2 Nginx 进程结构</h3><ul><li>单进程结构: 不适用于生产环境, 一般仅用于开发调试</li><li>多进程结构: 更加健壮, 使用多核计算机.</li></ul><p>Nginx 进程主要分为如下几个部分:</p><ul><li><p>master, 用来完成 worker 进程的管理, 通常第三方模块不会再此加入自己的代码</p><ul><li>Cache 相关进程: 在多个 worker 进程共享, 此外还要被 CacheManager 和 CacheLoader 进程使用.<ul><li>CacheManager: 开启动态代理时后端发来的动态请求做缓存所使用.</li><li>CacheLoader:</li></ul></li><li>Worker 进程(多个): 处理外部请求, Nginx 采用事件驱动模型, 希望每个 worker 从头到尾占用一颗 CPU, 因此不只要把 worker 进程数与 CPU 核数配置相同, 还需要把每个 Worker 进程与 CPU 核心绑定在一起, 这样可以更好的使用每颗 CPU 核心上的 CPU 缓存.</li></ul></li><li><p>master/workfer 间通过信号通信;</p></li><li>worker 进程间的通信采用共享内存解决.</li></ul><blockquote><p>Nginx 采用多进程而非多线程结构的原因:<br>主要还是考虑到了不同模块之间的隔离, 由于Nginx 需要保证高可靠性, 如果采用多线程模式, 由于线程之间共享同一段地址空间, 如果当某个第三方模块引发了地址空间的段错误, 出现地址越界时, 会导致 Nginx 进程下的全部线程都挂掉; 而如果采用了多进程则不会出现这样的问题.</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/69479146-2a107a80-0e35-11ea-8c83-4e740e310101.png" alt="image"></p><p>当我们执行了 <code>nginx -s reload</code> 时, 可以看到 master 进程重新启动了 3 个 worker 进程.</p><p>当我们向 worker 进程发送退出信号时, 该进程退出时会自动向父进程(master)发送一个 <code>SIGCHLD</code> 信号, 这样 master 进程就知道该 worker 进程退出, 会重新再启动一个 worker 进程.</p><p><img src="https://user-images.githubusercontent.com/17758731/69479275-54af0300-0e36-11ea-9f06-9152c0e99435.png" alt="image"></p><h3 id="2-3-使用信号管理-Nginx-进程"><a href="#2-3-使用信号管理-Nginx-进程" class="headerlink" title="2.3 使用信号管理 Nginx 进程"></a>2.3 使用信号管理 Nginx 进程</h3><p>首先列出 Nginx 各个进程可接收的信号:</p><ul><li>master 进程:<ul><li>监控 worker 进程:<ul><li>CHLD: linux 操作系统中规定当子进程退出后, 需要向父进程发送 <code>CHLD</code> 信号</li></ul></li><li>通过接收信号来管理 worker 进程<ul><li>TERM, INT: 立刻停止 Nginx 进程</li><li>QUIT: 优雅停止 Nginx(保证当前连接都完成)</li><li>HUP: 重载配置文件</li><li>USR1: 重新打开日志文件, 用于日志切割</li><li>USR2: 热部署使用</li><li>WINCH</li></ul></li></ul></li><li>worker 进程: (不推荐直接对 worker 进程发送信号, 最好可以向 master 发送信号, 由 master 完成对 worker 的控制)<ul><li>TERM, INT</li><li>QUIT</li><li>USR1</li><li>WINCH</li></ul></li><li>Nginx 命令行: Nginx 在 <code>logs/nginx.pid</code> 文件中记录了当前 master 进程, 下面几个命令的执行方式就是从上面文件中找到 master 的 pid, 向该 pid 发送同样的信号<ul><li>reload: HUP</li><li>reopen: USR1</li><li>stop: TERM</li><li>quit: QUIT</li></ul></li></ul><h3 id="2-4-reload-重载配置文件的实现方式"><a href="#2-4-reload-重载配置文件的实现方式" class="headerlink" title="2.4 reload 重载配置文件的实现方式"></a>2.4 reload 重载配置文件的实现方式</h3><p>reload 命令可以在 Nginx 继续对外提供服务的同时重新加载配置文件:</p><ol><li>向 master 进程发送 HUP 信号(reload 命令触发)</li><li>master 进程校验配置语法是否正确</li><li>master 进程打开新的监听端口</li><li>master 进程用新配置启动新的 worker 子进程</li><li>master 进程向老 worker 子进程发送 <code>QUIT</code> 信号</li><li>老 worker 进程关闭监听句柄, 处理完当前连接后结束进程</li></ol><p>因此, 如果老的 worker 进程由于存在大量连接, 短时间内无法关闭, 在刚执行完 <code>nginx -s reload</code> 时会出现 worker 进程数量增加的情况.</p><h3 id="2-5-热升级的完整流程"><a href="#2-5-热升级的完整流程" class="headerlink" title="2.5 热升级的完整流程"></a>2.5 热升级的完整流程</h3><ol><li>将旧的 nginx 二进制文件替换成新的 nginx 二进制文件(注意备份)</li><li>向旧 master 进程发送 <code>USR2</code> 信号</li><li>旧 master 进程修改 pid 文件名, 加后缀 <code>.oldbin</code></li><li>旧 master 进程用新 Nginx 文件启动新 master 进程(新 master 进程是老 master 的子进程)</li><li>向老 master 进程发送 <code>QUIT</code> 信号, 关闭老 master 进程</li><li>如果需要回滚, 向老 master 发送 <code>HUP</code>, 向新 master 发送 <code>QUIT</code></li></ol><p>所谓优雅的关闭 Nginx, 主要是针对 worker 进程而言, 因为只有 worker 负责处理请求. 所谓优雅关闭就是让 Nginx 的 worker 进程可以识别出当前哪些连接不再处理请求再去关闭. </p><ol><li>设置定时器: worker_shutdown_timeout</li><li>关闭监听句柄</li><li>关闭空闲连接</li><li>在循环中等待全部连接关闭</li><li>退出进程</li></ol><h2 id="2-6-Nginx-网络事件"><a href="#2-6-Nginx-网络事件" class="headerlink" title="2.6 Nginx 网络事件"></a>2.6 Nginx 网络事件</h2><p><img src="https://user-images.githubusercontent.com/17758731/69479916-be7edb00-0e3d-11ea-8148-d70007c14a25.png" alt="image"></p><p>当主机 A 向主机 B 发送 HTTP 请求的时候:</p><ol><li>应用层发送一个 GET 请求</li><li>传输层记录通信双方的端口</li><li>网络层记录双方的公网 IP</li><li>到达链路层后经过以太网, 到达路由器, 路由器记录所在运营商的公网 ip.</li><li>再经过广域网到达主机 B 所在的路由器中</li><li>再经过链路层, 网络层, 传输层, 此时操作系统会将数据流交给对应端口的进程.</li></ol><p>TCP 报文内容:</p><p><img src="https://user-images.githubusercontent.com/17758731/69479903-a6a75700-0e3d-11ea-80a4-191211392ade.png" alt="image"></p><p>TCP 协议会将以此网络传输视上层报文大小, 拆分为多个小的报文, TCP 层会考虑中间每个环节中最大的 MTU 值, 该值被称为 MSS, 因此每收到一个 MSS 大小的报文时, 都是一个网络事件.</p><p><img src="https://user-images.githubusercontent.com/17758731/69480188-1fa7ae00-0e40-11ea-93d1-65d2db8d155e.png" alt="image"></p>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cronexpr 源码解析</title>
      <link href="/blog/2019/09/14/cronexpr-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/blog/2019/09/14/cronexpr-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>cronexpr (地址 <a href="https://github.com/gorhill/cronexpr" target="_blank" rel="noopener">https://github.com/gorhill/cronexpr</a>) 是一个 github 上 star 数较高的 crontab 表达式解析库, 主要功能是解析 crontab 表达式并能够求出未来 N 次的触发时间.</p><p>一个典型的使用方式如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestParse1</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">now := time.Now()</span><br><span class="line">expr, err := Parse(<span class="string">"0 5/7 10 20-25 2-10/2 5#2 */10"</span>)</span><br><span class="line">assert.Nil(t, err)</span><br><span class="line">t.Logf(<span class="string">"expr=[%+v]"</span>, expr)</span><br><span class="line">next := expr.NextN(now, <span class="number">4</span>)</span><br><span class="line">assert.True(t, <span class="built_in">len</span>(next) &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, nextTime := <span class="keyword">range</span> next &#123;</span><br><span class="line">t.Logf(<span class="string">"next=[%s]"</span>, nextTime.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><pre><code>cronexpr_test.go:350: expr=[&amp;{expression:0 5/7 10 20-25 2-10/2 5#2 */10 secondList:[0] minuteList:[5 12 19 26 33 40 47 54] hourList:[10] daysOfMonth:map[25:true 20:true 21:true 22:true 23:true 24:true] workdaysOfMonth:map[] lastDayOfMonth:false lastWorkdayOfMonth:false daysOfMonthRestricted:true actualDaysOfMonthList:[] monthList:[2 4 6 8 10] daysOfWeek:map[] specificWeekDaysOfWeek:map[12:true] lastWeekDaysOfWeek:map[] daysOfWeekRestricted:true yearList:[1970 1980 1990 2000 2010 2020 2030 2040 2050 2060 2070 2080 2090]}]cronexpr_test.go:354: next=[2020-02-14 10:05:00 +0800 CST]cronexpr_test.go:354: next=[2020-02-14 10:12:00 +0800 CST]cronexpr_test.go:354: next=[2020-02-14 10:19:00 +0800 CST]cronexpr_test.go:354: next=[2020-02-14 10:26:00 +0800 CST]</code></pre><p>可以看到 cronexpr 的核心接口主要有两个:</p><ul><li>Parse(string) (*Expression, error) 用于解析指定的 cron 表达式, 将 cron 解析为包含各个子项(second, minute, hour, day, month, week, year) 可以触发的列表</li><li>(*Expression) NextN(time.Time, unint) []time.Time: 用于根据指定时间计算未来 n 次触发时间.</li></ul><p>下面我们就分别从源码分析一下这两个核心的接口</p><h1 id="1-cronexpr-Parse-string-Expression-error"><a href="#1-cronexpr-Parse-string-Expression-error" class="headerlink" title="1. cronexpr.Parse(string) (*Expression, error)"></a>1. cronexpr.Parse(string) (*Expression, error)</h1><p><img src="https://github.com/DestinyWang/crontab/blob/master/master/main/webroot/images/cron.Parse(" alt="image">.png?raw=true)</p><p>先列出该方法主要功能的思维导图, 前面说过这个方法会解析 crontab 表达式, 并最终构造 <code>Expression</code> 对象, 那么我们首先就需要了解 Expression 对象的结构, 在上文的单元测试中, 我打印了 <code>&quot;0 5/7 10 20-25 2-10/2 5#2 */10&quot;</code> 所构造的 Expression 对象, 首先我们先看看这个 crontab 表达式的语义:</p><table><thead><tr><th></th><th>秒</th><th>分</th><th>时</th><th>天</th><th>月</th><th>周</th><th>年</th></tr></thead><tbody><tr><td>表达式</td><td>0</td><td>5/7</td><td>10</td><td>20-25</td><td>2</td><td>5#2</td><td>*/10</td></tr><tr><td>语义</td><td>每分钟的第 0 秒</td><td>每小时从第 5 分钟开始, 每隔 7 分钟</td><td>每天的 10 时</td><td>每月从 20~25 日</td><td>每年 2~10 月中所有偶数月</td><td>每个月的第 2 个周 5</td><td>1970 ~2099 年的每个 10 年</td></tr></tbody></table><p>此时我们看一下 Expression 对象的值:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">expr := &amp;Expression&#123;</span><br><span class="line">expression: <span class="string">"0 5/7 10 20-25 2-10/2 5#2 */10"</span>,     <span class="comment">// cron 表达式</span></span><br><span class="line">secondList: []<span class="keyword">int</span>&#123;<span class="number">0</span>&#125;,                             <span class="comment">// 可触发的秒数</span></span><br><span class="line">minuteList: []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">12</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">33</span>, <span class="number">40</span>, <span class="number">47</span>, <span class="number">54</span>&#125;, <span class="comment">// 可触发的分钟数</span></span><br><span class="line">hourList:   []<span class="keyword">int</span>&#123;<span class="number">10</span>&#125;,                            <span class="comment">// 可触发的小时数</span></span><br><span class="line">daysOfMonth: <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>&#123; <span class="comment">// 可触发的日期</span></span><br><span class="line"><span class="number">20</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="number">21</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="number">22</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="number">23</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="number">24</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="number">25</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">workdaysOfMonth:       <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>&#123;&#125;, <span class="comment">// 该月的工作日, 用于</span></span><br><span class="line">lastDayOfMonth:        <span class="literal">false</span>,          <span class="comment">// 是否包含当月最后一天</span></span><br><span class="line">lastWorkdayOfMonth:    <span class="literal">false</span>,          <span class="comment">// 是否包含当月最后一个工作日</span></span><br><span class="line">daysOfMonthRestricted: <span class="literal">false</span>,          <span class="comment">//</span></span><br><span class="line">actualDaysOfMonthList: []<span class="keyword">int</span>&#123;&#125;,</span><br><span class="line">monthList:             []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;, <span class="comment">// 可触发的月份</span></span><br><span class="line">daysOfWeek:            <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>&#123;&#125;,        <span class="comment">// 可触发的星期</span></span><br><span class="line">specificWeekDaysOfWeek: <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>&#123;</span><br><span class="line"><span class="number">12</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">lastWeekDaysOfWeek:   <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>&#123;&#125;,</span><br><span class="line">daysOfWeekRestricted: <span class="literal">true</span>,</span><br><span class="line">yearList:             []<span class="keyword">int</span>&#123;<span class="number">1970</span>, <span class="number">1980</span>, <span class="number">1990</span>, <span class="number">2000</span>, <span class="number">2010</span>, <span class="number">2020</span>, <span class="number">2030</span>, <span class="number">2040</span>, <span class="number">2050</span>, <span class="number">2060</span>, <span class="number">2070</span>, <span class="number">2080</span>, <span class="number">2090</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> go </category>
          
          <category> 源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cron </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在系统中如何正确处理时区</title>
      <link href="/blog/2019/09/13/%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%A4%84%E7%90%86%E6%97%B6%E5%8C%BA/"/>
      <url>/blog/2019/09/13/%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%A4%84%E7%90%86%E6%97%B6%E5%8C%BA/</url>
      <content type="html"><![CDATA[<blockquote><p>前段时间开维护了一个简单的定时/延迟任务调度系统, 在保存定时任务的时候, 需要考虑时区问题, 因为不同时区的 <code>早上 10:00</code> 并不是同一个时间点</p></blockquote><h1 id="1-什么是时区"><a href="#1-什么是时区" class="headerlink" title="1. 什么是时区"></a>1. 什么是时区</h1><p>为了照顾到各地区的使用方便, 又使其他地方的人容易将本地的时间换算到别的地方时间上去. 有关国际会议决定将地球表面按经线从东到西, 划成一个个区域, 并且规定相邻区域的时间相差1小时, 在同一区域内的东端和西端的人看到太阳升起的时间最多相差不过 1 小时, 当人们跨过一个区域, 就将自己的时钟校正 1 小时(向西减 1 小时, 向东加 1 小时), 跨过几个区域就加或减几小时. 这样使用起来就很方便.</p><p>现今全球共分为 24 个时区. 实际上, 常常 1 个国家或 1 个省份同时跨着 2 个或更多时区, 为了照顾到行政上的方便, 常将1个国家或1个省份划在一起. 所以时区并不严格按南北直线来划分, 而是按自然条件来划分, 例如, 中国幅员宽广, 差不多跨5个时区, 但为了使用方便简单, 实际上在只用东八时区的标准时即北京时间为准.</p><p><img src="https://user-images.githubusercontent.com/17758731/64865301-94ee4a00-d66b-11e9-8333-754607404140.png" alt="image"></p><p>在中国地区, 普遍采用东八区, 所谓东八区的意思就是相比格林尼治时间快了八个小时, 对我国人民来说在早上 <code>8:10</code>, 那么同一时刻格林尼治天文台所在的时区时间是凌晨 <code>0:10</code>, 但是这里需要注意的是, 时间是相同的, 这是在同一刻发生的事情, 不同的只是时间的表示方式. 时区通过将绝对时间进行一定的偏移, 从而让全球人民的常识性作息习惯基本一致, 比如通过时区的概念, 能够让全球所有时区都保持在上午 <code>12:00</code> 左右吃午餐.</p><p>因此其实我们日常生活中的时间是由两部分组成: <code>时区时间+时区偏移量</code>, 例如 <code>北京时间 2019-09-13 21:24:15</code>, 表示方式其实是这样:</p><pre><code>&quot;2019-09-13 21:24:15 +8:00&quot; // 东八区&quot;2019-09-13 14:24:15 +1:00&quot; // 东一区</code></pre><h1 id="2-时间在计算机中的表示"><a href="#2-时间在计算机中的表示" class="headerlink" title="2. 时间在计算机中的表示"></a>2. 时间在计算机中的表示</h1><p>上面说过, 在日常生活中, 我们引入时区的概念是为了维持全球相对统一的常识和作息习惯. 但是其缺点在于不同时区进行转化时比较麻烦, 需要将原时间先转换成格林尼治时间, 再转成目标时区时间, 这一点在计算机的存储中更为突出.</p><p>因此我们引入了绝对时间的概念, 绝对时间从一个标准时间点 <code>&quot;1970-01-01 00:00:00 +0:00&quot;</code> 开始到现在的秒数, 使用整型来表示. 不再使用年月日时分秒所表示的相对时间.</p><p>同一时刻在全球任何一个时区所生成的绝对的时间都是相同的, 因为计算机内部有一个计时电路, 通常是一个经过精密加工的石英晶体, 在其张力限度内以一定的频率振荡, 有两个寄存器与每个石英晶体相关联, 一个计数器和保持寄存器, 石英晶体每次振荡似的计数器减 1, 当技术器为 0 时产生一个中断信号, 并重置计数器. 通过中断信号来完成计时.</p><p>因此, 我们需要做的事情就是把生成的绝对时间持久化, 当业务读取的时候根据不同的时区再进行相应的转换, 最终变为符合用户时区的字符串.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTime</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">now := time.Now()</span><br><span class="line">t.Logf(<span class="string">"now=[%d]"</span>, now.Unix())</span><br><span class="line">t.Logf(<span class="string">"format=[%s]"</span>, now.String())</span><br><span class="line">name, offset := now.Zone()</span><br><span class="line">t.Logf(<span class="string">"ZoneName=[%s], offset=[%d]s"</span>, name, offset)</span><br><span class="line"></span><br><span class="line">now = time.Now().In(time.FixedZone(<span class="string">"GMT"</span>, <span class="number">0</span>))</span><br><span class="line">t.Logf(<span class="string">"now=[%d]"</span>, now.Unix())</span><br><span class="line">t.Logf(<span class="string">"format=[%s]"</span>, now.String())</span><br><span class="line">name, offset = now.Zone()</span><br><span class="line">t.Logf(<span class="string">"ZoneName=[%s], offset=[%d]s"</span>, name, offset)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下:</p><pre><code>cronexpr_test.go:379: now=[1568383281]cronexpr_test.go:380: format=[2019-09-13 22:01:21.245361 +0800 CST m=+0.001606362]cronexpr_test.go:382: ZoneName=[CST], offset=[28800]scronexpr_test.go:385: now=[1568383281]cronexpr_test.go:386: format=[2019-09-13 14:01:21.245528 +0000 GMT]cronexpr_test.go:388: ZoneName=[GMT], offset=[0]s</code></pre><p>可以看到实例代码中获取了两次时间, 第一次是以当前系统时间获取(+8:00), 第二次是以格林尼治时间获取(+0:00)<br>两次获取的绝对时间是相同的, 只是在系列化成字符串时, 根据各自不同的时区执行了偏移.</p><p>通过这样的方式可以从根本上避免时区带来的问题, 不同的数据库系统处理时区的方式存在差异, 一次使用 <code>DateTime</code> 之类的类型存储时间, 这样对时区的处理就依赖于数据库自身. 保险起见还是更推荐使用简单的 <code>bigint</code> 来存储绝对时间, 这样带来的好处也是巨大的, 例如可以将时间范围的计算转变成长整型的比较, 并且屏蔽了时区所带来的影响.</p><h1 id="3-不同时区的-crontab-表达式如何处理"><a href="#3-不同时区的-crontab-表达式如何处理" class="headerlink" title="3. 不同时区的 crontab 表达式如何处理"></a>3. 不同时区的 crontab 表达式如何处理</h1><p>在文章的开头我提到过, 这一问题的产生是由于用户可能在不同时区提交 crontab 表达式, 我们存储时间虽然使用绝对时间, 但是 crontab 本身就是一个用来匹配年月日的工具, 必然要涉及到时区问题.</p><blockquote><p>假设 0 时区的用户提交了一个 crontab 表达式 <code>0 */6 * * *</code>, 意为每个格林尼治时间的早 <code>10:00</code> 触发任务, 而服务器所在时区为东八区 CST, 如果直接将这个 crontab 表达式解析, 其语义会变成每个北京时间的早 <code>10:00</code> 触发任务, 可以看到, 直接使用会丢失时区信息.</p></blockquote><p>因此方案也显而易见, 提交 crontab 任务的时候, 需要提供时区信息, 在解析 crontab 表达式的时候, 此时解析的 cron 表达式中的小时信息都是基于服务器时区<code>(触发的小时为 [0, 6, 12, 18])</code> 都是基于服务器时区, 需要将其转换为调用方所在时区的触发时间<code>([4, 10, 16, 20])</code>.</p><p>由于 crontab 表达式的格式比较多, 类似 <em>, 5, </em>/8, 5-10, 5-10/2, 都可以表示小时, 难以直接对 cron 表达式做处理, 比较好的方式是通过 cron 表达式解析的结果, 对其触发的 <code>hourList</code> 值做替换.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Viper: Go 配置管理利器</title>
      <link href="/blog/2019/09/07/Viper-Go-%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%88%A9%E5%99%A8/"/>
      <url>/blog/2019/09/07/Viper-Go-%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%88%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="1-Viper-简介"><a href="#1-Viper-简介" class="headerlink" title="1. Viper 简介"></a>1. Viper 简介</h1><h2 id="1-1-什么是-Viper"><a href="#1-1-什么是-Viper" class="headerlink" title="1.1. 什么是 Viper"></a>1.1. 什么是 Viper</h2><p>Viper 是 Go 工程的完整配置解决方案, 能够在工程中处理所有类型的需求和格式, Viper 可以支持:</p><ul><li>设置默认值</li><li>JSON, TOML, YAML, HCL, envfile 和 Java properties 配置文件的读取</li><li>实时查看并重新读取配置文件(可选)</li><li>环境变量的读取</li><li>远程配置系统(etcd 和 Consul) 的读取和变更查看</li><li>命令行标志的读取</li><li>buffer 的读取</li><li>设置显示值</li></ul><p>Viper 可以被看做一个你所有工程配置需求的注册表.</p><h2 id="1-2-为什么使用要使用-Viper"><a href="#1-2-为什么使用要使用-Viper" class="headerlink" title="1.2. 为什么使用要使用 Viper"></a>1.2. 为什么使用要使用 Viper</h2><p>在构建现代应用时, 你一定不想关心配置文件的格式, 你应该把精力放在构建出色的软件系统, Viper 就是为此而生的.</p><p>Viper 可以为你完成如下工作:</p><ul><li>从 JSON, TOML, YAML, HCL, envfile 或 Java properties 格式中找到, 加载并解析配置文件;</li><li>提供为不同配置项设置默认值的机制;</li><li>提供在命令行中指定配置项来覆盖的机制;</li><li>提供别名系统来重命名配置, 而不用破坏现有代码;</li><li>当用户提供了与默认值相同的命令行或配置文件时了, 可以很容易地区分它们.</li></ul><p>Viper 使用如下优先级顺序, 每一项都会比后面优先级更高:</p><ol><li>通过显示调用去设置</li><li>命令行参数</li><li>环境变量</li><li>配置文件</li><li>k/v 存储系统</li><li>默认值</li></ol><p>Viper 配置项的 key 大小写不敏感.</p><h2 id="1-3-向-Viper-设置值"><a href="#1-3-向-Viper-设置值" class="headerlink" title="1.3. 向 Viper 设置值"></a>1.3. 向 Viper 设置值</h2><h3 id="1-3-1-设置默认值"><a href="#1-3-1-设置默认值" class="headerlink" title="1.3.1 设置默认值"></a>1.3.1 设置默认值</h3><p>一个好的配置系统是需要支持默认值的. 默认值对于 key 来说不是必须的, 但如果配置文件, 环境变量, 远程配置系统, 命令行, Set 函数都没有指定时, 默认值将会起作用.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">viper.SetDefault(<span class="string">"ContentDir"</span>, <span class="string">"content"</span>)</span><br><span class="line">viper.SetDefault(<span class="string">"LayoutDir"</span>, <span class="string">"layouts"</span>)</span><br><span class="line">viper.SetDefault(<span class="string">"Taxonomies"</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"tag"</span>: <span class="string">"tags"</span>, <span class="string">"category"</span>: <span class="string">"categories"</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-3-2-读取"><a href="#1-3-2-读取" class="headerlink" title="1.3.2 读取"></a>1.3.2 读取</h3><p>Viper 可以搜索多个路径, 但当前一个 Viper 实例只支持单个配置文件. Viper 不会设置配置项的默认搜索路径, 需要应用程序指定.</p><p>下面是一些关于 Viper 如何搜索并读取配置文件的例子. 没有任何路径是必须的, 但至少应该提供一个需要配置文件的路径.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">viper.SetConfigName(<span class="string">"config"</span>) <span class="comment">// 配置文件名称, 不需要扩展名, viper 会自动识别</span></span><br><span class="line">viper.AddConfigPath(<span class="string">"etc/appname/"</span>) <span class="comment">// 查找配置文件的路径</span></span><br><span class="line">viper.AddConfigPath(<span class="string">"$Home/.appname"</span>) <span class="comment">// 可以多次添加查找路径</span></span><br><span class="line">viper.AddCOnfigPath(<span class="string">"."</span>) <span class="comment">// 添加当前路径</span></span><br><span class="line">err := viper.ReadInConfig() <span class="comment">// 查找并读取配置文件</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(fmt.Errorf(<span class="string">"fatal error config file: %s\n"</span>, err))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以像这样处理一些特定的错误场景:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _, ok := err.(viper.ConfigFileNotFoundError); ok &#123;</span><br><span class="line">        <span class="comment">// 配置文件找不到</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 配置文件可以找到但发生了其他错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后续逻辑</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-写入"><a href="#1-3-3-写入" class="headerlink" title="1.3.3 写入"></a>1.3.3 写入</h3><h3 id="1-3-4-监视并重新读取配置文件"><a href="#1-3-4-监视并重新读取配置文件" class="headerlink" title="1.3.4 监视并重新读取配置文件"></a>1.3.4 监视并重新读取配置文件</h3><p>Viper 支持让你的应用在运行中实时读取配置文件.</p><p>需要重启服务才能使新配置生效的日子一去不复返了, Viper 支持的应用可以在运行时读取文件, 并且可以快速感知.</p><p>只需要将 <code>watchConfig</code> 告诉 Viper 实例, 也可以选在在每次发生改变时为 Viper 提供一个运行函数.</p><p>确保在调用 watchConfig 之前已经添加所有的 configPath.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">viper.WatchConfig()</span><br><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(e fsnotify.Event)</span>)</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Config file changed: "</span>, e.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-5-从-io-Reader-读取配置文件"><a href="#1-3-5-从-io-Reader-读取配置文件" class="headerlink" title="1.3.5 从 io.Reader 读取配置文件"></a>1.3.5 从 io.Reader 读取配置文件</h3><p>Viper 预先定义了多个配置源, 包括文件, 环境变量, 命令行参数和远程 k/v 存储, 但你不必受它们的约束, 你依然可以实现你自己所必须的配置源并提供给 Viper.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReadFromIOReader</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">viper.SetConfigType(<span class="string">"yaml"</span>)</span><br><span class="line"><span class="keyword">var</span> yamlExample = []<span class="keyword">byte</span>(<span class="string">`</span></span><br><span class="line"><span class="string">Hacker: true</span></span><br><span class="line"><span class="string">name: steve</span></span><br><span class="line"><span class="string">hobbies:</span></span><br><span class="line"><span class="string">- skateboarding</span></span><br><span class="line"><span class="string">- snowboarding</span></span><br><span class="line"><span class="string">- go</span></span><br><span class="line"><span class="string">clothing:</span></span><br><span class="line"><span class="string">  jacket: leather</span></span><br><span class="line"><span class="string">  trousers: denim</span></span><br><span class="line"><span class="string">age: 35</span></span><br><span class="line"><span class="string">eyes : brown</span></span><br><span class="line"><span class="string">beard: true</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">viper.ReadConfig(bytes.NewBuffer(yamlExample))</span><br><span class="line">name := viper.Get(<span class="string">"name"</span>) <span class="comment">// this would be "steve"</span></span><br><span class="line">fmt.Printf(<span class="string">"type of name: %T\n"</span>, name)</span><br><span class="line">fmt.Printf(<span class="string">"value of name: %s"</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到输出结果:</p><pre><code>type of name: stringvalue of name: steve</code></pre><h3 id="1-3-6-使用环境变量"><a href="#1-3-6-使用环境变量" class="headerlink" title="1.3.6 使用环境变量"></a>1.3.6 使用环境变量</h3><p>Viper 对环境变量提供了完整的支持, 有以下五种方式使用 ENV:</p><ul><li>AutomaticEnv()</li><li>BindEnv(string…): error</li><li>SetEnvPrefix(string)</li><li>SetEnvKeyReplacer(string…) *strings.Replacer</li><li>AllowEmptyEnv(bool)</li></ul><p>在使用环境变量的时候, 需要认识到 Viper 会将 ENV 变量视为区分大小写.</p><h4 id="1-3-6-1-SetEnvPrefix"><a href="#1-3-6-1-SetEnvPrefix" class="headerlink" title="1.3.6.1 SetEnvPrefix"></a>1.3.6.1 SetEnvPrefix</h4><p>Viper 提供了确保 ENV 变量唯一的机制. 通过使用 SetEnvPrefix, 你可以让 Viper 在读取环境变量时使用前缀, <code>BindEnv</code> 和 <code>AutomaticEnv</code> 都会使用这个前缀.</p><h4 id="1-3-6-2-BindEnv"><a href="#1-3-6-2-BindEnv" class="headerlink" title="1.3.6.2 BindEnv"></a>1.3.6.2 BindEnv</h4><p><code>BindEnv</code> 接收一个或两个参数, 第一个参数是 key 名, 第二个参数是环境变量名称. 环境变量的名称是大小写敏感的, 如果环境变玲名称没有提供, 那么 Viper 将自动假定环境变量匹配以下格式: <code>前缀 + &quot;_&quot; + key 名称大写</code>, 当你显式的提供了环境变量名称(即第二个参数)时, 就不会自动添加前缀. 例如, 如果第二个参数名是 <code>id</code>, Viper 就会查找环境变量 <code>ID</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestEnv</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">viper.SetEnvPrefix(<span class="string">"spf"</span>)</span><br><span class="line">viper.BindEnv(<span class="string">"id"</span>)</span><br><span class="line"></span><br><span class="line">os.Setenv(<span class="string">"SPF_ID"</span>, <span class="string">"13"</span>)</span><br><span class="line">id := viper.Get(<span class="string">"id"</span>)</span><br><span class="line">assert.Equal(t, id, <span class="string">"13"</span>)</span><br><span class="line"></span><br><span class="line">viper.BindEnv(<span class="string">"id"</span>, <span class="string">"myspf"</span>)</span><br><span class="line">os.Setenv(<span class="string">"myspf"</span>, <span class="string">"15"</span>)</span><br><span class="line">id = viper.Get(<span class="string">"id"</span>)</span><br><span class="line">assert.Equal(t, <span class="string">"15"</span>, id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BinEnv 会将环境变量与 Viper 维护的某个变量绑定, 如果只传一个参数, 这个参数将作为 key 名, 去匹配名称为 <code>大写(前缀_key)</code> 的环境变量. 如果传入两个参数, 第二个参数将直接作为读取的环境变量, 其值将到第一个参数上</p><h4 id="1-3-6-3-AutomaticEnv"><a href="#1-3-6-3-AutomaticEnv" class="headerlink" title="1.3.6.3 AutomaticEnv"></a>1.3.6.3 AutomaticEnv</h4><p><code>AutomaticEnv</code> 是一个强大的助手, 尤其是当与 <code>SetEnvPrefix</code> 组合使用时. 当被调用时, Viper 会在任何使用 <code>viper.Get</code> 的时候检查环境变量. 检查的逻辑是如下规则: 它将如果设置了 <code>EnvPrefix</code> 检查环境变量的名称是否与加上前缀的大写 key 相匹配</p><h4 id="1-3-6-4-SetEnvKeyReplacer"><a href="#1-3-6-4-SetEnvKeyReplacer" class="headerlink" title="1.3.6.4 SetEnvKeyReplacer"></a>1.3.6.4 SetEnvKeyReplacer</h4><p><code>SetEnvKeyReplacer</code> 允许你使用 <code>strings.Replacer</code>, 以在一定程度上重写环境变量的 key. 如果默希望在 <code>Get()</code> 调用中使用 <code>-</code> 或某些东西, 但希望环境变量使用 <code>_</code> 分隔符, 那么这是非常有用的. 使用它的一个例子可以在 <code>viper_test.go</code> 中找到.</p><h3 id="1-3-7-使用命令行变量"><a href="#1-3-7-使用命令行变量" class="headerlink" title="1.3.7 使用命令行变量"></a>1.3.7 使用命令行变量</h3><p>就像 <code>BindEnv</code>, 在调用绑定方法时, 不会设置该值, 这意味着可以尽早绑定, 甚至可以在 <code>init()</code> 的时候就绑定.</p><p>对于单个标识, <code>BindPFlag</code> 方法提供此功能:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">serverCmd.Flags().Int(<span class="string">"port"</span>, <span class="number">1138</span>, <span class="string">"Port to run Application server on"</span>)</span><br><span class="line">viper.BindPFlag(<span class="string">"port"</span>, serverCmd.Flags().Lookup(<span class="string">"port"</span>))</span><br></pre></td></tr></table></figure><p>还可以绑定一组现有的 pflag</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pflag.Int(<span class="string">"flagname"</span>, <span class="number">1234</span>, <span class="string">"help message for flagname"</span>)</span><br><span class="line"> </span><br><span class="line">pflag.Parse()</span><br><span class="line">viper.BindPFlags(pflag.CommandLine)</span><br><span class="line"> </span><br><span class="line">i := viper.GetInt(<span class="string">"flagname"</span>)</span><br></pre></td></tr></table></figure><h1 id="2-部分源码解析"><a href="#2-部分源码解析" class="headerlink" title="2. 部分源码解析"></a>2. 部分源码解析</h1><p>以一个简单的测试用例来作为源码分析的入口:</p><blockquote><p>viper_test.go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFlag</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">os.Setenv(<span class="string">"env"</span>, <span class="string">"test"</span>) <span class="comment">// 设置环境变量</span></span><br><span class="line"><span class="comment">// 设置默认值</span></span><br><span class="line">viper.SetDefault(<span class="string">"Best Friend"</span>, <span class="string">"Cream"</span>)</span><br><span class="line"><span class="comment">// 绑定变量, 将环境变量 env 绑定到 viper 维护的配置 env 上</span></span><br><span class="line">viper.BindEnv(<span class="string">"env"</span>, <span class="string">"env"</span>)</span><br><span class="line">env := viper.Get(<span class="string">"env"</span>)</span><br><span class="line">assert.NotNil(t, env)</span><br><span class="line"><span class="comment">// 按照配置读取不同文件, 此时需要读取 test-conf 文件</span></span><br><span class="line">viper.SetConfigName(fmt.Sprintf(<span class="string">"%s-conf"</span>, env))</span><br><span class="line"><span class="comment">// 路径为 ./conf</span></span><br><span class="line">viper.AddConfigPath(<span class="string">"conf"</span>)</span><br><span class="line"><span class="comment">// 类型为 yaml</span></span><br><span class="line">viper.SetConfigType(<span class="string">"yaml"</span>)</span><br><span class="line"><span class="comment">// viper 读取配置文件</span></span><br><span class="line">err := viper.ReadInConfig()</span><br><span class="line">assert.Nil(t, err)</span><br><span class="line"><span class="comment">// 取出 Color</span></span><br><span class="line">color := viper.Get(<span class="string">"Color"</span>)</span><br><span class="line">assert.Equal(t, <span class="string">"yellow"</span>, color)</span><br><span class="line"><span class="comment">// 取出 Age</span></span><br><span class="line">age := viper.Get(<span class="string">"Age"</span>)</span><br><span class="line">assert.Equal(t, <span class="number">1</span>, age)</span><br><span class="line"><span class="comment">// 取出 Hobby</span></span><br><span class="line">hobby := viper.Get(<span class="string">"Hobby"</span>)</span><br><span class="line">assert.Equal(t, <span class="number">2</span>, <span class="built_in">len</span>(hobby.([]<span class="keyword">interface</span>&#123;&#125;)))</span><br><span class="line"><span class="comment">// 取出 Best Friend</span></span><br><span class="line">bestFriend := viper.Get(<span class="string">"Best Friend"</span>)</span><br><span class="line">assert.Equal(t, <span class="string">"Cream"</span>, bestFriend)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>在测试文件路径下, 还有 conf/test-conf.yaml 文件内容如下:</p><p>目录结构如下:</p><p><img src="https://user-images.githubusercontent.com/17758731/64476222-e2c40780-d1be-11e9-921d-b21bd736e7d7.png" alt="image"></p><p>内容是我的爱猫王蛋黄 :)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Color:</span> <span class="string">"yellow"</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">"DanHuang"</span></span><br><span class="line"><span class="attr">Age:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Hobby:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"Eat"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"Sleep"</span></span><br></pre></td></tr></table></figure><h2 id="2-1-Viper-对象"><a href="#2-1-Viper-对象" class="headerlink" title="2.1 Viper 对象"></a>2.1 Viper 对象</h2><p>viper 包所有暴露出的函数在内部都是 viper 对象的方法, 这些方法都是对 viper 实例对象的操作, 因此我们先看看 viper 对象的底层结构:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Viper <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 分隔键列表的分隔符, 用于一次性访问嵌套值</span></span><br><span class="line">keyDelim <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找配置文件的路径集合</span></span><br><span class="line">configPaths []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从中读取配置的文件系统</span></span><br><span class="line">fs afero.Fs</span><br><span class="line"></span><br><span class="line"><span class="comment">// 远程提供者的集合, 用于搜索配置</span></span><br><span class="line">remoteProviders []*defaultRemoteProvider</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要在路径中查找的文件名称</span></span><br><span class="line">configName        <span class="keyword">string</span></span><br><span class="line">configFile        <span class="keyword">string</span></span><br><span class="line">configType        <span class="keyword">string</span></span><br><span class="line">configPermissions os.FileMode</span><br><span class="line">envPrefix         <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">automaticEnvApplied <span class="keyword">bool</span></span><br><span class="line">envKeyReplacer      *strings.Replacer</span><br><span class="line">allowEmptyEnv       <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">config         <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">override       <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">defaults       <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">kvstore        <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">pflags         <span class="keyword">map</span>[<span class="keyword">string</span>]FlagValue</span><br><span class="line">env            <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">aliases        <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">typeByDefValue <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在对象上存储读取属性, 这样我们就可以按顺序用注释进行回写</span></span><br><span class="line"><span class="comment">// 只有在读取的配置是属性文件时才会使用</span></span><br><span class="line">properties *properties.Properties</span><br><span class="line"></span><br><span class="line">onConfigChange <span class="function"><span class="keyword">func</span><span class="params">(fsnotify.Event)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-viper-SetDefault"><a href="#2-2-viper-SetDefault" class="headerlink" title="2.2 viper.SetDefault"></a>2.2 viper.SetDefault</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为这个 key 提供默认值, 对 key 的大小写不敏感, 仅当用户没有通过命令行, 配置或环境变量提供值时才会被使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetDefault</span><span class="params">(key <span class="keyword">string</span>, value <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123; v.SetDefault(key, value) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Viper)</span> <span class="title">SetDefault</span><span class="params">(key <span class="keyword">string</span>, value <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果传入alias，则设置适当的缺省值</span></span><br><span class="line">key = v.realKey(strings.ToLower(key))</span><br><span class="line">value = toCaseInsensitiveValue(value)</span><br><span class="line"></span><br><span class="line">path := strings.Split(key, v.keyDelim)</span><br><span class="line">lastKey := strings.ToLower(path[<span class="built_in">len</span>(path)<span class="number">-1</span>])</span><br><span class="line">deepestMap := deepSearch(v.defaults, path[<span class="number">0</span>:<span class="built_in">len</span>(path)<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// set innermost value</span></span><br><span class="line">deepestMap[lastKey] = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要工作:</p><ol><li><a href="#221">如果传入的 key 是别名, 遍历所有别名, 直到找到真正的 key (#2.2.1)</a></li><li><a href="#222">面对复杂的 value 类型, 将其所有 key 转变为小写 (#2.2.2)</a></li><li>通过 <code>&quot;.&quot;</code> 将 key 分割, 如 <code>spring.datasource.password</code></li><li>将 path 分割的最后一个字符串转为小写</li><li>用分割后的所有前缀搜索 defaults map, 如果不存在就创建</li><li>用分割后的最后一个字符创和传入的值做键值对放入 defaults 中</li></ol><p>面对复杂的默认值配置, 最终保存的结构类似如下形式:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">defaults := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line"><span class="string">"server"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line"><span class="string">"port"</span>: <span class="number">8080</span>,</span><br><span class="line"><span class="string">"servlet"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line"><span class="string">"context-path"</span>: <span class="string">"/"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"spring"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line"><span class="string">"datasource"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line"><span class="string">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line"><span class="string">"password"</span>: <span class="number">123456</span>,</span><br><span class="line"><span class="string">"url"</span>: <span class="string">"jdbc:mysql://localhost:3306/test"</span>,</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>,</span><br><span class="line"><span class="string">"driver-class-name"</span>: <span class="string">"com.mysql.cj.jdbc.Driver"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-1-v-Viper-realKey"><a href="#2-2-1-v-Viper-realKey" class="headerlink" title="2.2.1 (v *Viper) realKey"></a><span id="221">2.2.1</span> (v *Viper) realKey</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Viper)</span> <span class="title">realKey</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">newkey, exists := v.aliases[key]</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line">jww.DEBUG.Println(<span class="string">"Alias"</span>, key, <span class="string">"to"</span>, newkey)</span><br><span class="line"><span class="keyword">return</span> v.realKey(newkey)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 viper 存在别名系统, 别名系统是一个递归的结构, 如 B 是 A 的别名, C 是 B 的别名, D 是 C 的别名, viper 自身使用一个 <code>aliases map[string]string</code> 来存储别名信息, 因此上例中的情况会有如下存储结构:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aliases = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> &#123;</span><br><span class="line"><span class="string">"B"</span>: <span class="string">"A"</span>,</span><br><span class="line"><span class="string">"C"</span>: <span class="string">"B"</span>,</span><br><span class="line"><span class="string">"D"</span>: <span class="string">"C"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果给该方法输入 D, debug 输出的结果就是:</p><pre><code>DEBUG Alias D to CDEBUG Alias C to BDEBUG Alias B to A</code></pre><p>最终返回 A.</p><p>用户在设置默认值的时候有可能传入一个别名, 由于不知道别名的指向是否是另一个别名, 因此需要通过递归的方式找到不存在为止.</p><p>因此不断的通过当前的 key 取出 value 作为 newKey, 如果 newKey 已经存在, 就需要拿着 newKey 再去取值, 直到某一次通过 newKey 取不出值, 就说明当前的 newKey 是真正的 key.</p><h3 id="2-2-2-toCaseInsensitiveValue"><a href="#2-2-2-toCaseInsensitiveValue" class="headerlink" title="2.2.2 toCaseInsensitiveValue"></a><span id="222">2.2.2</span> toCaseInsensitiveValue</h3><p>判断 value 的类型:</p><ul><li>如果是 map 类型, 将它 key 的类型全部转换为 string</li><li>转成 map[string]interface{} 之后, 做一份拷贝并将 value</li><li>如果不是 map 类型, 直接返回</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">toCaseInsensitiveValue</span><span class="params">(value <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">switch</span> v := value.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">interface</span>&#123;&#125;:</span><br><span class="line">value = copyAndInsensitiviseMap(cast.ToStringMap(v))</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;:</span><br><span class="line">value = copyAndInsensitiviseMap(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-1-copyAndInsensitiviseMap"><a href="#2-2-2-1-copyAndInsensitiviseMap" class="headerlink" title="2.2.2.1 copyAndInsensitiviseMap"></a>2.2.2.1 copyAndInsensitiviseMap</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copyAndInsensitiviseMap</span><span class="params">(m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">nm := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, val := <span class="keyword">range</span> m &#123;</span><br><span class="line">lkey := strings.ToLower(key)</span><br><span class="line"><span class="keyword">switch</span> v := val.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">interface</span>&#123;&#125;:</span><br><span class="line">nm[lkey] = copyAndInsensitiviseMap(cast.ToStringMap(v))</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;:</span><br><span class="line">nm[lkey] = copyAndInsensitiviseMap(v)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">nm[lkey] = v</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建一个新 map</li><li>通过遍历当前 <code>map[string]interface{}</code> 的所有键值对</li><li>将 key 改为小写</li><li>如果 value 类型是 <code>map[interface{}]interface{}</code>, 转成 <code>map[string]interface{}</code> 后递归调用当前函数</li><li>如果 value 类型是 <code>map[string]interface{}</code>, 递归调用当前函数</li><li>如果类型不再是 map, 就将当前 kv 设置进拷贝 map</li><li>返回拷贝 map</li></ul><p>对 map 进行特殊处理的原因是在配置文件系统中, 配置文件类似树形结构, 每个配置项都有值或者子配置, 如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    context-path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>只有 map 用来表示递归的内容 <code>map[interface{}]interface{}</code> 意味着 map 中的每个元素可能是一个新的 map, 这个方法就是为了将上述结构复制为 <code>map[string]interface{}</code> 并遍历整个 map, 将所有的 key 转换成小写.</p><h3 id="2-2-3-deepSearch"><a href="#2-2-3-deepSearch" class="headerlink" title="2.2.3 deepSearch"></a>2.2.3 deepSearch</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deepSearch</span><span class="params">(m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, path []<span class="keyword">string</span>)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">for</span> _, k := <span class="keyword">range</span> path &#123;</span><br><span class="line">m2, ok := m[k]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="comment">// intermediate key does not exist</span></span><br><span class="line"><span class="comment">// =&gt; create it and continue from there</span></span><br><span class="line">m3 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">m[k] = m3</span><br><span class="line">m = m3</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">m3, ok := m2.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="comment">// intermediate key is a value</span></span><br><span class="line"><span class="comment">// =&gt; replace with a new map</span></span><br><span class="line">m3 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">m[k] = m3</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// continue search from here</span></span><br><span class="line">m = m3</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要功能:</p><ol><li>传入 <code>defaults(map[string]interface{})</code> 和 <code>path, 分割后的所有前缀(除去最后一个元素)</code></li><li>遍历 path 的每一个元素:<ol><li>如果当前元素不存在与 defaults:<ol><li>创建新 map m3</li><li>将 k, m3 赋值给当前 m</li><li>再将m 指向该空 map, 用于下一个 key 的赋值</li><li>直接开心新一轮循环</li></ol></li><li>判断当前 value 是否为 <code>map[string]interface{}</code><ol><li>如果不是, 将空 map 赋给当前 map 的 key</li></ol></li></ol></li></ol><h2 id="2-3-BindEnv"><a href="#2-3-BindEnv" class="headerlink" title="2.3 BindEnv"></a>2.3 BindEnv</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BindEnv</span><span class="params">(input ...<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123; <span class="keyword">return</span> v.BindEnv(input...) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Viper)</span> <span class="title">BindEnv</span><span class="params">(input ...<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> key, envkey <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(input) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"BindEnv missing key to bind to"</span>)</span><br><span class="line">&#125;</span><br><span class="line">key = strings.ToLower(input[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(input) == <span class="number">1</span> &#123;</span><br><span class="line">envkey = v.mergeWithEnvPrefix(key)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">envkey = input[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">v.env[key] = envkey</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>接收一个可变长度参数</li><li>变量名称是第一个参数, 环境变量名称是第二个参数</li><li>如果没指定第二个参数, 就会通过 <code>环境变量前缀大写 + _ + 变量名称大写</code> 的形式指定</li><li>以环境变量名为 key, viper 变量名为 value 放入 env 的 map 中</li></ol><h2 id="2-4-Get"><a href="#2-4-Get" class="headerlink" title="2.4 Get"></a>2.4 Get</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Get</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123; <span class="keyword">return</span> v.Get(key) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Viper)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">lcaseKey := strings.ToLower(key)</span><br><span class="line">val := v.find(lcaseKey)</span><br><span class="line"><span class="keyword">if</span> val == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v.typeByDefValue &#123;</span><br><span class="line"><span class="comment">// TODO(bep) this branch isn't covered by a single test.</span></span><br><span class="line">valType := val</span><br><span class="line">path := strings.Split(lcaseKey, v.keyDelim)</span><br><span class="line">defVal := v.searchMap(v.defaults, path)</span><br><span class="line"><span class="keyword">if</span> defVal != <span class="literal">nil</span> &#123;</span><br><span class="line">valType = defVal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> valType.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">bool</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToBool(val)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToString(val)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int32</span>, <span class="keyword">int16</span>, <span class="keyword">int8</span>, <span class="keyword">int</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToInt(val)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">uint</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToUint(val)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">uint32</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToUint32(val)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">uint64</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToUint64(val)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int64</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToInt64(val)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">float64</span>, <span class="keyword">float32</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToFloat64(val)</span><br><span class="line"><span class="keyword">case</span> time.Time:</span><br><span class="line"><span class="keyword">return</span> cast.ToTime(val)</span><br><span class="line"><span class="keyword">case</span> time.Duration:</span><br><span class="line"><span class="keyword">return</span> cast.ToDuration(val)</span><br><span class="line"><span class="keyword">case</span> []<span class="keyword">string</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToStringSlice(val)</span><br><span class="line"><span class="keyword">case</span> []<span class="keyword">int</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToIntSlice(val)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>将传入 key 转为小写</li><li><a href="#241">查找 key 对应的 value</a></li><li>如果为空返回</li><li>如果开启了 typeByDefValue, 需要根据不同类型依次完成转换</li></ol><h3 id="2-4-1-find"><a href="#2-4-1-find" class="headerlink" title=" 2.4.1  find"></a><span id="241"> 2.4.1 </span> find</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Viper)</span> <span class="title">find</span><span class="params">(lcaseKey <span class="keyword">string</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">val    <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">exists <span class="keyword">bool</span></span><br><span class="line">path   = strings.Split(lcaseKey, v.keyDelim)</span><br><span class="line">nested = <span class="built_in">len</span>(path) &gt; <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// compute the path through the nested maps to the nested value</span></span><br><span class="line"><span class="keyword">if</span> nested &amp;&amp; v.isPathShadowedInDeepMap(path, castMapStringToMapInterface(v.aliases)) != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the requested key is an alias, then return the proper key</span></span><br><span class="line">lcaseKey = v.realKey(lcaseKey)</span><br><span class="line">path = strings.Split(lcaseKey, v.keyDelim)</span><br><span class="line">nested = <span class="built_in">len</span>(path) &gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set() override first</span></span><br><span class="line">val = v.searchMap(v.override, path)</span><br><span class="line"><span class="keyword">if</span> val != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nested &amp;&amp; v.isPathShadowedInDeepMap(path, v.override) != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PFlag override next</span></span><br><span class="line">flag, exists := v.pflags[lcaseKey]</span><br><span class="line"><span class="keyword">if</span> exists &amp;&amp; flag.HasChanged() &#123;</span><br><span class="line"><span class="keyword">switch</span> flag.ValueType() &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"int"</span>, <span class="string">"int8"</span>, <span class="string">"int16"</span>, <span class="string">"int32"</span>, <span class="string">"int64"</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToInt(flag.ValueString())</span><br><span class="line"><span class="keyword">case</span> <span class="string">"bool"</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToBool(flag.ValueString())</span><br><span class="line"><span class="keyword">case</span> <span class="string">"stringSlice"</span>:</span><br><span class="line">s := strings.TrimPrefix(flag.ValueString(), <span class="string">"["</span>)</span><br><span class="line">s = strings.TrimSuffix(s, <span class="string">"]"</span>)</span><br><span class="line">res, _ := readAsCSV(s)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">case</span> <span class="string">"intSlice"</span>:</span><br><span class="line">s := strings.TrimPrefix(flag.ValueString(), <span class="string">"["</span>)</span><br><span class="line">s = strings.TrimSuffix(s, <span class="string">"]"</span>)</span><br><span class="line">res, _ := readAsCSV(s)</span><br><span class="line"><span class="keyword">return</span> cast.ToIntSlice(res)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> flag.ValueString()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nested &amp;&amp; v.isPathShadowedInFlatMap(path, v.pflags) != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Env override next</span></span><br><span class="line"><span class="keyword">if</span> v.automaticEnvApplied &#123;</span><br><span class="line"><span class="comment">// even if it hasn't been registered, if automaticEnv is used,</span></span><br><span class="line"><span class="comment">// check any Get request</span></span><br><span class="line"><span class="keyword">if</span> val, ok := v.getEnv(v.mergeWithEnvPrefix(lcaseKey)); ok &#123;</span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nested &amp;&amp; v.isPathShadowedInAutoEnv(path) != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">envkey, exists := v.env[lcaseKey]</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">if</span> val, ok := v.getEnv(envkey); ok &#123;</span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nested &amp;&amp; v.isPathShadowedInFlatMap(path, v.env) != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Config file next</span></span><br><span class="line">val = v.searchMapWithPathPrefixes(v.config, path)</span><br><span class="line"><span class="keyword">if</span> val != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nested &amp;&amp; v.isPathShadowedInDeepMap(path, v.config) != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// K/V store next</span></span><br><span class="line">val = v.searchMap(v.kvstore, path)</span><br><span class="line"><span class="keyword">if</span> val != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nested &amp;&amp; v.isPathShadowedInDeepMap(path, v.kvstore) != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Default next</span></span><br><span class="line">val = v.searchMap(v.defaults, path)</span><br><span class="line"><span class="keyword">if</span> val != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nested &amp;&amp; v.isPathShadowedInDeepMap(path, v.defaults) != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// last chance: if no other value is returned and a flag does exist for the value,</span></span><br><span class="line"><span class="comment">// get the flag's value even if the flag's value has not changed</span></span><br><span class="line"><span class="keyword">if</span> flag, exists := v.pflags[lcaseKey]; exists &#123;</span><br><span class="line"><span class="keyword">switch</span> flag.ValueType() &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"int"</span>, <span class="string">"int8"</span>, <span class="string">"int16"</span>, <span class="string">"int32"</span>, <span class="string">"int64"</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToInt(flag.ValueString())</span><br><span class="line"><span class="keyword">case</span> <span class="string">"bool"</span>:</span><br><span class="line"><span class="keyword">return</span> cast.ToBool(flag.ValueString())</span><br><span class="line"><span class="keyword">case</span> <span class="string">"stringSlice"</span>:</span><br><span class="line">s := strings.TrimPrefix(flag.ValueString(), <span class="string">"["</span>)</span><br><span class="line">s = strings.TrimSuffix(s, <span class="string">"]"</span>)</span><br><span class="line">res, _ := readAsCSV(s)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">case</span> <span class="string">"intSlice"</span>:</span><br><span class="line">s := strings.TrimPrefix(flag.ValueString(), <span class="string">"["</span>)</span><br><span class="line">s = strings.TrimSuffix(s, <span class="string">"]"</span>)</span><br><span class="line">res, _ := readAsCSV(s)</span><br><span class="line"><span class="keyword">return</span> cast.ToIntSlice(res)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> flag.ValueString()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// last item, no need to check shadowing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给定一个 key, 找出它的 value. 将按照以下顺序检查:<br>命令行标识, 环境变量, 配置文件, kv存储, 默认值.</p><p>Viper 将首先检查是否存在别名。</p><ol><li>[如果存在嵌套, 通过嵌套 map 得到嵌套的值的路径]</li></ol><h4 id="2-4-1-1"><a href="#2-4-1-1" class="headerlink" title="2.4.1.1"></a>2.4.1.1</h4>]]></content>
      
      <categories>
          
          <category> Go </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Viper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入理解 Git</title>
      <link href="/blog/2019/09/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-Git/"/>
      <url>/blog/2019/09/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-Git/</url>
      <content type="html"><![CDATA[<h1 id="1-Git-数据结构"><a href="#1-Git-数据结构" class="headerlink" title="1. Git 数据结构"></a>1. Git 数据结构</h1><p>当通过 git init 初始化一个 git 项目时, 当前路径上回自动创建一个 <code>.git</code> 文件夹用来保存所有 git 需要用到的数据.</p><p>我们先来简单介绍一下 <code>.git</code> 中的主要内容:</p><h2 id="1-1-HEAD"><a href="#1-1-HEAD" class="headerlink" title="1.1 HEAD"></a>1.1 HEAD</h2><p><img src="https://user-images.githubusercontent.com/17758731/64104177-57094000-cda6-11e9-8f19-e6c37ce646ac.png" alt="image"></p><ul><li>HEAD 是一个文本文件, 保存当前工作区中的当前分支, <code>ref: refs/heads/master</code> 就是代表当前正在工作的分支是 master, 切换分支时 head 的内容会发生改变</li></ul><h2 id="1-2-config"><a href="#1-2-config" class="headerlink" title="1.2 config"></a>1.2 config</h2><p>主要用于记录当前 git 仓库的配置信息, 假设通过 local 设置了其他的用户名和邮箱, 会在此处保存.</p><p><img src="https://user-images.githubusercontent.com/17758731/64104562-06461700-cda7-11e9-8110-3aa3df5ffac3.png" alt="image"></p><h2 id="1-3-refs"><a href="#1-3-refs" class="headerlink" title="1.3 refs"></a>1.3 refs</h2><p>HEAD 中的指向是一个 refs 下的文件</p><p><img src="https://user-images.githubusercontent.com/17758731/64105627-2c6cb680-cda9-11e9-8074-329b428f8a8b.png" alt="image"></p><p>refs 下包含如下几个内容:</p><ul><li>heads: 对应分支, 是一个独立的开发空间, 不同分支间的工作互不影响. 当彼此间需要集成的时候可以进行合并. HEAD 文件的内容是整个仓库当前工作在哪个分支上, 所以内容是一个引用, 指向 <code>refs/head/</code> 下的某个值, 而此处可以看到, master 内是一个 40 位的 16 进制数字(<code>42ba8f37d95fb8847e8b5639d67ad7aff7bfe0d1</code>)</li></ul><p>我们可以使用 git 内置的命令查看这串数字的类型, 发现这是一个 commit 对象, 也就是说 heads 中保存了当前项目的所有分支, 每个分支都指向了一个 commit 对象:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -t 42ba8f37d95fb8847e8b5639d67ad7aff7bfe0d1</span><br><span class="line">commit</span><br></pre></td></tr></table></figure><ul><li>tags: 标签, 当项目开发到一定程度, 是一个关键的里程碑, 或支持了某关键特性, 就可以对特定的 commit 打上一个 tag 做标识.</li></ul><h2 id="1-4-objects"><a href="#1-4-objects" class="headerlink" title="1.4 objects"></a>1.4 objects</h2><p>objects 是 git 中非常重要的路径, 保存了 git 核心数据结构: commit 信息</p><p><img src="https://user-images.githubusercontent.com/17758731/64106125-25927380-cdaa-11e9-8a3f-2131d855bb06.png" alt="image"></p><p>objects 下内容主要分为三部分:</p><ul><li>两位 16 进制数字开头的文件夹, 内部包含一个或多个 38 为 16 进制数字组成的文件名<code>(b98a673367b325d7de6151286d7ceb4aa6c9d3)</code>, 其实 git 内部主要使用 40 位的 16 进制数字, 需要将该名称与文件夹名组合起来, 如上图中我们查看的是 <code>01</code> 下的文件:</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -t 01b98a673367b325d7de6151286d7ceb4aa6c9d3</span><br><span class="line">tree</span><br></pre></td></tr></table></figure><p>类型为 tree, 此时我们可以再看看它的内容:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 01b98a673367b325d7de6151286d7ceb4aa6c9d3</span><br><span class="line">100644 blob 85aa2fa76396d11d0e3cfc3aa8d31d0d9fdb8da5SparseArray.md</span><br><span class="line">100644 blob 109f7918011338d8f409e965400f4ac2a99088ebsparse-array.go</span><br><span class="line">100644 blob b56a4561bf11b3fe2dfe7014b01eafc175b6b99bsparse-array_test.go</span><br></pre></td></tr></table></figure><p>可以看到这棵树中包含三个元素, blob 表示类型是文件, 而每个文件也包含一个 40 位的 hash 值, 我们再继续通过 hash 值查看其中一个元素的类型和内容:</p><p><img src="https://user-images.githubusercontent.com/17758731/64107005-072d7780-cdac-11e9-9d89-bd80161b05b6.png" alt="image"></p><p>类型是一个文件, 而内容就是一段简单的 go 代码</p><ul><li>info:</li><li>pack: git 会做自我梳理, 如果某个类型 1 的文件过于松散, 会对它进行打包, 并将打包后的文件放在 pack 中.</li></ul><p>commit, tree, blob 就是 git 数据结构中最为核心的三个元素.</p><h2 id="1-5-commit-tree-blob-三者间的关系"><a href="#1-5-commit-tree-blob-三者间的关系" class="headerlink" title="1.5 commit, tree, blob 三者间的关系"></a>1.5 commit, tree, blob 三者间的关系</h2><p><img src="https://user-images.githubusercontent.com/17758731/64113249-567ba400-cdbc-11e9-8afc-4d923c72c966.png" alt="image"></p><ul><li>每次执行 <code>git commit</code>, 都会创建一个 commit 对象, 每个 commit 对象除了保存前一个 commit 的地址以外, 还会对应唯一的 tree, 由于文件系统是树形结构, 这个 tree 代表了该 commit 的视图, 视图存放了当前 commit 对应本项目仓库的所有文件和文件夹的快照, 每个 commit 对象再不借助其他 commit 的情况下就可以复原出整个项目.</li><li>tree: 用来表示当前 commit 视图中的一个文件夹</li><li>blob: 直接与文件内容关联, 在 git 仓库中, 只要文件内容一致, 就是一个 blob</li></ul>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入理解 MySQL 原理</title>
      <link href="/blog/2019/08/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-MySQL-%E5%8E%9F%E7%90%86/"/>
      <url>/blog/2019/08/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-MySQL-%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="1-MySQL-体系架构"><a href="#1-MySQL-体系架构" class="headerlink" title="1. MySQL 体系架构"></a>1. MySQL 体系架构</h1><p>MySQL 的架构整体上可以分为服务层和引擎层:</p><ul><li>Server 层涵盖了 MySQL 大多数核心服务, 包括请求的接收, 以及绝大多数内置函数(如 DATE()等)</li><li>Engine 层负责数据的读写</li></ul><p><img src="https://user-images.githubusercontent.com/17758731/62950141-13ac5900-be1a-11e9-9497-d217c977a872.png" alt="image"></p><h2 id="1-1-连接器"><a href="#1-1-连接器" class="headerlink" title="1.1 连接器"></a>1.1 连接器</h2><pre><code>负责建立与客户端建立连接, 获取权限, 维持和管理连接</code></pre><p>通过 TCP 连接, 验证用户身份, 当连接到达时获取用户当前所有权限, 而权限的获取是一次性的, 也就是说即使登录后对该用户的权限做了修改, 也无法立即生效, 需要等到用户下一次登录 MySQL 才能体现.</p><p>常用的登录命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ mysql -h<span class="variable">$IP</span> -P<span class="variable">$PORT</span> -u<span class="variable">$USER</span> -p</span><br><span class="line">Enter password: <span class="comment"># 此时再输入密码</span></span><br></pre></td></tr></table></figure><p>然后再输入密码, 虽然 -p 后可以直接跟密码, 但此时界面不会对密码进行隐藏, 为了安全起见还是建议使用前者</p><p>在登录之后, 可以通过 <code>show processlist</code> 命令查询当前所有生效的连接, 下图是我通过两个终端分别登录本机的 MySQL, 并使用第二个连接执行该命令的结果</p><p><img src="https://user-images.githubusercontent.com/17758731/62951975-7b17d800-be1d-11e9-92c6-1c2db4c906f7.png" alt="image"></p><p>登录成功后, 如果没有后续的操作, 连接会处于 <code>Sleep</code> 状态, 如上图中 Id 为 3 的连接, 表示系统中存在的一个空闲连接. 而 Id 为 4 的连接此时由于正在执行 <code>show processlist</code> 命令, 因此 Command 列值为 <code>Query</code></p><p>MySQL 连接默认的超时时间为 8 小时, 意味着该连接如果 8 小时内没有进行任何的操作, 就会被系统逐出. 超时失效后的连接如果试图再执行任何操作, 都会被告知 <code>Lost connection to MySQL server during query</code></p><h2 id="1-2-查询缓存"><a href="#1-2-查询缓存" class="headerlink" title="1.2 查询缓存"></a>1.2 查询缓存</h2><p>MySQL 所有的查询请求都会先从查询缓存中查找, 其内容可以看做一个一个典型的映射关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;SQL 语句, 结果集&gt;</span><br></pre></td></tr></table></figure><p>如果查询语句命中缓存就不会执行后面的操作</p><p>虽然看起来很美好, 但 MySQL 为此做了相对复杂的缓存一致性的维护, 对表的任何写操作都会导致使用该表所对应的缓存全部失效.</p><p>为什么需要全部失效呢? 因为 MySQL 对于范围查询的侦测基本上无能为力, 假设我们有如下语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, score <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> score &gt; <span class="number">90</span>;</span><br></pre></td></tr></table></figure><p>这样一个典型的区间查询, 假设有如下操作:</p><ol><li>插入一条 score 为 92 的字段;</li><li>假设有一个 name 为 Bob 的记录, score 为 80, 现在将其修改为 91;</li></ol><p>执行这样的操作时, MySQL 难以实现也没有必要去完成对缓存细粒度的更新, 因此任何写操作都会导致该表的全部缓存失效.</p><p>这样的机制就带来了一个问题: 对于写操作比较频繁的表, 对应缓存失效非常频繁, 导致白白浪费内存和 CPU. 因此可以在配置中禁用缓存模块, 甚至在 MySQL8.0 之后, 官方已经彻底将缓存模块删除.</p><h2 id="1-3-分析器"><a href="#1-3-分析器" class="headerlink" title="1.3 分析器"></a>1.3 分析器</h2><p>分析器是执行 SQL 的第一步</p><h3 id="1-3-1-词法分析"><a href="#1-3-1-词法分析" class="headerlink" title="1.3.1 词法分析"></a>1.3.1 词法分析</h3><p>解析字符串中每个单词的含义, 建立连接后, 客户端都是已一条字符串格式的 SQL 语句与 MySQL 进行交互, 假设客户端传入了如下一条 SQL 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> grade = <span class="number">4</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>在进行词法分析的时候, 会进行如下操作:</p><ol><li>从 <code>SELECT</code> 判断出这是一条查询语句</li><li>从 <code>id, name, gender, score</code> 识别为列名</li><li>从 <code>student</code> 识别出表名  </li><li>…</li></ol><p>分析的的输出是一棵语法树, 语法树的节点主要分为以下两种类型:</p><ol><li>单个元素, 例如关键字, 表名, 运算符等</li><li>子语句, 例如子查询, 而每个子语句也有一棵语法树用来表示自身的所有单个元素和子语句</li></ol><h3 id="1-3-2-语法分析"><a href="#1-3-2-语法分析" class="headerlink" title="1.3.2 语法分析"></a>1.3.2 语法分析</h3><p>根据词法分析的结果和语法规则判断输入的 SQL 语句是否满足 MySQL 语法</p><h3 id="1-3-3-语义分析"><a href="#1-3-3-语义分析" class="headerlink" title="1.3.3 语义分析"></a>1.3.3 语义分析</h3><h2 id="1-4-优化器"><a href="#1-4-优化器" class="headerlink" title="1.4 优化器"></a>1.4 优化器</h2><p>经过分析器, MySQL 已经理解了 SQL 语句要做什么, 现在需要进行优化操作</p><ol><li>根据规则(扫描行数/是否排序等)决定使用哪条索引</li><li>进行多表关联的时候, 决定表的连接顺序</li></ol><p>最终确定执行方案</p><h2 id="1-5-执行器"><a href="#1-5-执行器" class="headerlink" title="1.5 执行器"></a>1.5 执行器</h2><p>先判断用户对表有没有相应的执行权限, 如果有权限, 根据表所属的引擎调用不同接口. 至于为什么在此处才查询是否有权限, 是因为有时候 SQL 语句需要操作的表不只是 SQL 语句中使用的, 例如当有触发器需要执行时, 涉及的表就没有 体现在 SQL 语句中. 查询语句会优先执行 <code>获取满足条件的第一行</code> 接口, 然后再循环调用 <code>查询满足条件的下一行</code> 接口</p><h1 id="2-MySQL-日志系统"><a href="#2-MySQL-日志系统" class="headerlink" title="2. MySQL 日志系统"></a>2. MySQL 日志系统</h1><p>这里主要介绍两种日志, 慢查询日志和二进制日志(BinLog)</p><p>RedoLog(重做日志) 和 UndoLog(回滚日志)属于 InnoDB 提供的特性, 而非 MySQL 提供, 对二者的介绍会放在事务的实现一章.</p><h2 id="2-1-慢查询日志"><a href="#2-1-慢查询日志" class="headerlink" title="2.1 慢查询日志"></a>2.1 慢查询日志</h2><h2 id="2-2-BinLog"><a href="#2-2-BinLog" class="headerlink" title="2.2 BinLog"></a>2.2 BinLog</h2><p>BinLog 记录了对 MySQL 数据库执行更改的所有操作, BinLog 功能会将所有事务的操作通过日志的形式追加到磁盘中持久化, 不存在被自动覆盖的情况.</p><p>BinLog 是 MySQL server 层的概念, 与存储引擎无关, 但大部分支持事务的存储引擎都实现了 BinLog 的整合, 例如 InnoDB 中 BinLog 的持久化是事务中的一个步骤, InnoDB 会等待 MySQL 返回 BinLog 持久化的结果, 再决定自身是提交还是回滚, 因此对 InnoDB 来说, 任何提交的事务必然存在 BinLog.</p><h3 id="2-2-1-BinLog-内容"><a href="#2-2-1-BinLog-内容" class="headerlink" title="2.2.1 BinLog 内容"></a>2.2.1 BinLog 内容</h3><p>BinLog 有两种形式:</p><table><thead><tr><th>形式</th><th>描述</th></tr></thead><tbody><tr><td>STATEMENT</td><td>BinLog 记录的是执行的 SQL 语句本身, 优点是节省空间, 缺点是有些特定的函数在不同情况下得到的结果不同</td></tr><tr><td>ROW</td><td>BinLog 记录的是记录的修改情况, 假设一条 SQL 语句修改了 100 条语句, 该模式下 BinLog 会记录这 100 条语句的被修改情况, 缺点是浪费空间, 优点是记录的更为准确, 也不会出现 STATEMENT 模式的问题</td></tr><tr><td>MIXED</td><td>是以上两种模式的混合, 一般的语句修改使用 STATEMENT 保存, 而如果存在某些 STATEMENT 无法完成主从复制的操作, 则采用 ROW 格式保存.</td></tr></tbody></table><p>假设有如下表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`a`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`t_modified`</span> <span class="keyword">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_a`</span> (<span class="string">`a`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_t_modified`</span>(<span class="string">`t_modified`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><p>当我们执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t <span class="keyword">where</span> a &gt;= <span class="number">4</span> <span class="keyword">and</span> t_modified &lt;= <span class="string">'2019-09-04'</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>如果 BinLog 格式为 statement, BinLog 中记录的就是 SQL 语句的原文, 但这样一条看似没有问题的 BinLog 如果用来复现数据, MySQL 会抛出一条警告, 因为这条 delete 语句带 limit, 贸然执行可能会带来数据不一致的场景:</p><ul><li>如果 delete 语句使用的是索引 idx_a, 那么会根据 idx_a 找到第一个满足条件的行</li><li>如果 delete 语句使用的索引是 idx_t_midified, 那么会根据 idx_t_midified 删除第一个满足条件的行.</li></ul><p>如果 BinLog 格式为 row, 此时的 BinLog 原文中不会存在 SQL 语句原文, 而是替换成了两个 event:</p><ul><li>Table_map event: 标识后面的操作是基于哪张表;</li><li>Delete_rows event: 用于定义删除行为.</li></ul><p>此时 BinLog 中记录的是真实被删除记录的主键, 当然不会出现主备删除不同行的问题.</p><p>此外, statement 模式下对一些函数做了处理, 例如 NOW(), 不会出现在主库从库分别记录当前时间的情况, 原理是在BinLog 生成时, 多记了一条命令: <code>SET TIMESTAMP=1567611268</code>, 通过这条命令, 让 MySQL 显式确保主备数据的一致性.</p><h3 id="2-2-2-BinLog-功能"><a href="#2-2-2-BinLog-功能" class="headerlink" title="2.2.2 BinLog 功能"></a>2.2.2 BinLog 功能</h3><p>总的来说, BinLog 具有以下功能:</p><ol><li>恢复数据, 数据库存在误操作的可能, 假设某个时间被删库跑路应该如何防范?<br>比较常见的方式是采用定级备份 + BinLog 恢复. 定时备份可以选择每日或者每周进行一次, BinLog 会一直追加. 假设数据库在 <code>t1</code> 时刻被删库跑路, 而距离 <code>t1</code> 最近的一次全量备份发生在 <code>t0</code>, 那么首先需要将 <code>t0</code> 时刻的副本覆盖, 然后就可以通过全量执行 <code>t0</code> ~ <code>t1</code> 期间的全量 BinLog 来将数据库恢复到 <code>t1</code> 时刻的状态.</li><li>主备复制, 目前数据库集群在主备模式下, 一般都使用 BinLog 来实现主从复制. 每个备库会定时从主库进行 BinLog 的同步去执行. 每个备库都维护了自身的同步进度, 同步时会根据自己当前额进度去获取其后的 BinLog.</li><li>业务需求, 业务系统间有时会通过监听 BinLog 的方式去实现通信. 如某个系统本身逻辑比较复杂, 但只需要关心其写入 DB 的数据情况, 此时就可以通过监听该系统所用数据库的 BinLog 即可. 常见的工具有 <code>Cannal</code>, <code>Maxwell</code> 等.</li></ol><p>BinLog 的日志文件格式为二进制, 其产生的二进制文件不能通过 vim, cat, tail 等命令直接查看, 需要使用 MySQL 提供的专用查看工具 <code>mysqlbinlog</code> 进行查看.</p><p>BinLog 的写入机制</p><blockquote><p>事务执行过程中, 先把日志写到 BinLog Cache, 事务提交的时候再把 BinLog Cache 写入到 BinLog 文件中.</p></blockquote><p>一个事务的 BinLog 不能被拆开, 再大的事务也要确保一次性写入. MySQL 给每个线程分配了一块 BinLog Cache 的内存, 如果超过了这个大小就需要暂存到磁盘, 事务提交的时候执行器把 BinLog Cache 里完整事务写入到 BinLog 中, 并清空 BinLog Cache.</p><p><img src="https://static001.geekbang.org/resource/image/9e/3e/9ed86644d5f39efb0efec595abb92e3e.png" alt="image"></p><p>每个线程都有自己的 BinLog Cache, 但是共用一份 BinLog 文件.</p><ul><li>write 操作指的是将日志写入文件系统的 Page cache, 并没有落盘, 速度较快;</li><li>fsync 会落盘</li></ul><p>wirte 和 fsync 的时机由 <code>sync_binlog</code> 控制:</p><ul><li>sync_binlog = 0, 每次提交只 write, 不 fsync</li><li>sync_binlog = 1, 每次提交既 write, 又 fsync</li><li>sync_binlog = N(N &gt; 1), 每次提交都 write, 累计 N 个后再 fsync</li></ul><p>实际业务场景中, 考虑到丢失日志量的可控性, 通常会设置为 100~1000 之间, 但这样的话如果 MySQL 宕机重启, 会丢失最新一部分事务的 BinLog 日志.</p><h1 id="3-MySQL-索引"><a href="#3-MySQL-索引" class="headerlink" title="3. MySQL 索引"></a>3. MySQL 索引</h1><h2 id="3-1-索引概述"><a href="#3-1-索引概述" class="headerlink" title="3.1 索引概述"></a>3.1 索引概述</h2><p>常见的索引有如下几种:</p><ol><li>哈希表</li><li>搜索树</li></ol><p>哈希表示一种 以 k-v 形式存储数据的结构, 其典型的实现有 Java 中的 <code>HashMap</code> 等, 只要输入查询的 key, 就可以找到其对应的 value. 哈希表的实现方式比较简单, 根据 key 计算出一个哈希值, 然后放在数组的某个特定位置, 常见的 <code>数组+链表挂链</code> 的形式就是对哈希表的实现.</p><p>哈希表的插入和查询性能十分优秀, 通常可以认为其 get/set 方法的时间复杂度是 O(1). 对于等值查询通常是首选, 在 Redis, Memcache 中均有广泛应用. 但由于其 key 的排布无序, 虽然在 put 新元素时由于不需要考虑顺序因此非常快, 但却无法处理区间查询(大于和小于)</p><p>最典型的搜索树结构就是二叉查找树, 二叉树的特点是左子树的值小于等于双亲结点, 右子树的值大于双亲结点, 在查询的时候应用二分查找的原理能够做到理想情况下 O(log(N)) 级别的插入和查询, 并且由于其本身就是有序的, 因此天然支持区间查询.</p><p>如果能够加上自平衡的功能, 例如红黑树, 确实作为索引的性能已经比较理想, 但是这样的结论仅限于内存中的数据结构.</p><p>由于数据库系统的数据和索引需要存储在磁盘上, 而对于正常的机械磁盘来说, 一次随机读平均耗时 10ms, 其实时间主要消耗在寻到和旋转磁头的延迟上了. 而顺序读一条数据的消耗大概不到前者的 1%,  因此如果想作为一个对磁盘友好的索引结构, 不能只考虑内存中的性能, 还需要尽可能的降低随机读的频率.</p><p>那么应该如何去降低随机读的频率呢? 以红黑树为例, 假设有一千万条数据, 红黑树最少需要 24 层能够容纳得下, 那就意味着如果想根据磁盘中的红黑树找到磁盘中的数据, 就需要随机读 24 次磁盘, 这显然是不能接受的, 因此想降低随机读的频率, 首先就需要尽可能降低查询次数, 也就是降低树的深度. 在数据总量保持不变的前提下, 如果想降低树的深度, 最可行的办法就是将二叉树变为多叉树. 每个节点变成多叉树之后, 其双亲结点内部相应的需要维护一个小索引(假设是 10 叉树, 则双亲节点内部需要维护其负责的 10 个区间对应的指针), 但其实这个成本是可以忽略不计的, 因为我们一次将其从磁盘中取出, 每个节点内部的索引操作都是在内存中完成. 这样就能避免在一次查询中过多操作磁盘.</p><p>因此引出了 InnoDB 索引的实现: B+树, B+树就是为了充分利用磁盘预读功能而设计的一种数据结构:</p><blockquote><p>磁盘预读与局部性原理:<br>由于存储介质的特性, 磁盘的IO 速度远远低于主存, 因此为了提高效率, 要尽量减少磁盘 IO, 因此磁盘往往不是严格按需读取, 而是每次会预读一块数据, 即使只读一个字节, 磁盘也会从这个位置开始, 顺序向后读取一定长度(默认 4k)的数据放入内存, 这样做的理论依据是注明的局部性原理:<br>当一个数据被用到时, 其附近的数据也通常马上会被使用.</p></blockquote><p>B+ 数每个节点可以存储多个关键字, 它将节点大小设置为磁盘页的大小, 充分利用了磁盘预读的功能, 每次读取磁盘页的时候就会读取整个节点, 也正因为每个节点存储着非常多的关键字(InnoDB 每个双亲结点大概可以存储 1200 个子节点), 会使得树深度很小, 进而要执行的磁盘读取操作次数就会非常少, 更多的是在内存中对读取的数据进行查询操作, 而这部分操作的消耗往往可以忽略不计.</p><p><img src="https://user-images.githubusercontent.com/17758731/63212520-4d41d480-c138-11e9-92fc-6417e6d29717.png" alt="image"></p><h2 id="3-2-InnoDB-索引模型"><a href="#3-2-InnoDB-索引模型" class="headerlink" title="3.2 InnoDB 索引模型"></a>3.2 InnoDB 索引模型</h2><p>InnoDB 支持以下几种索引:</p><ul><li>B+ 树索引</li><li>全文索引</li><li>自适应性哈希索引</li></ul><p>B+ 树索引就是传统意义上的索引, 是目前关系型数据系统中查找数据最为常用和有效的索引. 结构类似于一棵多叉树, 根据键快速找到数据. 自适应性哈希索引, 顾名思义是由 InnoDB 根据实时的查询情况自动为表生成的索引, 不能人为干预.</p><p>B+ 数索引的本质就是 B+ 树在数据库中的实现. 在 InnoDB 中, 每个 B+ 数的双亲节点大致可以保存 1200 个子节点, 可以近似理解为 1200 叉树, 那么即使在面对亿级数据量时, 也能够做到不超过 4 层, 并且 B+ 数的第二层基本会常驻内存, 因此平均场景下, InnoDB 通过索引查询一条记录最多只需要 2~4 次磁盘 IO, 意味着查询时间大致需要 20~40ms.</p><pre><code>在 InnoDB 中, 表都是根据主键顺序以索引的形式存放的, 这种存储方式称之为索引组织表. 所有的数据都存储在主键的 B+ 树中.除了主键以外的其他索引被称为辅助索引, 叶子节点存储着索引字段和主键的映射, 在通过辅助索引查询时, 需要先从辅助索引中找到记录的主键, 再回到主索引查询对应记录.</code></pre><p>下面通过一个例子来解释一下 InnoDB 是如何通过索引快速定位数据的.</p><p>假设有以下表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    k <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    <span class="keyword">index</span>(k)</span><br><span class="line">) <span class="keyword">engine</span>=<span class="keyword">InnoDB</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t <span class="keyword">VALUES</span>(<span class="number">10</span>, <span class="number">1</span>, <span class="string">'Alice'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t <span class="keyword">VALUES</span>(<span class="number">20</span>, <span class="number">2</span>, <span class="string">'Bob'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t <span class="keyword">VALUES</span>(<span class="number">30</span>, <span class="number">3</span>, <span class="string">'Carl'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t <span class="keyword">VALUES</span>(<span class="number">50</span>, <span class="number">5</span>, <span class="string">'David'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t <span class="keyword">VALUES</span>(<span class="number">60</span>, <span class="number">6</span>, <span class="string">'Eartha'</span>);</span><br></pre></td></tr></table></figure><p>此时表中记录为</p><table><thead><tr><th>id</th><th>k</th><th>name</th></tr></thead><tbody><tr><td>10</td><td>1</td><td>Alice</td></tr><tr><td>20</td><td>2</td><td>Bob</td></tr><tr><td>30</td><td>3</td><td>Carl</td></tr><tr><td>10</td><td>1</td><td>David</td></tr><tr><td>10</td><td>1</td><td>Eartha</td></tr><tr><td>10</td><td>1</td><td>Frank</td></tr></tbody></table><p><img src="https://user-images.githubusercontent.com/17758731/63221133-1535a280-c1c7-11e9-9a16-eb6ccbf017b9.png" alt="image"></p><ul><li>如果查询语句是 <code>SELECT * FROM t WHERE id = 10;</code>, 及主键查询, 则只需所搜主索引;</li><li>如果查询语句是 <code>SELECT * FROM t where k = 5;</code>, 即普通索引查询, 则需要先搜索 k 索引树, 得到 id 值为 50, 再去主索引中搜索一次, 这个过程被称为回表.</li></ul><h2 id="3-3-索引维护"><a href="#3-3-索引维护" class="headerlink" title="3.3 索引维护"></a>3.3 索引维护</h2><p>B+ 树是一种相对较为复杂的数据结构, 为了能够最大程度优化磁盘的读写, 引入了很多较为复杂的特性, 这里简单介绍一下 B+ 树节点的分裂与合并</p><p>B+ 树在插入和删除元素的时候, 都需要维护其有序性:</p><ul><li>以上图为例, 加入插入的新行 id 为 70, 则只需要在 R5 后追加一条记录. 如果插入的 id 值为 40, 就相对麻烦一些, 需要将 R4 后的数据在逻辑上向后挪, 并将 id 为 40 的记录插入到 R3 之后, 更糟的情况是, 如果该叶子节点已满, 就需要申请一个新的数据页, 然后挪动一部分数据过去, 这个过程称为页的分裂, 频繁的分裂会对性能造成影响</li></ul><p><img src="https://user-images.githubusercontent.com/17758731/63221460-dd7d2980-c1cb-11e9-8cd8-ed1b13b6eb0b.png" alt="image"></p><table><thead><tr><th style="text-align:center">叶子节点满</th><th style="text-align:center">双亲节点满</th><th>操作</th></tr></thead><tbody><tr><td style="text-align:center">NO</td><td style="text-align:center">NO</td><td>直接将记录插入到叶子节点</td></tr><tr><td style="text-align:center">YES</td><td style="text-align:center">NO</td><td>1. 拆分叶子节点<br>2. 将中间的节点放入双亲结点<br>3. 小于中间节点的记录放左边<br>4. 大于或等于中间节点的记录放右边</td></tr><tr><td style="text-align:center">YES</td><td style="text-align:center">YES</td><td>1. 拆分叶子节点<br> 2. 小于中间节点的记录放在左边<br> 3. 大于中间节点的记录放在右边<br> 4. 拆分双亲结点<br> 5. 小于中间节点的记录放左边<br> 6. 大于中间节点的记录放右边<br> 7. 中间节点放入上一层双亲结点</td></tr></tbody></table><blockquote><p>为什么 InnoDB 的表推荐使用自增主键<br>从上图的插入过程可以发现, 对 B+ 树来说, 效率最高的插入方式就是插入 id 最大的元素(未必需要递增, 只需要保证每次插入最大即可), 这样的插入永远是在最后一个叶子节点中向后最佳元素. 而其他情况下的插入则需考虑节点分裂. 对数据库来说, 实现 <code>永远插入最大值</code> 最简单的方式就是自增</p></blockquote><h2 id="3-4-联合索引"><a href="#3-4-联合索引" class="headerlink" title="3.4 联合索引"></a>3.4 联合索引</h2><p>联合索引指的是对表上的多个列进行索引, 联合索引的创建方法也和单个索引相同, 唯一的不同之处在于有多个索引列. 底层结构也与普通索引基本相同, 不同之处在于联合索引的叶子节点中, key 是由多个值组成的, 并且 key 之间时按照多个列从左到右的顺序排序</p><p>联合索引能够解决相对复杂的查询逻辑, 同时对多个字段进行查询, 但其使用时必须遵循最左匹配原则.</p><p><img src="https://user-images.githubusercontent.com/17758731/63221796-be34cb00-c1d0-11e9-9478-11a90c6d4682.png" alt="image"></p><p>上图是对两个 int 列进行联合索引的示意图, 可以看到, 联合索引中 key 的顺序先按照列 a 排序, 列 a 相同再按照列 b 排序, 这样类似字典序的排序方式.</p><p>由于这种特性, 如果想使用某条联合索引, 筛选条件中列的顺序必须严格符合联合索引的最左匹配, 因为如果跳过了某一列, 索引就不再有序, 假设把上图中的列 a 去掉, 列 b 的索引就变成了 <code>[10, 15, 3, 5, 5]</code> 显然无法发挥索引的功能.</p><blockquote><p>假设现在有一条 a, b, c, d 列组成的联合索引, 那么能匹配该索引的查询语句为:<br>a -&gt; b -&gt; c -&gt; d<br>a -&gt; b -&gt; c<br>a -&gt; b<br>a</p></blockquote><h2 id="3-5-覆盖索引"><a href="#3-5-覆盖索引" class="headerlink" title="3.5 覆盖索引"></a>3.5 覆盖索引</h2><p>如果一条查询语句能够从辅助索引中获得全部需要的信息, 那么就不再需要回表, 我们就将这样的索引成为覆盖索引.</p><p>对于 InnoDB 的辅助索引而言, 叶子节点的 key 为参与索引的所有字段, value 为主键信息, 假设该索引的字段为k1, k2, 那么如下查询语句都可以使用覆盖所以, 免去回表操作.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> k1 <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> k2 = ?;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, k1 <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> k2 = ?;</span><br></pre></td></tr></table></figure><h2 id="3-6-索引的选择"><a href="#3-6-索引的选择" class="headerlink" title="3.6 索引的选择"></a>3.6 索引的选择</h2><p>由于一张表中可以存在多个索引(建议索引的数量不要超过 16 条), 但目前一条 SQL 语句只会选择一条索引去执行, 当 SQL 语句中没有明确规定走哪一条索引时, 就会由查询优化器来选择一条.</p><p>下面我们来聊一聊优化器是如何选择索引的.</p><p>查询优化器选择索引的目的, 是为了找到一个最优的方案, 最终以最小的代价去执行语句. 在绝大部分情况下, 查询优化器的行为都是符合预期的, 但既然查询优化器的行为也是由代码逻辑控制, 就可能在特定的情况下与预期不符.</p><p>先说说优化器选择的几个主要标准:</p><ol><li>扫描行数: 这是最直接的指标, 扫描行数越多就意味着访问磁盘的次数越多, 消耗的 CPU 越多;</li><li>是否需要回表</li><li>是否使用临时表;</li><li>是否排序;</li></ol><h3 id="3-6-1-扫描行数"><a href="#3-6-1-扫描行数" class="headerlink" title="3.6.1 扫描行数"></a>3.6.1 扫描行数</h3><p>首先需要明确一个概念, MySQL 在真正开始执行语句前, 无法准确知道满足条件的记录有多少条, 只能根据 <code>统计信息</code> 来估算记录数.</p><p>统计信息就是索引的区分度, 我们在建立索引时普遍会选择区分度更高, 也就是值的离散程度更高的列作为索引. 而一个索引上不同值的个数, 我们称之为 <code>基数</code>, 基数越大, 索引的区分度越高.</p><p>在 MySQL 中, 可以使用 <code>show index</code> 方法查看一个索引的基数.</p><p>而 MySQL 获取索引基数的方式是通过采样统计, 也就是说这里的 <code>cardinality</code> 列只是一个估算的值. 真正执行一遍 SQL 语句再统计虽然可以得到较为准确的值, 但是一旦表中数据过大, 这项统计工作就会变得异常耗时.</p><blockquote><p>在进行统计工作的时候, MySQL 会默认选择 N 个数据页, 统计这些页上不同的值, 得到这些页上的基数后, 得到一个平均值, 再乘以这个索引的数据页数, 就得到整条索引的基数. 而表的数据是会持续更新的, 因此索引的统计信息也不是一成不变的. 从上一次统计开始, 当整条索引上的数据行变更超过 1/M 的时候, 会自动触发重新进行一次索引统计.<br>MySQL 可以使用 <code>innodb_stats_persistent</code> 参数控制索引统计的行为  </p><ol><li>当设置为 on 的时候, 表示会将统计信息持久化存储, 此时默认 N 为 20, M 为 10.</li><li>当设置为 off 的时候, 表示统计信息只存储在内存中, 此时默认的 N 为 8, M 为 16.</li></ol></blockquote><p>我们可以看到当设置为 off 的时候, 统计采样的页数更少, 并且更新的更不活跃, 一般情况下设置为 on 会获得更好的统计效果. 但不论哪种采样方式, 与实际情况依然会存在一定偏差.</p><p>对 MySQL 的查询优化器来说, 大部分查询操作如果能通过主索引完成, 哪怕预计的扫描行数会更多, 也会优先选择主索引, 因为回表也是一种比较耗时的操作, 从辅助索引取出的没一行记录都需要再从主索引中找到整行记录在大部分情况下都会比直接走主索引更加耗时. 这一点, 在统计行数基本无误的情况下, 是没有问题的, 但假如统计行数出现了问题, 就可能会出现通过某一条辅助索引能很快定位, 优化器却选择了另一条扫描行数更多的索引.</p><p>而什么情况会导致 MySQL 对索引的采样统计出现偏差呢?</p><ol><li>最容易想到的就是索引记录进行了大量的修改, 却没有到达触发下次采样统计的行为时</li><li>在数据库短时间进行了大量的删除和插入语句时, 由于 MySQL 是使用标记删除来删除记录的,并不从索引和数据文件中真正的删除, 如果 delete 和 insert 中间的间隔相对较小,purge线程还没有来得及清理该记录. 如果主键相同的情况下, 新插入的insert会沿用之前删除的delete的记录的空间. 由于相同的近似的以及表大小,所以导致了统计信息没有变化</li></ol><p>遇到由于索引基数采样统计不准确而导致的索引选择问题, 可以通过重新统计索引信息的命令来处理:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ANALYZE</span> <span class="keyword">TABLE</span> t</span><br></pre></td></tr></table></figure><h3 id="3-6-2-是否会回表"><a href="#3-6-2-是否会回表" class="headerlink" title="3.6.2 是否会回表"></a>3.6.2 是否会回表</h3><p>回表也是一个相对耗时的操作, 对于一个满足覆盖索引的查询语句来说, 执行步骤通常是这样的:</p><ol><li>从辅助索引中找到第一条符合条件的记录, 并将其需要的字段放入结果集中</li><li>从辅助索引中找到下一条符合条件的记录, 并将其需要的字段放入结果集中</li><li>重复第 2 步, 直到辅助索引中下一条记录不再符合条件</li><li>向客户端返回</li></ol><p>而对于需要回表的查询语句, 执行步骤会变成:</p><ol><li>从辅助索引中找到第一条符合条件的记录</li><li>拿到其主键, 通过主索引找到整行记录, 并将其需要的字段防入结果集中</li><li>从辅助索引中找到吓一跳符合条件的记录</li><li>拿到其主键, 通过主索引找到整行记录, 并将其需要的字段放入结果集中</li><li>重复 3/4 步骤, 直到辅助索引中下一条记录不再符合条件</li></ol><p>不难看出, 一旦脱离覆盖索引, 最坏情况下辅助索引筛选出的每条记录都需要进行一次磁盘 IO, 这个代价是比较大的, 因此会出现如果一条查询语句同时通过主键和辅助索引筛选, 即便辅助索引扫描行数小于主键, 优化器也会选择使用主键</p><h3 id="3-6-3-是否需要排序"><a href="#3-6-3-是否需要排序" class="headerlink" title="3.6.3 是否需要排序"></a>3.6.3 是否需要排序</h3><p>排序的情况也和回表类似, 排序也是一个相对耗时的操作, 尤其是大数据量的排序, 如果无法直接在内存中完成, MySQL 会借助临时文件进行基于归并思想的外部排序. 在查询优化器的决策思路中, 也会尽量选择排序使用的索引而非前面筛选使用的索引.</p><p>假设我们的表 t 中有 a, b 两个字段, a 是主键, b 使用辅助索引, 我们向该表插入 100000 条记录, a, b 两列均从 1 开始递增, 现在执行查询语句:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> (a <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">1000</span>) <span class="keyword">AND</span> (b <span class="keyword">BETWEEN</span> <span class="number">50000</span> <span class="keyword">AND</span> <span class="number">100000</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> b <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>正常情况下, 查询优化器会得出索引 a 的扫描行数 ≈ 1000, 索引 b 的扫描行数 ≈ 50000 的结论, 但最终会选择 b 索引, 原因就在于 <code>ORDER BY</code> 语句, 会使得查询优化器更倾向于选择能够直接排序的索引, 选择 b 的好处是从该索引上获取的数据天然有序, 不必再去进行额外的排序操作.</p><p>我们来简单解释一下 MySQL 是如何执行 ORDER BY 语句的</p><blockquote><p>当我们对一条 SQL 语句执行 Explain 时, 如果 Extra 字段值为 <code>Using filesort</code> 就表示需要排序, MySQL 会给每个线程分配一块内存(sort_buffer)用于排序.<br>正常的排序语句执行过程:  </p><ol><li>初始化 sort_buffer, 并确定需要参与的字段(MySQL 的原则是内存足够的情况下尽量将 select 的全部字段放入, 否则排序完还需要回表)</li><li>从主索引(可能需要回表)取出整行, 再去 select 的字段存入 sort_buffer 中</li><li>从主索引再取一行记录进行相同操作, 直到不满足查询条件为止.</li><li>在 sort_buffer 中对 ORDER BY 字段进行快速排序</li><li>按照结果返回给客户端  </li></ol><p>这是一条 ORDER BY 语句最理想的执行情况, sort_buffer 大小大于需要排序的总数据量, 一旦 MySQL 发现内存放不下, 就需要借助磁盘临时文件辅助排序, MySQL 需要将总数据量分为 N 份, 每一份单独排序后存在这些临时文件中, 然后把这 N 有序文件再合并成一个有序的大文件. 这个 N 与排序的总数据量和 sort_buffer 大小有关.</p><p>此外, 如果 MySQL 认为单行数据量太大, 超过 <code>max_length_for_sort_data</code> 的值, 就会换成另外一种算法, 只在 sort_buffer 中对 ORDER BY 字段 + id 进行排序, 得到结果后再进行回表.</p></blockquote><p>因此在出现可能的排序场景时, 有如下优化措施:</p><ol><li>我们大部分情况下尽量让走排序字段的索引, 这样数据就天然有序, 不需要再额外进行排序操作.</li><li>也可以利用覆盖索引的特性, 尽可能不进行额外的回表操作</li><li>只 SELECT 必要的字段, 过多的字段可能会触发 MySQL 只对 ORDER BY 字段排序, 再利用 ID 回表.</li></ol><h3 id="3-6-4-如何选择正确的索引"><a href="#3-6-4-如何选择正确的索引" class="headerlink" title="3.6.4 如何选择正确的索引"></a>3.6.4 如何选择正确的索引</h3><p>在前面我们分析了查询优化器选择索引的原理, 也分析了几个查询优化器误选索引的场景, 现在来解决不同情况下误选索引的问题</p><ol><li>由于 MySQL 索引基数采样不准确引起的, 这类问题可以通过 <code>SHOW INDEX FROM t</code> 语句确定, 再通过 <code>ANALYZE TABLE t</code> 重新触发采样解决</li><li>由于回表/排序问题导致的误选索引, 在确定该语句绝大部分情况下都会误选的前提下(因为范围查询未必总会出现上述情况), 可以通过 <code>FORCE INDEX(idx_name)</code> 来强制使用某条索引.</li><li>此外对于排序问题, 还可以将其他的索引字段也加入 <code>ORDER BY</code> 子句中, 通过这样的方式让查询优化器明白, 无论选择哪条索引都无法避免排序, 从而强迫它放弃这一筛选条件, 如上述的 SQL 语句改成 <code>SELECT * FROM t WHERE (a BETWEEN 1 AND 1000) AND (b BETWEEN 50000 AND 100000) ORDER BY b, a limit 1;</code> 后, 查询优化器就会根据索引的扫描行数去决定.</li></ol><h2 id="3-7-索引没有生效的场景"><a href="#3-7-索引没有生效的场景" class="headerlink" title="3.7 索引没有生效的场景"></a>3.7 索引没有生效的场景</h2><p>上一节我们讨论了 MySQL 查询优化器选错索引的原因, 这节继续讨论设置了索引但是却意外的没有生效的场景</p><h3 id="3-7-1-条件字段做函数计算"><a href="#3-7-1-条件字段做函数计算" class="headerlink" title="3.7.1 条件字段做函数计算"></a>3.7.1 条件字段做函数计算</h3><p>假设表 t 中包含一个类型为 <code>datetime</code> 类型的字段 <code>create_time</code>, 并为该字段建立索引 <code>idx_create_time</code>, 如果查询语句为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> create_time = <span class="string">'2019-8-24'</span></span><br></pre></td></tr></table></figure><p>此时可以正常通过 <code>idx_create_time</code> 查询, 但是如果使用如下语句查询 <code>create_time</code> 字段月数为 8 的全部记录:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">MONTH</span>(create_time) = <span class="number">8</span></span><br></pre></td></tr></table></figure><p>此时 MySQL 会直接执行全表扫描.</p><p>这样的执行方式并不符合我们的预期结果, 因为月份和日期一样, 都是有序的, 但此时为什么不能通过 <code>idx_create_time</code> 进行快速查找呢, 这需要从 InnoDB 索引查询记录的方式说起:</p><p><img src="https://user-images.githubusercontent.com/17758731/63633157-05f69f00-c676-11e9-831f-a785011ae7ca.png" alt="image"></p><p>之前我们提到过, B+ 树的本质是一棵多叉树, 通过在一个节点上尽可能多放节点来降低树的深度, 且 B+树一个节点内的数据是有序的, 查找的方式是从根节点开始, 找到目标记录出现的下层指针, 直到查询到叶子节点, 这样的查询必须依赖与每层跨界点有序, 不然在遍历当前层级的时候, 记录旧可能出现在多个叶子节点, 这样 B+树的查询就会失去意义. 在上图叶子节点的绿色数据中, 我列出了每个 k 的 MONTH() 函数值, 显然并不满足同一层级跨节点有序. 因此 InnoDB 无法通过这样的一条索引去完成 MONTH() 查询.</p><p>但是优化器并不是完全放弃使用这个索引, 优化器可以选择遍历主键索引, 也可以选择遍历 <code>idx_create_time</code>, 这需要优化器按照查询计划分别计算出两种方式预计的耗时.</p><p>对于会改变有序性的函数, 优化器的决定毋庸置疑, 但对于本身就不会改变有序性的函数来说, 优化器由于场景比较复杂, 依然直接采用放弃索引的方式规避麻烦.</p><h3 id="3-7-2-隐式类型转换"><a href="#3-7-2-隐式类型转换" class="headerlink" title="3.7.2 隐式类型转换"></a>3.7.2 隐式类型转换</h3><p>假设表 t 有字段 uid, 类型为 varchar(64), 当执行如下 SQL 语句时, 会直接走全表扫描:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> uid = <span class="number">1234</span>;</span><br></pre></td></tr></table></figure><p>原因是查询语句发生了隐式的类型转换, MySQL 的类型转换规则是如果字符型和数字做比较的话, 会将字符型转换成数字.</p><p>因此上面的 SQL 语句实际被优化器转换为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">CAST</span>(uid <span class="keyword">AS</span> signed <span class="built_in">int</span>) = <span class="number">1234</span>;</span><br></pre></td></tr></table></figure><p>隐式类型转换的问题本质上还是由于 <code>对索引字段做函数操作, 优化器会放弃走索引树的搜索功能, 触发主索引或辅助索引的全表扫描</code></p><h1 id="4-MySQL-锁"><a href="#4-MySQL-锁" class="headerlink" title="4. MySQL 锁"></a>4. MySQL 锁</h1><p>锁是一个用于管理对共享资源并发访问的数据结构.</p><p>对于写操作, InnoDB 会在行记录上加锁, 使用 lock 功能的对象是事务, 锁定的对象是数据库存储中的对象, 包括表, 页, 行. 并且一般锁会在事务 commit 或 rollback 后释放.</p><p>InnoDB 实现了两种标准的锁:</p><ol><li>共享锁(S 锁), 允许事务读一行数据, 与其他 S 锁兼容, 与 X 锁不兼容</li><li>排他锁(X 锁), 允许事务删除或更新一行数据, 与其他 S 锁或 X 锁均不兼容</li></ol><h2 id="4-1-锁的分类"><a href="#4-1-锁的分类" class="headerlink" title="4.1 锁的分类"></a>4.1 锁的分类</h2><p>根据加锁的范围, MySQL 中的锁大致可以分为全局锁, 表级锁和行级锁.</p><h3 id="4-1-1-全局锁"><a href="#4-1-1-全局锁" class="headerlink" title="4.1.1 全局锁"></a>4.1.1 全局锁</h3><p>全局锁会对整个数据库实例加锁.</p><p><code>Flush Tables With Read Lock (FTWRL)</code>, 可以让整个数据库全局加读锁, 处于只读状态, 所有更新 DDL, DML 和写事务的提交均会被阻塞.</p><p>一般用来做全库逻辑备份, 备份过程中整个库处于只读状态. 如果不加锁备份得到的库不是同一个逻辑时间点.</p><p>MySQL 自带的备份工具 <code>mysqldump</code>, 当使用 <code>-single-transaction</code> 时, 执行 dump 前会启动一个事务来获取一致性视图, MVCC 可以保证其他写操作正常.</p><h3 id="4-1-2-表级锁"><a href="#4-1-2-表级锁" class="headerlink" title="4.1.2 表级锁"></a>4.1.2 表级锁</h3><ol><li>表锁 <code>lock tables t read/write</code>, 限制接下来所有线程的读/写</li><li>元数据锁(metadata lock), 访问时会被自动加上, 保证读写操作的正确性. 防止事务 A 读期间事务 B 对表结构做修改. 普通的增删改查 DML 会对元数据加 S 锁, DDL 操作会对元数据加 X 锁.</li></ol><p>如果安全的执行 ALTER TABLE:</p><ol><li>解决长事务, 可以通过 information_schema 库的 innodb_trx 表查看执行中的事务.</li><li>读写频繁, 由于对元数据的修改会阻塞其后的所有事务, 可以给 ALTER TABLE 设定超时时间, 超时后扔拿不到锁就会直接放弃.</li></ol><h3 id="4-1-3-InnoDB-行锁的实现"><a href="#4-1-3-InnoDB-行锁的实现" class="headerlink" title="4.1.3 InnoDB 行锁的实现"></a>4.1.3 InnoDB 行锁的实现</h3><p>InnoDB 实现了 3 种行锁的算法, 分别是:</p><ol><li>记录锁: 单个记录上的锁, 总是会去锁住索引记录.</li><li>间隙锁: 锁定一个范围, 但不包含记录本身</li><li>临键锁: 实现的方式是记录锁+间隙锁, 锁定一个范围, 并且锁定记录本身.</li></ol><p>在 InnoDB 事务中, 行锁是在需要的时候才加上的, 但并不是不需要就立即释放, 需要等事务结束后再统一释放.</p><p>行锁在 InnoDB 中是基于索引实现的, 因此一旦某个加锁操作没有使用索引, 那么该锁就会退化为表锁.</p><h4 id="4-1-3-1-记录锁-Record-Locks"><a href="#4-1-3-1-记录锁-Record-Locks" class="headerlink" title="4.1.3.1 记录锁(Record Locks)"></a>4.1.3.1 记录锁(Record Locks)</h4><p>为某行记录加锁, 会封锁该行 的索引记录:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- id 列必须为主键或唯一索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> t <span class="keyword">SET</span> grade = <span class="number">100</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>在使用 <code>SELECT FOR UPDATE</code> 和 <code>UPDATE</code> 时, id 为 1 的记录行会被锁住, 但锁住的索引必须是主索引或者唯一索引, 否则加的锁就是临键锁, 同时, 查询语句必须为精确匹配, 不能为 <code>&lt;</code>, <code>&gt;</code> 或 <code>LIKE</code>, <code>BETWEEN</code> 等, 否则也只会加临键锁</p><h4 id="4-1-3-2-间隙锁-Gap-Locks"><a href="#4-1-3-2-间隙锁-Gap-Locks" class="headerlink" title="4.1.3.2 间隙锁(Gap Locks)"></a>4.1.3.2 间隙锁(Gap Locks)</h4><p>间隙锁作用域普通索引(非主索引或唯一索引), 间隙锁锁住的是一个区间, 而不仅仅是这个区间中的每一条记录.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t <span class="keyword">SET</span> grade = grade + <span class="number">10</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">BETWEEN</span> <span class="number">10</span> <span class="keyword">AND</span> <span class="number">15</span>;</span><br></pre></td></tr></table></figure><p>即所有在(10, 20)区间范围内的行记录都会被锁住, 即 id 为 <code>11, 12, 13, 14</code> 的记录. 但 10 和 15 两条记录不会被锁住.</p><h4 id="4-1-3-3-临键锁"><a href="#4-1-3-3-临键锁" class="headerlink" title="4.1.3.3 临键锁"></a>4.1.3.3 临键锁</h4><p>可以理解为特殊的间隙锁. 每个数据行上的普通索引列都会存在一把临键锁, 当某个事务持有该行的临键锁时, 会锁住一段 <code>左开右闭区间</code> 的数据, InnoDB 中的行锁是基于索引实现, 临键锁只与普通索引有关, 在主索引和唯一键索引上不存在临键锁.</p><p>假设有如下数据表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">bigint</span> primary <span class="keyword">key</span>,</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">64</span>),</span><br><span class="line">    <span class="keyword">index</span>(age),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>内容如下:</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">age</th><th style="text-align:center">name</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">10</td><td style="text-align:center">Lee</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">24</td><td style="text-align:center">soraka</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">32</td><td style="text-align:center">Zed</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">45</td><td style="text-align:center">Talon</td></tr></tbody></table><p>此时, age 索引上潜在的临键锁有:</p><ul><li><code>(-∞, 10]</code></li><li><code>(10, 24]</code></li><li><code>(24, 32]</code></li><li><code>(32, 45]</code></li><li><code>(45, +∞)</code></li></ul><p>此时进行如下操作:</p><table><thead><tr><th>时刻</th><th>事务 A</th><th>事务 B</th><th>情况</th></tr></thead><tbody><tr><td>t1</td><td><code>SELECT * FROM t WHERE id BETWEEN 10 AND 24 FOR UPDATE</code></td><td>无</td><td>获得间隙锁</td></tr><tr><td>t2</td><td>无</td><td><code>INSERT INTO t(age, name) VALUES(15, &#39;Tom&#39;)</code></td><td>插入操作被阻塞</td></tr></tbody></table><p>使用这样的方式保证事务执行期间不会出现幻读.</p><h3 id="4-1-4-解决幻读"><a href="#4-1-4-解决幻读" class="headerlink" title="4.1.4 解决幻读"></a>4.1.4 解决幻读</h3><p>大部分数据库都是通过最高事务隔离级别 <code>SERIALIZABLE</code> 去解决幻读问题, 但 InnoDB 不同, 它是通过 MVCC 和临键锁, 在 <code>REPEATABLE READ</code> 隔离级别下避免幻读. 我们下面就来解释一下原因</p><blockquote><p>幻读: 在同一事务下, 连续执行两次 SQL 语句可能导致不同的结果, 第二次 SQL 语句可能会返回之前不存在的行或者没有返回之前存在的行, 即无法感知当前事务执行期间其他事务的 INSERT 或 DELETE 操作.</p></blockquote><p>假设有如下表记录:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`c`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`d`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`c`</span> (<span class="string">`c`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),(<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>), (<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>),(<span class="number">15</span>,<span class="number">15</span>,<span class="number">15</span>),(<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>),(<span class="number">25</span>,<span class="number">25</span>,<span class="number">25</span>);</span><br></pre></td></tr></table></figure><p>当我们执行如下查询语句时:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> d=<span class="number">5</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>InnoDB 的加锁顺序是这样的:</p><ol><li>字段 d 没有索引, 只能通过主索引全表扫描, 将主索引上全部记录加行锁</li><li>将主索引上全部 <code>间隙</code> 加锁</li></ol><table><thead><tr><th>时刻</th><th>tx-a</th><th>tx-b</th><th>tx-c</th></tr></thead><tbody><tr><td>t1</td><td><code>select * from t where d=5 for update;</code></td><td></td><td></td></tr><tr><td>t2</td><td></td><td><code>update t set d=5 where id=0;</code></td><td></td><td></td></tr><tr><td>t3</td><td><code>select * from t where d=5 for update</code></td><td></td><td></td></tr><tr><td>t4</td><td></td><td></td><td><code>update t set d=5 where id=0;</code></td></tr><tr><td>t5</td><td><code>select * from t where d=5 for update</code></td><td></td></tr></tbody></table><p>如果只对 id=5 这一行加锁, 而其他行不加锁的话, 那么在事务 a 中, 三次 select 语句执行的结果均不相同. 这种情况就被成为幻读, 一个事务在前后两次查询同一个范围时, 第二次查询到了前一次没有看到的行.</p><p>幻读带来的问题:</p><ol><li>破坏语义: T1 时刻事务 a 想做的事情是 <code>把所有 d=5 的行锁住, 不准别的事务进行读写操作</code>, 但幻读显然破坏了这样的语义</li><li>数据一致: 假设在事务 a 执行范围修改后, 提交前其他事务插入了符合 a 修改条件的记录, 并直接提交, 那么事务 a 提交后的 BinLog(STATEMENT 模式) 中涉及的修改就会包含其他事务添加的行.</li></ol><p>幻读问题的根源在于即使把所有记录都加锁, 依然无法阻止新纪录的插入, 因此为了解决幻读, InnoDB 引入了间隙锁, 用于锁住两个值之前的空隙. 例如初始化后的表 t 有 6 条记录, 就会产生 7 个间隙:</p><pre><code>(-∞, 0) (0, 5) (5, 10) (10, 15) (15, 20) (25, +∞)</code></pre><p>当执行 <code>SELECT * FROM t WHERE d=5 FOR UPDATE;</code> 时, 由于 d 字段没有索引, 不止会给已有的 6 条记录加上行锁, 还同时给 7 个间隙全部加上间隙锁, 这样就保证无法再插入新的数据.</p><p>在 InnoDB 中, 数据行是可以加锁的实体, 数据行之间的间隙也是. 但间隙锁不像行锁会分为读锁和写锁, 与间隙锁存在冲突的是 <code>向这个间隙中插入记录</code> 这个操作, 不同间隙锁之间不存在冲突关系.</p><h1 id="5-事务"><a href="#5-事务" class="headerlink" title="5. 事务"></a>5. 事务</h1><p>事务是数据库系统区别于文件系统的重要特性之一, 在文件系统中, 如果在写文件的时候进程退出, 这个文件就很有可能被损坏. 还有在顺序写入多个文件的场景, 如果执行到中间某个状态时进程退出, 就会产生复杂的中间状态.</p><p>数据库引入了事务, 就是希望能够安全的将数据库从一种一致状态转换到另一种一致的状态上来, 当数据库提交工作时, 可以确保要么所有的修改都已经成功保存, 要么所有的修改都被废弃. 而保证这些功能的关键就在于满足 ACID 特性.</p><table><thead><tr><th>概念</th><th>描述</th></tr></thead><tbody><tr><td>A(Atomicity) 原子性</td><td>原子性需要保证一系列的更新操作要么全部执行成功, 要么全部被废弃</td></tr><tr><td>C(Consisteny) 一致性</td><td>事务将数据库从一种抑制状态转变为下一种一致的状态, 在事务的开始和结束前后, 数据库的完整性约束没有被破坏</td></tr><tr><td>I(Isolation) 隔离性</td><td>隔离性保证每个读写事务的对象对其他事务的操作独享能相互分离, 即该事务提交前对其他事务都不可见</td></tr><tr><td>D(Durability) 持久性</td><td>事务一旦提交, 其结果就是持久性的, 即使发生宕机等事故, 数据库也能将数据恢复.</td></tr></tbody></table><h2 id="5-1-隔离级别"><a href="#5-1-隔离级别" class="headerlink" title="5.1 隔离级别"></a>5.1 隔离级别</h2><p>当数据库上有多个事务同时执行的时候, 可能出现脏读, 不可重复读, 幻读等问题, 为了解决这些问题, 就有了隔离级别的概念.</p><blockquote><p>在理解隔离级别的时候, 我们可以先想象机场的安检级别, 在机场中, 由于客流量较大, 并且安全问题非常重要, 因此通常会使用不同安检预案来应对不同的情况. 在常规情况下, 安检级别可能不高, 此时安检项目不多, 吞吐量较高; 但如果有国家政要等情况, 安检级别就会相对升高, 甚至当机场受到了恐怖威胁可能安检级别会更高.<br>总之安检级别越高, 相对吞吐量就会降低, 但可以保证更高的安全性.</p></blockquote><p>隔离级别也是同理, 是由 SQL92 标准定义的一套预案, 各个数据库自己来实现, 实际使用场景中, 需要由开发人员根据实际业务特点来灵活选择. 目前提供的标准事务隔离级别主要包括:</p><table><thead><tr><th style="text-align:center">隔离级别</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">读未提交</td><td>一个事务还没有提交时, 它做的变更就能被别的事务看到</td></tr><tr><td style="text-align:center">读已提交</td><td>一个事务提交后, 它的变更才能被其他事物看到</td></tr><tr><td style="text-align:center">可重复读</td><td>一个事务执行过程中看到的数据, 总是跟这个事务在启动过程中看到的数据是一致的.</td></tr><tr><td style="text-align:center">可串行化</td><td>对于同一行记录, 写加 X 锁, 读加 S 锁, 当读写冲突的时候, 后访问的事务必须等前一个事务执行完成才能继续执行.</td></tr></tbody></table><p>读未提交的实现方式比较简单, 写操作在完成之前就能被看到说明读写可以同时对一个事务加锁, 目前绝大部分数据库的默认隔离级别都不会是读未提交, 并且在绝大多数场景中都不能使用读未提交.</p><p>目前 InnoDB 的默认隔离级别是可重复读, Oracle 的默认隔离级别是读已提交.</p><h3 id="5-1-2-事务隔离级别的实现"><a href="#5-1-2-事务隔离级别的实现" class="headerlink" title="5.1.2 事务隔离级别的实现"></a>5.1.2 事务隔离级别的实现</h3><p>在 InnoDB 中, 每条记录在更新的时候都会同时记录一条回滚操作. 记录上的最新值通过回滚操作介意得到前一个状态的值. 假设一个值从 1 被依次改为 2, 3, 4, 在回滚段中会有类似记录:</p><p><img src="https://user-images.githubusercontent.com/17758731/63634553-a9ea4580-c68a-11e9-8cbf-91a37a340f7e.png" alt="image"></p><p>当前的值为 4, 但是在查询这条记录时, 不同时刻启动的事务会有不同的 ReadView(视图), 同一条记录可以存在多个版本, 这就是数据库的多版本并发控制(Multi-Version-Concurrency-Control, MVCC), 对于在该条记录为值为 1 时启动的事务, 会使用 ReadView-A 去查询该记录, 查询的原理是通过从最新值开始, 依次向前比较直到找到提交时间早于该事物启动时间的第一条记录, 然后返回.</p><p>回滚段的删除比较特殊, 需要等到整个系统中没有比这个回滚段更早的 ReadView 时, 才可以删除, 因为 InnoDB 不能确定哪些 ReadView 会访问这条数据, 只有等真正执行的时候才知道.</p><p>在可重复读隔离级别下, 事务启动时会同时启动一份快照, 这个快照是基于整个数据库的. 但它不是真的对整个数据库做一次备份.</p><blockquote><p>InnoDB 中每个事务都有一个唯一的事务 ID, 叫做 txId, 当事务启动时统一分配并且严格递增. 每条记录也有多个版本, 每次更新都会创建一个新的版本, 并且记录修改的 txId 作为 row rx-id. 同时旧的数据版本就放在回滚段中.<br>但是记录的多个版本只是逻辑上的概念, InnoDB 并不是真的存储数据, 存储的是能够将数据恢复到上一个版本的 <code>undo log</code>.<br>对于可重复读, 一个事务启动的时候, 能够看到所以已经提交的事务结果, 也就是该事物只能看到每条记录所有已提交的 <code>row tx_id</code> 小于自己 tx_id 的版本. InnoDB 为每个事务构造了一个数组, 用来保存这个事务启动时未提交的事务 id. 对于该事物, 通过 <code>未提交事务列表中最小值</code> 和 <code>当前数据库最大事务 id + 1</code> 两个值将当前时刻的全部事务分为三部分:</p></blockquote><ol><li>已创建, 并且确定提交的事务</li><li>已创建, 但需要进一步确认是否提交的事务</li><li>还未创建的事务</li></ol><p><img src="https://user-images.githubusercontent.com/17758731/63651541-4a725f80-c788-11e9-9ac2-074d49378798.png" alt="image"></p><p>此时, 对数据库中全部记录的 row tx_id 来说, 分为四种类型:</p><ol><li>蓝色部分: 由已创建且已提交的事务生成, 可见</li><li>绿色部分:<ol><li>在当前事务 <code>未提交事务列表</code> 中, 代表由已创建但未提交的事务生成, 不可见</li><li>不在当前事务 <code>未提交事务列表</code> 中, 代表由已创建且已提交的事务生成, 可见</li></ol></li><li>黄色部分: 由未来启动的事务生成的, 不可见</li></ol><p>InnoDB 利用 redo log 实现了 MVCC, 再利用 MVCC 实现秒级创建快照的能力.</p><p>而读已提交和可重复读的实现都利用了快照, 不同之处在于:</p><ol><li>读已提交级别下, 每一条语句执行前都会重新计算出一个快照</li><li>可重复读级别下, 只在事务创建时计算一次快照, 之后事务里的其他查询都共用这一个视图.</li></ol><p>可序列化隔离级别, 不需要视图以及其他额外的特性, 每条记录都按照 S 锁和 X 锁的定义依次执行即可.</p><h2 id="5-2-事务的实现"><a href="#5-2-事务的实现" class="headerlink" title="5.2 事务的实现"></a>5.2 事务的实现</h2><p>事务的隔离性由锁来实现, 原子性和持久性由 redo log 实现, 一致性由 undo log 实现. redo log 用来恢复提交事务修改的页操作, undo log 用来将行记录回滚到某个特定版本.</p><h3 id="5-2-1-Redo-log"><a href="#5-2-1-Redo-log" class="headerlink" title="5.2.1 Redo log"></a>5.2.1 Redo log</h3><p>我们先想象一个最直接的 UPDATE 语句执行方式:</p><ol><li>根据索引从磁盘中读出记录所在的数据页</li><li>在内存中修改数据页对应的值</li><li>将数据页刷新回磁盘</li></ol><p>在不考虑性能的前提下, 这是完成一条更新操作最直观的方式.</p><p>但往往越直观的方式, 性能越差. UPDATE 操作是一个典型的随机写, 对于机械硬盘来说, 一次随机写平均花费 10ms, 并且一个事务中可能存在多条写操作, 在保证其能执行成功的同时还要保证原子性, 由此可见这并不是一个理想的方案.</p><p>InnoDB 引入了 WAL 思想, 其关键在于先写日志, 再写磁盘, 当有一条记录需要更新的时候, InnoDB 就会先把记录写到 RedoLog 中, 并更新内存, 此时更新操作就完成了. InnoDB 会在 <code>适当</code> 的时候, 将这个操作记录更新到磁盘中, 这样的更新都是在系统相对比较空闲的时候.</p><p><img src="https://static001.geekbang.org/resource/image/16/a7/16a7950217b3f0f4ed02db5db59562a7.png" alt="image"></p><p>这里借用极客时间的图来说明 RedoLog 的实现方式, 磁盘中的 RedoLog 是固定大小的(并不像 BinLog 可以在磁盘空间未满的情况下无限追加), 写入的方式类似环形队列, <code>write pos</code> 是当前记录的位置, 一边写一边后移, <code>checkpoint</code> 是当前需要擦除的位置, 也是往后推移并且循环, 擦除记录前要把记录更新到数据文件. 假设我们为 RedoLog 文件定义两个操作:</p><ul><li>push: 向 RedoLog 文件写入数据, 并增加 <code>write pos</code>, 当事务执行写操作触发</li><li>pop: 从 RedoLog 中删除数据, 并增加 <code>check point</code>, 当该事务的更新操作落盘时触发, 代表该条 RedoLog 不再需要.</li></ul><p>RedoLog 的写入机制:</p><blockquote><p>事务在执行的时候, 生成的 RedoLog 会先写入 RedoLog Buffer, 当事务提交时再统一持久化到磁盘.</p></blockquote><p>我们先从一条更新 SQL 语句的执行过程来体会 RedoLog 的功能.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t <span class="keyword">SET</span> grade = grade + <span class="number">1</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>执行过程如下:</p><p><img src="https://user-images.githubusercontent.com/17758731/63781356-365f6700-c91c-11e9-9bb7-6f2d7b8534f9.png" alt="image"></p><p>需要着重解释的几个点:</p><h4 id="5-2-1-1-BinLog-和-RedoLog-能否相互替代"><a href="#5-2-1-1-BinLog-和-RedoLog-能否相互替代" class="headerlink" title="5.2.1.1 BinLog 和 RedoLog 能否相互替代"></a>5.2.1.1 BinLog 和 RedoLog 能否相互替代</h4><p>答案是不能, 首先 BinLog 是 MySQL Server 层提供的功能, 旨在提供数据恢复, 集群同步等功能; RedoLog 是 InnoDB 独有的概念, 用来实现事务的原子性和持久性. 简单来说二者的设计方向不同, BinLog 在磁盘空间足够的前提下可以无限增加, 用来复现某个时间点之后的全部写操作. RedoLog 文件在磁盘中大小固定, 循环队列的结构会使得较早的日志被清理掉.</p><ul><li>BinLog 功能: 保证数据库能够从某个时间点正确恢复以及主从一直.</li><li>RedoLog 功能: 保证事务原子性和持久性, RedoLog 落盘后数据库即使宕机重启更新依然不丢.</li></ul><h4 id="5-2-1-2-为什么-RedoLog-需要先-Prepare"><a href="#5-2-1-2-为什么-RedoLog-需要先-Prepare" class="headerlink" title="5.2.1.2 为什么 RedoLog 需要先 Prepare"></a>5.2.1.2 为什么 RedoLog 需要先 Prepare</h4><p>答案是为了保证 RedoLog 和 BinLog 的一致性.</p><p>我们可以做一个假设, 如果不使用两阶段提交, 分别提交 BinLog 和 RedoLog 看看会出现什么情况.</p><table><thead><tr><th>场景</th><th>问题</th></tr></thead><tbody><tr><td>先提交 BinLog, 提交 RedoLog 前数据库宕机</td><td>此时 BinLog 落盘成功, 从库可以拉取到该 BinLog, 会将该更新在自己身上提交, 主库恢复后无法复现该事务, 此时主从不一致. 此外, 主库如果从某个时刻想通过 BinLog 恢复到当前状态, 恢复出来的时候就会多出一个事务, 该记录的值与原库值不同.</td></tr><tr><td>先提交 RedoLog, 提交 BinLog 时数据库宕机</td><td>此时 RedoLog 落盘成功, 即使数据库宕机, 主库恢复后依然可以复现. 但由于 BinLog 没有写入成功, 此时如果用这个 BinLog 来恢复临时库或者主从同步, 恢复出来的行记录就会少一条事务, 依然与原库值不同</td></tr></tbody></table><p>因此我们可以看到, RedoLog 影响宕机重启后的事务重新执行, BinLog 影响可能需要的恢复和主从同步, 要想一致就必须使用两阶段提交.</p><h4 id="5-2-1-3-两阶段提交如何保证-RedoLog-与-BinLog-一致"><a href="#5-2-1-3-两阶段提交如何保证-RedoLog-与-BinLog-一致" class="headerlink" title="5.2.1.3 两阶段提交如何保证 RedoLog 与 BinLog 一致"></a>5.2.1.3 两阶段提交如何保证 RedoLog 与 BinLog 一致</h4><p>RedoLog 的两阶段提交一共分为三步:</p><ol><li>写入 RedoLog, 处于 Prepare 状态</li><li>写入 BinLog</li><li>提交事务, 处于 commit 状态</li></ol><p>问题可能出现在步骤 1 后和步骤 2 后, 我们分情况来讨论下:</p><ol><li>写入 Prepare 状态的 RedoLog 后 MySQL 宕机: 此时 BinLog 没有写入, RedoLog 也没有提交, 此时可以当做事务提交失败.</li><li>写入 BinLog 后 MySQL 宕机: 崩溃恢复的规则如下:<ol><li>如果 RedoLog 中事务是完整的, 也就是有了 commit 标识, 则可以直接提交;</li><li>如果 RedoLog 中事务只有完整的 Prepare, 则判断对应事务的 BinLog 是否完整, BinLog 如果完整就可以提交事务, 否则回滚.</li></ol></li></ol><p>对于 MySQL 来说, 每个事务的 BinLog 都有完整的格式, 通过识别该格式就可以判断事务额 BinLog 是否完整.</p><p>此外, BinLog 和 RedoLog 都有一个共同的字段 <code>XID</code>, 在崩溃恢复的时候会按顺序扫描 RedoLog:</p><ul><li>如果碰到既有 Prepare 又有 commit 的 RedoLog, 就直接提交;</li><li>如果碰到只有 Prepare 但没有 commit 的 RedoLog, 就需要通过 TXID 去 BinLog 中查询, 再通过 BinLog 是否完整决定提交或回滚.</li></ul><h3 id="5-2-2-回滚日志-UndoLog"><a href="#5-2-2-回滚日志-UndoLog" class="headerlink" title="5.2.2 回滚日志 UndoLog"></a>5.2.2 回滚日志 UndoLog</h3><p>RedoLog 记录了事务的行为, 可以通过其对数据页进行重做. 但事务如果需要进行回滚, 就需要 UndoLog. 当事务执行失败或者显式执行 ROLLBACK 的时候, 就可以利用 UndoLog 将数据回滚到某个特定的版本.</p><p>UndoLog 存放在数据库内部的回滚段中, UndoLog 本身不是快照, 只是逻辑地将数据库恢复到原来的样子, 比如某个字段自增, UndoLog 中就会记录将该字段 -1 可以得到上一个版本</p><h3 id="5-2-3-组提交"><a href="#5-2-3-组提交" class="headerlink" title="5.2.3 组提交"></a>5.2.3 组提交</h3><p>我们通常给 <code>sync_binlog</code> 和 <code>innodb_flush_log_at_trx_commit</code> 都会设置为 1, 也就是说一个完整的事务提交前, 需要进行两次 fsync 操作, 依次是 RedoLog(prepare), 另一次是 BinLog. 然而磁盘的 fsync 性能是有限的, 甚至磁盘 fsync 的速度很大程度上限制了数据库的 TPS 上限, 为了提高磁盘 fsync 的效率, MySQL 提供了 group commit 的功能, 即一次 fsync 可以刷新确保多个事务日志被写入文件.</p><p>事务提交时, 会进行两个阶段的操作:</p><ol><li>修改内存中事务对应的信息, 并且将日志写入 RedoLog Buffer</li><li>调用 fsync 将确保日志都从 RedoLog Buffer 写入磁盘</li></ol><p>步骤 2 的耗时远大于步骤 1, 此时我们就可以当某个事务进行步骤 2 的时候, 让其他事务先执行步骤 1, 这样就可以将多个事务的重做日志通过一次 fsync 刷新到磁盘, 这样可以减轻磁盘的压力.</p><p>MySQL 甚至提供了把 RedoLog 做 fsync 时间拖到步骤 1 之后的功能:</p><ul><li>binlog_group_commit_sync_delay 参数, 表示延迟多少微秒后才调用 fsync;</li><li>binlog_group_commit_sync_no_delay_count 参数, 表示累计多少次以后才调用 fsync</li></ul><p>因此 WAL 机制主要能带来两方面提升:</p><ol><li>RedoLog 和 BinLog 都是顺序写, 速率远大于随机写.</li><li>组提交机制, 大幅降低磁盘的 IOPS 消耗.</li></ol><h1 id="6-集群与高可用"><a href="#6-集群与高可用" class="headerlink" title="6. 集群与高可用"></a>6. 集群与高可用</h1><h2 id="6-1-通过-BinLog-保证主备一致"><a href="#6-1-通过-BinLog-保证主备一致" class="headerlink" title="6.1 通过 BinLog 保证主备一致"></a>6.1 通过 BinLog 保证主备一致</h2><p>在 MySQL 的高可用场景中, 最简单和常用的就是主备复制, 客户端的读写都直接访问主库, 而备库只负责将主库的更新同步到本地执行, 当主库出现问题的时候, 可以将主库下线, 并将备库立即提升为主库.</p><p>MySQL 是通过 BinLog 的同步完成主备的数据同步功能的.</p><p>在主备同步时, 备库与主库维持了一个长连接, 主库有一个单独的线程用于处理备库的长连接, 日志的同步过程如下:</p><ol><li>备库通过 <code>change master</code> 命令指定主库的 ip, 端口, 用户名, 密码以及请求 BinLog 的文件名和日志偏移量;</li><li>备库通过 <code>start slave</code> 命令启动两个线程: 负责与主库建立连接的 <code>io_thread</code> 和 负责复现数据的 <code>sql_thread</code>;</li><li>主库建立连接后, 会按照备库传来的位置从本地读取 BinLog 发给备库;</li><li>备库拿到 BinLog 后, 写入到本地文件, 成为中转日志(relay log);</li><li>sql_thread 读取中转日志, 解析出日志中的命令并执行.</li></ol><p><img src="https://user-images.githubusercontent.com/17758731/64351234-8a5d0080-d02c-11e9-9a54-2b59ec14a68e.png" alt="image"></p><h2 id="6-2-主从延迟的来源"><a href="#6-2-主从延迟的来源" class="headerlink" title="6.2 主从延迟的来源"></a>6.2 主从延迟的来源</h2><p>在主从复制中, 主要由三步构成:</p><ol><li>主库提交事务, 写入 BinLog;</li><li>从库获得 BinLog, 放入 RelayLog;</li><li>备库执行完成.</li></ol><p>在备库上可以执行 <code>show salve status</code> 命令, 返回结果中有 <code>seconds_behind_master</code>, 用于表示当前备库延迟多少秒, MySQL 会统计BinLog 中主库记录的时间域当前系统时间的差值.</p><p>在正常情况下, BinLog 传给备库的延迟很低, 主备延迟的主要来源是备库接收完 BinLog 和提交事务的时间. 本质上说, 是从库消费中转日志(RelayLog) 的速度比主库生产 BinLog 的速度要慢.</p><p>产生这种情况的原因:</p><ol><li>很多情况下从库性能低于主库</li><li>备库除了同步数据, 还需要处理其他请求</li><li>主库频繁执行大事务</li><li>备库的并行复制能力.</li></ol><p>主备切换的时候, 正常情况下应该采用可靠性优先策略:</p><ol><li>判断从库当前的 <code>second_behind_master</code>, 如果大于某个值(如 5s), 则等待并重试, 这一步是为了尽可能在从库压力不大的时候进行.</li><li>如果小于某阈值, 把主库改成只读状态;</li><li>循环判断从库的 <code>second_behind_master</code> 直到为 0, 代表主库所有内容都已经同步到从库中;</li><li>把从库改为可写状态;</li><li>把业务请求转移到从库.</li></ol><p>这种方案下, 在步骤 3~5 期间整个数据库系统对外不可写.</p><p>MySQL 的高可用是依赖于主从延迟的, 延迟时间越小在故障转移的时候服务恢复需要的时间就越短.</p><p>在某些短暂的大事务或者备份时, 对备库延迟的影响可能会到达分钟级, 但通常备库是可以跟上进度的, 但如果备库同步的是一个持续压力较高的主库, 延迟可能达到小时级甚至永远追不上来.</p><p>究其原因就是大部分情况下从库消费中转日志的速度都会低于主库处理写操作的能力.</p><ul><li>在主库上, 影响并发度最主要的因素就是锁, InnoDB 支持行锁, 因此除了大量并发事务更新同一行的极端情况, 大部分情况下并发度都不低.</li><li>但是备库在执行的时候, 不论是单线程还是多线程, 都有一定的局限性, 导致理论上执行的速度会低于主库写操作.</li></ul><p>在 MySQL 5.6 之前, 从库采用单线程复制, 因此速度低于主库比较好理解. 但后续版本 MySQL 开始采用多线程复制之后问题依然没有得到很好的解决:</p><p><img src="https://user-images.githubusercontent.com/17758731/64469708-5cc9a180-d169-11e9-8add-a6ec8a6c8cce.png" alt="image"></p><p>中转日志中的全部记录, 首先由 <code>Coordinator</code> 读取, 然后分发给不同的 worker 负责执行.</p><blockquote><p>主库的写操作是由客户端触发的, 在从库中, 想要把主库写操作完整的复现出来, 并不能简单的让 <code>Coordinator</code> 随机分给不同 <code>Worker</code>, 这中间存在一定的限制. 比如对同一条记录的两个写操作, 如果分给了两个 Worker, 由于 CPU 的调度策略不可控, 很可能会出现第二个写早于第一个完成这样会直接导致主备不一致.<br>此外, 同一个事务分别更新了两张表, 如果放在两个 worker 中, 在其中一个 worker 完成而另一个没有完成时, 主备会出现短暂的不一致.</p></blockquote><p>因此, 多线程消费 RelayLog 的时候, 需要保证如下行为:</p><ol><li>不能出现覆盖更新, 因此对同一个行的两个事务必须由同一个 worker 顺序执行</li><li>一个事务的所有操作都需要由同一个 worker 顺序执行</li></ol><h2 id="6-3-并行复制策略"><a href="#6-3-并行复制策略" class="headerlink" title="6.3 并行复制策略"></a>6.3 并行复制策略</h2><h3 id="MySQL-5-5"><a href="#MySQL-5-5" class="headerlink" title="MySQL 5.5"></a>MySQL 5.5</h3><p>在 MySQL 5.5 的时候, 由于官方没有提供并行复制的策略, 因此 <code>《MySQL 实战 45 讲》作者林晓斌</code> 自己实现了并行复制策略: </p><h4 id="按表分发"><a href="#按表分发" class="headerlink" title="按表分发"></a>按表分发</h4><p>如果两个事务更新的是不同的表, 就可以交给不同的 worker 完成, 按表分发可以保证两个 worker 不会冲突. 但如果有跨表的事务, 还是需要放在一起</p><p><img src="https://user-images.githubusercontent.com/17758731/64469953-bfbd3780-d16d-11e9-87b3-5715034596bd.png" alt="image"></p><p>上述方案中, 在每个 worker 中维护了一个 HashTable, key 是 <code>库名.表名</code>, value 是该 worker 当前有多少个事务正在执行. 当有事务分配给该 worker 时, 涉及的表会加到 HashTable 中, 执行完成后再去掉.</p><p>每个事务在分发的时候, 跟所有的 worker 冲突关系包括三种情况:</p><ol><li>和所有的 worker 都不冲突, coordinator 会分配给最空闲的 worker;</li><li>只和一个 worker 冲突, coordinator 必须分配给该 worker;</li><li>和多个 worker 冲突, coordinator 进入等待状态, 直到和这个事务存在冲突的 worker 只剩一个, 分配给该 worker</li></ol><p>该方案在不同表之间负载均匀的场景中效果最好. 但如果出现热点表, 那么大量事务就会被集中分配给某个 worker, 退化为单线程复制.</p><h4 id="按行分发"><a href="#按行分发" class="headerlink" title="按行分发"></a>按行分发</h4><p>该方案用来解决热点表并行复制的问题: 如果两个事务没有更新相同的行, 那么在备库上可以并行执行, 按行复制的前提是 BinLog 格式为 row. (否则无法知道具体更新的行) 此时判断是否冲突的标准是是否修改了同一行记录.</p><p>此时 worker 上的 HashTable 的 key 就变成了 <code>库名+表名+主键+所有唯一键</code> 因为涉及唯一键的更新也可能存在冲突, 比如主库中 r1 让出了某个唯一键的值, r2 将唯一键更新为 r1 的值, 如果在备库中交给两个 worker 执行, 可能顺序会被打乱, 就存在问题.</p><p>按行分发的并发度更高, 但是也更消耗内存和 CPU 资源, 因为每一行记录都会作为 HashTable 的一个 key.</p><h3 id="MySQL-5-6"><a href="#MySQL-5-6" class="headerlink" title="MySQL 5.6"></a>MySQL 5.6</h3><p>MySQL 官方开始支持并行复制, 但粒度只有库, 从实现上说就是以库名作为 HashTable 的 key.</p><p>如果MySQL 实例上的各个库负载均匀就会起到一定作用.</p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kafka简介</title>
      <link href="/blog/2019/07/27/Kafka%E7%AE%80%E4%BB%8B/"/>
      <url>/blog/2019/07/27/Kafka%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>Kafka 是一种分布式, 基于发布/订阅的消息系统, 具备高性能, 高可用, 可扩展, 可持久化的特点. 在设计上具有以下特点</p><ul><li>面对海量消息时也能高效读写, 以顺序的方式读写磁盘, 从而避免随机读写的性能瓶颈, 与此同时还支持批量读写和批量压缩</li><li>支持消息分区, 在每个分区内保证顺序, 不同分区间可以并发操作</li><li>每个分区可以创建多个副本, 只有 Leader 副本负责读写, 其他副本只负责同步</li></ul><p>Kafka 典型应用场景:</p><ul><li>传统消息中间件</li><li>系统数据总线</li><li>日志收集中心</li></ul><p>接入 Kafka 能够带来的优势:</p><ul><li>解耦, 以前彼此依赖的系统只需要和 Kafka 通信</li><li>数据持久化, Kafka 把数据以消息的形式持久化到磁盘, 并能按照一定的机制清理和压缩.</li><li>扩展, Kafka 的每个 Topic 多可以分为多个 Partition, 每个 Partition 都存在多个副本以实现冗余备份. 每个 Partition 中的消息不同, 类似 DB 的水平切分</li><li>容灾, 每个 Partition 中的不同 Replica 保存的是相同的副本, 一主多从, 从副本正常情况下只与主副本同步消息, 当主副本出现故障, 则在从副本中重新选举一个主副本对外提供服务.</li><li>灵活的 Consumer, Consumer 使用从服务端 Pull 的方式拉取消息, 并且保存消费的具体位置, 当消费者宕机恢复后, 根据 Consumer 的状态重新获取需要的消息.</li><li>顺序保证, Kafka 保证一个 Partition 内消息的有序性, 但是并不保证多个 Partition 之间数据有顺序.</li></ul><h2 id="1-2-Kafka-核心概念"><a href="#1-2-Kafka-核心概念" class="headerlink" title="1.2 Kafka 核心概念"></a>1.2 Kafka 核心概念</h2><h3 id="1-2-1-Topic-amp-Partition-amp-Log"><a href="#1-2-1-Topic-amp-Partition-amp-Log" class="headerlink" title="1.2.1 Topic &amp; Partition &amp; Log"></a>1.2.1 Topic &amp; Partition &amp; Log</h3><p>Topic 是用于存储消息的逻辑概念, 可以看做消息的集合</p><p><img src="https://user-images.githubusercontent.com/17758731/61991484-39e4a180-b083-11e9-9977-25ff3a9fe8a4.png" alt="image"></p><p>每个 Topic 可以划分成一个或多个 Partition, 同一 Topic 下的不同 Partition 包含的信息是不同的, 每个消息在被添加到 Partition 时都会被分配一个 offset, 这是在此 Partition 中的唯一编号, Kafka 通过 offset 保证消息在 Partition 内的顺序</p><p><img src="https://user-images.githubusercontent.com/17758731/61991556-664ced80-b084-11e9-8a10-2ea979e3c10b.png" alt="image"></p><p>Partition 在逻辑上对应着一个 Log, 当 Producer 将消息写入 Partition 时, 实际上写入到了 Partition 对应的 Log 中. Log 是一个逻辑概念, 可以对应到磁盘的文件夹, Log 由多个 Segment 组成, 每个 Segment 对应一个日志文件和索引. 在面对海量数据时, 为避免出现超大文件, 每个日志文件的大小是由限制的, 当超出是会创建新的 Segment 继续对外服务. Kafka 采用顺序 I/O, 因此只会向最新的 Segment 追加数据. 索引采用稀疏索引的方式, 在运行时会映射到内存以提高速度.</p><h3 id="1-2-2-保留策略-amp-日志压缩"><a href="#1-2-2-保留策略-amp-日志压缩" class="headerlink" title="1.2.2 保留策略 &amp; 日志压缩"></a>1.2.2 保留策略 &amp; 日志压缩</h3><p>不论消息是否已被消费, Kafka 都会将其保存, 与此同时提供了保留策略以进行周期性的清理.</p><ol><li>根据消息保留时间, 超过 TTL 的消息就可以被删除</li><li>根据 Topic 存储数据的大小, 当 Topic 所占的日志文件大于某个阈值, 就从最旧的消息开始删除.</li></ol><p>Kafka 还提供了日志压缩的功能, 原理上和 Redis 的 AOF 日志压缩相同, Kafka 会通过后台线程定期将相同 key 的消息进行合并, 只保留最新的值</p><h3 id="1-2-3-Broker"><a href="#1-2-3-Broker" class="headerlink" title="1.2.3 Broker"></a>1.2.3 Broker</h3><p>一个单独的 Kafka server 就是一个 Broker. Broker 的主要工作就是接收生产者发送的消息, 分配 offset, 保存在日志中. 同时接收消费者, 其他 Broker 的请求, 根据请求类型就行不同的处理和响应, 一般一个 Broker 独占一个节点.</p><h3 id="1-2-4-副本"><a href="#1-2-4-副本" class="headerlink" title="1.2.4 副本"></a>1.2.4 副本</h3><p>Kafka 对消息进行冗余备份, 每个 Partition 可以有多个副本, 每个副本中包含的消息是一样的. 每个 Partition 至少有一个副本(Leader), 多的副本为 Follower.</p><ul><li>Leader: 提供读写服务</li><li>Follower: 只从 Leader 副本处把数据同步到本地并更新自己的 Log</li></ul><p><img src="https://user-images.githubusercontent.com/17758731/61991793-0b1cfa00-b088-11e9-8165-e26df6112249.png" alt="image"></p><p>一般情况下, 每个 Partition 的多个副本会被分配到不同的 Broker 上.</p><h3 id="1-2-5-ISR-集合"><a href="#1-2-5-ISR-集合" class="headerlink" title="1.2.5 ISR 集合"></a>1.2.5 ISR 集合</h3><p>ISR(In-Sync Replica) 表示目前可用, 并且消息量与 Leader 相差不多的副本集合, 是整个副本集合的一个子集, 条件:</p><ol><li>副本所在节点必须维持与 zk 的连接</li><li>副本最后一条消息的 offset 与 leader 副本的最后一条消息的 offset 之间差值不能超过指定阈值</li></ol><p>每个 Partition 的 leader 副本都会维护当前 Partition 的 ISR 集合, 并且在不断处理请求的过程中, 这个集合是在不断变化的, 有的 Follower 会因为跟不上掉队, 有的 Follower 会重新回到 ISR 集合中.</p><h3 id="1-2-6-HW-amp-LEO"><a href="#1-2-6-HW-amp-LEO" class="headerlink" title="1.2.6 HW &amp; LEO"></a>1.2.6 HW &amp; LEO</h3><p>HW(HighWatermark) 和 LEO 与上面的 ISR 集合紧密相关, HW 标记了一个特殊的 offset, 当消费者处理消息的时候, 只能拉取到 HW 之前的消息, HW 之后消息对 Consumer 来说是不可见的. HW 由 Leader 维护, 当 ISR 集合中全部的 Follower 都拉取 HW 指定消息进行同步后, Leader 会递增 HW 的值, Kafka 将 HW 之前消息的状态定义为 <code>commit</code>, 代表已 commit 的消息即使 leader 宕机也不会丢失</p><p>LEO(Log End Offset) 是所有副本都会维护的 offset 标记, 它指向追加到当前副本的最后一个消息的 offset.</p><ul><li>当 Producer 向 Leader 副本追加消息的时候 Leader 副本的 LEO 会递增</li><li>当 Follower 从 Leader 副本拉取消息成功时, Follower 副本的 LEO 就递增</li></ul><blockquote><p>以一个例子总结下 HW 和 LEO 的关系</p><ol><li>Producer 向 Partition 推送消息</li><li>Leader 将消息成功追加到 Log 中, 并递增其 LEO</li><li>Follower 成功从 Leader 同步该消息</li><li>Follower 将该消息追加到本地 Log 中, 并递增其 LEO</li><li>当 ISR 集合中所有的副本都完成了对该消息的同步, Leader 会递增 HW, 此时该消息对消费者可见</li></ol></blockquote><p>Kafka 这样设计的目的是为了权衡同步和异步复制, 如果 Follower 延迟过高, 会被踢出 ISR 集合以保证性能; 当 Leader 宕机, 会优先将 ISR 中的 Follower 副本选举为新 Leader, 新 Leader 同样包含了 HW 之前的全部消息</p><h3 id="1-2-7-Cluster-amp-Controller"><a href="#1-2-7-Cluster-amp-Controller" class="headerlink" title="1.2.7 Cluster &amp; Controller"></a>1.2.7 Cluster &amp; Controller</h3><p>多个 Broker 可以组成一个 Cluster 对外提供服务, 每个 Cluster 会选举出一个 Broker 来担任 Controller 作为集群的指挥中心, 而其他的 Broker 则听从 Controller 指挥实现相应功能. Controller 负责管理分区的状态, 管理每个分区的副本状态, 监听 zk 中数据变化等. Controller 宕机会从剩下的 Broker 中进行重新选举.</p><h3 id="1-2-8-Produce-amp-Consumer"><a href="#1-2-8-Produce-amp-Consumer" class="headerlink" title="1.2.8 Produce &amp; Consumer"></a>1.2.8 Produce &amp; Consumer</h3><ul><li>生产者主要负责生产消息, 并将消息按照一定的规则推送到 Topic 的分区中, 其中规则可以是根据消息 key 的 hash 值选择, 或者轮询</li><li>消费者主要负责拉取消息, 并对消息进行消费, 每个消费者消费到 Partition 哪个 offset 的相关信息是由自己来维护的, 不同消费者管理各自的消费位置.</li></ul><h3 id="1-2-9-Consumer-Group"><a href="#1-2-9-Consumer-Group" class="headerlink" title="1.2.9 Consumer Group"></a>1.2.9 Consumer Group</h3><p>在 Kafka 中, 多个 Consumer 可以组成一个 Group, 一个 Consumer 只能属于一个 Group. Consumer Group 保证其订阅的 Topic 的每个 Partition 只能被分配给一个 Consumer. 一个 Topic 如果同时被多个 Consumer Group 订阅, 不同 Consumer Group 之间不会干扰. 如果想要实现一个消息被多个消费者同时消费的效果, 则每个消费者需要放入单独的 Consumer Group; 如果要实现一个消息只能被一个消费者独占, 则将所有的 Consumer 放入一个 Group 中.</p><p>简单来讲, 对于同一个 Consumer Group 中, 尽管有多个消费者, 但每个消息只会被消费一次.</p><p>此外, Consumer Group 还具有水平扩展和故障转移的功能.</p><p>当我们向一个 Consumer Group 添加新的 Consumer 时, 会触发 Rebalance 重新分配分区与消费者的对应关系. 而如果有 Consumer 故障, 也会触发 Rebalance 进行重新分区.</p><p><img src="https://user-images.githubusercontent.com/17758731/61992950-af5a6d00-b097-11e9-9347-2529d7c2e685.png" alt="image"></p><ol><li>生产者根据业务逻辑产生消息</li><li>生产者根据路由规则将消息发送到指定 Partition 的 Leader 副本所在的 Broker 上</li><li>Leader 将日志追加成功后, 递增 LEO</li><li>Follower 副本从 Leader 同步到消息, 追加成功后, 递增 LEO</li><li>Leader 递增 HW, 使该消息对消费者可见</li><li>消费者加入 Consumer Group 后, 会触发 Rebalance, 将 Partition 分配给不同的消费者消费</li><li>消费者恢复其消费位置, 并向 Kafka 服务端发送拉取消息的请求</li><li>Leader 副本会验证请求的 offset 以及其他相关的信息, 最后返回消息</li></ol><h2 id="1-2-Kafka-配置文件"><a href="#1-2-Kafka-配置文件" class="headerlink" title="1.2 Kafka 配置文件"></a>1.2 Kafka 配置文件</h2><p><code>config/server.properties</code> 是 Kafka 的主要配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">############################# Server Basics #############################</span><br><span class="line"></span><br><span class="line"># 每个 Broker 在集群中的唯一标识, 即使 Broker 的 IP 地址发生了变化, broker.id 只要没变则不会影响 consumers 的消息情况</span><br><span class="line">broker.id=0</span><br><span class="line"></span><br><span class="line">############################# Socket Server Settings #############################</span><br><span class="line"></span><br><span class="line"># Kafka Server 使用的协议, 主机名及网络端口格式如下:</span><br><span class="line">#     listeners = security_protocol://host_name:port</span><br><span class="line">#   参考实例:</span><br><span class="line">#     listeners = PLAINTEXT://your.host.name:9092</span><br><span class="line">#listeners=PLAINTEXT://:9092 这是默认配置, 使用 PLAINTEXT, 端口是 9092</span><br><span class="line"></span><br><span class="line"># 接收请求的线程数</span><br><span class="line">num.network.threads=3</span><br><span class="line"></span><br><span class="line"># 执行请求的线程数</span><br><span class="line">num.io.threads=8</span><br><span class="line"></span><br><span class="line"># The send buffer (SO_SNDBUF) used by the socket server</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line"></span><br><span class="line"># The receive buffer (SO_RCVBUF) used by the socket server</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line"></span><br><span class="line"># The maximum size of a request that the socket server will accept (protection against OOM)</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################# Log Basics #############################</span><br><span class="line"></span><br><span class="line"># 用于存储 log 文件的目录, 可以将多个目录通过逗号分隔, 形成一个目录列表</span><br><span class="line">log.dirs=/tmp/kafka-logs</span><br><span class="line"></span><br><span class="line"># 每个 Topic 默认的 Partition 数</span><br><span class="line">num.partitions=1</span><br><span class="line"></span><br><span class="line"># 用来恢复 log 文件以及关闭是将 log 数刷新到磁盘的线程数量, 每个目录都对应该配置</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line"></span><br><span class="line">############################# Log Flush Policy #############################</span><br><span class="line"># 每隔多少个消息触发一次 flush 操作, 将内存中的信息刷新到硬盘上</span><br><span class="line">#log.flush.interval.messages=10000</span><br><span class="line"></span><br><span class="line"># 每隔多少毫秒触发一次 flush 操作, 将内存中的信息刷新到硬盘上</span><br><span class="line">#log.flush.interval.ms=1000</span><br><span class="line"></span><br><span class="line">############################# Log Retention Policy #############################</span><br><span class="line"></span><br><span class="line"># The following configurations control the disposal of log segments. The policy can</span><br><span class="line"># be set to delete segments after a period of time, or after a given size has accumulated.</span><br><span class="line"># A segment will be deleted whenever *either* of these criteria are met. Deletion always happens</span><br><span class="line"># from the end of the log.</span><br><span class="line"></span><br><span class="line"># The minimum age of a log file to be eligible for deletion</span><br><span class="line">log.retention.hours=168</span><br><span class="line"></span><br><span class="line"># A size-based retention policy for logs. Segments are pruned from the log as long as the remaining</span><br><span class="line"># segments don&apos;t drop below log.retention.bytes.</span><br><span class="line">#log.retention.bytes=1073741824</span><br><span class="line"></span><br><span class="line"># The maximum size of a log segment file. When this size is reached a new log segment will be created.</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line"></span><br><span class="line"># The interval at which log segments are checked to see if they can be deleted according</span><br><span class="line"># to the retention policies</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line"></span><br><span class="line">############################# Zookeeper #############################</span><br><span class="line"></span><br><span class="line"># Zookeeper connection string (see zookeeper docs for details).</span><br><span class="line"># This is a comma separated host:port pairs, each corresponding to a zk</span><br><span class="line"># server. e.g. &quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;.</span><br><span class="line"># You can also append an optional chroot string to the urls to specify the</span><br><span class="line"># root directory for all kafka znodes.</span><br><span class="line">zookeeper.connect=localhost:2181</span><br><span class="line"></span><br><span class="line"># Timeout in ms for connecting to zookeeper</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>如何高效使用Vim</title>
      <link href="/blog/2019/06/19/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8Vim/"/>
      <url>/blog/2019/06/19/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8Vim/</url>
      <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><h1 id="2-基本使用方式"><a href="#2-基本使用方式" class="headerlink" title="2. 基本使用方式"></a>2. 基本使用方式</h1><h2 id="2-1-vim-的模式"><a href="#2-1-vim-的模式" class="headerlink" title="2.1 vim 的模式"></a>2.1 vim 的模式</h2><p>当我们使用 <code>vim</code>, 或在后面加文件名的时候, 就可以进入 vim 的界面</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/Desktop</span><br><span class="line">$ vim demo.txt</span><br></pre></td></tr></table></figure><p>该命令就会在 ~/Desktop 路径下打开(如果有)或编辑(如果没有) <code>demo.txt</code> 文件</p><p>最初进入 vim 时是普通模式, vim 的特点之一就是可以通过不同的操作快速进入多种模式:</p><ul><li>普通模式: 进入 vim 默认的模式, 该模式有非常多的快捷键组合, 无法进行输入, 如果想编辑, 需要进入写入模式.</li><li>写入模式: 由命令模式进入, 最简单的方式通过在普通模式下输入小写 <code>i</code> 来完成(后面会介绍更多的方式), 进入写入模式后, 终端的左下角会出现 <code>-- INSERT --</code> 标志, 该模式下字母, 数字, 字符键都可以正常完成输入功能, 写入模式可以通过 <code>esc</code> 退出并回到普通模式.</li><li>命令模式: 所有的 vim 指令都需要进入由普通模式输入 <code>:</code> 进入命令模式完成, 常见的指令包括保存(w), 退出(q)等</li></ul><p>此外, 普通模式进入写入模式除了 <code>i</code> 之外, 还有其他几种方式, 不同方式之间的区别在于进入插入模式时光标的位置:</p><table><thead><tr><th style="text-align:center">输入</th><th style="text-align:center">全称</th><th style="text-align:center">光标的位置</th></tr></thead><tbody><tr><td style="text-align:center">i</td><td style="text-align:center">insert</td><td style="text-align:center">与普通模式相同</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">append</td><td style="text-align:center">普通模式光标的下一个字符</td></tr><tr><td style="text-align:center">A</td><td style="text-align:center"></td><td style="text-align:center">普通模式光标所在行的结尾</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center"></td><td style="text-align:center">普通模式光标所在行的下一行开出一个新行, 并把光标移动到新行的行首</td></tr><tr><td style="text-align:center">O</td><td style="text-align:center"></td><td style="text-align:center">普通模式光标所在行的上一行开出一个新行, 并把光标移动到新行的行首</td></tr></tbody></table><h2 id="2-2-vim-光标移动"><a href="#2-2-vim-光标移动" class="headerlink" title="2.2 vim 光标移动"></a>2.2 vim 光标移动</h2><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">操作</th></tr></thead><tbody><tr><td style="text-align:center">h</td><td style="text-align:center">光标向左</td></tr><tr><td style="text-align:center">j</td><td style="text-align:center">光标向下</td></tr><tr><td style="text-align:center">k</td><td style="text-align:center">光标向上</td></tr><tr><td style="text-align:center">l</td><td style="text-align:center">光标向右</td></tr></tbody></table><h1 id="3-vim-配置文件"><a href="#3-vim-配置文件" class="headerlink" title="3. vim 配置文件"></a>3. vim 配置文件</h1><p>vim 配置文件可以修改 vim 界面的外观, 组合按键等</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line"><span class="comment"># 新建一个 .vim 文件夹</span></span><br><span class="line">$ mkdir .vim</span><br><span class="line">$ <span class="built_in">cd</span> .vim</span><br><span class="line"><span class="comment"># 新建一个 vimrc 文件</span></span><br><span class="line">$ vim vimrc</span><br></pre></td></tr></table></figure><p>开始进行配置:</p><pre><code>noremap 是一个更改键位的命令e.g. noremap a b当该配置生效后, 如果用户按下 a 键之后, vim 就会认为按的是 b</code></pre><p>我们需要替换的键位<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map s &lt;nop&gt;     <span class="comment"># 禁用 s 键</span></span><br><span class="line">map S :w&lt;CR&gt;    <span class="comment"># 用 S 替换 vim 中的 `:+w+回车` 的保存功能</span></span><br><span class="line">map Q :q&lt;CR&gt;    <span class="comment"># 用 Q 替换 vim 中的 `:+q+回车` 的退出功能</span></span><br><span class="line">map R :<span class="built_in">source</span> <span class="variable">$MYVIMRC</span>&lt;CR&gt; <span class="comment"># 用 R 键替换 source 当前 vimrc 文件</span></span><br></pre></td></tr></table></figure></p><h2 id="3-1-配置-vim-的编辑器"><a href="#3-1-配置-vim-的编辑器" class="headerlink" title="3.1 配置 vim 的编辑器"></a>3.1 配置 vim 的编辑器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">syntax on       <span class="comment"># 开启语法高亮</span></span><br><span class="line"><span class="built_in">set</span> nu          <span class="comment"># 开启行号</span></span><br></pre></td></tr></table></figure><h3 id="3-1-1-set-relativenumber-开启真实行号"><a href="#3-1-1-set-relativenumber-开启真实行号" class="headerlink" title="3.1.1 set relativenumber 开启真实行号"></a>3.1.1 set relativenumber 开启真实行号</h3><p>该配置生效之后, 行号会分两列展示, 第一列用于展示真正的行号, 第二列用于展示其他行相对当前行的距离</p><p><img src="https://user-images.githubusercontent.com/17758731/59780134-1db74d00-92ec-11e9-8132-b0faf511498b.png" alt="image"></p><h3 id="3-1-2-set-cursorline-开启当前行高亮线"><a href="#3-1-2-set-cursorline-开启当前行高亮线" class="headerlink" title="3.1.2 set cursorline 开启当前行高亮线"></a>3.1.2 set cursorline 开启当前行高亮线</h3><p><img src="https://user-images.githubusercontent.com/17758731/59780278-5a834400-92ec-11e9-9b6b-92e9657ce20d.png" alt="image"></p><h3 id="3-1-3-set-wrap-开启自动换行"><a href="#3-1-3-set-wrap-开启自动换行" class="headerlink" title="3.1.3 set wrap 开启自动换行"></a>3.1.3 set wrap 开启自动换行</h3><h3 id="3-1-4-set-showcmd-右下角显示执行的命令"><a href="#3-1-4-set-showcmd-右下角显示执行的命令" class="headerlink" title="3.1.4 set showcmd 右下角显示执行的命令"></a>3.1.4 set showcmd 右下角显示执行的命令</h3><h3 id="3-1-5-set-wildmenu-命令模式下的提示"><a href="#3-1-5-set-wildmenu-命令模式下的提示" class="headerlink" title="3.1.5 set wildmenu 命令模式下的提示"></a>3.1.5 set wildmenu 命令模式下的提示</h3><p>使用 <code>:</code> 进入命令模式, 输入 so 时, 敲 tab 会给出提示: <code>sort</code> 和 <code>source</code></p><p><img src="https://user-images.githubusercontent.com/17758731/59780689-fa40d200-92ec-11e9-96f5-da33eb7cf952.png" alt="image"></p><h2 id="3-2-vim-的编辑操作"><a href="#3-2-vim-的编辑操作" class="headerlink" title="3.2 vim 的编辑操作"></a>3.2 vim 的编辑操作</h2><p>vim 下的编辑操作通常由 <code>操作</code> 和 <code>动作</code> 组成</p><h3 id="3-2-1-常见操作"><a href="#3-2-1-常见操作" class="headerlink" title="3.2.1 常见操作"></a>3.2.1 常见操作</h3><h4 id="3-2-1-1-删除"><a href="#3-2-1-1-删除" class="headerlink" title="3.2.1.1 删除"></a>3.2.1.1 删除</h4><p>假设有如下内容, 我们需要删除中间的空格, 有如下几种方式</p><pre><code>&lt;optration&gt; &lt;motion&gt;</code></pre><p>总的来说, 编辑指令的语法类似于动宾短语, 操作一般是动词, 如复制, 删除等, 动作一般为宾语, 代表执行操作的字符.</p><p>下面来分别介绍一下常见的操作和动作</p><ol><li>在普通模式下将光标移动到空格后的 <code>&lt;</code> 然后输入 <code>x</code> 将光标的前一个字符删除.</li><li>在普通模式下输入 <code>d</code>, <code>d</code> 代表 delete, 提供了多种选项:<ol><li><code>d</code> + <code>←</code>(方向键左), 代表向左删除一个字符</li><li><code>d</code> + <code>3</code> + <code>→</code>(方向键右), 代表向右删除三个字符</li><li><code>d</code> + <code>d</code>, 代表对整行执行删除操作(实际上大多数操作都遵循双击代表针对行的规律)</li></ol></li></ol><h4 id="3-2-1-2-粘贴"><a href="#3-2-1-2-粘贴" class="headerlink" title="3.2.1.2 粘贴"></a>3.2.1.2 粘贴</h4><p><code>p</code>, 代表 paste, 可以用来粘贴被复制或剪切的字符</p><h4 id="3-2-1-4-复制"><a href="#3-2-1-4-复制" class="headerlink" title="3.2.1.4 复制"></a>3.2.1.4 复制</h4><p><code>y</code>, 代表 copy, 可以用来复制选中的字符</p><blockquote><ol><li><code>y</code> + <code>→</code>, 代表向右复制一个字符</li><li><code>y</code> + <code>3</code> + <code>→</code>, 代表向右复制三个字符</li></ol></blockquote><h4 id="3-2-1-5-改变-c"><a href="#3-2-1-5-改变-c" class="headerlink" title="3.2.1.5 改变(c)"></a>3.2.1.5 改变(c)</h4><p><code>c</code>, 代表 change, 与 <code>d</code> 操作相似, 不同的是完成了删除操作之后, 会自动进入编辑模式</p><blockquote><ol><li><code>c</code> + <code>→</code> + <code>6</code>, 代表删除光标右边的 6 个字符, 并进入编辑模式</li></ol></blockquote><h3 id="3-2-2-常见动作"><a href="#3-2-2-常见动作" class="headerlink" title="3.2.2 常见动作"></a>3.2.2 常见动作</h3><p>最常见的动作就是上下左右, 除此之外还有一些快捷动作.</p><h4 id="3-2-2-1-移动到下个单词-w"><a href="#3-2-2-1-移动到下个单词-w" class="headerlink" title="3.2.2.1 移动到下个单词(w)"></a>3.2.2.1 移动到下个单词(w)</h4><p>假设有如下字符</p><pre><code>I am Happy Today.^</code></pre><p>此时光标在 I 上, 如果在普通模式下按 <code>w</code>, 光标会移动到 <code>am</code> 的首字母 <code>a</code>, 以此类推, 每次都会让光标移动到下一个单词的首字母</p><p>假设我们想将上例中的 <code>Happy</code> 修改为 <code>excited</code>, 可以进行如下操作:</p><blockquote><p>将光标移动到 <code>Happy</code> 的首字母 h, 然后使用 <code>c</code> + <code>w</code>, 就可以将该词删除, 并且进入编辑模式, 然后输入 excited 即可.</p></blockquote><h4 id="3-2-2-2-移动到当前单词的首字母-b"><a href="#3-2-2-2-移动到当前单词的首字母-b" class="headerlink" title="3.2.2.2 移动到当前单词的首字母(b)"></a>3.2.2.2 移动到当前单词的首字母(b)</h4><p><code>b</code>, 代表 back, 可以将光标移动到当前单词的首字母位置</p><p>同样, 通过该动作就可以在 happy 的任意一个字符快速移动到首字母, 并完成删除操作</p><h4 id="3-2-2-3-范围-i"><a href="#3-2-2-3-范围-i" class="headerlink" title="3.2.2.3 范围(i)"></a>3.2.2.3 范围(i)</h4><p><code>i</code>, 代表 in, 表示选中在某个范围内的全部字符</p><blockquote><ol><li><code>c</code> + <code>i</code> + <code>w</code> 表示将当前光标所在单词范围内的全部字符替换  </li><li><code>y</code> + <code>i</code> + <code>w</code> 表示将当前光标所在单词范围内的全部字符复制</li><li><code>c</code> + <code>i</code> + <code>&quot;</code> 表示将当前光标所在引号范围的全部字符替换</li></ol></blockquote><h4 id="3-2-2-4-查找-f"><a href="#3-2-2-4-查找-f" class="headerlink" title="3.2.2.4 查找 (f)"></a>3.2.2.4 查找 (f)</h4><p><code>f</code>, 代表 find, 会将光标移动到第一个相同的字符</p><blockquote><ol><li><code>f</code> + <code>v</code>, 代表将光标向后移动到第一个 v 所在的位置s</li><li><code>d</code> + <code>f</code> + <code>:</code>, 代表 <code>删除+寻找+:</code> 从光标所在字符开始, 一直删除到其后的第一个 <code>:</code></li></ol></blockquote><h1 id="4-搜索"><a href="#4-搜索" class="headerlink" title="4 搜索"></a>4 搜索</h1><h2 id="4-1-搜索方式"><a href="#4-1-搜索方式" class="headerlink" title="4.1 搜索方式"></a>4.1 搜索方式</h2><p>vim 下的搜索主要分为两种方式:</p><ol><li>从上向下搜索(快捷键 <code>/</code>)</li><li>从下向上搜索(快捷键 <code>?</code>)</li></ol><p>两种操作的相同之处都是会以光标作为查询的起点, 向上/向下进行搜索</p><p>将搜索内容高亮的设置:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hlsearch        # 将搜索结果高亮</span><br><span class="line"><span class="keyword">set</span> incsearch       # 将搜索内容即时高亮</span><br><span class="line"><span class="keyword">set</span> ignorecase      # 忽略大小写</span><br><span class="line"><span class="keyword">set</span> smartcase       # 开启智能拼写</span><br><span class="line">exec <span class="string">"nohlsearch"</span>   # 搜索结果的高亮会在下次进入 <span class="keyword">vim</span> 是继续保留, 因此可以先执行该命令清除</span><br><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;LEADER&gt;</span><span class="symbol">&lt;CR&gt;</span> :<span class="keyword">nohlsearch</span><span class="symbol">&lt;CR&gt;</span>    # 执行完搜索之后, 高亮会一直保留, 比较影响视线, 因此使用 `LEADER`(默认为 \ 键) + 回车执行 <span class="keyword">nohlsearch</span> 命令, 取消高亮</span><br></pre></td></tr></table></figure><p>在 vim 的搜索模式下, 模式使用 <code>n</code> 进行下一项的搜索, <code>N</code> 进行上一项的搜索, 可以配合 <code>zz</code> (将光标所在行移动到屏幕中间)</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">noremap</span> n nzz</span><br><span class="line"><span class="keyword">noremap</span> <span class="keyword">N</span> Nzz</span><br></pre></td></tr></table></figure><h1 id="5-美化-vim-界面"><a href="#5-美化-vim-界面" class="headerlink" title="5 美化 vim 界面"></a>5 美化 vim 界面</h1><h2 id="5-1-使用自带美化方案"><a href="#5-1-使用自带美化方案" class="headerlink" title="5.1 使用自带美化方案"></a>5.1 使用自带美化方案</h2><p>方式是在命令模式下输入 <code>color</code> + <code>空格</code> + <code>tab</code> 键, 接下来就会提示可以用的美化方案</p><p><img src="https://user-images.githubusercontent.com/17758731/59963846-5133ea80-952b-11e9-892f-82dcfca165ec.png" alt="image"></p><h2 id="5-2-自定义美化方案"><a href="#5-2-自定义美化方案" class="headerlink" title="5.2 自定义美化方案"></a>5.2 自定义美化方案</h2><p>但如果系统自带的美化方案不能满足需求, 就可以下载其他美化方案</p><p><a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">vim 插件管理</a></p><h3 id="5-2-1-下载"><a href="#5-2-1-下载" class="headerlink" title="5.2.1 下载"></a>5.2.1 下载</h3><p>使用下面的命令进行下载<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/<span class="built_in">autoload</span>/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure></p><h3 id="5-2-2-安装插件"><a href="#5-2-2-安装插件" class="headerlink" title="5.2.2 安装插件"></a>5.2.2 安装插件</h3><p>在 <code>~/.vimrc</code> 中, 以下文开头</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">'~/.vim/plugged'</span>)</span><br></pre></td></tr></table></figure><p>然后安装的语法格式为:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">''</span>     # 引号内为想装的插件</span><br></pre></td></tr></table></figure><p>最后使用下文结束安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><p>将 <code>~/.vimrc</code> source 之后, <code>:</code> 进入命令模式, 输入 PlugInstall 命令开始安装指定插件</p><p><img src="https://user-images.githubusercontent.com/17758731/59964057-11bacd80-952e-11e9-98c9-93129ba662d7.png" alt="image"></p><h3 id="5-2-3-推荐的插件"><a href="#5-2-3-推荐的插件" class="headerlink" title="5.2.3 推荐的插件"></a>5.2.3 推荐的插件</h3><h4 id="5-2-3-1-vim-airline"><a href="#5-2-3-1-vim-airline" class="headerlink" title="5.2.3.1 vim-airline"></a>5.2.3.1 vim-airline</h4><p>会在 vim 底部展示状态栏</p><p><img src="https://user-images.githubusercontent.com/17758731/59964076-66f6df00-952e-11e9-82ea-553f6be1517b.png" alt="image"></p><p>包括文件路径, 编码格式以及进度条等.</p><h4 id="5-2-3-2-connorholyday-vim-snazzy"><a href="#5-2-3-2-connorholyday-vim-snazzy" class="headerlink" title="5.2.3.2 connorholyday/vim-snazzy"></a>5.2.3.2 connorholyday/vim-snazzy</h4><p>加入 <code>connorholyday/vim-snazzy</code> 并 PlugInstall 之后, 在配置文件之后再添加如下配置</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">colorscheme</span> snazzy</span><br></pre></td></tr></table></figure><p>最后 source 即可生效, 效果如图</p><p><img src="https://user-images.githubusercontent.com/17758731/59964448-644ab880-9533-11e9-8806-5ed12e3695e7.png" alt="image"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hadoop基础</title>
      <link href="/blog/2019/04/21/Hadoop%E5%9F%BA%E7%A1%80/"/>
      <url>/blog/2019/04/21/Hadoop%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><h1 id="2-Hadoop-安装"><a href="#2-Hadoop-安装" class="headerlink" title="2. Hadoop 安装"></a>2. Hadoop 安装</h1><h2 id="2-1-JDK-安装配置"><a href="#2-1-JDK-安装配置" class="headerlink" title="2.1 JDK 安装配置"></a>2.1 JDK 安装配置</h2><p>可以在 Oracle 官网或者直接使用 wget 命令下载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate --no-cookies --header <span class="string">"Cookie: oraclelicense=accept-securebackup-cookie"</span> http://download.oracle.com/otn-pub/java/jdk/8u65-b17/jdk-8u65-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>使用 <code>tar -zxvf</code> 完成解压</p><p><img src="https://user-images.githubusercontent.com/17758731/56851599-89f87e80-6943-11e9-8b32-2453360ffef9.png" alt="image"></p><p>再将路径 (<code>/usr/soft/jdk1.8.0_65</code>) 配置到 <code>etc/enviroment</code> 路径下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 给 path 新增 JDK 的 bin 路径</span><br><span class="line">PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/soft/jdk1.8.0_65/bin&quot;</span><br><span class="line"></span><br><span class="line"># jdk 路径</span><br><span class="line">JAVA_HOME=/usr/soft/jdk1.8.0_65</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/17758731/56851719-ef993a80-6944-11e9-93ab-bc181fe1c5ee.png" alt="image"></p><p>经此验证, 已经成功安装并配置 JDK</p><h2 id="2-2-Hadoop-安装配置"><a href="#2-2-Hadoop-安装配置" class="headerlink" title="2.2 Hadoop 安装配置"></a>2.2 Hadoop 安装配置</h2><p>在 Apache 官网下载压缩包并解压:</p><p><img src="https://user-images.githubusercontent.com/17758731/56866098-2b490880-6a08-11e9-8e16-29f651ccc7a3.png" alt="image"></p><p>在 <code>/etc/enviroment</code> 文件中配置环境变量</p><pre><code>PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/soft/jdk1.8.0_65/bin:/usr/soft/hadoop-2.7.7/bin:/usr/soft/hadoop-2.7.7/sbin&quot;JAVA_HOME=/usr/soft/jdk1.8.0_65HADOOP_INSTALL=/usr/soft/hadoop-2.7.7</code></pre><p>在输入 <code>hadoop version</code> 即可看到输出:</p><pre><code>destiny@destiny-Parallels-Virtual-Platform:/etc$ hadoop versionHadoop 2.7.7Subversion Unknown -r c1aad84bd27cd79c3d1a7dd58202a8c3ee1ed3acCompiled by stevel on 2018-07-18T22:47ZCompiled with protoc 2.5.0From source with checksum 792e15d20b12c74bd6f19a1fb886490This command was run using /usr/soft/hadoop-2.7.7/share/hadoop/common/hadoop-common-2.7.7.jardestiny@destiny-Parallels-Virtual-Platform:/etc$ </code></pre><p><img src="https://user-images.githubusercontent.com/17758731/56866210-4c5e2900-6a09-11e9-8587-949e514572eb.png" alt="image"></p><h1 id="3-Hadoop-配置"><a href="#3-Hadoop-配置" class="headerlink" title="3. Hadoop 配置"></a>3. Hadoop 配置</h1><p>Hadoop 的配置都是 XML 文件的方式完成, 通用配置都在 <code>core-site.xml</code> 中, HDFS, MapReduce 和 YARN 都有对应的 <code>hdfs-site.xml</code>, <code>mapred-site.xml</code> 以及 <code>yarn-site.xml</code>.</p><p>Hadoop 的设计的目的在于处理海量数据, 其主要内容包括数据的存储以及运算, 存储使用 HDFS 实现, 运算使用 MapReduce 编程模型实现.</p><p>Hadoop 有三种配置方式:</p><ol><li>独立模式: 没有守护程序, 所有程序都运行在一个单独的 JVM 之上, 独立模式适合在开发期间运行 MapReduce 程序, 方便调试和测试.</li><li>伪分布式: Hadoop 守护程序运行在本地机器上, 会模拟一个小规模的集群.</li><li>完全分布式: 运行在集群的不同机器上.</li></ol><p>当需要运行某个模式的 Hadoop 时, 需要设置适当的配置, 以及启动守护进程(独立模式除外), 不同模式见的配置如下:</p><table><thead><tr><th style="text-align:center">配置文件</th><th style="text-align:center">属性</th><th style="text-align:center">独立模式值</th><th style="text-align:center">伪分布式值</th><th style="text-align:center">完全分布式值</th></tr></thead><tbody><tr><td style="text-align:center">core</td><td style="text-align:center">fs.defaultFS</td><td style="text-align:center">file:///(默认值)</td><td style="text-align:center">hdfs://localhost/</td><td style="text-align:center">hdfs://namenode</td></tr><tr><td style="text-align:center">HDFS</td><td style="text-align:center">dfs.replication</td><td style="text-align:center">N/A</td><td style="text-align:center">1</td><td style="text-align:center">3(默认值)</td></tr><tr><td style="text-align:center">MapReduce</td><td style="text-align:center">mapreduce.framework.name</td><td style="text-align:center">local(默认值)</td><td style="text-align:center">yarn</td><td style="text-align:center">yarn</td></tr><tr><td style="text-align:center">yarn</td><td style="text-align:center">yarn.resourcemanager.hostname<br>yarn.nodemanager.aux-services</td><td style="text-align:center">N/A<br>N/A</td><td style="text-align:center">localhost <br> mapreduce_shuffle</td><td style="text-align:center">resourcemanager <br> mapreduce_shuffle</td></tr></tbody></table><p>此外, Hadoop 的不同配置模式见可以共存, 只需用不同的目录存放配置文件即可, 启动的时候可以通过如下两种方式来指定配置文件:</p><ol><li>设置 <code>HADOOP_CONF_DIR</code> 环境变量</li><li>通过 <code>--config</code> 选项来指定</li></ol><h2 id="3-1-独立模式"><a href="#3-1-独立模式" class="headerlink" title="3.1 独立模式"></a>3.1 独立模式</h2><p>在独立模式下不需要进行额外的配置, 所有默认的属性都是针对独立模式的, 也没有守护程序运行, 独立模式下使用的文件系统是 <code>Local File System</code> 和 <code>Local MR job runner</code>.</p><p><img src="https://user-images.githubusercontent.com/17758731/56866418-6d277e00-6a0b-11e9-9e87-832ec82a11f6.png" alt="image"></p><p>可以看到, 独立模式下使用 <code>hadoop fs -ls</code> 显示的就是本机的根路径文件</p><h2 id="3-2-伪分布式"><a href="#3-2-伪分布式" class="headerlink" title="3.2 伪分布式"></a>3.2 伪分布式</h2><h3 id="3-2-1-配置文件"><a href="#3-2-1-配置文件" class="headerlink" title="3.2.1 配置文件"></a>3.2.1 配置文件</h3><p>在伪分布式环境下, 需要配置如下文件:</p><ol><li><p>core-site.xml(核心站点)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>mapred-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- yarn 是一个 MapReduce 框架, 2.0 版本以上开始引入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>初始状态下, 这些配置文件中都是空值, 需要根据使用者的自身情况去配置以完成不同环境的搭建.</p><p><img src="https://user-images.githubusercontent.com/17758731/56905677-3cab1700-6ad3-11e9-93bf-b7274eca76ca.png" alt="image"></p><p>我们将 <code>$HADOOP_INSTALL/etc/hadoop</code> 文件夹拷贝一份, 用作伪分布式的配置</p><p><img src="https://user-images.githubusercontent.com/17758731/56906117-2baed580-6ad4-11e9-98b3-f0b1a8b24d94.png" alt="image"></p><p>然后依次将上文提到的四个配置文件修改成指定的配置方式</p><h3 id="3-2-2-配置-SSH"><a href="#3-2-2-配置-SSH" class="headerlink" title="3.2.2 配置 SSH"></a>3.2.2 配置 SSH</h3><p>在伪分布式下, 必须要启动守护进程, 启动守护进程就需要使用提供的启动脚本, Hadoop 并不严格区分伪分布式和完全分布式, 只是在目标主机上启动守护进程, 通过 SSH 命令让主机之间相互通信, 而且要启动守护进程. </p><p>伪分布式只是完全分布式的一个特例, 是一个在单个主机上运行 Hadoop 完全分布式的场景, 因此我们需要确保能够通过 SSH 命令登录本机, 而不需要通过输入密码.</p><p>在 ubuntu 上可以通过 <code>sudo apt-get install ssh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install ssh                  <span class="comment"># 安装 ssh</span></span><br><span class="line">$ ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa  <span class="comment"># 生成公钥和私钥, -P '' 代表指定密码为空</span></span><br><span class="line">$ cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys  <span class="comment"># 将公钥配置给 authorized_keys, 用来实现免密登陆</span></span><br><span class="line">$ ssh localhost                             <span class="comment"># 第一次yes</span></span><br><span class="line">$ yes</span><br><span class="line">$ ssh localhost                             <span class="comment"># 第二次不需要口令</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/17758731/56973756-0f786a80-6ba0-11e9-852e-47688237b2be.png" alt="image"></p><h3 id="3-2-3-使用-HDFS"><a href="#3-2-3-使用-HDFS" class="headerlink" title="3.2.3 使用 HDFS"></a>3.2.3 使用 HDFS</h3><p>首先需要对文件系统进行格式化</p><pre><code>hdfs namenode -format</code></pre><p>然后就可以启动守护进程</p><h4 id="3-2-3-1-启动"><a href="#3-2-3-1-启动" class="headerlink" title="3.2.3.1 启动"></a>3.2.3.1 启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">start-dfs.sh --config <span class="variable">$HADOOP_INSTALL</span>/etc/hadoop_pseudo</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/17758731/56974348-426f2e00-6ba1-11e9-9de9-8927285be487.png" alt="image"></p><h4 id="3-2-3-2-启动-yarn"><a href="#3-2-3-2-启动-yarn" class="headerlink" title="3.2.3.2 启动 yarn"></a>3.2.3.2 启动 yarn</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">start-yarn.sh --config <span class="variable">$HADOOP_INSTALL</span>/etc/hadoop_pseudo</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/17758731/56974786-1a33ff00-6ba2-11e9-9575-a52c554de287.png" alt="image"></p><p>此时可以通过 jps 查看:</p><p><img src="https://user-images.githubusercontent.com/17758731/56975718-f83b7c00-6ba3-11e9-8880-1c968d4d8dbd.png" alt="image"></p><ul><li>其中 ResourceManager 和 NodeManager 由 Yarn 提供</li><li>NameNode, DataNode, SecondaryNameNode 由 HDFS 提供</li></ul><p>可以使用如下命令停止 Hadoop<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stop-yarn.sh</span><br><span class="line">stop-dfs.sh</span><br></pre></td></tr></table></figure></p><p>通过设置环境变量, 可以不再需要借助 –config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=/usr/soft/hadoop-2.7.7/etc/hadoop_pseudo</span><br></pre></td></tr></table></figure><p>此时再使用 <code>hadoop fs -ls /</code> 就已经没有结果显示</p><p>我们可以像使用 Linux 系统类似的命令去操作 HDFS, 下图展示一个创建文件夹的操作</p><p><img src="https://user-images.githubusercontent.com/17758731/56976335-50bf4900-6ba5-11e9-9f11-61b04f473601.png" alt="image"></p><h2 id="3-3-完全分布式"><a href="#3-3-完全分布式" class="headerlink" title="3.3 完全分布式"></a>3.3 完全分布式</h2><h3 id="3-3-1-准备工作"><a href="#3-3-1-准备工作" class="headerlink" title="3.3.1 准备工作"></a>3.3.1 准备工作</h3><ol><li><p>在 /etc/passwd 修改登录提示消息</p></li><li><p>在 /etc/hostname 中修改主机名</p></li></ol><p>可以通过软连接的方式指定 Hadoop 配置文件</p><p><img src="https://user-images.githubusercontent.com/17758731/57002668-999dee80-6bf3-11e9-8fcc-bd41e67e0788.png" alt="image"></p><p>将现在的 ubuntu 虚拟机克隆出三份, 具体配置如下:</p><p><img src="https://user-images.githubusercontent.com/17758731/57017238-d6e49980-6c50-11e9-9aeb-cc3f98d4fd16.png" alt="image"></p><ol><li>左边标出本人当前的四台节点 ip</li><li><p>将 ip 和编号分别写在当前节点(s1) 的 <code>/etc/hosts</code> 文件中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10.211.55.33 s0</span><br><span class="line">10.211.55.34 s1</span><br><span class="line">10.211.55.35 s2</span><br><span class="line">10.211.55.36 s3</span><br></pre></td></tr></table></figure></li><li><p>此时测试, s0, s1, s2, s3 均可以被 ping 通</p></li><li>现在需要将 hosts 分别同步(覆盖)给到 s1, s2, s3 节点</li></ol><p><img src="https://user-images.githubusercontent.com/17758731/57017640-91c16700-6c52-11e9-8584-be7726f0d5cc.png" alt="image"></p><p>Hadoop 集群架构分析</p><p><img src="https://user-images.githubusercontent.com/17758731/57052874-aafefd80-6cbc-11e9-8d86-0ee8a6022d28.png" alt="image"></p><h3 id="3-3-2-集群模式配置"><a href="#3-3-2-集群模式配置" class="headerlink" title="3.3.2 集群模式配置"></a>3.3.2 集群模式配置</h3><p>预期部署的网络拓扑图: </p><p><img src="https://user-images.githubusercontent.com/17758731/57019091-021eb700-6c58-11e9-903b-4aa941551f75.png" alt="image"></p><table><thead><tr><th>节点名</th><th>功能</th></tr></thead><tbody><tr><td>s0</td><td>名称节点</td></tr><tr><td>s1</td><td>数据节点</td></tr><tr><td>s2</td><td>数据节点</td></tr><tr><td>s3</td><td>辅助名称节点</td></tr></tbody></table><blockquote><p>下面我们从 s0 开始进行配置, 在完成 s0 的配置后, Hadoop 运行时需要所有节点的配置相同, 因此类似于 hosts 文件, 我们需要将配置好的文件覆盖到其他节点.</p></blockquote><h4 id="3-3-2-1-core-site-xml"><a href="#3-3-2-1-core-site-xml" class="headerlink" title="3.3.2.1 core-site.xml"></a>3.3.2.1 core-site.xml</h4><p>core-site.xml 用来配置 NameNode 所运行的节点 ip</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://s0/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-2-hdfs-site-xml"><a href="#3-3-2-2-hdfs-site-xml" class="headerlink" title="3.3.2.2 hdfs-site.xml"></a>3.3.2.2 hdfs-site.xml</h4><p>hdfs-site.xml 用来配置 HDFS 的副本数量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-4-yarn-site-xml"><a href="#3-3-2-4-yarn-site-xml" class="headerlink" title="3.3.2.4 yarn-site.xml"></a>3.3.2.4 yarn-site.xml</h4><p>yarn-site.xml 用来配置 yarn 的资源管理节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>s0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-5-slaves"><a href="#3-3-2-5-slaves" class="headerlink" title="3.3.2.5 slaves"></a>3.3.2.5 slaves</h4><p>通过该文件配置从节点(DataNode) 的 ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1</span><br><span class="line">s2</span><br></pre></td></tr></table></figure><p>最后再将整个 <code>hadoop_cluster</code> 文件夹覆盖到其他节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo scp -r hadoop_cluster root@s1:/usr/soft/hadoop-2.7.7/etc/</span><br><span class="line">sudo scp -r hadoop_cluster root@s2:/usr/soft/hadoop-2.7.7/etc/</span><br><span class="line">sudo scp -r hadoop_cluster root@s3:/usr/soft/hadoop-2.7.7/etc/</span><br></pre></td></tr></table></figure><p>使用 <code>start-all.sh</code> 完成 hdfs 和 yarn 的启动:</p><p><img src="https://user-images.githubusercontent.com/17758731/57019992-9be76380-6c5a-11e9-8048-d55108068731.png" alt="image"></p><p>我们可以对启动日志做一个简单的解读:</p><ul><li>在 s0 节点上启动名称节点</li><li>分别在 s1 和 s2 启动数据节点</li><li>启动辅助名称节点</li><li>启动 yarn 守护进程</li><li>分别在 s1 和 s2 启动节点管理器</li></ul><p>可以看一下此时集群上所有节点的 Java 进程状态</p><p><img src="https://user-images.githubusercontent.com/17758731/57020332-8aeb2200-6c5b-11e9-8075-2ffaebfd3096.png" alt="image"></p><p>此时我们已经完成了 Hadoop 完全分布式配置.</p><h1 id="4-分布式文件系统HDFS"><a href="#4-分布式文件系统HDFS" class="headerlink" title="4. 分布式文件系统HDFS"></a>4. 分布式文件系统HDFS</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><ul><li>Hadoop 实现的分布式文件系统(Hadoop Distributed File System), 简称 HDFS</li><li>源自于 Google 的 GFS 论文</li><li>发表与 2003 年, HDFS 是 GFS 的克隆版</li></ul><h2 id="4-2-设计目标"><a href="#4-2-设计目标" class="headerlink" title="4.2 设计目标"></a>4.2 设计目标</h2><ul><li>非常巨大的分布式文件系统</li><li>运行在普通的廉价硬件之上</li><li>易扩展, 为用户提供性能较高的文件存储服务</li></ul><h2 id="4-3-HDFS-架构"><a href="#4-3-HDFS-架构" class="headerlink" title="4.3 HDFS 架构"></a>4.3 HDFS 架构</h2><p><img src="https://user-images.githubusercontent.com/17758731/57053421-7c832180-6cc0-11e9-9ac0-cad53ca1ae99.png" alt="image"></p><p>一个 Master(NameNode/NN), 以及多个 Slave(DataNode/DN), DataNode 用于管理数据的读写, 一个文件会被拆分成多个 block, 默认为 128M, 被存储在一系列的 DataNode(不是一个 DataNode).</p><p>NameNode 职责:</p><ol><li>负责客户端请求的响应</li><li>负责元数据(文件名称, 副本系数, block 存放的 DN)的管理</li></ol><p>DataNode 职责:</p><ol><li>存储用户文件对应的数据块</li><li>要定期向 NameNode 发送心跳信息, 汇报本身及其所有的 block 信息, 健康状况</li></ol><h2 id="4-4-HDFS-副本机制"><a href="#4-4-HDFS-副本机制" class="headerlink" title="4.4 HDFS 副本机制"></a>4.4 HDFS 副本机制</h2><p><img src="https://user-images.githubusercontent.com/17758731/58401666-055b6600-8091-11e9-93ca-204b1312832c.png" alt="image"></p><p>心跳包中包含的信息:</p><ul><li>文件名称, 副本系数, block id</li><li>e.g. 文件名 part-0, 副本系数 2, block id 为 {1, 3}</li><li>e.g. 文件名 part-1, 副本系数 3, block id 为 {2, 4, 5}</li></ul><blockquote><p>HDFS 副本存放策略: 第一个副本存放在客户端所在的节点, 另外两个副本优先存放在不同的机架上, 假设集群只有一个机架, 所有副本都会存放在同一个机架, 如果集群存在多个机架, 就随机挑选一个.</p></blockquote><h2 id="4-5-Hadoop-Shell"><a href="#4-5-Hadoop-Shell" class="headerlink" title="4.5 Hadoop Shell"></a>4.5 Hadoop Shell</h2><p>基本的命令格式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs/hadoop fs [generic options]</span><br><span class="line">比如 ls 命令可以写成: hdfs dfs -ls / 或 hadoop fs -ls /</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">ls</td><td style="text-align:center">展示文件/文件夹列表</td></tr><tr><td style="text-align:center">mkdir</td><td style="text-align:center">创建文件夹</td></tr><tr><td style="text-align:center">put</td><td style="text-align:center">上传文件</td></tr><tr><td style="text-align:center">get</td><td style="text-align:center">获取文件</td></tr><tr><td style="text-align:center">rm</td><td style="text-align:center">删除文件/文件夹</td></tr></tbody></table><h2 id="4-6-通过代码操作-API"><a href="#4-6-通过代码操作-API" class="headerlink" title="4.6 通过代码操作 API"></a>4.6 通过代码操作 API</h2><h3 id="4-6-1-测试文件的通用代码"><a href="#4-6-1-测试文件的通用代码" class="headerlink" title="4.6.1 测试文件的通用代码"></a>4.6.1 测试文件的通用代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HDFS_PATH = <span class="string">"hdfs://10.211.55.33:8020"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对于文件系统, 所有操作的统一入库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FileSystem fileSystem = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HDFSApp.setUp"</span>);</span><br><span class="line">        configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        fileSystem = FileSystem.get(<span class="keyword">new</span> URI(HDFS_PATH), configuration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        configuration = <span class="keyword">null</span>;</span><br><span class="line">        fileSystem = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">"HDFSApp.tearDown"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-2-创建路径"><a href="#4-6-2-创建路径" class="headerlink" title="4.6.2 创建路径"></a>4.6.2 创建路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 HDFS 目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mkdir</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    fileSystem.mkdirs(<span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后的结果:</p><p><img src="https://user-images.githubusercontent.com/17758731/58405892-0c877180-809b-11e9-9bed-22bb2a046cc3.png" alt="image"></p><h3 id="4-6-3-创建文件"><a href="#4-6-3-创建文件" class="headerlink" title="4.6.3 创建文件"></a>4.6.3 创建文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FSDataOutputStream fsDataOutputStream = fileSystem.create(<span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test/a.txt"</span>));</span><br><span class="line">    fsDataOutputStream.write(<span class="string">"hello hadoop"</span>.getBytes());</span><br><span class="line">    fsDataOutputStream.flush();</span><br><span class="line">    fsDataOutputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后的结果:</p><p><img src="https://user-images.githubusercontent.com/17758731/58406172-98999900-809b-11e9-98c9-77d5b598fe54.png" alt="image"></p><h3 id="4-6-4-查看文件内容"><a href="#4-6-4-查看文件内容" class="headerlink" title="4.6.4 查看文件内容"></a>4.6.4 查看文件内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看 HDFS 文件的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cat</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FSDataInputStream fsDataInputStream = fileSystem.open(<span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test/a.txt"</span>));</span><br><span class="line">    IOUtils.copyBytes(fsDataInputStream, System.out, <span class="number">1024</span>);</span><br><span class="line">    fsDataInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-5-重命名"><a href="#4-6-5-重命名" class="headerlink" title="4.6.5 重命名"></a>4.6.5 重命名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重命名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rename</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> rename = fileSystem.rename(<span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test/a.txt"</span>), <span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test/b.txt"</span>));</span><br><span class="line">    System.out.println(<span class="string">"rename = "</span> + rename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><p><img src="https://user-images.githubusercontent.com/17758731/58406539-6b99b600-809c-11e9-8a9e-67819fc8e711.png" alt="image"></p><h3 id="4-6-6-将本地文件-copy-到-HDFS"><a href="#4-6-6-将本地文件-copy-到-HDFS" class="headerlink" title="4.6.6 将本地文件 copy 到 HDFS"></a>4.6.6 将本地文件 copy 到 HDFS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将文件从本地 copy 到 HDFS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFromLocalFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Path localPath = <span class="keyword">new</span> Path(<span class="string">"/Users/destiny/dev/apache-tomcat-8.5.29-src.tar.gz"</span>);</span><br><span class="line">    Path hdfsPath = <span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test/"</span>);</span><br><span class="line">    fileSystem.copyFromLocalFile(localPath, hdfsPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><p><img src="https://user-images.githubusercontent.com/17758731/58406887-33df3e00-809d-11e9-9ebb-e7e94cdf83f8.png" alt="image"></p><h3 id="4-6-7-带进度条的上传"><a href="#4-6-7-带进度条的上传" class="headerlink" title="4.6.7 带进度条的上传"></a>4.6.7 带进度条的上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将文件从本地 copy 到 HDFS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFromLocalFileWithProgress</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"/Users/destiny/dev/hadoop-2.7.7.tar.gz"</span>)));</span><br><span class="line">    FSDataOutputStream fsDataOutputStream = fileSystem.create(<span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test/hadoop-2.7.7.tar.gz"</span>), <span class="keyword">new</span> Progressable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">progress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 带进度条提醒信息</span></span><br><span class="line">            System.out.print(<span class="string">"#"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    IOUtils.copyBytes(inputStream, fsDataOutputStream, <span class="number">4096</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><p><img src="https://user-images.githubusercontent.com/17758731/58407545-9dac1780-809e-11e9-9873-15c03f8832eb.png" alt="image"></p><h3 id="4-6-8-下载-HDFS-文件"><a href="#4-6-8-下载-HDFS-文件" class="headerlink" title="4.6.8 下载 HDFS 文件"></a>4.6.8 下载 HDFS 文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载 HDFS 文件到本地</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyToLocalFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Path localPath = <span class="keyword">new</span> Path(<span class="string">"/Users/destiny/dev/"</span>);</span><br><span class="line">    Path hdfsPath = <span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test/b.txt"</span>);</span><br><span class="line">    fileSystem.copyToLocalFile(hdfsPath, localPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-9-查看指定路径下的所有文件"><a href="#4-6-9-查看指定路径下的所有文件" class="headerlink" title="4.6.9 查看指定路径下的所有文件"></a>4.6.9 查看指定路径下的所有文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看指定路径的所有文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listFiles</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileStatus[] fileStatuses = fileSystem.listStatus(<span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test/"</span>));</span><br><span class="line">    <span class="keyword">for</span> (FileStatus fileStatus : fileStatuses) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> directory = fileStatus.isDirectory();</span><br><span class="line">        System.out.println(<span class="string">"directory = "</span> + directory);</span><br><span class="line">        <span class="keyword">short</span> replication = fileStatus.getReplication();</span><br><span class="line">        System.out.println(<span class="string">"replication = "</span> + replication);</span><br><span class="line">        <span class="keyword">long</span> len = fileStatus.getLen();</span><br><span class="line">        System.out.println(<span class="string">"len = "</span> + len);</span><br><span class="line">        String path = fileStatus.getPath().toString();</span><br><span class="line">        System.out.println(<span class="string">"path = "</span> + path);</span><br><span class="line">        System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><p><img src="https://user-images.githubusercontent.com/17758731/58408282-1495e000-80a0-11e9-9cd4-8221cd4cc79a.png" alt="image"></p><p>这里有一个小问题:</p><blockquote><p>在前面的分布式配置中, <code>hdfs-site.xml</code> 中设置的副本系数为 2, 但这里查询到的结果却为 3<br>如果是通过 HDFS shell 的方式 put 上去, 那么会采用设置的副本系数 2<br>而如果是通过 java API 上传, 那么由于本地没有设置副本系数, 因此采用的是 Hadoop 自带的副本系数</p></blockquote><h3 id="4-6-10-删除文件"><a href="#4-6-10-删除文件" class="headerlink" title="4.6.10 删除文件"></a>4.6.10 删除文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除文件(默认递归)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    fileSystem.delete(<span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test/"</span>), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7-HDFS-文件写入流程"><a href="#4-7-HDFS-文件写入流程" class="headerlink" title="4.7 HDFS 文件写入流程"></a>4.7 HDFS 文件写入流程</h2><h2 id="4-8-HDFS-文件读取刘晨"><a href="#4-8-HDFS-文件读取刘晨" class="headerlink" title="4.8 HDFS 文件读取刘晨"></a>4.8 HDFS 文件读取刘晨</h2><h1 id="5-资源调度框架-YARN"><a href="#5-资源调度框架-YARN" class="headerlink" title="5. 资源调度框架 YARN"></a>5. 资源调度框架 YARN</h1><h2 id="5-1-背景"><a href="#5-1-背景" class="headerlink" title="5.1 背景"></a>5.1 背景</h2><h3 id="5-1-1-MapReduce-1-X-存在的问题"><a href="#5-1-1-MapReduce-1-X-存在的问题" class="headerlink" title="5.1.1 MapReduce 1.X 存在的问题"></a>5.1.1 MapReduce 1.X 存在的问题</h3><blockquote><ul><li>集群由一个 JobTracker 与多个 TaskTracker 构成, 客户端提交任务的时候, 直接将作业提交给 JobTracker, 由 JobTracker 负责资源的管理与作业的调度;  </li><li>TaskTracker 定期通过心跳机制与 JobTracker 进行通信, 汇报健康状况, 资源使用情况以及任务的执行进度, 并且接收来自 JobTracker 的命令来进行任务的启动和结束</li></ul></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/58748384-85773680-84aa-11e9-8233-daebe5f2ccf6.png" alt="image"></p><p>存在问题:</p><ol><li>JobTracker 存在单点故障</li><li>JobTracker 负载较大, 需要接收 TaskTracker 的心跳信息, 制约 Hadoop 集群的扩展</li><li>JobTracker 承载职责较多,  包括资源管理, 资源调度, 任务分配</li><li>仅仅支持 MapReduce 作业, Spark 以及 Storm 作业无法支持</li></ol><h3 id="5-1-2-资源利用-amp-运维成本"><a href="#5-1-2-资源利用-amp-运维成本" class="headerlink" title="5.1.2 资源利用&amp;运维成本"></a>5.1.2 资源利用&amp;运维成本</h3><p><img src="https://user-images.githubusercontent.com/17758731/58748483-1c90be00-84ac-11e9-8a8f-a1047ab1e791.png" alt="image"></p><p>由于 Hadoop 集群不支持其他形式的作业, 因此生产环境需要部署多套集群, 而不同集群在造成更多资源占用的同时, 往往存在运行时间不同, 如果能够将多个集群整合在一起, 就可以节约计算资源.</p><p>如果存在一种 <code>共享集群</code>, 能够处理不同类型的作业, 并且能够自行实现资源的合理分配, 就可以解决不同作业任务需要多套集群环境的问题.</p><p><img src="https://user-images.githubusercontent.com/17758731/58748603-f5d38700-84ad-11e9-862f-26c9e6a73f13.png" alt="image"></p><p>在 Hadoop2.0 的架构中, Hadoop 之上运行 YARN, YARN 负责集群的资源管理, 而 YARN 可以接收来自 MapReduce, HBase, Storm, Spark 等多种应用的输入. YARN 做了统一的抽象, 类似操作系统级别的通用资源调度框架, 可以让更多的计算框架运行在同一个集群中, 不同的计算框架可以共享同一个 HDFS 上的数据, 享受整体的资源调度.</p><h2 id="5-2-架构"><a href="#5-2-架构" class="headerlink" title="5.2 架构"></a>5.2 架构</h2><ul><li>Yarn(Yet Another Resource Negotiator, 另一个资源协调者的简称)</li><li>是一个通用的资源管理系统</li><li>为上层应用提供统一的资源管理和调度</li></ul><p><img src="https://user-images.githubusercontent.com/17758731/58748576-8d84a580-84ad-11e9-98db-95d5970a38d0.png" alt="image"></p><p>Yarn 架构的核心组件:</p><table><thead><tr><th style="text-align:center">角色</th><th>描述</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">ResourceManager</td><td>整个集群同一时间提供服务的 Resource Manager 只有一个, 负责集群资源的统一管理和调度</td><td>1. 提交作业<br>2. 杀死作业<br>3. 监控 NodeManager, 一旦某个 NodeManager 挂了, 该 NameNode 上运行的任务要告诉 Application Master</td></tr><tr><td style="text-align:center">NodeManager</td><td>整个集群中有多个 NodeManager, 负责当前节点资源管理和使用</td><td>1. 定时向 ResourceManager 汇报当前节点的资源使用情况<br>2. 接受并处理 ResourceManager 的各种命令<br>3. 处理来自 Application Master 的命令<br>4. 单个节点的资源管理</td></tr><tr><td style="text-align:center">Application Master</td><td>每个应用程序对应一个 Application Master, 负责应用程序的管理</td><td>1. 为应用程序向 ResourceManager 申请资源(core, mem)<br>2. 分配给内部的 Task 处理<br> 3. 需要与 NodeManager 通信, 启动/停止 task</td></tr><tr><td style="text-align:center">Container</td><td>封装了 CPU, MEM 等资源的容器, 是一个任务运行环境的抽象</td></tr><tr><td style="text-align:center">Client</td><td>用于封装用户的操作</td><td>1. 提交作业<br> 2. 查询作业运行进度 <br> 3. 杀死作业<br></td></tr></tbody></table><h2 id="5-3-执行流程"><a href="#5-3-执行流程" class="headerlink" title="5.3 执行流程"></a>5.3 执行流程</h2><p><img src="https://user-images.githubusercontent.com/17758731/60674721-568b2080-9ead-11e9-8c35-654d3fdc8fdc.png" alt="image"></p><ol><li>用户向 YARN 提交作业</li><li>ResourceManager 为作业分配第一个 Container, 与对应的 NodeManager 通信, 要求在其上启动 Container, 用来启动应用程序</li><li>NodeManager 按照要求, 启动 Application Master</li><li>Application Master 启动后, 会首先在 ResourceManager 进行注册, 此时就可以通过 ResourceManager 查询作业的运行情况. 然后 ApplicationMaster 会将所需要的资源到 ResourceManager 上去申请</li><li>ApplicationMaster 申请到资源之后在对应的 NodeManager 上开始启动任务, 所有的任务都是以 Container 的方式运行的</li><li>NodeManager 启动对应的 Container 去执行任务.</li></ol><h2 id="5-5-提交作业到-YARN-上执行"><a href="#5-5-提交作业到-YARN-上执行" class="headerlink" title="5.5 提交作业到 YARN 上执行"></a>5.5 提交作业到 YARN 上执行</h2><h3 id="5-5-1-提交-Hadoop-包的-Example"><a href="#5-5-1-提交-Hadoop-包的-Example" class="headerlink" title="5.5.1 提交 Hadoop 包的 Example"></a>5.5.1 提交 Hadoop 包的 Example</h3><p>在 Hadoop 安装路径下的 <code>share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar</code> 文件</p><p>使用如下命令将 MapReduce 作业提交到 YARN 上去运行: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-2.7.7.jar pi 2 3</span><br></pre></td></tr></table></figure><h1 id="6-启动脚本分析"><a href="#6-启动脚本分析" class="headerlink" title="6. 启动脚本分析"></a>6. 启动脚本分析</h1><p>Hadoop 启动脚本位于 <code>${HADOOP_HOME}/bin</code>, <code>${HADOOP_HOME}/sbin</code> 和 <code>${HADOOP_HOME}/libexec</code> 路径下, 其中包含 *nux 的 Shell 脚本和 win 的批处理文件.</p><h2 id="6-1-start-all-sh-启动分析"><a href="#6-1-start-all-sh-启动分析" class="headerlink" title="6.1 start-all.sh 启动分析"></a>6.1 start-all.sh 启动分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"># contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"># this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"># (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"># the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start all hadoop daemons.  Run this on master node.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This script is Deprecated. Instead use start-dfs.sh and start-yarn.sh"</span></span><br><span class="line"></span><br><span class="line">bin=`dirname <span class="string">"<span class="variable">$&#123;BASH_SOURCE-$0&#125;</span>"</span>`</span><br><span class="line">bin=`<span class="built_in">cd</span> <span class="string">"<span class="variable">$bin</span>"</span>; <span class="built_in">pwd</span>`</span><br><span class="line"></span><br><span class="line">DEFAULT_LIBEXEC_DIR=<span class="string">"<span class="variable">$bin</span>"</span>/../libexec</span><br><span class="line">HADOOP_LIBEXEC_DIR=<span class="variable">$&#123;HADOOP_LIBEXEC_DIR:-$DEFAULT_LIBEXEC_DIR&#125;</span></span><br><span class="line">. <span class="variable">$HADOOP_LIBEXEC_DIR</span>/hadoop-config.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># start hdfs daemons if hdfs is present</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$&#123;HADOOP_HDFS_HOME&#125;</span>"</span>/sbin/start-dfs.sh ]; <span class="keyword">then</span></span><br><span class="line">  <span class="string">"<span class="variable">$&#123;HADOOP_HDFS_HOME&#125;</span>"</span>/sbin/start-dfs.sh --config <span class="variable">$HADOOP_CONF_DIR</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start yarn daemons if yarn is present</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$&#123;HADOOP_YARN_HOME&#125;</span>"</span>/sbin/start-yarn.sh ]; <span class="keyword">then</span></span><br><span class="line">  <span class="string">"<span class="variable">$&#123;HADOOP_YARN_HOME&#125;</span>"</span>/sbin/start-yarn.sh --config <span class="variable">$HADOOP_CONF_DIR</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ol><li>首先会通过 echo 输出一句话, 大意是该脚本已被废弃, 推荐使用 <code>start-dfs.sh</code> 和 <code>start-yarn.sh</code></li><li><code>bin=`dirname &quot;${BASH_SOURCE-$0}&quot;`</code> 提取 start-all.sh 所在的绝对路径</li><li><code>bin=`cd &quot;$bin&quot;; pwd`</code> 切换到 start-all.sh 所在的绝对路径</li><li><code>DEFAULT_LIBEXEC_DIR=&quot;$bin&quot;/../libexec</code> 获取 <code>${HADOOP_HOME}/libexec/hadoop-config.sh</code> 路径</li><li><code>HADOOP_LIBEXEC_DIR=${HADOOP_LIBEXEC_DIR:-$DEFAULT_LIBEXEC_DIR}</code> 为 <code>HADOOP_LIBEXEC_DIR</code> 变量三元赋值: 如果 <code>HADOOP_LIBEXEC_DIR</code> 为空或者环境变量没有配置, 复制默认的绝对路径</li><li><code>. $HADOOP_LIBEXEC_DIR/hadoop-config.sh</code> 执行 <code>${HADOOP_HOME}/libexec/hadoop-config.sh</code> 脚本, 为后面执行启动各节点和启动 yarn 做预处理</li><li><code>&quot;${HADOOP_HDFS_HOME}&quot;/sbin/start-dfs.sh --config $HADOOP_CONF_DIR</code> 如果 <code>${HADOOP_HDFS_HOME}&quot;/sbin/start-dfs.sh</code> 是文件, 就通过 –config 参数启动 <code>start-dfs.sh</code> 脚本</li><li><code>&quot;${HADOOP_YARN_HOME}&quot;/sbin/start-yarn.sh --config $HADOOP_CONF_DIR</code>: 如果 <code>${HADOOP_YARN_HOME}&quot;/sbin/start-yarn.sh</code> 是文件, 就通过 –config 参数启动 <code>start-yarn.sh</code> 脚本</li></ol><h2 id="6-2-hadoop-config-sh"><a href="#6-2-hadoop-config-sh" class="headerlink" title="6.2 hadoop-config.sh"></a>6.2 hadoop-config.sh</h2><p>该脚本位于</p><h1 id="7-MapReduce"><a href="#7-MapReduce" class="headerlink" title="7. MapReduce"></a>7. MapReduce</h1><p>MapReduce 是一种并行计算编程模型, 源自于 Google 的 MapReduce 论文, 包含 Map 过程和 Reduce 过程, Map 过程对应创建 Mapper 实现类, Reduce 过程对应创建 Reducer 实现类.</p><h2 id="7-2-Map-和-Reduce-阶段"><a href="#7-2-Map-和-Reduce-阶段" class="headerlink" title="7.2 Map 和 Reduce 阶段"></a>7.2 Map 和 Reduce 阶段</h2><p>将作业拆分成 Map 阶段和 Reduce 阶段</p><ol><li>准备 Map 处理的输入数据</li><li>Mapper 处理</li><li>Shuffle: 将相同的 key 分配到同一个 Reduce 节点</li><li>Reduce 处理</li><li>输出结果</li></ol><p><img src="https://user-images.githubusercontent.com/17758731/61185171-8ba32a00-a688-11e9-895f-b9b2e2fbaf96.png" alt="image"></p><p>假设现在有两个节点</p><ol><li>使用 <code>InputFormat</code> 读取文件系统(本地, HDFS), 并拆分成多个 Split</li><li>每个 Split 由一个 <code>RecordReader</code> 负责读取, 每读一行交由一个 mapper 处理</li><li>map 产生的结果交由 <code>Partitioner</code>, 将所有的 key 按一定规则分配给同一个节点并完成排序</li><li>相同的 key 交给 <code>Reduce</code> 负责处理</li><li>处理的结果交给 <code>OutputFormat</code> 写回文件系统</li></ol><h2 id="7-3-MapReduce-编程模型"><a href="#7-3-MapReduce-编程模型" class="headerlink" title="7.3 MapReduce 编程模型"></a>7.3 MapReduce 编程模型</h2><p><img src="https://user-images.githubusercontent.com/17758731/61185527-1b4ad780-a68d-11e9-9595-f8a380a57aa7.png" alt="image"></p><h3 id="7-3-1-Split"><a href="#7-3-1-Split" class="headerlink" title="7.3.1 Split"></a>7.3.1 Split</h3><p>被 InputFormat 从文件系统中读取并分片, 并交由 MapReduce 作业来处理的数据块</p><blockquote><p>HDFS 中的 blocksize 是 HDFS 中最小的存储单元, 默认 128M<br>Split 是 MapReduce 中最小的计算单元<br>默认情况下二者是一一对应的, 也可以手工设置二者之间的关系.</p></blockquote><h3 id="7-3-2-Combiner"><a href="#7-3-2-Combiner" class="headerlink" title="7.3.2 Combiner"></a>7.3.2 Combiner</h3><h3 id="7-3-3-Partitioner"><a href="#7-3-3-Partitioner" class="headerlink" title="7.3.3 Partitioner"></a>7.3.3 Partitioner</h3><h3 id="7-4-MapReduce-1-x-架构"><a href="#7-4-MapReduce-1-x-架构" class="headerlink" title="7.4 MapReduce 1.x 架构"></a>7.4 MapReduce 1.x 架构</h3><p><img src="https://user-images.githubusercontent.com/17758731/58748384-85773680-84aa-11e9-8233-daebe5f2ccf6.png" alt="image"></p><ol><li>JobTracker(JT)<ol><li>作业的管理者</li><li>将作业分解成多个任务(MapTask &amp; ReduceTask)</li><li>将任务分派给 TaskTracker 运行</li><li>作业监控, 容错处理</li><li>在一定时间内 JobTacker 没有收到 TaskTracker 的心跳, 会重新指派到其他的 TaskTracker 去执行</li></ol></li><li>TaskTracker(TT)<ol><li>任务的执行者, 执行任务(MapTask &amp; ReduceTask)</li><li>与 JobTracker 交互: 执行/启动/停止, 发送心跳信息给 JobTracker</li></ol></li><li>MapTask<ol><li>开发的 map 任务交由 MapTask 完成</li><li>解析每条记录的数据交给自己的 Map 方法处理</li><li>将 Map 的输出结果写到本地磁盘</li></ol></li><li>ReduceTask<ol><li>将 MapTask 输出的数据进行读取</li><li>按照数据进行分组传给 Reduce 方法处理</li><li>输出结果, 写入到 HDFS</li></ol></li></ol><h3 id="7-5-MapReduce-2-x-架构"><a href="#7-5-MapReduce-2-x-架构" class="headerlink" title="7.5 MapReduce 2.x 架构"></a>7.5 MapReduce 2.x 架构</h3><h3 id="7-6-Combiner"><a href="#7-6-Combiner" class="headerlink" title="7.6 Combiner"></a>7.6 Combiner</h3><ul><li>在 Mapper Task本地的 Reduce</li><li>减少 Map Task 输出的数据量及数据网络传输量</li><li>大部分情况下逻辑和 Reduce 基本相同</li></ul><p><img src="https://user-images.githubusercontent.com/17758731/61586498-5fb40700-aba8-11e9-86ff-1309911e1010.png" alt="image"></p><h3 id="7-7-Partitioner"><a href="#7-7-Partitioner" class="headerlink" title="7.7 Partitioner"></a>7.7 Partitioner</h3><ul><li>决定 MapTask 输出的数据交由哪个 Reducer 处理</li><li>默认实现: 分发的 key 的 hash 值对 Reduce Task 个数取模</li></ul>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti源码分析(9)-XML解析</title>
      <link href="/blog/2019/04/08/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-9-XML%E8%A7%A3%E6%9E%90/"/>
      <url>/blog/2019/04/08/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-9-XML%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="1-XML-解析"><a href="#1-XML-解析" class="headerlink" title="1. XML 解析"></a>1. XML 解析</h1><h2 id="1-1-DOM-模型"><a href="#1-1-DOM-模型" class="headerlink" title="1.1. DOM 模型"></a>1.1. DOM 模型</h2><ul><li>优点: 文档解析的时候允许客户端编辑和更新 XML 文档的内容, 并可以随机访问文档中定义的元素数据.</li><li>缺点: 文档解析的时候需要将 XML 一次性加载到内存, 进而映射成 Document 对象中的树形结构, 在解析大文件的时候内存占用大, 元素遍历查找慢, 性能容易成为瓶颈.</li></ul><h2 id="1-2-SAX-模型"><a href="#1-2-SAX-模型" class="headerlink" title="1.2. SAX 模型"></a>1.2. SAX 模型</h2><ul><li>优点: 该方式解析文档的时候, 每一次操作只会将解析的节点放置到内存中, 从头部开始, 读取一段处理一段, 内存占用小.</li><li>缺点: 解析文档的时候文档是只读的, 不能编辑, 并且文件流只能前进不能后退</li></ul><p>在 Activiti 中, 由于 XML 完全由用户的输入决定, 无法控制器大小, 因此选用 SAX 模型</p><h1 id="2-文档转换器"><a href="#2-文档转换器" class="headerlink" title="2. 文档转换器"></a>2. 文档转换器</h1><p>文档转换器可以将文档转换为 BpmnModel, 也可以将 BpmnModel 转换为文档</p><p>文档解析器: BpmnXMLConverter</p><p>解析器内部持有所有 <code>元素解析器</code></p><ul><li>元素解析器与元素之间一一对应</li><li>任务节点的元素名称是 UserTask, 因此对应的解析器为 <code>UserTaskXMLConverter</code></li><li>连线的元素名称是 SequenceFlow, 对应的解析器为 <code>SequenceFlowXMLConverter</code></li></ul>]]></content>
      
      <categories>
          
          <category> Activiti </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti源码分析(7)-ID生成器</title>
      <link href="/blog/2019/03/26/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-7-ID%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/blog/2019/03/26/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-7-ID%E7%94%9F%E6%88%90%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="1-DbIdGenerator"><a href="#1-DbIdGenerator" class="headerlink" title="1. DbIdGenerator"></a>1. <code>DbIdGenerator</code></h1><p><img src="https://user-images.githubusercontent.com/17758731/55007318-2e706380-501a-11e9-9a32-8e98d9944b66.png" alt="image"></p><p>Activiti 默认采用数据库来实现强一致的发号器 <code>DbIdGenerator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbIdGenerator</span> <span class="keyword">implements</span> <span class="title">IdGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> idBlockSize;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">long</span> nextId;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">long</span> lastId = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> CommandExecutor commandExecutor;</span><br><span class="line">  <span class="keyword">protected</span> CommandConfig commandConfig;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastId &lt; nextId) &#123;</span><br><span class="line">      getNewBlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> _nextId = nextId++;</span><br><span class="line">    <span class="keyword">return</span> Long.toString(_nextId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getNewBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IdBlock idBlock = commandExecutor.execute(commandConfig, <span class="keyword">new</span> GetNextIdBlockCmd(idBlockSize));</span><br><span class="line">    <span class="keyword">this</span>.nextId = idBlock.getNextId();</span><br><span class="line">    <span class="keyword">this</span>.lastId = idBlock.getLastId();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIdBlockSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> idBlockSize;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdBlockSize</span><span class="params">(<span class="keyword">int</span> idBlockSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.idBlockSize = idBlockSize;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CommandExecutor <span class="title">getCommandExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commandExecutor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommandExecutor</span><span class="params">(CommandExecutor commandExecutor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.commandExecutor = commandExecutor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CommandConfig <span class="title">getCommandConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commandConfig;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommandConfig</span><span class="params">(CommandConfig commandConfig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.commandConfig = commandConfig;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DbIdGenerator 实现了 <code>getNextId</code> 方法, 用于对应用范围内所有的实体对象分配 id, 我们就以这个方法为起点, 分析默认的发号器逻辑.</p><h2 id="1-1-DbIdGenerator-getNextId"><a href="#1-1-DbIdGenerator-getNextId" class="headerlink" title="1.1. DbIdGenerator#getNextId()"></a>1.1. DbIdGenerator#getNextId()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastId &lt; nextId) &#123;</span><br><span class="line">        getNewBlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> _nextId = nextId++;</span><br><span class="line">    <span class="keyword">return</span> Long.toString(_nextId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>比较内部持有的两个布局变量 <code>lastId</code> 和 <code>nextId</code><ol><li>如果 <code>lastId</code> 已经小于 <code>nextId</code></li><li>获取一个新的 Block</li></ol></li><li>获得当前的 <code>_nextId</code>, 并转换成字符串, 同时持有的局部变量 <code>nextId</code> 自增</li></ol><h2 id="1-2-DbIdGenerator-getNewBlock"><a href="#1-2-DbIdGenerator-getNewBlock" class="headerlink" title="1.2. DbIdGenerator#getNewBlock()"></a>1.2. DbIdGenerator#getNewBlock()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getNewBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IdBlock idBlock = commandExecutor.execute(commandConfig, <span class="keyword">new</span> GetNextIdBlockCmd(idBlockSize));</span><br><span class="line">    <span class="keyword">this</span>.nextId = idBlock.getNextId();</span><br><span class="line">    <span class="keyword">this</span>.lastId = idBlock.getLastId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取一个新的 <code>IdBlock</code> 对象</li><li>分别将该对象的 <code>nextId</code> 和 <code>lastId</code> 赋值给自身持有的同名字段</li></ol><h2 id="1-3-GetNextIdBlockCmd-execute-CommandContext-commandContext"><a href="#1-3-GetNextIdBlockCmd-execute-CommandContext-commandContext" class="headerlink" title="1.3. GetNextIdBlockCmd#execute(CommandContext commandContext)"></a>1.3. GetNextIdBlockCmd#execute(CommandContext commandContext)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IdBlock <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">    PropertyEntity property = (PropertyEntity) commandContext.getPropertyEntityManager().findById(<span class="string">"next.dbid"</span>);</span><br><span class="line">    <span class="keyword">long</span> oldValue = Long.parseLong(property.getValue());</span><br><span class="line">    <span class="keyword">long</span> newValue = oldValue + idBlockSize;</span><br><span class="line">    property.setValue(Long.toString(newValue));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IdBlock(oldValue, newValue - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>调用 <code>PropertyEntityManager</code>, 从 <code>ACT_GE_PROPERTY</code> 表中获取 <code>next.dbid</code> 字段的值</li><li>将旧值转换成 long 类型并增加 <code>idBlockSize</code> 长度得到新值, 其中 <code>idBlockSize</code> 通过调用链追踪到在 <code>ProcessEngineConfiguration</code> 将其设置为 2500, 并调用命令类的初始化</li><li>将新值设置进查询到的 property 对象</li><li>返回新的 <code>IdBlock</code> 对象</li></ol>]]></content>
      
      <categories>
          
          <category> Activiti </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti源码分析(8)-发起流程实例</title>
      <link href="/blog/2019/03/09/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-8-%E5%8F%91%E8%B5%B7%E6%B5%81%E7%A8%8B%E5%AE%9E%E4%BE%8B/"/>
      <url>/blog/2019/03/09/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-8-%E5%8F%91%E8%B5%B7%E6%B5%81%E7%A8%8B%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h1><h2 id="1-1-启动流程"><a href="#1-1-启动流程" class="headerlink" title="1.1. 启动流程"></a>1.1. 启动流程</h2><ol><li>操作数据库的 ACT_RU_EXECUTION 表, 如果是用户任务节点, 同时也会在 ACT_RU_TASK 表添加一条记录;</li><li></li></ol><h2 id="1-2-流程实例"><a href="#1-2-流程实例" class="headerlink" title="1.2. 流程实例"></a>1.2. 流程实例</h2><ol><li>代表流程定义的执行实例</li><li>一个流程实例包括了所有的运行节点</li><li>流程实例表示一个流程从开始到结束的最大流程分支</li><li>流程实例也被称为执行实例根节点</li></ol><p>在 Activiti 对应的接口为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProcessInstance</span> <span class="keyword">extends</span> <span class="title">Execution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出 ProcessInstance 就是 Execution</p><h2 id="1-3-执行实例"><a href="#1-3-执行实例" class="headerlink" title="1.3. 执行实例"></a>1.3. 执行实例</h2><ol><li>启动流程的时候会首先创建流程实例, 然后创建执行实例</li><li>流程运转的过程中永远执行的是自己对应的执行实例</li><li>当所有的执行实例按照规则完毕之后, 对应的流程随之结束</li><li>Activiti 使用 <code>Execution</code> 对象去描述流程执行的每一个节点</li><li>流程按照流程定义的规则执行一次的过程, 就可以表示执行对象 <code>Execution</code></li><li>一个流程中, 执行对象可以存在多个, 但流程实例只能有一个</li><li>执行实例的父级 / 父级的父级为流程实例</li></ol><h2 id="1-4-概念演示"><a href="#1-4-概念演示" class="headerlink" title="1.4. 概念演示"></a>1.4. 概念演示</h2><h3 id="1-4-1-简单流程实例"><a href="#1-4-1-简单流程实例" class="headerlink" title="1.4.1. 简单流程实例"></a>1.4.1. 简单流程实例</h3><p><img src="https://user-images.githubusercontent.com/17758731/54070715-5d5aab80-429e-11e9-815e-bfc25e01843c.png" alt="image"></p><ol><li>发起流程的时候, 会先创建一个流程实例, 然后创建执行实例;</li><li>随着流程的运转, 执行实例会不断更新;</li><li>直到流程执行完毕(走到结束节点), 对应执行实例会结束, 此时流程实例也结束.</li></ol><h3 id="1-4-2-有分支的流程实例"><a href="#1-4-2-有分支的流程实例" class="headerlink" title="1.4.2. 有分支的流程实例"></a>1.4.2. 有分支的流程实例</h3><p><img src="https://user-images.githubusercontent.com/17758731/54070799-bf67e080-429f-11e9-9264-556b380bc5cc.png" alt="image"></p><ol><li>当流程进入并行网关之后, 会创建两个执行实例</li><li>当两个执行实例都结束之后, 再创建第三个执行实例</li></ol><h1 id="2-RuntimeServiceImpl-startProcessInstanceByKey-String-processDefinitionKey"><a href="#2-RuntimeServiceImpl-startProcessInstanceByKey-String-processDefinitionKey" class="headerlink" title="2. RuntimeServiceImpl#startProcessInstanceByKey(String processDefinitionKey)"></a>2. RuntimeServiceImpl#startProcessInstanceByKey(String processDefinitionKey)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessInstance <span class="title">startProcessInstanceByKey</span><span class="params">(String processDefinitionKey)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commandExecutor.execute(<span class="keyword">new</span> StartProcessInstanceCmd&lt;ProcessInstance&gt;(processDefinitionKey, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-StartProcessInstanceCmd-execution-CommandContext-commandContext"><a href="#2-1-StartProcessInstanceCmd-execution-CommandContext-commandContext" class="headerlink" title="2.1. StartProcessInstanceCmd#execution(CommandContext commandContext)"></a>2.1. StartProcessInstanceCmd#execution(CommandContext commandContext)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessInstance <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">    DeploymentManager deploymentCache = commandContext.getProcessEngineConfiguration().getDeploymentManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the process definition</span></span><br><span class="line">    ProcessDefinition processDefinition = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (processDefinitionId != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        processDefinition = deploymentCache.findDeployedProcessDefinitionById(processDefinitionId);</span><br><span class="line">        <span class="keyword">if</span> (processDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiObjectNotFoundException(<span class="string">"No process definition found for id = '"</span> + processDefinitionId + <span class="string">"'"</span>, ProcessDefinition.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (processDefinitionKey != <span class="keyword">null</span> &amp;&amp; (tenantId == <span class="keyword">null</span> || ProcessEngineConfiguration.NO_TENANT_ID.equals(tenantId))) &#123;</span><br><span class="line"></span><br><span class="line">        processDefinition = deploymentCache.findDeployedLatestProcessDefinitionByKey(processDefinitionKey);</span><br><span class="line">        <span class="keyword">if</span> (processDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiObjectNotFoundException(<span class="string">"No process definition found for key '"</span> + processDefinitionKey + <span class="string">"'"</span>, ProcessDefinition.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (processDefinitionKey != <span class="keyword">null</span> &amp;&amp; tenantId != <span class="keyword">null</span> &amp;&amp; !ProcessEngineConfiguration.NO_TENANT_ID.equals(tenantId)) &#123;</span><br><span class="line"></span><br><span class="line">            processDefinition = deploymentCache.findDeployedLatestProcessDefinitionByKeyAndTenantId(processDefinitionKey, tenantId);</span><br><span class="line">            <span class="keyword">if</span> (processDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiObjectNotFoundException(<span class="string">"No process definition found for key '"</span> + processDefinitionKey + <span class="string">"' for tenant identifier "</span> + tenantId, ProcessDefinition.class);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"processDefinitionKey and processDefinitionId are null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();</span><br><span class="line">    ProcessInstance processInstance = createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables, transientVariables);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> processInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>初始化 processDefinition 对象, 由于 <code>startProcessInstanceByXX</code> 系列方法有多种参数, 因此一下三种条件都可以实现:<ol><li>如果 processDefinitionId 不为空, 通过该 id 查询流程定义;</li><li>如果 processDefinitionKey 不为空, 并且 <code>tenantId</code> 为空, 就通过 <code>processDefinitionKey</code> 查询最新的流程定义;</li><li>如果 processDefinitionKey 不为空, 并且 <code>tenantId</code> 也不为空, 就通过这两个参数一起查询最新的流程定义;</li></ol></li><li>获取 <code>processInstanceHelper</code> 对象</li><li>执行创建流程逻辑并返回</li></ol><h2 id="2-2-StartProcessInstanceCmd-createAndStartProcessInstance-ProcessDefinition-processDefinition-String-businessKey-String-processInstanceName-Map-lt-String-Object-gt-variables-Map-lt-String-Object-gt-transientVariables"><a href="#2-2-StartProcessInstanceCmd-createAndStartProcessInstance-ProcessDefinition-processDefinition-String-businessKey-String-processInstanceName-Map-lt-String-Object-gt-variables-Map-lt-String-Object-gt-transientVariables" class="headerlink" title="2.2. StartProcessInstanceCmd#createAndStartProcessInstance(ProcessDefinition processDefinition, String businessKey, String processInstanceName, Map&lt;String,Object&gt; variables, Map&lt;String, Object&gt; transientVariables)"></a>2.2. StartProcessInstanceCmd#createAndStartProcessInstance(ProcessDefinition processDefinition, String businessKey, String processInstanceName, Map&lt;String,Object&gt; variables, Map&lt;String, Object&gt; transientVariables)</h2><p>参数较多, 先解释下参数:</p><ul><li>processDefinition: 流程定义对象</li><li>businessKey: 业务标识</li><li>processInstanceName: 需要设置的流程名称</li><li>variables: 表单数据(会持久化到变量表中)</li><li>transientVariables: 不需要持久化的变量表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ProcessInstance <span class="title">createAndStartProcessInstance</span><span class="params">(ProcessDefinition processDefinition, String businessKey, String processInstanceName, </span></span></span><br><span class="line"><span class="function"><span class="params">        Map&lt;String,Object&gt; variables, Map&lt;String, Object&gt; transientVariables)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> processInstanceHelper.createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables, transientVariables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-ProcessInstanceHelper-createAndStartProcessInstance-ProcessDefinition-processDefinition-String-businessKey-String-processInstanceName-Map-lt-String-Object-gt-variables-Map-lt-String-Object-gt-transientVariables-boolean-startProcessInstance"><a href="#2-3-ProcessInstanceHelper-createAndStartProcessInstance-ProcessDefinition-processDefinition-String-businessKey-String-processInstanceName-Map-lt-String-Object-gt-variables-Map-lt-String-Object-gt-transientVariables-boolean-startProcessInstance" class="headerlink" title="2.3. ProcessInstanceHelper#createAndStartProcessInstance(ProcessDefinition processDefinition, String businessKey, String processInstanceName, Map&lt;String, Object&gt; variables, Map&lt;String, Object&gt; transientVariables, boolean startProcessInstance)"></a>2.3. ProcessInstanceHelper#createAndStartProcessInstance(ProcessDefinition processDefinition, String businessKey, String processInstanceName, Map&lt;String, Object&gt; variables, Map&lt;String, Object&gt; transientVariables, boolean startProcessInstance)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ProcessInstance <span class="title">createAndStartProcessInstance</span><span class="params">(ProcessDefinition processDefinition,</span></span></span><br><span class="line"><span class="function"><span class="params">      String businessKey, String processInstanceName,</span></span></span><br><span class="line"><span class="function"><span class="params">      Map&lt;String, Object&gt; variables, Map&lt;String, Object&gt; transientVariables, <span class="keyword">boolean</span> startProcessInstance)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    CommandContext commandContext = Context.getCommandContext(); <span class="comment">// Todo: ideally, context should be passed here</span></span><br><span class="line">    <span class="keyword">if</span> (Activiti5Util.isActiviti5ProcessDefinition(commandContext, processDefinition)) &#123;</span><br><span class="line">        Activiti5CompatibilityHandler activiti5CompatibilityHandler = Activiti5Util.getActiviti5CompatibilityHandler();</span><br><span class="line">        <span class="keyword">return</span> activiti5CompatibilityHandler.startProcessInstance(processDefinition.getKey(), processDefinition.getId(),</span><br><span class="line">                variables, businessKey, processDefinition.getTenantId(), processInstanceName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do not start process a process instance if the process definition is suspended</span></span><br><span class="line">    <span class="keyword">if</span> (ProcessDefinitionUtil.isProcessDefinitionSuspended(processDefinition.getId())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"Cannot start process instance. Process definition "</span> + processDefinition.getName() + <span class="string">" (id = "</span> + processDefinition.getId() + <span class="string">") is suspended"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get model from cache</span></span><br><span class="line">    Process process = ProcessDefinitionUtil.getProcess(processDefinition.getId());</span><br><span class="line">    <span class="keyword">if</span> (process == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"Cannot start process instance. Process model "</span> + processDefinition.getName() + <span class="string">" (id = "</span> + processDefinition.getId() + <span class="string">") could not be found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FlowElement initialFlowElement = process.getInitialFlowElement();</span><br><span class="line">    <span class="keyword">if</span> (initialFlowElement == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"No start element found for process definition "</span> + processDefinition.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> createAndStartProcessInstanceWithInitialFlowElement(processDefinition, businessKey,</span><br><span class="line">            processInstanceName, initialFlowElement, process, variables, transientVariables, startProcessInstance);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>如果流程定义是 Activiti5 风格的, 执行 Activiti5 相关的兼容代码</li><li>如果流程定义已经被挂起, 那么抛出异常</li><li>根据 processDefinitionId 获取 Process 对象, 如果失败抛出异常</li><li>获取 Process 对象的 <code>initialFlowElement</code></li><li>创建并开启流程实例, 并返回结果</li></ol><h3 id="2-3-1-ProcessDefinitionUtil-getProcess-String-processDefinitionId"><a href="#2-3-1-ProcessDefinitionUtil-getProcess-String-processDefinitionId" class="headerlink" title="2.3.1. ProcessDefinitionUtil#getProcess(String processDefinitionId)"></a>2.3.1. ProcessDefinitionUtil#getProcess(String processDefinitionId)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Process <span class="title">getProcess</span><span class="params">(String processDefinitionId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Context.getProcessEngineConfiguration() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Activiti5Util.getActiviti5CompatibilityHandler().getProcessDefinitionProcessObject(processDefinitionId);</span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DeploymentManager deploymentManager = Context.getProcessEngineConfiguration().getDeploymentManager();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// This will check the cache in the findDeployedProcessDefinitionById and resolveProcessDefinition method</span></span><br><span class="line">        ProcessDefinition processDefinitionEntity = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);</span><br><span class="line">        <span class="keyword">return</span> deploymentManager.resolveProcessDefinition(processDefinitionEntity).getProcess();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-DeploymentManager-findDeployedProcessDefinitionById-String-processDefinitionId"><a href="#2-3-2-DeploymentManager-findDeployedProcessDefinitionById-String-processDefinitionId" class="headerlink" title="2.3.2. DeploymentManager#findDeployedProcessDefinitionById(String processDefinitionId)"></a>2.3.2. DeploymentManager#findDeployedProcessDefinitionById(String processDefinitionId)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessDefinition <span class="title">findDeployedProcessDefinitionById</span><span class="params">(String processDefinitionId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (processDefinitionId == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"Invalid process definition id : null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// first try the cache</span></span><br><span class="line">    ProcessDefinitionCacheEntry cacheEntry = processDefinitionCache.get(processDefinitionId);</span><br><span class="line">    ProcessDefinition processDefinition = cacheEntry != <span class="keyword">null</span> ? cacheEntry.getProcessDefinition() : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (processDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">        processDefinition = processDefinitionEntityManager.findById(processDefinitionId);</span><br><span class="line">        <span class="keyword">if</span> (processDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiObjectNotFoundException(<span class="string">"no deployed process definition found with id '"</span> + processDefinitionId + <span class="string">"'"</span>, ProcessDefinition.class);</span><br><span class="line">        &#125;</span><br><span class="line">        processDefinition = resolveProcessDefinition(processDefinition).getProcessDefinition();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> processDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先从缓存中查找</li><li>如果缓存没有, 继续从 DB 中查找</li><li>将 ProcessDefinition 转换为 Process 并返回</li></ol><h3 id="2-3-3-DeploymentManager-resolveProcessDefinition-ProcessDefinition-processDefinition"><a href="#2-3-3-DeploymentManager-resolveProcessDefinition-ProcessDefinition-processDefinition" class="headerlink" title="2.3.3. DeploymentManager#resolveProcessDefinition(ProcessDefinition processDefinition)"></a>2.3.3. DeploymentManager#resolveProcessDefinition(ProcessDefinition processDefinition)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessDefinitionCacheEntry <span class="title">resolveProcessDefinition</span><span class="params">(ProcessDefinition processDefinition)</span> </span>&#123;</span><br><span class="line">    String processDefinitionId = processDefinition.getId();</span><br><span class="line">    String deploymentId = processDefinition.getDeploymentId();</span><br><span class="line"></span><br><span class="line">    ProcessDefinitionCacheEntry cachedProcessDefinition = processDefinitionCache.get(processDefinitionId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cachedProcessDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">        CommandContext commandContext = Context.getCommandContext();</span><br><span class="line">        <span class="keyword">if</span> (commandContext.getProcessEngineConfiguration().isActiviti5CompatibilityEnabled() &amp;&amp; </span><br><span class="line">            Activiti5Util.isActiviti5ProcessDefinition(Context.getCommandContext(), processDefinition)) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">return</span> Activiti5Util.getActiviti5CompatibilityHandler().resolveProcessDefinition(processDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        DeploymentEntity deployment = deploymentEntityManager.findById(deploymentId);</span><br><span class="line">        deployment.setNew(<span class="keyword">false</span>);</span><br><span class="line">        deploy(deployment, <span class="keyword">null</span>);</span><br><span class="line">        cachedProcessDefinition = processDefinitionCache.get(processDefinitionId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cachedProcessDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"deployment '"</span> + deploymentId + <span class="string">"' didn't put process definition '"</span> + processDefinitionId + <span class="string">"' in the cache"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cachedProcessDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先尝试从缓存中获取流程定义<ol><li>如果为空<ol><li>如果是 Activiti5 风格的配置</li><li>通过 Activiti5 的方式获取并返回</li></ol></li><li>尝试从 DB 中获取, 补充到缓存中</li><li>再从缓存中获取</li><li>返回</li></ol></li></ol><h2 id="2-4-ProcessInstanceHelper-createAndStartProcessInstanceWithInitialFlowElement-ProcessDefinition-processDefinition-String-businessKey-String-processInstanceName-FlowElement-initialFlowElement-Process-process-Map-lt-String-Object-gt-variables-Map-lt-String-Object-gt-transientVariables-boolean-startProcessInstance"><a href="#2-4-ProcessInstanceHelper-createAndStartProcessInstanceWithInitialFlowElement-ProcessDefinition-processDefinition-String-businessKey-String-processInstanceName-FlowElement-initialFlowElement-Process-process-Map-lt-String-Object-gt-variables-Map-lt-String-Object-gt-transientVariables-boolean-startProcessInstance" class="headerlink" title="2.4. ProcessInstanceHelper#createAndStartProcessInstanceWithInitialFlowElement(ProcessDefinition processDefinition, String businessKey, String processInstanceName, FlowElement initialFlowElement, Process process, Map&lt;String, Object&gt; variables, Map&lt;String, Object&gt; transientVariables, boolean startProcessInstance)"></a>2.4. ProcessInstanceHelper#createAndStartProcessInstanceWithInitialFlowElement(ProcessDefinition processDefinition, String businessKey, String processInstanceName, FlowElement initialFlowElement, Process process, Map&lt;String, Object&gt; variables, Map&lt;String, Object&gt; transientVariables, boolean startProcessInstance)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessInstance <span class="title">createAndStartProcessInstanceWithInitialFlowElement</span><span class="params">(ProcessDefinition processDefinition,</span></span></span><br><span class="line"><span class="function"><span class="params">        String businessKey, String processInstanceName, FlowElement initialFlowElement,</span></span></span><br><span class="line"><span class="function"><span class="params">        Process process, Map&lt;String, Object&gt; variables, Map&lt;String, Object&gt; transientVariables, <span class="keyword">boolean</span> startProcessInstance)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    CommandContext commandContext = Context.getCommandContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the process instance</span></span><br><span class="line">    String initiatorVariableName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (initialFlowElement <span class="keyword">instanceof</span> StartEvent) &#123;</span><br><span class="line">        initiatorVariableName = ((StartEvent) initialFlowElement).getInitiator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ExecutionEntity processInstance = commandContext.getExecutionEntityManager()</span><br><span class="line">            .createProcessInstanceExecution(processDefinition, businessKey, processDefinition.getTenantId(), initiatorVariableName);</span><br><span class="line"></span><br><span class="line">    commandContext.getHistoryManager().recordProcessInstanceStart(processInstance, initialFlowElement);</span><br><span class="line"></span><br><span class="line">    processInstance.setVariables(processDataObjects(process.getDataObjects()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the variables passed into the start command</span></span><br><span class="line">    <span class="keyword">if</span> (variables != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String varName : variables.keySet()) &#123;</span><br><span class="line">            processInstance.setVariable(varName, variables.get(varName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (transientVariables != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (String varName : transientVariables.keySet()) &#123;</span><br><span class="line">        processInstance.setTransientVariable(varName, transientVariables.get(varName));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set processInstance name</span></span><br><span class="line">    <span class="keyword">if</span> (processInstanceName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        processInstance.setName(processInstanceName);</span><br><span class="line">        commandContext.getHistoryManager().recordProcessInstanceNameChange(processInstance.getId(), processInstanceName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fire events</span></span><br><span class="line">    <span class="keyword">if</span> (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) &#123;</span><br><span class="line">        Context.getProcessEngineConfiguration().getEventDispatcher()</span><br><span class="line">                .dispatchEvent(ActivitiEventBuilder.createEntityWithVariablesEvent(ActivitiEventType.ENTITY_INITIALIZED, processInstance, variables, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the first execution that will visit all the process definition elements</span></span><br><span class="line">    ExecutionEntity execution = commandContext.getExecutionEntityManager().createChildExecution(processInstance);</span><br><span class="line">    execution.setCurrentFlowElement(initialFlowElement);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (startProcessInstance) &#123;</span><br><span class="line">        startProcessInstance(processInstance, commandContext, variables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> processInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建流程实例(父级 Execution)</li><li>在历史流程表中将流程实例标记为开始</li><li>将所有 <code>DataObject</code> 转换为 Map&lt;String, Object&gt;, 并设置为流程实例的变量</li><li>将创建流程时填入的表单信息设置为变量</li><li>为流程变量设置名称</li><li>触发事件</li><li>创建第一个将访问所有流程定义元素的 <code>Execution</code></li><li>并将该 Execution 对象的当前元素设置为传入的初始化元素</li><li>如果需要立即开启<ol><li>调用开启流程实例方法</li></ol></li><li>返回该流程实例</li></ol><h3 id="2-4-1-ExecutionEntityManagerImpl-createProcessInstanceExecution-ProcessDefinition-processDefinition-String-businessKey-String-tenantId-String-initiatorVariableName"><a href="#2-4-1-ExecutionEntityManagerImpl-createProcessInstanceExecution-ProcessDefinition-processDefinition-String-businessKey-String-tenantId-String-initiatorVariableName" class="headerlink" title="2.4.1. ExecutionEntityManagerImpl#createProcessInstanceExecution(ProcessDefinition processDefinition, String businessKey, String tenantId, String initiatorVariableName)"></a>2.4.1. ExecutionEntityManagerImpl#createProcessInstanceExecution(ProcessDefinition processDefinition, String businessKey, String tenantId, String initiatorVariableName)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ExecutionEntity <span class="title">createProcessInstanceExecution</span><span class="params">(ProcessDefinition processDefinition, String businessKey, String tenantId, String initiatorVariableName)</span> </span>&#123;</span><br><span class="line">    ExecutionEntity processInstanceExecution = executionDataManager.create();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isExecutionRelatedEntityCountEnabledGlobally()) &#123;</span><br><span class="line">        ((CountingExecutionEntity) processInstanceExecution).setCountEnabled(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    processInstanceExecution.setProcessDefinitionId(processDefinition.getId());</span><br><span class="line">    processInstanceExecution.setProcessDefinitionKey(processDefinition.getKey());</span><br><span class="line">    processInstanceExecution.setProcessDefinitionName(processDefinition.getName());</span><br><span class="line">    processInstanceExecution.setProcessDefinitionVersion(processDefinition.getVersion());</span><br><span class="line">    processInstanceExecution.setBusinessKey(businessKey);</span><br><span class="line">    processInstanceExecution.setScope(<span class="keyword">true</span>); <span class="comment">// process instance is always a scope for all child executions</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Inherit tenant id (if any)</span></span><br><span class="line">    <span class="keyword">if</span> (tenantId != <span class="keyword">null</span>) &#123;</span><br><span class="line">        processInstanceExecution.setTenantId(tenantId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String authenticatedUserId = Authentication.getAuthenticatedUserId();</span><br><span class="line"></span><br><span class="line">    processInstanceExecution.setStartTime(Context.getProcessEngineConfiguration().getClock().getCurrentTime());</span><br><span class="line">    processInstanceExecution.setStartUserId(authenticatedUserId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Store in database</span></span><br><span class="line">    insert(processInstanceExecution, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (initiatorVariableName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        processInstanceExecution.setVariable(initiatorVariableName, authenticatedUserId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Need to be after insert, cause we need the id</span></span><br><span class="line">    processInstanceExecution.setProcessInstanceId(processInstanceExecution.getId());</span><br><span class="line">    processInstanceExecution.setRootProcessInstanceId(processInstanceExecution.getId());</span><br><span class="line">    <span class="keyword">if</span> (authenticatedUserId != <span class="keyword">null</span>) &#123;</span><br><span class="line">        getIdentityLinkEntityManager().addIdentityLink(processInstanceExecution, authenticatedUserId, <span class="keyword">null</span>, IdentityLinkType.STARTER);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Fire events</span></span><br><span class="line">    <span class="keyword">if</span> (getEventDispatcher().isEnabled()) &#123;</span><br><span class="line">        getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED, processInstanceExecution));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> processInstanceExecution;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建一个新的 <code>ExecutionEntity</code> 对象并初始化</li><li>获取创建人 ID 和开始时间</li><li>插入该 <code>ExecutionEntity</code></li><li>触发事件</li></ol><h3 id="2-4-2-DefaultHistoryManager-recordProcessInstanceStart-ExecutionEntity-processInstance-FlowElement-startElement"><a href="#2-4-2-DefaultHistoryManager-recordProcessInstanceStart-ExecutionEntity-processInstance-FlowElement-startElement" class="headerlink" title="2.4.2. DefaultHistoryManager#recordProcessInstanceStart(ExecutionEntity processInstance, FlowElement startElement)"></a>2.4.2. DefaultHistoryManager#recordProcessInstanceStart(ExecutionEntity processInstance, FlowElement startElement)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recordProcessInstanceStart</span><span class="params">(ExecutionEntity processInstance, FlowElement startElement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isHistoryLevelAtLeast(HistoryLevel.ACTIVITY)) &#123;</span><br><span class="line">        HistoricProcessInstanceEntity historicProcessInstance = getHistoricProcessInstanceEntityManager().create(processInstance);</span><br><span class="line">        historicProcessInstance.setStartActivityId(startElement.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Insert historic process-instance</span></span><br><span class="line">        getHistoricProcessInstanceEntityManager().insert(historicProcessInstance, <span class="keyword">false</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// Fire event</span></span><br><span class="line">        ActivitiEventDispatcher activitiEventDispatcher = getEventDispatcher();</span><br><span class="line">        <span class="keyword">if</span> (activitiEventDispatcher != <span class="keyword">null</span> &amp;&amp; activitiEventDispatcher.isEnabled()) &#123;</span><br><span class="line">            activitiEventDispatcher.dispatchEvent(</span><br><span class="line">                    ActivitiEventBuilder.createEntityEvent(ActivitiEventType.HISTORIC_PROCESS_INSTANCE_CREATED, historicProcessInstance));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>根据传入的 <code>processInstance</code> 构造 <code>HistoricProcessInstanceEntity</code> 对象</li><li>向历史表插入该对象</li><li>将给定的事件分派给任何已注册的侦听器</li></ol><h3 id="2-4-3-ExecutionEntityManagerImpl-createChildExecution-ExecutionEntity-parentExecutionEntity"><a href="#2-4-3-ExecutionEntityManagerImpl-createChildExecution-ExecutionEntity-parentExecutionEntity" class="headerlink" title="2.4.3. ExecutionEntityManagerImpl#createChildExecution(ExecutionEntity parentExecutionEntity)"></a>2.4.3. ExecutionEntityManagerImpl#createChildExecution(ExecutionEntity parentExecutionEntity)</h3><p>创建第一个将访问所有流程定义元素的执行对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ExecutionEntity <span class="title">createChildExecution</span><span class="params">(ExecutionEntity parentExecutionEntity)</span> </span>&#123;</span><br><span class="line">    ExecutionEntity childExecution = executionDataManager.create();</span><br><span class="line">    inheritCommonProperties(parentExecutionEntity, childExecution);</span><br><span class="line">    childExecution.setParent(parentExecutionEntity);</span><br><span class="line">    childExecution.setProcessDefinitionId(parentExecutionEntity.getProcessDefinitionId());</span><br><span class="line">    childExecution.setProcessDefinitionKey(parentExecutionEntity.getProcessDefinitionKey());</span><br><span class="line">    childExecution.setProcessInstanceId(parentExecutionEntity.getProcessInstanceId() != <span class="keyword">null</span> </span><br><span class="line">            ? parentExecutionEntity.getProcessInstanceId() : parentExecutionEntity.getId());</span><br><span class="line">    childExecution.setScope(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// manage the bidirectional parent-child relation</span></span><br><span class="line">    parentExecutionEntity.addChildExecution(childExecution);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Insert the child execution</span></span><br><span class="line">    insert(childExecution, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Child execution &#123;&#125; created with parent &#123;&#125;"</span>, childExecution, parentExecutionEntity.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getEventDispatcher().isEnabled()) &#123;</span><br><span class="line">        getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED, childExecution));</span><br><span class="line">        getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED, childExecution));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> childExecution;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>创建一个新的 <code>ExecutionEntity</code> 对象, 并继承父 ExecutionEntity 的公共配置</li><li>设置父子关系</li><li>插入子 ExecutionEntity</li><li>将指定事件分派给已注册的监听器</li></ol><h3 id="2-4-4-ExecutionEntityManagerImpl-startProcessInstance-ExecutionEntity-processInstance-CommandContext-commandContext-Map-lt-String-Object-gt-variables"><a href="#2-4-4-ExecutionEntityManagerImpl-startProcessInstance-ExecutionEntity-processInstance-CommandContext-commandContext-Map-lt-String-Object-gt-variables" class="headerlink" title="2.4.4. ExecutionEntityManagerImpl#startProcessInstance(ExecutionEntity processInstance, CommandContext commandContext, Map&lt;String, Object&gt; variables)"></a>2.4.4. ExecutionEntityManagerImpl#startProcessInstance(ExecutionEntity processInstance, CommandContext commandContext, Map&lt;String, Object&gt; variables)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startProcessInstance</span><span class="params">(ExecutionEntity processInstance, CommandContext commandContext, Map&lt;String, Object&gt; variables)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Process process = ProcessDefinitionUtil.getProcess(processInstance.getProcessDefinitionId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Event sub process handling</span></span><br><span class="line">    List&lt;MessageEventSubscriptionEntity&gt; messageEventSubscriptions = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (FlowElement flowElement : process.getFlowElements()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flowElement <span class="keyword">instanceof</span> EventSubProcess) &#123;</span><br><span class="line">            EventSubProcess eventSubProcess = (EventSubProcess) flowElement;</span><br><span class="line">            <span class="keyword">for</span> (FlowElement subElement : eventSubProcess.getFlowElements()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (subElement <span class="keyword">instanceof</span> StartEvent) &#123;</span><br><span class="line">                    StartEvent startEvent = (StartEvent) subElement;</span><br><span class="line">                    <span class="keyword">if</span> (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) &#123;</span><br><span class="line">                        EventDefinition eventDefinition = startEvent.getEventDefinitions().get(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">if</span> (eventDefinition <span class="keyword">instanceof</span> MessageEventDefinition) &#123;</span><br><span class="line">                            MessageEventDefinition messageEventDefinition = (MessageEventDefinition) eventDefinition;</span><br><span class="line">                            BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(processInstance.getProcessDefinitionId());</span><br><span class="line">                            <span class="keyword">if</span> (bpmnModel.containsMessageId(messageEventDefinition.getMessageRef())) &#123;</span><br><span class="line">                                messageEventDefinition.setMessageRef(bpmnModel.getMessage(messageEventDefinition.getMessageRef()).getName());</span><br><span class="line">                            &#125;</span><br><span class="line">                            ExecutionEntity messageExecution = commandContext.getExecutionEntityManager().createChildExecution(processInstance);</span><br><span class="line">                            messageExecution.setCurrentFlowElement(startEvent);</span><br><span class="line">                            messageExecution.setEventScope(<span class="keyword">true</span>);</span><br><span class="line">                            messageEventSubscriptions</span><br><span class="line">                                    .add(commandContext.getEventSubscriptionEntityManager().insertMessageEvent(messageEventDefinition.getMessageRef(), messageExecution));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ExecutionEntity execution = processInstance.getExecutions().get(<span class="number">0</span>); <span class="comment">// There will always be one child execution created</span></span><br><span class="line">    commandContext.getAgenda().planContinueProcessOperation(execution);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) &#123;</span><br><span class="line">    ActivitiEventDispatcher eventDispatcher = Context.getProcessEngineConfiguration().getEventDispatcher();</span><br><span class="line">        eventDispatcher.dispatchEvent(ActivitiEventBuilder.createProcessStartedEvent(execution, variables, <span class="keyword">false</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (MessageEventSubscriptionEntity messageEventSubscription : messageEventSubscriptions) &#123;</span><br><span class="line">            commandContext.getProcessEngineConfiguration().getEventDispatcher()</span><br><span class="line">                    .dispatchEvent(ActivitiEventBuilder.createMessageEvent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING, messageEventSubscription.getActivityId(),</span><br><span class="line">                            messageEventSubscription.getEventName(), <span class="keyword">null</span>, messageEventSubscription.getExecution().getId(),</span><br><span class="line">                            messageEventSubscription.getProcessInstanceId(), messageEventSubscription.getProcessDefinitionId()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取流程对象</li><li>找到所有的子流程的开始事件, 并查找开始事件的事件定义来收集所有的消息事件</li><li>获取当前 ExecutionEntity 的第一个子对象, 并由该子对象开始执行</li><li>开始流程后, 继续进行将给定的事件分派给任何已注册的侦听器的操作</li></ol>]]></content>
      
      <categories>
          
          <category> Activiti </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti源码分析(6)--RepositoryService(仓库服务类)模型校验</title>
      <link href="/blog/2019/03/09/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-6-RepositoryService-%E4%BB%93%E5%BA%93%E6%9C%8D%E5%8A%A1%E7%B1%BB-%E6%A8%A1%E5%9E%8B%E6%A0%A1%E9%AA%8C/"/>
      <url>/blog/2019/03/09/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-6-RepositoryService-%E4%BB%93%E5%BA%93%E6%9C%8D%E5%8A%A1%E7%B1%BB-%E6%A8%A1%E5%9E%8B%E6%A0%A1%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBpmnModel</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        BpmnModel bpmnModel = <span class="keyword">new</span> BpmnModel();</span><br><span class="line">        Process process = <span class="keyword">new</span> Process();</span><br><span class="line">        process.setId(<span class="string">"my-process"</span>);</span><br><span class="line"></span><br><span class="line">        StartEvent startEvent = <span class="keyword">new</span> StartEvent();</span><br><span class="line">        startEvent.setId(<span class="string">"startEvent"</span>);</span><br><span class="line"></span><br><span class="line">        UserTask someTask = <span class="keyword">new</span> UserTask();</span><br><span class="line">        someTask.setId(<span class="string">"someTask"</span>);</span><br><span class="line">        someTask.setName(<span class="string">"Activiti is awesome!"</span>);</span><br><span class="line">        someTask.setAssignee(<span class="string">"$&#123;user&#125;"</span>);</span><br><span class="line">        MultiInstanceLoopCharacteristics multiInstanceLoopCharacteristics = <span class="keyword">new</span> MultiInstanceLoopCharacteristics();</span><br><span class="line">        multiInstanceLoopCharacteristics.setSequential(<span class="keyword">false</span>);</span><br><span class="line">        multiInstanceLoopCharacteristics.setInputDataItem(<span class="string">"$&#123;usersBean.getUsers(name)&#125;"</span>);</span><br><span class="line">        multiInstanceLoopCharacteristics.setElementVariable(<span class="string">"user"</span>);</span><br><span class="line">        multiInstanceLoopCharacteristics.setCompletionCondition(<span class="string">"$&#123;nrOfCompletedInstances &gt; 0&#125;"</span>);</span><br><span class="line"></span><br><span class="line">        someTask.setLoopCharacteristics(multiInstanceLoopCharacteristics);</span><br><span class="line"></span><br><span class="line">        EndEvent endEvent = <span class="keyword">new</span> EndEvent();</span><br><span class="line">        endEvent.setId(<span class="string">"endEvent"</span>);</span><br><span class="line"></span><br><span class="line">        SequenceFlow flow1 = createSequence(<span class="string">"startEvent"</span>, <span class="string">"someTask"</span>, <span class="string">"flow1"</span>, <span class="string">"flow1"</span>, <span class="keyword">null</span>);</span><br><span class="line">        SequenceFlow flow2 = createSequence(<span class="string">"someTask"</span>, <span class="string">"endEvent"</span>, <span class="string">"flow2"</span>, <span class="string">"flow2"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        process.addFlowElement(startEvent);</span><br><span class="line">        process.addFlowElement(someTask);</span><br><span class="line">        process.addFlowElement(endEvent);</span><br><span class="line">        process.addFlowElement(flow1);</span><br><span class="line">        process.addFlowElement(flow2);</span><br><span class="line"></span><br><span class="line">        bpmnModel.addProcess(process);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> BpmnXMLConverter().convertToXML(bpmnModel);</span><br><span class="line">        String s = <span class="keyword">new</span> String(bytes, <span class="string">"utf-8"</span>);</span><br><span class="line">        log.info(s);</span><br><span class="line"></span><br><span class="line">        ProcessValidatorFactory processValidatorFactory = <span class="keyword">new</span> ProcessValidatorFactory();</span><br><span class="line">        ProcessValidator defaultProcessValidator = processValidatorFactory.createDefaultProcessValidator();</span><br><span class="line">        List&lt;ValidationError&gt; validate = defaultProcessValidator.validate(bpmnModel);</span><br><span class="line">        log.info(<span class="string">"validate: &#123;&#125;"</span>, validate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成的-XMl-文件"><a href="#生成的-XMl-文件" class="headerlink" title="生成的 XMl 文件:"></a>生成的 XMl 文件:</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span> <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span> <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span> <span class="attr">isExecutable</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"startEvent"</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">"false"</span> <span class="attr">activiti:collection</span>=<span class="string">"$&#123;usersBean.getUsers(name)&#125;"</span> <span class="attr">activiti:elementVariable</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">completionCondition</span>&gt;</span>$&#123;nrOfCompletedInstances &amp;gt; 0&#125;<span class="tag">&lt;/<span class="name">completionCondition</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">multiInstanceLoopCharacteristics</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"endEvent"</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">name</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"startEvent"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">name</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"endEvent"</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">"BPMNDiagram_my-process"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">"my-process"</span> <span class="attr">id</span>=<span class="string">"BPMNPlane_my-process"</span>&gt;</span><span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="validate-的结果"><a href="#validate-的结果" class="headerlink" title="validate 的结果"></a>validate 的结果</h4><pre><code>validate: []</code></pre><p>代表当前流程正常, 没有错误</p><h1 id="1-ProcessValidatorFactory-createDefaultProcessValidator"><a href="#1-ProcessValidatorFactory-createDefaultProcessValidator" class="headerlink" title="1. ProcessValidatorFactory#createDefaultProcessValidator()"></a>1. ProcessValidatorFactory#createDefaultProcessValidator()</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessValidator <span class="title">createDefaultProcessValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ProcessValidatorImpl processValidator = <span class="keyword">new</span> ProcessValidatorImpl();</span><br><span class="line">    processValidator.addValidatorSet(<span class="keyword">new</span> ValidatorSetFactory().createActivitiExecutableProcessValidatorSet());</span><br><span class="line">    <span class="keyword">return</span> processValidator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Activiti源码分析(5)--RepositoryService(仓库服务类)classpath资源部署</title>
      <link href="/blog/2019/03/09/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-5-RepositoryService-%E4%BB%93%E5%BA%93%E6%9C%8D%E5%8A%A1%E7%B1%BB-classpath%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/"/>
      <url>/blog/2019/03/09/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-5-RepositoryService-%E4%BB%93%E5%BA%93%E6%9C%8D%E5%8A%A1%E7%B1%BB-classpath%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>RepositoryService 是 Activiti 的仓库服务类, 仓库指的是流程定义文档的两个文件: BPMN 文件和流程图片</p><p>获得方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br></pre></td></tr></table></figure><ul><li>其实现类为: RepositoryServiceImpl</li><li>可以产生 DeploymentBuilder, 用来产生定义流程部署的相关参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployment deployment = repositoryService.createDeployment();</span><br></pre></td></tr></table></figure><h1 id="1-classpath-部署方式说明"><a href="#1-classpath-部署方式说明" class="headerlink" title="1. classpath 部署方式说明"></a>1. classpath 部署方式说明</h1><ol><li>先获取流程引擎对象, 在创建时会自动加载 classpath 下的 <code>activiti.cfg.xml</code></li><li>首先获得默认的流程引擎, 通过流程引擎获取一个 RepositoryService 对象</li><li>由仓库的服务对象产生一个部署对象配置对象, 用来封装部署操作的相关配置</li><li>链式编程, 在部署的配置对象中设置显示名, 上传流程定义规则文件</li><li>向数据库中存放流程定义的规则信息</li></ol><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    Deployment deployment = processEngine.getRepositoryService()</span><br><span class="line">            .createDeployment()</span><br><span class="line">            .name(<span class="string">"my-process"</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">"process/my-process.bpmn20.xml"</span>)</span><br><span class="line">            .deploy();</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"deployment: &#123;&#125;"</span>, deployment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-DeploymentBuilderImpl-addClasspathResource-String-resource"><a href="#1-1-DeploymentBuilderImpl-addClasspathResource-String-resource" class="headerlink" title="1.1. DeploymentBuilderImpl#addClasspathResource(String resource)"></a>1.1. DeploymentBuilderImpl#addClasspathResource(String resource)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> DeploymentBuilder <span class="title">addClasspathResource</span><span class="params">(String resource)</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = ReflectUtil.getResourceAsStream(resource);</span><br><span class="line">    <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"resource '"</span> + resource + <span class="string">"' not found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> addInputStream(resource, inputStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过资源路径获取输入流</li><li>添加输入流并返回</li></ul><h3 id="1-1-1-ReflectUtil-getResourceAsStream-String-name"><a href="#1-1-1-ReflectUtil-getResourceAsStream-String-name" class="headerlink" title="1.1.1. ReflectUtil.getResourceAsStream(String name)"></a>1.1.1. ReflectUtil.getResourceAsStream(String name)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    InputStream resourceStream = <span class="keyword">null</span>;</span><br><span class="line">    ClassLoader classLoader = getCustomClassLoader();</span><br><span class="line">    <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">        resourceStream = classLoader.getResourceAsStream(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (resourceStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Try the current Thread context classloader</span></span><br><span class="line">        classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        resourceStream = classLoader.getResourceAsStream(name);</span><br><span class="line">        <span class="keyword">if</span> (resourceStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Finally, try the classloader for this class</span></span><br><span class="line">            classLoader = ReflectUtil.class.getClassLoader();</span><br><span class="line">            resourceStream = classLoader.getResourceAsStream(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resourceStream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取自定义类加载器</li><li>如果类加载器不为空, 获取 classpath 路径下的资源</li><li>如果资源为空, 重新获取当前线程的类加载器, 再次尝试获取 classpath 下的资源</li><li>如果资源依然为空, 再获取当前类的类加载器再次尝试获取 classpath 下的资源</li><li>返回 </li></ol><h2 id="1-2-DeploymentBuilderImpl-addInputStream-String-resourceName-InputStream-inputStream"><a href="#1-2-DeploymentBuilderImpl-addInputStream-String-resourceName-InputStream-inputStream" class="headerlink" title="1.2. DeploymentBuilderImpl#addInputStream(String resourceName, InputStream inputStream)"></a>1.2. DeploymentBuilderImpl#addInputStream(String resourceName, InputStream inputStream)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> DeploymentBuilder <span class="title">addInputStream</span><span class="params">(String resourceName, InputStream inputStream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"inputStream for resource '"</span> + resourceName + <span class="string">"' is null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = IoUtil.readInputStream(inputStream, resourceName);</span><br><span class="line">    ResourceEntity resource = resourceEntityManager.create();</span><br><span class="line">    resource.setName(resourceName);</span><br><span class="line">    resource.setBytes(bytes);</span><br><span class="line">    deployment.addResource(resource);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>将输入流转化为字节数组</li><li>创建一个 ResourceEntity 实例对象, 并设置名称和字节数组</li><li>为 <code>deployment</code> 对象添加资源, 其内部包含一个 <code>Map&lt;String, ResourceEntity&gt;</code> 的属性</li><li>返回当前对象(DeploymentBuilder)</li></ol><h3 id="1-2-1-IoUtil-readInputStream-InputStream-inputStream-String-inputStreamName"><a href="#1-2-1-IoUtil-readInputStream-InputStream-inputStream-String-inputStreamName" class="headerlink" title="1.2.1. IoUtil#readInputStream(InputStream inputStream, String inputStreamName)"></a>1.2.1. IoUtil#readInputStream(InputStream inputStream, String inputStreamName)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] readInputStream(InputStream inputStream, String inputStreamName) &#123;</span><br><span class="line">    ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span> * <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> bytesRead = inputStream.read(buffer);</span><br><span class="line">        <span class="keyword">while</span> (bytesRead != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            bytesRead = inputStream.read(buffer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"couldn't read input stream "</span> + inputStreamName, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> outputStream.toByteArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-DeploymentEntityImpl-addResource-ResourceEntity-resource"><a href="#1-3-DeploymentEntityImpl-addResource-ResourceEntity-resource" class="headerlink" title="1.3. DeploymentEntityImpl#addResource(ResourceEntity resource)"></a>1.3. DeploymentEntityImpl#addResource(ResourceEntity resource)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResource</span><span class="params">(ResourceEntity resource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resources == <span class="keyword">null</span>) &#123;</span><br><span class="line">        resources = <span class="keyword">new</span> HashMap&lt;String, ResourceEntity&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    resources.put(resource.getName(), resource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-4-RepositoryServiceImpl-deploy"><a href="#1-4-RepositoryServiceImpl-deploy" class="headerlink" title="1.4. RepositoryServiceImpl#deploy()"></a>1.4. RepositoryServiceImpl#deploy()</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Deployment <span class="title">deploy</span><span class="params">(DeploymentBuilderImpl deploymentBuilder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commandExecutor.execute(<span class="keyword">new</span> DeployCmd&lt;Deployment&gt;(deploymentBuilder));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-DeployCmd-execute-CommandContext-commandContext"><a href="#1-5-DeployCmd-execute-CommandContext-commandContext" class="headerlink" title="1.5. DeployCmd#execute(CommandContext commandContext)"></a>1.5. DeployCmd#execute(CommandContext commandContext)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Deployment <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Backwards compatibility with Activiti v5</span></span><br><span class="line">    <span class="keyword">if</span> (commandContext.getProcessEngineConfiguration().isActiviti5CompatibilityEnabled()</span><br><span class="line">        &amp;&amp; deploymentBuilder.getDeploymentProperties() != <span class="keyword">null</span> </span><br><span class="line">        &amp;&amp; deploymentBuilder.getDeploymentProperties().containsKey(DeploymentProperties.DEPLOY_AS_ACTIVITI5_PROCESS_DEFINITION)</span><br><span class="line">        &amp;&amp; deploymentBuilder.getDeploymentProperties().get(DeploymentProperties.DEPLOY_AS_ACTIVITI5_PROCESS_DEFINITION).equals(Boolean.TRUE)) &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> deployAsActiviti5ProcessDefinition(commandContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> executeDeploy(commandContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-DeployCmd-executeDeploy-CommandContext-commandContext"><a href="#1-6-DeployCmd-executeDeploy-CommandContext-commandContext" class="headerlink" title="1.6. DeployCmd#executeDeploy(CommandContext commandContext)"></a>1.6. DeployCmd#executeDeploy(CommandContext commandContext)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Deployment <span class="title">executeDeploy</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">    DeploymentEntity deployment = deploymentBuilder.getDeployment();</span><br><span class="line"></span><br><span class="line">    deployment.setDeploymentTime(commandContext.getProcessEngineConfiguration().getClock().getCurrentTime());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deploymentBuilder.isDuplicateFilterEnabled()) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Deployment&gt; existingDeployments = <span class="keyword">new</span> ArrayList&lt;Deployment&gt;();</span><br><span class="line">        <span class="keyword">if</span> (deployment.getTenantId() == <span class="keyword">null</span> || ProcessEngineConfiguration.NO_TENANT_ID.equals(deployment.getTenantId())) &#123;</span><br><span class="line">            DeploymentEntity existingDeployment = commandContext.getDeploymentEntityManager().findLatestDeploymentByName(deployment.getName());</span><br><span class="line">            <span class="keyword">if</span> (existingDeployment != <span class="keyword">null</span>) &#123;</span><br><span class="line">                existingDeployments.add(existingDeployment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;Deployment&gt; deploymentList = commandContext.getProcessEngineConfiguration().getRepositoryService().createDeploymentQuery().deploymentName(deployment.getName())</span><br><span class="line">                    .deploymentTenantId(deployment.getTenantId()).orderByDeploymentId().desc().list();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!deploymentList.isEmpty()) &#123;</span><br><span class="line">                existingDeployments.addAll(deploymentList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DeploymentEntity existingDeployment = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!existingDeployments.isEmpty()) &#123;</span><br><span class="line">            existingDeployment = (DeploymentEntity) existingDeployments.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((existingDeployment != <span class="keyword">null</span>) &amp;&amp; !deploymentsDiffer(deployment, existingDeployment)) &#123;</span><br><span class="line">            <span class="keyword">return</span> existingDeployment;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deployment.setNew(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save the data</span></span><br><span class="line">    commandContext.getDeploymentEntityManager().insert(deployment);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) &#123;</span><br><span class="line">        commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED, deployment));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Deployment settings</span></span><br><span class="line">    Map&lt;String, Object&gt; deploymentSettings = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    deploymentSettings.put(DeploymentSettings.IS_BPMN20_XSD_VALIDATION_ENABLED, deploymentBuilder.isBpmn20XsdValidationEnabled());</span><br><span class="line">    deploymentSettings.put(DeploymentSettings.IS_PROCESS_VALIDATION_ENABLED, deploymentBuilder.isProcessValidationEnabled());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Actually deploy</span></span><br><span class="line">    commandContext.getProcessEngineConfiguration().getDeploymentManager().deploy(deployment, deploymentSettings);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deploymentBuilder.getProcessDefinitionsActivationDate() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        scheduleProcessDefinitionActivation(commandContext, deployment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) &#123;</span><br><span class="line">        commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED, deployment));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deployment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>设置部署时间</li><li></li></ol><h1 id="2-资源部署涉及到的表"><a href="#2-资源部署涉及到的表" class="headerlink" title="2. 资源部署涉及到的表"></a>2. 资源部署涉及到的表</h1><ol><li>ACT_RE_DEPLOYMENT: 存放流程定义的显示名称和部署时间, 每部署一次增加一条记录;</li><li>ACT_RE_PROCDEF: 流程定义表, 存放流程定义的属性信息, 部署每个新的流程定义都会在这张表中增加一条记录, 当流程定义的 key 相同的时候, 使用的是版本升级</li><li>ACT_GE_BYTEARRAY: 资源文件表, 存储流程定义相关的二进制文件, 包括 XML 和图片.</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Activiti源码分析(4)--CommandExecutor(命令执行器)</title>
      <link href="/blog/2019/02/21/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-4-CommandExecutor-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%99%A8/"/>
      <url>/blog/2019/02/21/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-4-CommandExecutor-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="1-commandExecutor-对象的构造"><a href="#1-commandExecutor-对象的构造" class="headerlink" title="1. commandExecutor 对象的构造"></a>1. commandExecutor 对象的构造</h1><h2 id="1-1-ProcessEngineConfigurationImpl-ProcessEngineConfigurationImpl"><a href="#1-1-ProcessEngineConfigurationImpl-ProcessEngineConfigurationImpl" class="headerlink" title="1.1. ProcessEngineConfigurationImpl#ProcessEngineConfigurationImpl()"></a>1.1. ProcessEngineConfigurationImpl#ProcessEngineConfigurationImpl()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initCommandExecutors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    initDefaultCommandConfig();</span><br><span class="line">    initSchemaCommandConfig();</span><br><span class="line">    initCommandInvoker();</span><br><span class="line">    initCommandInterceptors();</span><br><span class="line">    initCommandExecutor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法由 <code>ProcessEngineConfigurationImpl#init()</code> 调用, init 在创建 ProcessEngineConfigurationImpl 对象的时候已经分析过</p><ul><li>第 5 行, 初始化命令拦截器</li><li>第 6 行, 初始化命令执行器</li></ul><h3 id="1-1-1-initCommandInterceptors-方法"><a href="#1-1-1-initCommandInterceptors-方法" class="headerlink" title="1.1.1. initCommandInterceptors() 方法"></a>1.1.1. initCommandInterceptors() 方法</h3><p>Activiti 提供了命令拦截器的功能, 通过 API 对 Activiti 流程各个实例的操作本质上都是对 DB 的操作. 因此 Activiti 将每一个 CRUD 操作都封装为一个 <code>Command</code>, 然后交由命令执行器 <code>CommandExecutor</code> 去执行. </p><p>为了能让使用者可以对命令进行拦截, Activiti 还是用了 <code>责任链模式</code>, 使用者可以在其中添加相应的拦截器. 职责链让多个对象都有机会处理请求, 从而避免了请求发送者和接受者之间的耦合, 这些请求接受者将组成一条链, 并沿着这条链传递下去, 直到有一个对象处理了这个请求为止.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initCommandInterceptors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (commandInterceptors == <span class="keyword">null</span>) &#123;</span><br><span class="line">        commandInterceptors = <span class="keyword">new</span> ArrayList&lt;CommandInterceptor&gt;();</span><br><span class="line">        <span class="keyword">if</span> (customPreCommandInterceptors != <span class="keyword">null</span>) &#123;</span><br><span class="line">            commandInterceptors.addAll(customPreCommandInterceptors);</span><br><span class="line">        &#125;</span><br><span class="line">        commandInterceptors.addAll(getDefaultCommandInterceptors());</span><br><span class="line">        <span class="keyword">if</span> (customPostCommandInterceptors != <span class="keyword">null</span>) &#123;</span><br><span class="line">            commandInterceptors.addAll(customPostCommandInterceptors);</span><br><span class="line">        &#125;</span><br><span class="line">        commandInterceptors.add(commandInvoker);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法完成对所有拦截器的初始化 </p><ul><li>自定义前置拦截器: 需要开发者实现 <code>CommandInterceptor</code> 接口, 并配置到 Activiti 配置文件(<code>activiti.cfg.xml</code>)中</li><li>默认的拦截器:<ol><li>LogInterceptor: 日志拦截器, 用于打印执行的日志</li><li>TransactionInterceptor: 事务拦截器</li><li>CommandContextInterceptor: 命令上下文拦截器</li></ol></li><li>自定义后置拦截器: 需要开发者实现 <code>CommandInterceptor</code> 接口, 并配置到 Activiti 配置文件中.</li></ul><h3 id="1-1-2-getDefaultCommandInterceptors"><a href="#1-1-2-getDefaultCommandInterceptors" class="headerlink" title="1.1.2. getDefaultCommandInterceptors()"></a>1.1.2. getDefaultCommandInterceptors()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Collection&lt;? extends CommandInterceptor&gt; getDefaultCommandInterceptors() &#123;</span><br><span class="line">    List&lt;CommandInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;CommandInterceptor&gt;();</span><br><span class="line">    interceptors.add(<span class="keyword">new</span> LogInterceptor());</span><br><span class="line"></span><br><span class="line">    CommandInterceptor transactionInterceptor = createTransactionInterceptor();</span><br><span class="line">    <span class="keyword">if</span> (transactionInterceptor != <span class="keyword">null</span>) &#123;</span><br><span class="line">        interceptors.add(transactionInterceptor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (commandContextFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">        interceptors.add(<span class="keyword">new</span> CommandContextInterceptor(commandContextFactory, <span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (transactionContextFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">        interceptors.add(<span class="keyword">new</span> TransactionContextInterceptor(transactionContextFactory));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> interceptors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-ProcessEngineConfigurationImpl-initCommandExecutor"><a href="#1-2-ProcessEngineConfigurationImpl-initCommandExecutor" class="headerlink" title="1.2. ProcessEngineConfigurationImpl#initCommandExecutor()"></a>1.2. ProcessEngineConfigurationImpl#initCommandExecutor()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initCommandExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (commandExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">      CommandInterceptor first = initInterceptorChain(commandInterceptors);</span><br><span class="line">      commandExecutor = <span class="keyword">new</span> CommandExecutorImpl(getDefaultCommandConfig(), first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将命令拦截器列表初始化为职责链</li><li>色织第一个拦截器</li></ul><h2 id="1-2-1-ProcessEngineConfigurationImpl-initInterceptorChain-List-chain"><a href="#1-2-1-ProcessEngineConfigurationImpl-initInterceptorChain-List-chain" class="headerlink" title="1.2.1 ProcessEngineConfigurationImpl#initInterceptorChain(List chain)"></a>1.2.1 ProcessEngineConfigurationImpl#initInterceptorChain(List<commandinterceptor> chain)</commandinterceptor></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CommandInterceptor <span class="title">initInterceptorChain</span><span class="params">(List&lt;CommandInterceptor&gt; chain)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (chain == <span class="keyword">null</span> || chain.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"invalid command interceptor chain configuration: "</span> + chain);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chain.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        chain.get(i).setNext(chain.get(i + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> chain.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化命令拦截器链, 并返回其中的第一个拦截器</p><p><img src="https://user-images.githubusercontent.com/17758731/54065183-e995b000-4257-11e9-9005-4a4f5f6ae568.png" alt="image"></p><h1 id="2-ProcessEngineConfigurationImpl-initService-Object-service"><a href="#2-ProcessEngineConfigurationImpl-initService-Object-service" class="headerlink" title="2. ProcessEngineConfigurationImpl#initService(Object service)"></a>2. ProcessEngineConfigurationImpl#initService(Object service)</h1><p>在各个服务对象(如 <code>RuntimeService</code>, <code>RepositoryService</code>等)中, 都可以直接使用 CommandExecutor 来执行命令<br>commandExecutor 对象由 RepositoryServiceImpl 的基类 <code>ServiceImpl</code> 声明</p><p>在 ProcessEngineConfigurationImpl 类的 initService(Object service) 方法中完成各个服务类的属性注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initService</span><span class="params">(Object service)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (service <span class="keyword">instanceof</span> ServiceImpl) &#123;</span><br><span class="line">        ((ServiceImpl) service).setCommandExecutor(commandExecutor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> activiti </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti源码分析(3)--Spring配置风格源码分析1</title>
      <link href="/blog/2019/02/20/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-3-Spring%E9%85%8D%E7%BD%AE%E9%A3%8E%E6%A0%BC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/"/>
      <url>/blog/2019/02/20/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-3-Spring%E9%85%8D%E7%BD%AE%E9%A3%8E%E6%A0%BC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/</url>
      <content type="html"><![CDATA[<p>在分析源码之前, 先贴出一个典型的 Activiti 与 Spring 整合的配置文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 ProcessEngineConfiguration  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.SpringProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring 需要单独配置 DataSource --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"sa"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 流程引擎对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngine"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.ProcessEngineFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">ref</span>=<span class="string">"processEngineConfiguration"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将服务暴露给 Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"runtimeService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getRuntimeService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"repositoryService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getRepositoryService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"formService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getFormService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getTaskService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"historyService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getHistoryService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 activitiRule 用于测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"activitiRule"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.test.ActivitiRule"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngine"</span> <span class="attr">ref</span>=<span class="string">"processEngine"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-ProcessEngines-类"><a href="#1-ProcessEngines-类" class="headerlink" title="1. ProcessEngines 类"></a>1. ProcessEngines 类</h1><h2 id="1-1-init-方法"><a href="#1-1-init-方法" class="headerlink" title="1.1. init() 方法"></a>1.1. init() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    resources = classLoader.getResources(<span class="string">"activiti-context.xml"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"problem retrieving activiti-context.xml resources on the classpath: "</span> + System.getProperty(<span class="string">"java.class.path"</span>), e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (resources.hasMoreElements()) &#123;</span><br><span class="line">    URL resource = resources.nextElement();</span><br><span class="line">    log.info(<span class="string">"Initializing process engine using Spring configuration '&#123;&#125;'"</span>, resource.toString());</span><br><span class="line">    initProcessEngineFromSpringResource(resource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前两篇文章中, 我们主要对常规模式(即不与 Spring 整合的初始化模式)做了简单介绍, 这篇文章我们对于 Spring 整合方式下的 ProcessEngine 初始化做一个简单分析.</p><ol><li>读取 classpath 下的 <code>activiti-context.xml</code> 文件</li><li>将资源列表依次交由 <code>initProcessEngineFromSpringResource(resource)</code> 方法完成初始化</li></ol><h2 id="1-2-initProcessEngineFromSpringResource-URL-resource-方法"><a href="#1-2-initProcessEngineFromSpringResource-URL-resource-方法" class="headerlink" title="1.2. initProcessEngineFromSpringResource(URL resource) 方法"></a>1.2. initProcessEngineFromSpringResource(URL resource) 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initProcessEngineFromSpringResource</span><span class="params">(URL resource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; springConfigurationHelperClass = ReflectUtil.loadClass(<span class="string">"org.activiti.spring.SpringConfigurationHelper"</span>);</span><br><span class="line">        Method method = springConfigurationHelperClass.getDeclaredMethod(<span class="string">"buildProcessEngine"</span>, <span class="keyword">new</span> Class&lt;?&gt;[] &#123; URL.class &#125;);</span><br><span class="line">        ProcessEngine processEngine = (ProcessEngine) method.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] &#123; resource &#125;);</span><br><span class="line"></span><br><span class="line">        String processEngineName = processEngine.getName();</span><br><span class="line">        ProcessEngineInfo processEngineInfo = <span class="keyword">new</span> ProcessEngineInfoImpl(processEngineName, resource.toString(), <span class="keyword">null</span>);</span><br><span class="line">        processEngineInfosByName.put(processEngineName, processEngineInfo);</span><br><span class="line">        processEngineInfosByResourceUrl.put(resource.toString(), processEngineInfo);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"couldn't initialize process engine from spring configuration resource "</span> + resource.toString() + <span class="string">": "</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过反射的方式加载目标类 <code>org.activiti.spring.SpringConfigurationHelper</code> 的 class 对象</li><li>通过反射的方式获取该类名为 <code>buildProcessEngine</code> , 参数列表为 <code>URL</code> 的方法对象</li><li>反射调用 <code>org.activiti.spring.SpringConfigurationHelper#buildProcessEngine(URL resource)</code> 方法</li></ol><h1 id="2-SpringConfigurationHelper-类"><a href="#2-SpringConfigurationHelper-类" class="headerlink" title="2. SpringConfigurationHelper 类"></a>2. SpringConfigurationHelper 类</h1><h2 id="2-1-buildProcessEngine-URL-resource-方法"><a href="#2-1-buildProcessEngine-URL-resource-方法" class="headerlink" title="2.1. buildProcessEngine(URL resource) 方法"></a>2.1. buildProcessEngine(URL resource) 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngine <span class="title">buildProcessEngine</span><span class="params">(URL resource)</span> </span>&#123;</span><br><span class="line">    log.debug(<span class="string">"==== BUILDING SPRING APPLICATION CONTEXT AND PROCESS ENGINE ========================================="</span>);</span><br><span class="line"></span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> GenericXmlApplicationContext(<span class="keyword">new</span> UrlResource(resource));</span><br><span class="line">    Map&lt;String, ProcessEngine&gt; beansOfType = applicationContext.getBeansOfType(ProcessEngine.class);</span><br><span class="line">    <span class="keyword">if</span> ((beansOfType == <span class="keyword">null</span>) || (beansOfType.isEmpty())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"no "</span> + ProcessEngine.class.getName() + <span class="string">" defined in the application context "</span> + resource.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ProcessEngine processEngine = beansOfType.values().iterator().next();</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"==== SPRING PROCESS ENGINE CREATED =================================================================="</span>);</span><br><span class="line">    <span class="keyword">return</span> processEngine;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>使用传入的 <code>activiti-context.xml</code> 文件创建 ApplicationContext 对象</li><li>通过 ApplicationContext 获取类型为 <code>ProcessEngine</code> 的所有对象, 返回值为 Map&lt;beanId, ProcessEngine 对象&gt;</li><li>通过遍历获取其中第一个 value 并返回</li></ol><p>在执行第 1 步的时候, 就会触发 Spring Application Context 管理的对应对象的初始化.</p><p>对应开始时贴出来的配置文件范例, 在初始化 <code>&lt;processEngine, ProcessEngineFactoryBean&gt;</code> 前, 需要先初始化 <code>&lt;processEngineConfiguration, SpringProcessEngineConfiguration&gt;</code> 对象</p><h2 id="2-2-SpringProcessEngineConfiguration-对象的默认构造方法"><a href="#2-2-SpringProcessEngineConfiguration-对象的默认构造方法" class="headerlink" title="2.2 SpringProcessEngineConfiguration 对象的默认构造方法"></a>2.2 SpringProcessEngineConfiguration 对象的默认构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringProcessEngineConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.transactionsExternallyManaged = <span class="keyword">true</span>;</span><br><span class="line">    deploymentStrategies.add(<span class="keyword">new</span> DefaultAutoDeploymentStrategy());</span><br><span class="line">    deploymentStrategies.add(<span class="keyword">new</span> SingleResourceAutoDeploymentStrategy());</span><br><span class="line">    deploymentStrategies.add(<span class="keyword">new</span> ResourceParentFolderAutoDeploymentStrategy());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-ProcessEngine-对象的-getObject-方法"><a href="#2-3-ProcessEngine-对象的-getObject-方法" class="headerlink" title="2.3. ProcessEngine 对象的 getObject() 方法"></a>2.3. ProcessEngine 对象的 getObject() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessEngine <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    configureExpressionManager();</span><br><span class="line">    configureExternallyManagedTransactions();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (processEngineConfiguration.getBeans() == <span class="keyword">null</span>) &#123;</span><br><span class="line">      processEngineConfiguration.setBeans(<span class="keyword">new</span> SpringBeanFactoryProxyMap(applicationContext));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.processEngine = processEngineConfiguration.buildProcessEngine();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.processEngine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Activiti源码分析(2)--流程引擎类</title>
      <link href="/blog/2019/02/18/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2-%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E%E7%B1%BB/"/>
      <url>/blog/2019/02/18/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2-%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>在上一篇文章中, 我们跟踪了流程引擎配置类对象的创建过程, 今天紧接着来看 Activiti 在获取到流程引擎配置类之后, 如何完成流程引擎的初始化.</p><h1 id="1-ProcessEngineConfiguration-类"><a href="#1-ProcessEngineConfiguration-类" class="headerlink" title="1. ProcessEngineConfiguration 类"></a>1. ProcessEngineConfiguration 类</h1><h2 id="1-1-buildProcessEngine-URL-resource-方法"><a href="#1-1-buildProcessEngine-URL-resource-方法" class="headerlink" title="1.1. buildProcessEngine(URL resource) 方法"></a>1.1. buildProcessEngine(URL resource) 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessEngine <span class="title">buildProcessEngine</span><span class="params">(URL resource)</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream = resource.openStream();</span><br><span class="line">        ProcessEngineConfiguration processEngineConfiguration = ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream);</span><br><span class="line">        <span class="keyword">return</span> processEngineConfiguration.buildProcessEngine();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"couldn't open resource stream: "</span> + e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtil.closeSilently(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该方法中, 上一篇文章我们讲了第 5 行代码的源码调用关系, 最终创建了 ProcessEngineConfiguration 对象, 这篇文章中我们来讲第 6 行是如何创建 ProcessEngine 对象的.</p><h2 id="1-2-buildProcessEngine-方法"><a href="#1-2-buildProcessEngine-方法" class="headerlink" title="1.2. buildProcessEngine() 方法"></a>1.2. buildProcessEngine() 方法</h2><p>该方法是一个抽象方法, 实现类分别有:</p><ol><li>MultiSchemaMultiTenantProcessEngineConfiguration</li><li>ProcessEngineConfigurationImpl</li><li>SpringProcessEngineConfiguration</li></ol><p>在本例中, 最终会调用 <code>ProcessEngineConfigurationImpl</code> 的 <code>buildProcessEngine()</code> 方法, 因为我们在 <code>activiti.cfg.xml</code> 中的配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用的是 <code>StandaloneProcessEngineConfiguration</code>, 而打开该类发现该类没有 <code>buildProcessEngine()</code> 方法的实现, 因此实现方法在其父类 <code>ProcessEngineConfigurationImpl</code> 中.</p><h1 id="2-ProcessEngineConfigurationImpl-类"><a href="#2-ProcessEngineConfigurationImpl-类" class="headerlink" title="2. ProcessEngineConfigurationImpl 类"></a>2. ProcessEngineConfigurationImpl 类</h1><h2 id="2-1-buildProcessEngine-方法"><a href="#2-1-buildProcessEngine-方法" class="headerlink" title="2.1. buildProcessEngine() 方法"></a>2.1. buildProcessEngine() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessEngine <span class="title">buildProcessEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    ProcessEngineImpl processEngine = <span class="keyword">new</span> ProcessEngineImpl(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// trigger build of Activiti 5 Engine</span></span><br><span class="line">    <span class="keyword">if</span> (isActiviti5CompatibilityEnabled &amp;&amp; activiti5CompatibilityHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Context.setProcessEngineConfiguration(processEngine.getProcessEngineConfiguration());</span><br><span class="line">        activiti5CompatibilityHandler.getRawProcessEngine();</span><br><span class="line">    &#125;</span><br><span class="line">    postProcessEngineInitialisation();</span><br><span class="line">    <span class="keyword">return</span> processEngine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-init"><a href="#2-2-init" class="headerlink" title="2.2. init()"></a>2.2. init()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    initConfigurators();</span><br><span class="line">    configuratorsBeforeInit();</span><br><span class="line">    initProcessDiagramGenerator();</span><br><span class="line">    initHistoryLevel();</span><br><span class="line">    initExpressionManager();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (usingRelationalDatabase) &#123;</span><br><span class="line">      initDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initAgendaFactory();</span><br><span class="line">    initHelpers();</span><br><span class="line">    initVariableTypes();</span><br><span class="line">    initBeans();</span><br><span class="line">    initFormEngines();</span><br><span class="line">    initFormTypes();</span><br><span class="line">    initScriptingEngines();</span><br><span class="line">    initClock();</span><br><span class="line">    initBusinessCalendarManager();</span><br><span class="line">    initCommandContextFactory();</span><br><span class="line">    initTransactionContextFactory();</span><br><span class="line">    initCommandExecutors();</span><br><span class="line">    initServices();</span><br><span class="line">    initIdGenerator();</span><br><span class="line">    initBehaviorFactory();</span><br><span class="line">    initListenerFactory();</span><br><span class="line">    initBpmnParser();</span><br><span class="line">    initProcessDefinitionCache();</span><br><span class="line">    initProcessDefinitionInfoCache();</span><br><span class="line">    initKnowledgeBaseCache();</span><br><span class="line">    initJobHandlers();</span><br><span class="line">    initJobManager();</span><br><span class="line">    initAsyncExecutor();</span><br><span class="line"></span><br><span class="line">    initTransactionFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (usingRelationalDatabase) &#123;</span><br><span class="line">      initSqlSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initSessionFactories();</span><br><span class="line">    initDataManagers();</span><br><span class="line">    initEntityManagers();</span><br><span class="line">    initHistoryManager();</span><br><span class="line">    initJpa();</span><br><span class="line">    initDeployers();</span><br><span class="line">    initDelegateInterceptor();</span><br><span class="line">    initEventHandlers();</span><br><span class="line">    initFailedJobCommandFactory();</span><br><span class="line">    initEventDispatcher();</span><br><span class="line">    initProcessValidator();</span><br><span class="line">    initDatabaseEventLogging();</span><br><span class="line">    initActiviti5CompatibilityHandler();</span><br><span class="line">    configuratorsAfterInit();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>init()</code> 是一个非常大的方法, 其内容主要是各种初始化操作的执行, 其中有些比较重要的需要单独讲解.</p><ul><li>如果使用关系型数据库, 其实 <code>usingRelationalDatabase</code> 变量默认为 true, 代表目前只支持关系型数据库, 就会使用 <code>initRelationalDatabase()</code> 方法完成数据库相关的初始化操作.</li></ul><h2 id="2-3-initRelationalDatabase"><a href="#2-3-initRelationalDatabase" class="headerlink" title="2.3. initRelationalDatabase()"></a>2.3. initRelationalDatabase()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSourceJndiName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                dataSource = (DataSource) <span class="keyword">new</span> InitialContext().lookup(dataSourceJndiName);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"couldn't lookup datasource from "</span> + dataSourceJndiName + <span class="string">": "</span> + e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jdbcUrl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((jdbcDriver == <span class="keyword">null</span>) || (jdbcUsername == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"DataSource or JDBC properties have to be specified in a process engine configuration"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">"initializing datasource to db: &#123;&#125;"</span>, jdbcUrl);</span><br><span class="line"></span><br><span class="line">            PooledDataSource pooledDataSource = <span class="keyword">new</span> PooledDataSource(ReflectUtil.getClassLoader(), jdbcDriver, jdbcUrl, jdbcUsername, jdbcPassword);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (jdbcMaxActiveConnections &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pooledDataSource.setPoolMaximumActiveConnections(jdbcMaxActiveConnections);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (jdbcMaxIdleConnections &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pooledDataSource.setPoolMaximumIdleConnections(jdbcMaxIdleConnections);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (jdbcMaxCheckoutTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pooledDataSource.setPoolMaximumCheckoutTime(jdbcMaxCheckoutTime);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (jdbcMaxWaitTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pooledDataSource.setPoolTimeToWait(jdbcMaxWaitTime);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (jdbcPingEnabled == <span class="keyword">true</span>) &#123;</span><br><span class="line">                pooledDataSource.setPoolPingEnabled(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">if</span> (jdbcPingQuery != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    pooledDataSource.setPoolPingQuery(jdbcPingQuery);</span><br><span class="line">                &#125;</span><br><span class="line">                pooledDataSource.setPoolPingConnectionsNotUsedFor(jdbcPingConnectionNotUsedFor);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (jdbcDefaultTransactionIsolationLevel &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pooledDataSource.setDefaultTransactionIsolationLevel(jdbcDefaultTransactionIsolationLevel);</span><br><span class="line">            &#125;</span><br><span class="line">            dataSource = pooledDataSource;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dataSource <span class="keyword">instanceof</span> PooledDataSource) &#123;</span><br><span class="line">            <span class="comment">// ACT-233: connection pool of Ibatis is not properly</span></span><br><span class="line">            <span class="comment">// initialized if this is not called!</span></span><br><span class="line">            ((PooledDataSource) dataSource).forceCloseAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (databaseType == <span class="keyword">null</span>) &#123;</span><br><span class="line">        initDatabaseType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果 <code>dataSource</code> 对象为空,  就初始化一个 <code>PooledDataSource</code> 对象, 根据默认的 <code>jdbcUrl</code>, <code>jdbcDriver</code>, <code>jdbcUsername</code> 等变量创建一个数据库连接, 而上述的默认值则对应 Activiti 内置的内存数据库 H2, 说明如果不设置 dataSource, Activiti 就会使用内置的 H2 数据库完成 dataSource 的初始化.</li><li><code>databaseType</code> 用于标识数据库类型, 如果该变量为空, 需要调用 <code>initDatabaseType()</code> 来完成数据库类型的赋值.</li></ul><h2 id="2-4-initDatabaseType-方法"><a href="#2-4-initDatabaseType-方法" class="headerlink" title="2.4. initDatabaseType() 方法"></a>2.4. initDatabaseType() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDatabaseType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = dataSource.getConnection();</span><br><span class="line">        DatabaseMetaData databaseMetaData = connection.getMetaData();</span><br><span class="line">        String databaseProductName = databaseMetaData.getDatabaseProductName();</span><br><span class="line">        log.debug(<span class="string">"database product name: '&#123;&#125;'"</span>, databaseProductName);</span><br><span class="line">        databaseType = databaseTypeMappings.getProperty(databaseProductName);</span><br><span class="line">        <span class="keyword">if</span> (databaseType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiException(<span class="string">"couldn't deduct database type from database product name '"</span> + databaseProductName + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"using database type: &#123;&#125;"</span>, databaseType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Special care for MSSQL, as it has a hard limit of 2000 params per statement (incl bulk statement).</span></span><br><span class="line">        <span class="comment">// Especially with executions, with 100 as default, this limit is passed.</span></span><br><span class="line">        <span class="keyword">if</span> (DATABASE_TYPE_MSSQL.equals(databaseType)) &#123;</span><br><span class="line">            maxNrOfStatementsInBulkInsert = DEFAULT_MAX_NR_OF_STATEMENTS_BULK_INSERT_SQL_SERVER;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Exception while initializing Database connection"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Exception while closing the Database connection"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取一个数据库连接</li><li>通过该连接获取元数据信息, 得到数据库产品的名称</li><li>通过该名称去获取内部实现保存的数据库名称 Properties 集合, 如果为空说明不支持该数据库</li><li>通过存在就将 <code>databaseType</code> 完成赋值</li></ul><h2 id="2-5-回到-buildProcessEngine-方法"><a href="#2-5-回到-buildProcessEngine-方法" class="headerlink" title="2.5. 回到 buildProcessEngine() 方法"></a>2.5. 回到 buildProcessEngine() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ProcessEngine <span class="title">buildProcessEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    ProcessEngineImpl processEngine = <span class="keyword">new</span> ProcessEngineImpl(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// trigger build of Activiti 5 Engine</span></span><br><span class="line">    <span class="keyword">if</span> (isActiviti5CompatibilityEnabled &amp;&amp; activiti5CompatibilityHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Context.setProcessEngineConfiguration(processEngine.getProcessEngineConfiguration());</span><br><span class="line">        activiti5CompatibilityHandler.getRawProcessEngine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    postProcessEngineInitialisation();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> processEngine;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>init()</code> 方法结束后, 已经完成了相关资源的初始化</li><li>使用 <code>ProcessEngineConfiguration</code> 对象去创建 <code>ProcessEngineImpl</code>, xxxService 核心服务对象都是通过 <code>ProcessEngineConfiguration</code> 对象中的同类对象完成的初始化.</li><li>如果开启 Activiti5 兼容功能, 并且 <code>activiti5CompatibilityHandler</code>(Activiti5兼容处理器对象) 不为空, 执行兼容初始化逻辑, 正常情况下不走该逻辑.</li><li>执行 <code>postProcessEngineInitialisation()</code></li></ul><h2 id="2-6-postProcessEngineInitialisation"><a href="#2-6-postProcessEngineInitialisation" class="headerlink" title="2.6. postProcessEngineInitialisation()"></a>2.6. postProcessEngineInitialisation()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessEngineInitialisation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (performanceSettings.isValidateExecutionRelationshipCountConfigOnBoot()) &#123;</span><br><span class="line">        commandExecutor.execute(<span class="keyword">new</span> ValidateExecutionRelatedEntityCountCfgCmd());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用该方法来检查是否使用了流程实例相关数量记录(<code>validateExecutionRelationshipCountConfigOnBoot</code> 配置的默认值为 true, 默认开启)</li><li>使用命令执行器执行 <code>ValidateExecutionRelatedEntityCountCfgCmd</code></li></ul><h1 id="3-ValidateExecutionRelatedEntityCountCfgCmd-类"><a href="#3-ValidateExecutionRelatedEntityCountCfgCmd-类" class="headerlink" title="3. ValidateExecutionRelatedEntityCountCfgCmd 类"></a>3. ValidateExecutionRelatedEntityCountCfgCmd 类</h1><p>实现了 <code>Command</code> 接口, 命令执行器执行的时候会自动调用其 <code>execute(CommandContext commandContext)</code> 方法.</p><h2 id="3-1-execute-CommandContext-commandContext-方法"><a href="#3-1-execute-CommandContext-commandContext-方法" class="headerlink" title="3.1. execute(CommandContext commandContext) 方法"></a>3.1. execute(CommandContext commandContext) 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Void <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*  </span></span><br><span class="line"><span class="comment">     * If execution related entity counting is on in config | Current property in database : Result</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     *  A) true | not there : write new property with value 'true'</span></span><br><span class="line"><span class="comment">     *  B) true | true : all good</span></span><br><span class="line"><span class="comment">     *  C) true | false : the feature was disabled before, but it is enabled now. Old executions will have a local flag with false. </span></span><br><span class="line"><span class="comment">     *                    It is now enabled. This is fine, will be handled in logic. Update the property.</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     *  D) false | not there: write new property with value 'false'</span></span><br><span class="line"><span class="comment">     *  E) false | true : the feature was disabled before and enabled now. To guarantee data consistency, we need to remove the flag from all executions.</span></span><br><span class="line"><span class="comment">     *                    Update the property.</span></span><br><span class="line"><span class="comment">     *  F) false | false : all good</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * In case A and D (not there), the property needs to be written to the db</span></span><br><span class="line"><span class="comment">     * Only in case E something needs to be done explicitely, the others are okay.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    PropertyEntityManager propertyEntityManager = commandContext.getPropertyEntityManager();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span> configProperty = commandContext.getProcessEngineConfiguration().getPerformanceSettings().isEnableExecutionRelationshipCounts();</span><br><span class="line">    PropertyEntity propertyEntity = propertyEntityManager.findById(PROPERTY_EXECUTION_RELATED_ENTITY_COUNT);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (propertyEntity == <span class="keyword">null</span>) &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 'not there' case in the table above: easy, simply insert the value</span></span><br><span class="line">      </span><br><span class="line">        PropertyEntity newPropertyEntity = propertyEntityManager.create();</span><br><span class="line">        newPropertyEntity.setName(PROPERTY_EXECUTION_RELATED_ENTITY_COUNT);</span><br><span class="line">        newPropertyEntity.setValue(Boolean.toString(configProperty));</span><br><span class="line">        propertyEntityManager.insert(newPropertyEntity);</span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">boolean</span> propertyValue = Boolean.valueOf(propertyEntity.getValue().toString().toLowerCase());</span><br><span class="line">            <span class="keyword">if</span> (!configProperty &amp;&amp; propertyValue) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    logger.info(<span class="string">"Configuration change: execution related entity counting feature was enabled before, but now disabled. "</span></span><br><span class="line">                            + <span class="string">"Updating all execution entities."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                commandContext.getProcessEngineConfiguration().getExecutionDataManager().updateAllExecutionRelatedEntityCountFlags(configProperty);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Update property</span></span><br><span class="line">            <span class="keyword">if</span> (configProperty != propertyValue) &#123;</span><br><span class="line">                propertyEntity.setValue(Boolean.toString(configProperty));</span><br><span class="line">                propertyEntityManager.update(propertyEntity);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>去数据库中的 <code>ACT_GE_PROPERTY</code> 表查询 id 为 <code>cfg.execution-related-entities-count</code> 的记录.<ul><li>如果没有查到, 则插入一条 <code>cfg.execution-related-entities-count, false</code> 的记录</li><li>如果查到, 将该记录中的值转换为小写字符串, 转换为 boolean 值<ul><li>如果配置的值不等于 DB 中存储的值, 那么将 DB 的值更新为配置的值</li></ul></li></ul></li></ul><p>最终初始化代码执行完成后, 会在 DB 中存在这样一条记录</p><p><img src="https://user-images.githubusercontent.com/17758731/53029162-3bda8100-34a3-11e9-927c-0a9a2450c11d.png" alt="image"></p><hr><p>执行完毕后, 此时 ProcessEngine 对象已经初始化完成.</p><p>调用关系如下:</p><p><img src="https://user-images.githubusercontent.com/17758731/53028730-65df7380-34a2-11e9-9221-124d145046d8.png" alt="image"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关系型数据库的瓶颈与优化</title>
      <link href="/blog/2019/01/19/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%93%B6%E9%A2%88%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
      <url>/blog/2019/01/19/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%93%B6%E9%A2%88%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="1-数据库的分类"><a href="#1-数据库的分类" class="headerlink" title="1. 数据库的分类"></a>1. 数据库的分类</h1><p>数据库大致可以分为两部分:</p><ol><li>传统的关系型数据库, 如: MySQL, Oracle, SQLServer 以及 PostgreSQL; MySQL 是国内使用最广泛的数据库, Oracle 在传统行业应用最为广泛, PostgreSQL 性能和功能都比较完善, 但目前文档和社区还有待成长.</li><li>非关系型数据库, 如 HBase(列式数据库), MongoDB(文档型数据库), Redis(高性能 KV 存储), Lucene(搜索引擎) 等等.</li></ol><h1 id="2-关系型数据库的瓶颈与优化"><a href="#2-关系型数据库的瓶颈与优化" class="headerlink" title="2. 关系型数据库的瓶颈与优化"></a>2. 关系型数据库的瓶颈与优化</h1><h2 id="2-1-为什么数据库的架构需要调整"><a href="#2-1-为什么数据库的架构需要调整" class="headerlink" title="2.1 为什么数据库的架构需要调整"></a>2.1 为什么数据库的架构需要调整</h2><ol><li>互联网的数据增长往往是指数型的;</li><li>读写分离, 分布式: 单机性能上存在瓶颈;</li><li>NoSQL, 搜索引擎: 特殊场景的需求无法满足;</li><li>分析系统: 无法满足大数据的分析需求;</li><li>部署要求: 同城容灾/异地容灾.</li></ol><h2 id="2-2-数据库会遇到什么问题"><a href="#2-2-数据库会遇到什么问题" class="headerlink" title="2.2 数据库会遇到什么问题"></a>2.2 数据库会遇到什么问题</h2><h3 id="2-2-1-性能"><a href="#2-2-1-性能" class="headerlink" title="2.2.1 性能"></a>2.2.1 性能</h3><ul><li>查询性能</li><li>写入更新</li><li>并发, 数据量等</li></ul><h3 id="2-2-2-功能"><a href="#2-2-2-功能" class="headerlink" title="2.2.2 功能"></a>2.2.2 功能</h3><ul><li>新功能: LBS/JSON/特殊业务场景</li><li>数据安全性: 强一致性/非强一致性</li><li>大数据分析</li><li>搜索等</li></ul><h1 id="3-不同业务场景的存储选型"><a href="#3-不同业务场景的存储选型" class="headerlink" title="3. 不同业务场景的存储选型"></a>3. 不同业务场景的存储选型</h1><h2 id="3-1-一个简单的问题"><a href="#3-1-一个简单的问题" class="headerlink" title="3.1 一个简单的问题"></a>3.1 一个简单的问题</h2><h4 id="MySQL-已经有-cache-了-为何还需要加一层-Redis"><a href="#MySQL-已经有-cache-了-为何还需要加一层-Redis" class="headerlink" title="MySQL 已经有 cache 了, 为何还需要加一层 Redis"></a>MySQL 已经有 cache 了, 为何还需要加一层 Redis</h4><h2 id="3-2-数据库查询开销"><a href="#3-2-数据库查询开销" class="headerlink" title="3.2 数据库查询开销"></a>3.2 数据库查询开销</h2><p><img src="https://user-images.githubusercontent.com/17758731/51440848-276d6200-1d06-11e9-8a4e-27a280b1a538.png" alt="image"></p><p>其中比较耗时的步骤有:</p><ul><li>建立 TCP 连接</li><li>生成执行计划</li><li>开表</li><li>从磁盘扫描数据</li><li>关闭连接</li></ul><h3 id="3-2-1-SQL-解析"><a href="#3-2-1-SQL-解析" class="headerlink" title="3.2.1 SQL 解析"></a>3.2.1 SQL 解析</h3><p>假设有如下三条语句, 均是根据主键的查询.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1 </span><br><span class="line">SELECT id, name, price FROM products WHERE id IN (1, 2, 3, 4, ... 30000);           # (1-2s)</span><br><span class="line"></span><br><span class="line"># 2. 将第一条查询转换成 30000 条语句</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line">...</span><br><span class="line">SELECT id, name, price FROM products WHERE id = 30000;                              # (2-3s)</span><br><span class="line"></span><br><span class="line"># 3. 将第一条转换成 OR 语句</span><br><span class="line">SELECT id, name, price FROM products WHERE id = 1 OR id = 2 OR ... OR id = 30000;   # (8-10s)</span><br></pre></td></tr></table></figure><p>造成第三条语句执行时间如此长的主要原因就是大量的 OR 语句会导致 SQL 解析非常耗时.</p><h3 id="3-2-2-以-MySQL-的-InnoDB-存储引擎主键查询为例"><a href="#3-2-2-以-MySQL-的-InnoDB-存储引擎主键查询为例" class="headerlink" title="3.2.2 以 MySQL 的 InnoDB 存储引擎主键查询为例"></a>3.2.2 以 MySQL 的 InnoDB 存储引擎主键查询为例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">id</span> = ?;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/17758731/51441235-71f0dd80-1d0a-11e9-95ef-24b2c481a4f0.png" alt="image"></p><p>常规配置的服务器基本可以达到 400000 QPS.</p><h3 id="3-2-3-如果查询条件不是主键"><a href="#3-2-3-如果查询条件不是主键" class="headerlink" title="3.2.3 如果查询条件不是主键"></a>3.2.3 如果查询条件不是主键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">name</span> = ?;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/17758731/51441306-2ab71c80-1d0b-11e9-9b86-cf7aa0957787.png" alt="image"></p><p>对于非主键的查询, MySQL 会根据二级索引查询到主索引对应节点的位置. 按照图中的情况, 会首先通过三次 IO 找到对应主键, 在二级索引的叶子节点会同时保存索引字段的值以及主键的值, 再回到主索引通过主键查询到整条记录.</p><p>在 MySQL 中, 主键查询时最为高效的一类查询.</p><p>DBA 往往希望所有的 SQL 语句都是 KV 查询, 但是往往是不现实的.</p><ul><li>主键查询有限, 有些主键没有业务含义;</li><li>设计表结构时, 并没有考虑过主键问题.</li></ul><p>SQL 语句允许开发人员用各种方式从表中获取数据, 但 DBA 却不会希望我们这么做.</p><h3 id="3-2-3-数据库的大字段"><a href="#3-2-3-数据库的大字段" class="headerlink" title="3.2.3 数据库的大字段"></a>3.2.3 数据库的大字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content varchar(2046) NOT NULL <span class="keyword">COMMENT</span> <span class="string">'原始消息'</span>;</span><br></pre></td></tr></table></figure><p>以 InnoDB 存储引擎为例:</p><ul><li>TinyText/Text/Mediumtext</li><li>varchar(256)/varchar(500)/varchar(20000)</li><li>tinyBlob/blob/mediumBlob </li></ul><p>text 类型本质上和 varchar 类型没有区别.</p><p><img src="https://user-images.githubusercontent.com/17758731/51544585-3a656b00-1e9b-11e9-9610-28431f9b1b09.png" alt="image"></p><p>MySQL 中, 数据是以页的方式来组织的, 每个数据页默认大小 16 KB, 其中包括页头, 页尾, 中间是一行一行的记录.</p><p>图中的每条记录包括 ID, NAME, AGE 和 DETAIL. 假设 DETAIL 是一个大字段, 达到超过了单页的大小, 此时 DB 会新开一个数据页, 当前页通过指针指向该页. 如果一页依然不够, MySQL 就会不断新加数据页直到能够存下为止.</p><p>一旦存在这样的大字段, 会带来如下问题:</p><ol><li>查询开销大;</li><li>查询影响大, 严重时会触发热页换出, 引起系统抖动. MySQL 将记录从磁盘读取出来的时候, 可能会有很多数据页, MySQL 自带缓存时非常宝贵的, 会导致真正使用频率高的数据页被替换成大字段的数据页. 此外, 对 MySQL 来说, 即便只查记录中的某几个字段, 数据库依然会把整条记录取出, 读进内存, 再进行指定字段的筛选</li></ol><p>对于大字段场景可以尝试的优化方案:</p><ol><li>是否适合存储关系型数据库;</li><li>是否所有数据都需要存数据库;</li><li>是否可以新建一张表存储大字段.</li></ol><h3 id="3-2-4-数据库缓存利用率"><a href="#3-2-4-数据库缓存利用率" class="headerlink" title="3.2.4 数据库缓存利用率"></a>3.2.4 数据库缓存利用率</h3><p>以 InnoDB 存储引擎为例:</p><ol><li>MySQL 默认数据页为 <code>16KB</code>, 哪怕只读一行记录, 也需要从磁盘中取出 <code>16KB</code> 数据取出;</li><li>MySQL 是以页为最小的缓存单位;</li><li>如果每行数据 1kb, 256kb 内存空间能缓存多少行有效数据, 最好的情况是每条数据整齐排列在一个数据页中, 那么可以缓存256条记录, 最坏的情况下每一页只存在一条数据, 那么就只能缓存16条;</li><li>在 256KB 的 Buffer Pool 中, 并不是所有空间都用来做数据页缓存, 有很大的一块在 Write Buffer(MySQL 为了优化写操作, 会将一段时间内的写操作先放在 Write Buffer, 再由后台线程定时异步刷新到磁盘上). 然而剩下的 <code>128KB</code> 中还存在一部分脏页.</li></ol><p><img src="https://user-images.githubusercontent.com/17758731/51545929-02135c00-1e9e-11e9-94ac-d755610749d5.png" alt="image"></p><p>缓存为什么如此重要:</p><ul><li>互联网产品往往读多写少;</li><li>扩展缓存远比扩展 DB 简单;</li><li>数据库缓存利用率很低;</li><li>互联网应用对 DB 响应时间比较敏感, 缓存系统一般性能比较好</li><li>只要符合条件的数据都应该走缓存:<ol><li>修改不频繁的数据;</li><li>非实时的数据, 一致性要求不严的数据;</li><li>查询频率较高, 带有明显热点请求的数据;</li></ol></li></ul><h3 id="3-2-5-缓存带来的问题"><a href="#3-2-5-缓存带来的问题" class="headerlink" title="3.2.5 缓存带来的问题"></a>3.2.5 缓存带来的问题</h3><blockquote><p>用了缓存并不一定代表没有问题</p></blockquote><ol><li>缓存命中</li><li>缓存穿透</li><li>缓存失效</li><li>缓存一致</li></ol><h3 id="3-2-6-选择正确的索引"><a href="#3-2-6-选择正确的索引" class="headerlink" title="3.2.6 选择正确的索引"></a>3.2.6 选择正确的索引</h3><blockquote><p>降低扫描数据量还是降低排序代价</p></blockquote><p>大多数查询只能使用一个索引, 因此在需要对多个列进行操作的 SQL 语句中, 我们需要准确评估每个索引的开销.</p><ul><li>key idx_create_time(createTime)</li><li>key idx_price(price)<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_order <span class="keyword">WHERE</span> createTime &gt; xxx <span class="keyword">AND</span> createTime &lt; xxx <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2-7-索引的使用"><a href="#3-2-7-索引的使用" class="headerlink" title="3.2.7 索引的使用"></a>3.2.7 索引的使用</h3><h4 id="3-2-7-1-索引字段过长-超过索引支持"><a href="#3-2-7-1-索引字段过长-超过索引支持" class="headerlink" title="3.2.7.1 索引字段过长, 超过索引支持"></a>3.2.7.1 索引字段过长, 超过索引支持</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># name varchar(512)</span><br><span class="line"># ket idx_name(name(100))</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">comment</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> &gt;= <span class="string">'destiny'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span> <span class="keyword">ASC</span> <span class="keyword">LIMIT</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>上面的例子在实际场景中执行非常慢, 使用 EXPLAIN 打印查询计划: </p><pre><code>  select_type: SIMPLE        table: comment         type: rangepossible_keys: id_name          key: uk_sess      key_len: 403          ref: NULL         rows: 462642        Extra:Using where; Using filesort1 row in set(0.00sec)</code></pre><p>其中需要重点关注的是: <code>Extra:Using where; Using filesort</code></p><ul><li>Using where: 表用到了索引</li><li>Using filesort: MySQL 自带的磁盘排序, 并没有用到索引的排序</li></ul><p>问题是为什么使用了索引, 查询效率依然非常慢?</p><p>真正的原因是字段太长, 而索引的长度只能覆盖 256 字节, 导致 ORDER BY 无法在内存中完成排序</p><h4 id="3-2-7-2"><a href="#3-2-7-2" class="headerlink" title="3.2.7.2"></a>3.2.7.2</h4><p>查询某个用户 id 的分值总和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- uid varchar(190) NOT NULL DEFAULT '' COMMENT '用户 id',</span></span><br><span class="line"><span class="comment">-- score bigint(20) NOT NULL DEFAULT '0' COMMENT '变动分值, 正增, 负减',</span></span><br><span class="line"><span class="comment">-- primary key ID</span></span><br><span class="line"><span class="comment">-- KEY idx_uid(uid)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(score) <span class="keyword">FROM</span> <span class="keyword">name</span> <span class="keyword">WHERE</span> uid = <span class="string">'5993156'</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/17758731/51613355-3f3f2300-1f5e-11e9-8736-f60fca4007b1.png" alt="image"></p><p>这条 SQL 的执行顺序:</p><ol><li>根据二级索引 uid 找到所有主键 id</li><li>再根据主键逐行找到 score</li><li>对 score 进行聚合</li></ol><p>这个 SQL 的问题在于需要进行大量的回表操作(从二级索引回到一级索引), 然后将全部符合过滤条件的记录放在内存中完成聚合操作.</p><p>改进的方法其实很简单, 可以尝试使用 (uid, score) 建立联合索引, 这样只需要查询二级索引就可以获得全部数据.</p><p><img src="https://user-images.githubusercontent.com/17758731/51614040-d062c980-1f5f-11e9-9960-41cc62ad6c77.png" alt="image"></p><p>随机插入 100W 条数据, 现在对比下两条索引的开销.</p><p><img src="https://user-images.githubusercontent.com/17758731/51614096-f0928880-1f5f-11e9-8c2d-bc625ffb2eb1.png" alt="image"></p><h2 id="3-3-数据库写开销"><a href="#3-3-数据库写开销" class="headerlink" title="3.3 数据库写开销"></a>3.3 数据库写开销</h2><ul><li>对持久化要求严格, 写操作代价大</li><li>日志文件需要 fsync, 硬件存在瓶颈</li><li>数据库写操作很难扩展</li><li>主从要求一致场景下还要算上网络开销</li></ul><p><img src="https://user-images.githubusercontent.com/17758731/51615980-191c8180-1f64-11e9-95db-355d532b58d5.png" alt="image"></p><ol><li>将 3 所在的数据页读到缓存中;</li><li>在内存中将 3 改成 5, 提交事务, 触发 Redo Log 的刷新;</li><li>向用户返回操作成功;</li></ol><h2 id="3-4-业务场景触发的高并发写入"><a href="#3-4-业务场景触发的高并发写入" class="headerlink" title="3.4 业务场景触发的高并发写入"></a>3.4 业务场景触发的高并发写入</h2><h3 id="3-4-1-秒杀"><a href="#3-4-1-秒杀" class="headerlink" title="3.4.1 秒杀"></a>3.4.1 秒杀</h3><ul><li>高并发写入的极端情况</li><li>业务优化(缓存/令牌通/排队/Java 信号量/乐观锁)</li><li>热点资源隔离</li><li>引入数据库线程池</li><li>InnoDB 内核层优化: AliSQL</li></ul><h3 id="3-4-2-私信-站内信消息推送"><a href="#3-4-2-私信-站内信消息推送" class="headerlink" title="3.4.2 私信/站内信消息推送"></a>3.4.2 私信/站内信消息推送</h3><ul><li>高并发写入</li><li>伴随大量的读请求</li><li>系统消息/个人消息区分对待</li><li>消息内容单独对待</li><li>延迟写入, 通过队列/缓存达到限流目的</li></ul><h3 id="3-4-3-听歌量"><a href="#3-4-3-听歌量" class="headerlink" title="3.4.3 听歌量"></a>3.4.3 听歌量</h3><p><img src="https://user-images.githubusercontent.com/17758731/51684703-a1178f80-2027-11e9-94ef-6f320b852c29.png" alt="image"></p><ul><li>业务原因导致写入量非常大</li><li>插入更新比不确定, 更新能力强</li><li>数据库需要具备自动扩展的能力</li><li>数据非强一致</li></ul><h2 id="3-5-死锁和超时"><a href="#3-5-死锁和超时" class="headerlink" title="3.5 死锁和超时"></a>3.5 死锁和超时</h2><ul><li>InnoDB 锁超时默认需要 5s 等待</li><li>死锁马上就能被发现, 然后被 DB 自动回滚</li><li>锁超时一般是索引不对, 或者 SQL 语句执行性能较差</li><li>死锁一般是业务实现有问题</li><li>锁超时一般影响较为可控</li><li>死锁情况比较严重, 会导致全站崩溃</li></ul><h2 id="3-6-数据库并发事务-锁"><a href="#3-6-数据库并发事务-锁" class="headerlink" title="3.6 数据库并发事务, 锁"></a>3.6 数据库并发事务, 锁</h2><ul><li>业务流程中的锁: 减库存, 发优惠券</li></ul><p>悲观锁实现:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span> <span class="keyword">FROM</span> tb <span class="keyword">WHERE</span> <span class="keyword">id</span> = ? <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="comment">-- do sth</span></span><br><span class="line"><span class="keyword">UPDATE</span> tb <span class="keyword">SET</span> <span class="keyword">count</span> = <span class="keyword">count</span> - ? <span class="keyword">WHERE</span> <span class="keyword">id</span> = ?;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure></p><p>乐观锁实现:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span> <span class="keyword">FROM</span> tb <span class="keyword">WHERE</span> <span class="keyword">id</span> = ?;</span><br><span class="line"><span class="keyword">UPDATE</span> tb <span class="keyword">SET</span> <span class="keyword">count</span> = <span class="keyword">count</span> - ? <span class="keyword">WHERE</span> <span class="keyword">id</span> = ? <span class="keyword">AND</span> <span class="keyword">count</span> = :<span class="keyword">count</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- do sth</span></span><br></pre></td></tr></table></figure></p><h1 id="4-数据库的模块化拆分"><a href="#4-数据库的模块化拆分" class="headerlink" title="4. 数据库的模块化拆分"></a>4. 数据库的模块化拆分</h1><h2 id="4-1-单机服务器的局限"><a href="#4-1-单机服务器的局限" class="headerlink" title="4.1 单机服务器的局限"></a>4.1 单机服务器的局限</h2><ul><li>虽然硬件配置越来越高, 但是总有瓶颈(e.g. CPU/内存/网络/IO/容量)</li><li>为了后续业务的可扩展性</li><li>单机系统崩溃风险较高</li><li>优化性能<ul><li>读写分离</li><li>冷热分离, 创建归档库</li><li>关键链路和非关键链路隔离</li><li>系统层面做好降级</li></ul></li></ul><h2 id="4-2-常见拆分方案"><a href="#4-2-常见拆分方案" class="headerlink" title="4.2 常见拆分方案"></a>4.2 常见拆分方案</h2><h3 id="4-2-1-读写分离"><a href="#4-2-1-读写分离" class="headerlink" title="4.2.1 读写分离"></a>4.2.1 读写分离</h3><p>读写分离的原理就是将数据库读写操作分散到不同的节点上</p><p><img src="https://user-images.githubusercontent.com/17758731/51689739-3586ef80-2032-11e9-8d0a-3bfcb7ac34d3.png" alt="image"></p><p>读写分离的基本原理就是:</p><ul><li>数据库服务器搭建主从集群;</li><li>数据库主机负责写操作, 从机只负责读操作;</li><li>数据库主机通过复制将数据同步到从机, 每台数据库服务器都存储了所有业务数据.</li><li>业务服务器将写操作发给数据库主机, 将读操作发给数据库从机.</li></ul><p>使用读写分离之后, 可能会引入两个问题:</p><ol><li>主从复制延迟</li><li>分配机制</li></ol><h4 id="4-2-1-1-复制延迟"><a href="#4-2-1-1-复制延迟" class="headerlink" title="4.2.1.1 复制延迟"></a>4.2.1.1 复制延迟</h4><p>主从复制的延迟可能达到秒级, 如果有大量数据短时间需要完成同步, 延迟甚至可能达到分钟.</p><p>主从复制所带来的问题: </p><blockquote><p>如果业务服务器将数据写入到主库后进行读取, 此时读操作访问从库, 而主库的数据没有完全复制过来, 从库是无法读取到最新数据的.</p></blockquote><p>解决方案:</p><ol><li>写操作后的读操作指定发给主库, 逻辑会和业务强绑定, 对业务侵入较大.</li><li>读从库失败后再读一次主库, 如果有大量没有命中从库的读请求, 会给主库带来较大压力.</li><li>关键业务读写操作全部走主库, 非关键业务采用读写分离.</li></ol><h4 id="4-2-1-2-分配机制"><a href="#4-2-1-2-分配机制" class="headerlink" title="4.2.1.2 分配机制"></a>4.2.1.2 分配机制</h4><p>将读写操作区分开来, 然后访问不同的数据库服务器, 一般有两种方式: 程序代码封装和中间件封装</p><h5 id="1-程序代码封装"><a href="#1-程序代码封装" class="headerlink" title="1. 程序代码封装"></a>1. 程序代码封装</h5><p>在代码中抽象一个数据访问层, 实现读写操作分离和数据库服务器连接的管理.</p><p><img src="https://user-images.githubusercontent.com/17758731/51787744-9c321780-21b0-11e9-864b-933a0bde94e3.png" alt="image"></p><p>特点:</p><ol><li>实现简单, 可以根据业务定制化;</li><li>无法做到多语言通用, 容易重复开发;</li><li>故障情况下, 如果主从发生切换, 需要将系统配置手动修改.</li></ol><h5 id="2-中间件封装"><a href="#2-中间件封装" class="headerlink" title="2. 中间件封装"></a>2. 中间件封装</h5><p>独立一套系统出来, 实现读写分离和数据库服务器连接的管理, 中间件对业务服务器提供 SQL 兼容的协议, 业务服务器无需自己进行读写分离, 对于业务服务器来说, 访问中间件和访问数据库没有区别</p><p><img src="https://user-images.githubusercontent.com/17758731/51787885-19aa5780-21b2-11e9-8df2-cba6fb8fcc3e.png" alt="image"></p><p>特点:</p><ol><li>能够支持多种编程语言, 因为数据库中间件对业务提供的是标准的 SQL 接口.</li><li>实现较为复杂, 需要完整支持 SQL 语法和数据库服务器的协议.</li><li>性能要求很高, 容易成为瓶颈.</li><li>数据库主从切换对业务服务器无感知, 数据库中间件可以探测数据库服务器的主从状态(e.g. 向某个测试库写入一条数据, 成功的是主机, 失败的是从机)</li></ol><h3 id="4-2-2-分布式"><a href="#4-2-2-分布式" class="headerlink" title="4.2.2 分布式"></a>4.2.2 分布式</h3><p>读写分离分散了读写操作的压力, 但没有分散存储的压力, 当数据量达到千万级以上的时候, 单台数据库服务器的存储能力就会成为瓶颈:</p><ol><li>数据量太大, 读写的性能会大幅下降.</li><li>数据文件备份和恢复都会很困难.</li></ol><p><img src="https://user-images.githubusercontent.com/17758731/51788030-3051ae00-21b4-11e9-99ca-cdd067495813.png" alt="image"></p><ul><li>垂直分表: 适合将某些表中不常用且占用大量空间的列拆分出去. 代价是操作表的数量增加.</li><li>水平拆分: 适合行数较大的表, 会引入更多的复杂度: <code>路由</code>, <code>join 操作</code>, <code>count 操作</code> 等</li></ul>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti源码分析(1)--流程引擎配置类</title>
      <link href="/blog/2018/12/31/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1-%E5%BC%95%E6%93%8E%E9%85%8D%E7%BD%AE%E7%B1%BB/"/>
      <url>/blog/2018/12/31/Activiti%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1-%E5%BC%95%E6%93%8E%E9%85%8D%E7%BD%AE%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>Activiti 配置风格获取引擎源码分析: </p><p>流程引擎管理类 ProcessEngines</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    log.info(<span class="string">"processEngine: &#123;&#125;"</span>, processEngine);   <span class="comment">// org.activiti.engine.impl.ProcessEngineImpl@66ea1466</span></span><br><span class="line">    Class&lt;? extends ProcessEngine&gt; processEngineClass = processEngine.getClass();</span><br><span class="line">    log.info(<span class="string">"class: &#123;&#125;"</span>, processEngineClass);      <span class="comment">// org.activiti.engine.impl.ProcessEngineImpl</span></span><br><span class="line">    DynamicBpmnService dynamicBpmnService = processEngine.getDynamicBpmnService();</span><br><span class="line">    FormService formEngineFormService = processEngine.getFormEngineFormService();</span><br><span class="line">    FormRepositoryService formEngineRepositoryService = processEngine.getFormEngineRepositoryService();</span><br><span class="line">    org.activiti.engine.FormService formService = processEngine.getFormService();</span><br><span class="line">    HistoryService historyService = processEngine.getHistoryService();</span><br><span class="line">    IdentityService identityService = processEngine.getIdentityService();</span><br><span class="line">    ManagementService managementService = processEngine.getManagementService();</span><br><span class="line">    ProcessEngineConfiguration processEngineConfiguration = processEngine.getProcessEngineConfiguration();  <span class="comment">// 流程引擎配置类</span></span><br><span class="line">    RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line">    RuntimeService runtimeService = processEngine.getRuntimeService();                                      <span class="comment">// 运行时</span></span><br><span class="line">    TaskService taskService = processEngine.getTaskService();                                               <span class="comment">// 任务相关</span></span><br><span class="line">    log.info(<span class="string">"dynamicBpmnService: &#123;&#125;"</span>, dynamicBpmnService);                     <span class="comment">// org.activiti.engine.impl.DynamicBpmnServiceImpl@1601e47</span></span><br><span class="line">    log.info(<span class="string">"formEngineFormService: &#123;&#125;"</span>, formEngineFormService);               <span class="comment">// null</span></span><br><span class="line">    log.info(<span class="string">"formEngineRepositoryService: &#123;&#125;"</span>, formEngineRepositoryService);   <span class="comment">// null</span></span><br><span class="line">    log.info(<span class="string">"formService: &#123;&#125;"</span>, formService);                                   <span class="comment">// org.activiti.engine.impl.FormServiceImpl@3bffddff</span></span><br><span class="line">    log.info(<span class="string">"historyService: &#123;&#125;"</span>, historyService);                             <span class="comment">// org.activiti.engine.impl.HistoryServiceImpl@66971f6b</span></span><br><span class="line">    log.info(<span class="string">"identityService: &#123;&#125;"</span>, identityService);                           <span class="comment">// org.activiti.engine.impl.IdentityServiceImpl@50687efb</span></span><br><span class="line">    log.info(<span class="string">"managementService: &#123;&#125;"</span>, managementService);                       <span class="comment">// org.activiti.engine.impl.ManagementServiceImpl@517bd097</span></span><br><span class="line">    log.info(<span class="string">"processEngineConfiguration: &#123;&#125;"</span>, processEngineConfiguration);     <span class="comment">// org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration@142eef62</span></span><br><span class="line">    log.info(<span class="string">"repositoryService: &#123;&#125;"</span>, repositoryService);                       <span class="comment">// org.activiti.engine.impl.RepositoryServiceImpl@4a9cc6cb</span></span><br><span class="line">    log.info(<span class="string">"runtimeService: &#123;&#125;"</span>, runtimeService);                             <span class="comment">// org.activiti.engine.impl.RuntimeServiceImpl@5990e6c5</span></span><br><span class="line">    log.info(<span class="string">"taskService: &#123;&#125;"</span>, taskService);                                   <span class="comment">// org.activiti.engine.impl.TaskServiceImpl@56e07a08</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总的来说流程引擎配置类(ProcessEngineConfiguration) 的获取比较简单, 通过默认配置找到 classpath 下的 activiti.cfg.xml 配置文件, 再将该配置文件使用 Spring 的组件完成读取, 将 id 为 <code>processEngineConfiguration</code> 的 bean 完成初始化并返回.</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/52964570-96a9a500-33dd-11e9-93fb-e677b4d880ff.png" alt="image"></p><h1 id="1-ProcessEngines"><a href="#1-ProcessEngines" class="headerlink" title="1. ProcessEngines"></a>1. ProcessEngines</h1><p>包含四个重要的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;流程引擎名称, 流程引擎实例&gt;</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Map&lt;String, ProcessEngine&gt; processEngines = <span class="keyword">new</span> HashMap&lt;String, ProcessEngine&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;流程引擎名称, 流程引擎信息类实例&gt;</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByName = <span class="keyword">new</span> HashMap&lt;String, ProcessEngineInfo&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;构造流程引擎的资源名称(如文件路径名), 流程引擎信息类实例&gt;</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByResourceUrl = <span class="keyword">new</span> HashMap&lt;String, ProcessEngineInfo&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储流程引擎信息类实例对象</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> List&lt;ProcessEngineInfo&gt; processEngineInfos = <span class="keyword">new</span> ArrayList&lt;ProcessEngineInfo&gt;();</span><br></pre></td></tr></table></figure><h2 id="1-1-getDefaultProcessEngine"><a href="#1-1-getDefaultProcessEngine" class="headerlink" title="1.1. getDefaultProcessEngine"></a>1.1. getDefaultProcessEngine</h2><p>方法体中只有一行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngine <span class="title">getDefaultProcessEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getProcessEngine(NAME_DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类中 NAME_DEFAULT 的值是 <code>default</code></p><h2 id="1-2-getProcessEngine-String-processEngineName"><a href="#1-2-getProcessEngine-String-processEngineName" class="headerlink" title="1.2. getProcessEngine(String processEngineName)"></a>1.2. getProcessEngine(String processEngineName)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngine <span class="title">getProcessEngine</span><span class="params">(String processEngineName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isInitialized()) &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> processEngines.get(processEngineName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>判断该类是否已经被初始化<ol><li>如果没有初始化, 执行 <code>init()</code> 方法</li></ol></li><li>返回 <code>Map&lt;String, ProcessEngine&gt; processEngines</code> 对应 key 的实例对象</li></ol><h3 id="1-2-1-isInitialized"><a href="#1-2-1-isInitialized" class="headerlink" title="1.2.1. isInitialized()"></a>1.2.1. isInitialized()</h3><p>返回类中一个静态常量, 用于标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isInitialized;</span><br></pre></td></tr></table></figure><h2 id="1-3-init"><a href="#1-3-init" class="headerlink" title="1.3. init()"></a>1.3. init()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isInitialized()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (processEngines == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Create new map to store process-engines if current map is</span></span><br><span class="line">            <span class="comment">// null</span></span><br><span class="line">            processEngines = <span class="keyword">new</span> HashMap&lt;String, ProcessEngine&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        ClassLoader classLoader = ReflectUtil.getClassLoader();</span><br><span class="line">        Enumeration&lt;URL&gt; resources = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resources = classLoader.getResources(<span class="string">"activiti.cfg.xml"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"problem retrieving activiti.cfg.xml resources on the classpath: "</span> + System.getProperty(<span class="string">"java.class.path"</span>), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Remove duplicated configuration URL's using set. Some</span></span><br><span class="line">        <span class="comment">// classloaders may return identical URL's twice, causing duplicate</span></span><br><span class="line">        <span class="comment">// startups</span></span><br><span class="line">        Set&lt;URL&gt; configUrls = <span class="keyword">new</span> HashSet&lt;URL&gt;();</span><br><span class="line">        <span class="keyword">while</span> (resources.hasMoreElements()) &#123;</span><br><span class="line">            configUrls.add(resources.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;URL&gt; iterator = configUrls.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">            URL resource = iterator.next();</span><br><span class="line">            log.info(<span class="string">"Initializing process engine using configuration '&#123;&#125;'"</span>, resource.toString());</span><br><span class="line">            initProcessEngineFromResource(resource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resources = classLoader.getResources(<span class="string">"activiti-context.xml"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"problem retrieving activiti-context.xml resources on the classpath: "</span> + System.getProperty(<span class="string">"java.class.path"</span>), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (resources.hasMoreElements()) &#123;</span><br><span class="line">            URL resource = resources.nextElement();</span><br><span class="line">            log.info(<span class="string">"Initializing process engine using Spring configuration '&#123;&#125;'"</span>, resource.toString());</span><br><span class="line">            initProcessEngineFromSpringResource(resource);</span><br><span class="line">        &#125;</span><br><span class="line">        setInitialized(<span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.info(<span class="string">"Process engines already initialized"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>再判断是否已经初始化<ol><li>如果未初始化, 先初始化 <code>Map&lt;String, ProcessEngine&gt; processEngines</code></li><li>获取当前类加载器</li><li>使用该类加载器指定加载 <code>activiti.cfg.xml</code> 路径下的资源, 并保存在 Set 中</li><li>遍历 Set 集合执行 <code>initProcessEngineFromResource(URL resource)</code></li><li>获取 spring 风格配置文件</li><li>将类中 <code>initialized</code> 设置为 true</li></ol></li><li>如果已被初始化, 直接返回</li></ol><h2 id="1-4-initProcessEngineFromResource-URL-resourceUrl"><a href="#1-4-initProcessEngineFromResource-URL-resourceUrl" class="headerlink" title="1.4. initProcessEngineFromResource(URL resourceUrl)"></a>1.4. initProcessEngineFromResource(URL resourceUrl)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessEngineInfo <span class="title">initProcessEngineFromResource</span><span class="params">(URL resourceUrl)</span> </span>&#123;</span><br><span class="line">    ProcessEngineInfo processEngineInfo = processEngineInfosByResourceUrl.get(resourceUrl.toString());</span><br><span class="line">    <span class="comment">// if there is an existing process engine info</span></span><br><span class="line">    <span class="keyword">if</span> (processEngineInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// remove that process engine from the member fields</span></span><br><span class="line">        processEngineInfos.remove(processEngineInfo);</span><br><span class="line">        <span class="keyword">if</span> (processEngineInfo.getException() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String processEngineName = processEngineInfo.getName();</span><br><span class="line">            processEngines.remove(processEngineName);</span><br><span class="line">            processEngineInfosByName.remove(processEngineName);</span><br><span class="line">        &#125;</span><br><span class="line">        processEngineInfosByResourceUrl.remove(processEngineInfo.getResourceUrl());</span><br><span class="line">    &#125;</span><br><span class="line">    String resourceUrlString = resourceUrl.toString();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">"initializing process engine for resource &#123;&#125;"</span>, resourceUrl);</span><br><span class="line">        ProcessEngine processEngine = buildProcessEngine(resourceUrl);</span><br><span class="line">        String processEngineName = processEngine.getName();</span><br><span class="line">        log.info(<span class="string">"initialised process engine &#123;&#125;"</span>, processEngineName);</span><br><span class="line">        processEngineInfo = <span class="keyword">new</span> ProcessEngineInfoImpl(processEngineName, resourceUrlString, <span class="keyword">null</span>);</span><br><span class="line">        processEngines.put(processEngineName, processEngine);</span><br><span class="line">        processEngineInfosByName.put(processEngineName, processEngineInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        log.error(<span class="string">"Exception while initializing process engine: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">        processEngineInfo = <span class="keyword">new</span> ProcessEngineInfoImpl(<span class="keyword">null</span>, resourceUrlString, getExceptionString(e));</span><br><span class="line">    &#125;</span><br><span class="line">    processEngineInfosByResourceUrl.put(resourceUrlString, processEngineInfo);</span><br><span class="line">    processEngineInfos.add(processEngineInfo);</span><br><span class="line">    <span class="keyword">return</span> processEngineInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>根据路径尝试从 <code>Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByResourceUrl</code> 获取流程引擎类实例<ol><li>如果不为空</li><li>将 <code>List&lt;ProcessEngineInfo&gt; processEngineInfos</code> 中对应的元素删除</li><li>流程引擎信息类实例没有 Exception, 将 <code>Map&lt;String, ProcessEngine&gt; processEngines</code> 和 <code>Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByName</code> 中 key 对应的元素都删除</li><li><code>Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByResourceUrl</code> 中 key 对应的元素也删除.</li></ol></li><li>通过 <code>buildProcessEngine</code> 方法获取 ProcessEngine 对象</li><li>将 <code>Map&lt;String, ProcessEngine&gt; processEngines</code> 和 <code>Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByName</code> 设置对应的 key 和 value</li><li>将 <code>Map&lt;String, ProcessEngineInfo&gt; processEngineInfosByResourceUrl</code> 和 <code>List&lt;ProcessEngineInfo&gt; processEngineInfos</code> 也添加对应元素</li></ol><h2 id="1-5-buildProcessEngine-URL-resource"><a href="#1-5-buildProcessEngine-URL-resource" class="headerlink" title="1.5. buildProcessEngine(URL resource)"></a>1.5. buildProcessEngine(URL resource)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessEngine <span class="title">buildProcessEngine</span><span class="params">(URL resource)</span> </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream = resource.openStream();</span><br><span class="line">        ProcessEngineConfiguration processEngineConfiguration = ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream);</span><br><span class="line">        <span class="keyword">return</span> processEngineConfiguration.buildProcessEngine();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"couldn't open resource stream: "</span> + e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtil.closeSilently(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过传入的 URL 获取输入流;</li><li>通过 <code>createProcessEngineConfigurationFromInputStream()</code> 方法获取流程引擎配置对象</li><li>根据流程引擎配置类实例返回流程引擎实例</li><li>关闭流</li></ol><h1 id="2-ProcessEngineConfiguration-类"><a href="#2-ProcessEngineConfiguration-类" class="headerlink" title="2. ProcessEngineConfiguration 类"></a>2. ProcessEngineConfiguration 类</h1><h2 id="2-1-createProcessEngineConfigurationFromInputStream-InputStream-inputStream"><a href="#2-1-createProcessEngineConfigurationFromInputStream-InputStream-inputStream" class="headerlink" title="2.1. createProcessEngineConfigurationFromInputStream(InputStream inputStream)"></a>2.1. createProcessEngineConfigurationFromInputStream(InputStream inputStream)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngineConfiguration <span class="title">createProcessEngineConfigurationFromInputStream</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createProcessEngineConfigurationFromInputStream(inputStream, <span class="string">"processEngineConfiguration"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法只有一行, 用来添加默认的 beanName: <code>processEngineConfiguration</code></p><p>这个 beanName 非常重要, Activiti 要求在配置文件中必须完成 id 为 <code>processEngineConfiguration</code> 的 bean</p><h2 id="2-2-createProcessEngineConfigurationFromInputStream-InputStream-inputStream-String-beanName"><a href="#2-2-createProcessEngineConfigurationFromInputStream-InputStream-inputStream-String-beanName" class="headerlink" title="2.2. createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName)"></a>2.2. createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngineConfiguration <span class="title">createProcessEngineConfigurationFromInputStream</span><span class="params">(InputStream inputStream, String beanName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BeansConfigurationHelper.parseProcessEngineConfigurationFromInputStream(inputStream, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-BeansConfigurationHelper-类"><a href="#3-BeansConfigurationHelper-类" class="headerlink" title="3. BeansConfigurationHelper 类"></a>3. BeansConfigurationHelper 类</h1><h2 id="3-1-parseProcessEngineConfigurationFromInputStream-InputStream-inputStream-String-beanName"><a href="#3-1-parseProcessEngineConfigurationFromInputStream-InputStream-inputStream-String-beanName" class="headerlink" title="3.1. parseProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName)"></a>3.1. parseProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngineConfiguration <span class="title">parseProcessEngineConfigurationFromInputStream</span><span class="params">(InputStream inputStream, String beanName)</span> </span>&#123;</span><br><span class="line">    Resource springResource = <span class="keyword">new</span> InputStreamResource(inputStream);</span><br><span class="line">    <span class="keyword">return</span> parseProcessEngineConfiguration(springResource, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>将输入流转化为 <code>org.springframework.core.io.Resource</code>, Spring 的资源抽象接口, 用于后续的 spring 风格配置文件解析;</li><li>将配置文件解析为 bean, 最终构造 ProcessEngineConfiguration 并返回</li></ol><h2 id="3-2-parseProcessEngineConfiguration-Resource-springResource-String-beanName"><a href="#3-2-parseProcessEngineConfiguration-Resource-springResource-String-beanName" class="headerlink" title="3.2. parseProcessEngineConfiguration(Resource springResource, String beanName)"></a>3.2. parseProcessEngineConfiguration(Resource springResource, String beanName)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngineConfiguration <span class="title">parseProcessEngineConfiguration</span><span class="params">(Resource springResource, String beanName)</span> </span>&#123;</span><br><span class="line">    DefaultListableBeanFactory beanFactory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line">    XmlBeanDefinitionReader xmlBeanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line">    xmlBeanDefinitionReader.setValidationMode(XmlBeanDefinitionReader.VALIDATION_XSD);</span><br><span class="line">    xmlBeanDefinitionReader.loadBeanDefinitions(springResource);</span><br><span class="line">    ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) beanFactory.getBean(beanName);</span><br><span class="line">    processEngineConfiguration.setBeans(<span class="keyword">new</span> SpringBeanFactoryProxyMap(beanFactory));</span><br><span class="line">    <span class="keyword">return</span> processEngineConfiguration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建 BeanFactory;</li><li>创建 XmlBeanDefinitionReader, 用于读取 XML 中的 bean 定义;</li><li>指定 XML 验证方式为 XSD;</li><li>读取配置文件资源;</li><li>根据 beanName 从 beanFactory 中获取指定对象, 并强转为 ProcessEngineConfigurationImpl;</li></ol><h1 id="4-回到-ProcessEngines-类中"><a href="#4-回到-ProcessEngines-类中" class="headerlink" title="4. 回到 ProcessEngines 类中"></a>4. 回到 ProcessEngines 类中</h1><p>此时已经完成了 <code>ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream);</code> 的执行, 得到了 ProcessEngineConfiguration 对象, 接下来调用 <code>processEngineConfiguration.buildProcessEngine()</code> 来获取 ProcessEngine 并返回.</p>]]></content>
      
      <categories>
          
          <category> activiti </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti(7)--加签功能的实现</title>
      <link href="/blog/2018/12/23/Activiti-7-%E5%8A%A0%E7%AD%BE%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/blog/2018/12/23/Activiti-7-%E5%8A%A0%E7%AD%BE%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>加签的概念</p><p>思路:</p><ol><li>直接需改模板, 在模板中添加节点以及连线, 并修改实例的走向;</li><li>直接修改路程定义对应的缓存数据, 不修改模板, 新增节点与当前需要加签的实例挂钩.</li></ol><h1 id="1-方案一"><a href="#1-方案一" class="headerlink" title="1. 方案一"></a>1. 方案一</h1><h2 id="1-1-实现方式"><a href="#1-1-实现方式" class="headerlink" title="1.1. 实现方式"></a>1.1. 实现方式</h2><ol><li>找到当前实例对象的模板数据</li><li>在模板数据的基础上添加新节点以及修改连线, 并更新数据库中的模板.</li><li>更新模板对应的流程定义缓存, 必须更新缓存否则加签的节点不会生效. 因为 Activiti 在查找流程定义的时候会先尝试从缓存中进行获取.</li><li>完成新增节点额任务后, 再把新增节点以及连线删除, 即还原模板.</li></ol><h2 id="1-2-优缺点"><a href="#1-2-优缺点" class="headerlink" title="1.2. 优缺点"></a>1.2. 优缺点</h2><ul><li>模板是共享的, 因此修改模板就会将所有运行实例对象的模板修改.</li><li>实例间应该相互独立, 不能让针对某个实例的加签影响到其他实例.</li><li>修改模板容易导致当前实例影响其他实例, 因此该方案不可取;</li></ul><h1 id="2-方案二"><a href="#2-方案二" class="headerlink" title="2. 方案二"></a>2. 方案二</h1><ul><li>模板是共享的, 因此不能修改模板, 否则会影响其他实例.</li><li>也不需要修改原有流程的入线即出线, 不修改原有的走向.</li></ul><blockquote><p>由于流程运转的过程中, 需要实时的获取该实例对应的模板数据才能知道应该如何运转.</p><ol><li>从流程定义缓存中获取模板数据</li><li>如果流程定义缓存丢失, 则需要重新执行模板的解析工作并补充到流程定义缓存中.</li></ol></blockquote><p>因此可以直接修改流程定义缓存数据.</p><h2 id="2-1-思路"><a href="#2-1-思路" class="headerlink" title="2.1. 思路"></a>2.1. 思路</h2><p><img src="https://user-images.githubusercontent.com/17758731/53721331-f7d17e00-3e9d-11e9-9680-6d8d463a5ad6.png" alt="image"></p><ol><li>在流程缓存中添加一个任务节点, 并未任务节点添加出线信息, 出线连接的是需要到达的目标节点.</li><li>添加的目标节点并没有入线, 并不会影响其他实例, 因此其他流程没有机会走到该节点.</li><li>加签完成后触发执行实例走到新增的任务节点, 这样当前实例就按照最新的路线进行运转;</li><li>如果当前节点在加签后不想直接运转到最新节点, 则可以复制一个当前节点, 继续让流程运转.</li><li>加签的最终目的是让实例按照最新的路线走, 与模板中规划的路线脱离关系.</li></ol><p><img src="https://user-images.githubusercontent.com/17758731/53721687-c4dbba00-3e9e-11e9-9432-0223776ba620.png" alt="image"></p><h2 id="2-2-引入的问题"><a href="#2-2-引入的问题" class="headerlink" title="2.2. 引入的问题"></a>2.2. 引入的问题</h2><ol><li>新增的任务节点及连线如何存储</li><li>流程定义缓存如何修改</li><li>加签的节点以及连线信息如何持久化</li><li>如果我们重新修改的流程定义缓存丢失, 引擎依然会解析数据库中保存的原有定义, 新增的节点并没有持久化到 DB</li><li>流程实例结束后, 当前加签的节点以及连线如何删除.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddOneTask</span><span class="params">(String taskId, String targetActivityId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前的任务</span></span><br><span class="line">    TaskEntity taskEntity = (TaskEntity) activitiRule.getTaskService().createTaskQuery().taskId(taskId).singleResult();</span><br><span class="line">    log.info(<span class="string">"taskEntity: &#123;&#125;"</span>, taskEntity);</span><br><span class="line">    String processDefinitionId = taskEntity.getProcessDefinitionId();</span><br><span class="line">    ManagementService managementService = activitiRule.getManagementService();</span><br><span class="line">    Process process = managementService.executeCommand(<span class="keyword">new</span> GetProcessCmd(processDefinitionId));</span><br><span class="line">    log.info(<span class="string">"process: &#123;&#125;"</span>, process);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建新节点</span></span><br><span class="line">    UserTask userTask = <span class="keyword">new</span> UserTask();</span><br><span class="line">    userTask.setId(<span class="string">"destinyD"</span>);</span><br><span class="line">    userTask.setName(<span class="string">"加签节点 destinyD"</span>);</span><br><span class="line">    userTask.setAssignee(<span class="string">"destiny-d"</span>);</span><br><span class="line">    userTask.setBehavior(createUserTaskBehavior(userTask));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新节点的目标连线</span></span><br><span class="line">    SequenceFlow sequenceFlow = <span class="keyword">new</span> SequenceFlow();</span><br><span class="line">    sequenceFlow.setId(<span class="string">"extra"</span>);</span><br><span class="line">    userTask.setOutgoingFlows(Arrays.asList(sequenceFlow));</span><br><span class="line">    sequenceFlow.setTargetFlowElement(process.getFlowElement(targetActivityId));</span><br><span class="line">    sequenceFlow.setTargetRef(targetActivityId);</span><br><span class="line"></span><br><span class="line">    process.addFlowElement(userTask);</span><br><span class="line">    process.addFlowElement(sequenceFlow);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新缓存</span></span><br><span class="line">    ProcessDefinitionCacheEntry processDefinitionCacheEntry = managementService.executeCommand(<span class="keyword">new</span> GetProcessDefinitionCacheEntryCmd(processDefinitionId));</span><br><span class="line">    processDefinitionCacheEntry.setProcess(process);</span><br><span class="line">    Process processCache = managementService.executeCommand(<span class="keyword">new</span> GetProcessDefinitionCacheEntryCmd(processDefinitionId)).getProcess();</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"processCache: &#123;&#125;"</span>, processCache);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳转</span></span><br><span class="line">    managementService.executeCommand(<span class="keyword">new</span> JumpCmd(taskId, userTask.getId()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但该方法产生跳转后的新 task 仍然无法提交, 会报一下错误:</p><pre><code>17:59:18.971 [main] [ERROR] Error while closing command context  o.a.e.i.i.CommandContext.logException:122org.activiti.engine.ActivitiException: Programmatic error: no current flow element found or invalid type: null. Halting.at org.activiti.engine.impl.agenda.TriggerExecutionOperation.run(TriggerExecutionOperation.java:49)at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperation(CommandInvoker.java:73)at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperations(CommandInvoker.java:57)at org.activiti.engine.impl.interceptor.CommandInvoker.execute(CommandInvoker.java:42)at org.activiti.engine.impl.interceptor.TransactionContextInterceptor.execute(TransactionContextInterceptor.java:48)at org.activiti.engine.impl.interceptor.CommandContextInterceptor.execute(CommandContextInterceptor.java:63)at org.activiti.engine.impl.interceptor.LogInterceptor.execute(LogInterceptor.java:29)at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:44)at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:39)at org.activiti.engine.impl.TaskServiceImpl.complete(TaskServiceImpl.java:182)at org.destiny.activiti.addsign1.ClientTest.complete(ClientTest.java:56)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)at org.activiti.engine.test.ActivitiRule$1.evaluate(ActivitiRule.java:116)</code></pre><p>出线错误的原因是加签方法执行完成后, 缓存中的数据已经被释放, complete 的时候无法继续, 需要在 complete 之前重新向缓存中添加之前的节点和连线</p><p>在修改流程定义缓存而不修改模板的实现中, 我们需要一个额外的持久化方式去实现加签部分的持久化</p><h2 id="2-3-持久化加签现场数据"><a href="#2-3-持久化加签现场数据" class="headerlink" title="2.3. 持久化加签现场数据"></a>2.3. 持久化加签现场数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ACT_ADD_SIGN`</span> (</span><br><span class="line">  <span class="string">`ID_`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`PROCESS_DEFINITION_ID_`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'流程定义 ID'</span>,</span><br><span class="line">  <span class="string">`ASSIGNEE_`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'操作人 ID'</span>,</span><br><span class="line">  <span class="string">`ACT_ID_`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'活动 ID'</span>,</span><br><span class="line">  <span class="string">`PROCESS_INSTANCE_`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'流程实例 ID'</span>,</span><br><span class="line">  <span class="string">`PROPERTIES_TEXT_`</span> <span class="built_in">varchar</span>(<span class="number">2000</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'参数'</span>,</span><br><span class="line">  <span class="string">`STATE_`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'状态位, 0-有效, 1-无效'</span>,</span><br><span class="line">  <span class="string">`CREATE_TIME`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`ID_`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><p>以及对应的 Mapper 文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AddSignMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from ACT_ADD_SIGN where STATE_ = 0 AND PROCESS_INSTANCE_ID_ = #&#123;processInstanceId&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"id"</span>, column = <span class="string">"ID_"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"processDefinitionId"</span>, column = <span class="string">"PROCESS_DEFINITION_ID_"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"assignee"</span>, column = <span class="string">"ASSIGNEE_"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"processInstanceId"</span>, column = <span class="string">"PROCESS_INSTANCE_ID_"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"propertiesText"</span>, column = <span class="string">"PROPERTIES_TEXT_"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"state"</span>, column = <span class="string">"STATE_"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"createTime"</span>, column = <span class="string">"CREATE_TIME_"</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;AddSign&gt; <span class="title">find</span><span class="params">(String processInstanceId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into act_creation(PROCESS_DEFINITION_ID_, PROCESS_INSTANCE_ID_, PROPERTIES_TEXT_, CREATE_TIME_) values(#&#123;processDefinitionId&#125;, #&#123;processInstanceId&#125;, #&#123;propertiesText&#125;, #&#123;createTime&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(AddSign addSign)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-模型定义"><a href="#2-4-模型定义" class="headerlink" title="2.4. 模型定义"></a>2.4. 模型定义</h2><h3 id="2-4-1-AddSign"><a href="#2-4-1-AddSign" class="headerlink" title="2.4.1. AddSign"></a>2.4.1. AddSign</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddSign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String processDefinitionId; <span class="comment">// 流程定义 id</span></span><br><span class="line">    <span class="keyword">private</span> String assignee;            <span class="comment">// 加签用户</span></span><br><span class="line">    <span class="keyword">private</span> String activityId;          <span class="comment">// 节点 id</span></span><br><span class="line">    <span class="keyword">private</span> String processInstanceId;   <span class="comment">// 流程实例 id</span></span><br><span class="line">    <span class="keyword">private</span> String propertiesText;      <span class="comment">// 参数(复合字段)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;                  <span class="comment">// 状态 0-可用, 1-不可用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> createTime;            <span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-TaskModel"><a href="#2-4-2-TaskModel" class="headerlink" title="2.4.2. TaskModel"></a>2.4.2. TaskModel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskModel</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String assignee;    <span class="comment">// 处理人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type = <span class="number">1</span>;       <span class="comment">// 任务类型, 1-任务节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-TmpActivityModel"><a href="#2-4-3-TmpActivityModel" class="headerlink" title="2.4.3. TmpActivityModel"></a>2.4.3. TmpActivityModel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TmpActivityModel</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String activityIds;     <span class="comment">// 加签的节点id, 多个的话逗号分隔</span></span><br><span class="line">    <span class="keyword">private</span> String firstId;</span><br><span class="line">    <span class="keyword">private</span> String lastId;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TaskModel&gt; activityList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-加签功能实现类"><a href="#2-5-加签功能实现类" class="headerlink" title="2.5. 加签功能实现类"></a>2.5. 加签功能实现类</h2><p><img src="https://user-images.githubusercontent.com/17758731/53778078-75e16380-3f36-11e9-91e6-ae241c08447a.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddSignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> procDefId     流程定义 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> procInstId    流程实例 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processEngine 流程引擎</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskModelList 加签节点列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstNodeId   加签开始节点 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastNodeId    加签结束节点 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> persistence   是否持久化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onset         是否需要立即跳转</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskId        taskID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetNodeId  跳转的目标节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUserTask</span><span class="params">(String procDefId, String procInstId, ProcessEngine processEngine, List&lt;TaskModel&gt; taskModelList,</span></span></span><br><span class="line"><span class="function"><span class="params">                            String firstNodeId, String lastNodeId, <span class="keyword">boolean</span> persistence, <span class="keyword">boolean</span> onset, String taskId, String targetNodeId)</span> </span>&#123;</span><br><span class="line">        ManagementService managementService = processEngine.getManagementService();</span><br><span class="line">        ProcessDefinitionCacheEntry processDefinitionCacheEntry = managementService.executeCommand(<span class="keyword">new</span> GetProcessDefinitionCacheEntryCmd(procDefId));</span><br><span class="line">        <span class="comment">// 通过缓存获取</span></span><br><span class="line">        Process process = processDefinitionCacheEntry.getProcess();</span><br><span class="line">        <span class="comment">// 批量生成任务, 循环遍历 TaskModel</span></span><br><span class="line">        List&lt;UserTask&gt; userTaskList = Lists.newArrayList();</span><br><span class="line">        taskModelList.forEach(taskModel -&gt; &#123;</span><br><span class="line">            UserTask userTask = ActivityUtils.convertToUserTask(taskModel, processEngine);</span><br><span class="line">            userTaskList.add(userTask);</span><br><span class="line">            process.addFlowElement(userTask);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 构造并添加连线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userTaskList.size(); ++i) &#123;</span><br><span class="line">            UserTask userTask = userTaskList.get(i);</span><br><span class="line">            SequenceFlow sequenceFlow = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == userTaskList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果是最后一个节点</span></span><br><span class="line">                sequenceFlow = ActivityUtils.buildSequenceFlow(userTask.getId() + <span class="string">"--&gt;"</span> + lastNodeId,</span><br><span class="line">                        userTask.getId() + <span class="string">"--&gt;"</span> + lastNodeId, userTask.getId(), lastNodeId);</span><br><span class="line">                sequenceFlow.setTargetRef(lastNodeId);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果不是最后一个</span></span><br><span class="line">                ActivityUtils.buildSequenceFlow(userTask.getId() + <span class="string">"--&gt;"</span> + userTaskList.get(i + <span class="number">1</span>).getId(),</span><br><span class="line">                        userTask.getId() + <span class="string">"--&gt;"</span> + userTaskList.get(i + <span class="number">1</span>).getId(),</span><br><span class="line">                        userTask.getId(), userTaskList.get(i + <span class="number">1</span>).getId());</span><br><span class="line">                sequenceFlow.setTargetFlowElement(userTaskList.get(i + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            userTask.setOutgoingFlows(Arrays.asList());</span><br><span class="line">            process.addFlowElement(sequenceFlow);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"process: &#123;&#125;"</span>, process);</span><br><span class="line">        <span class="comment">// 更新缓存</span></span><br><span class="line">        processDefinitionCacheEntry.setProcess(process);</span><br><span class="line">        <span class="comment">// 如果需要立即生效(直接跳转)</span></span><br><span class="line">        <span class="keyword">if</span> (onset) &#123;</span><br><span class="line">            managementService.executeCommand(<span class="keyword">new</span> JumpCmd(taskId, targetNodeId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果需要持久化</span></span><br><span class="line">        <span class="keyword">if</span> (persistence) &#123;</span><br><span class="line">            persistenceToDB(procDefId, procInstId, firstNodeId, lastNodeId, taskModelList, processEngine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将加签的任务节点添加到数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> procDefId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> procInstId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstNodeId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastNodeId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskModelList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processEngine</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">persistenceToDB</span><span class="params">(String procDefId, String procInstId, String firstNodeId, String lastNodeId, List&lt;TaskModel&gt; taskModelList, ProcessEngine processEngine)</span> </span>&#123;</span><br><span class="line">        ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) processEngine.getProcessEngineConfiguration();</span><br><span class="line">        SqlSession sqlSession = processEngineConfiguration.getSqlSessionFactory().openSession();</span><br><span class="line">        AddSignMapper mapper = sqlSession.getMapper(AddSignMapper.class);</span><br><span class="line">        TmpActivityModel tmpActivityModel = <span class="keyword">new</span> TmpActivityModel();</span><br><span class="line">        tmpActivityModel.setFirstId(firstNodeId);</span><br><span class="line">        tmpActivityModel.setLastId(lastNodeId);</span><br><span class="line">        tmpActivityModel.setActivityList(taskModelList);</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (TaskModel taskModel : taskModelList) &#123;</span><br><span class="line">            stringBuilder.append(taskModel.getId() + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        tmpActivityModel.setActivityIds(stringBuilder.toString());</span><br><span class="line"></span><br><span class="line">        AddSign addSign = <span class="keyword">new</span> AddSign();</span><br><span class="line">        addSign.setProcessDefinitionId(procDefId);</span><br><span class="line">        addSign.setProcessInstanceId(procInstId);</span><br><span class="line">        addSign.setPropertiesText(JSON.toJSONString(tmpActivityModel));</span><br><span class="line">        addSign.setCreateTime(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">int</span> insert = mapper.insert(addSign);</span><br><span class="line">        log.info(<span class="string">"insert 结果: &#123;&#125;"</span>, insert);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-测试代码"><a href="#2-6-测试代码" class="headerlink" title="2.6. 测试代码"></a>2.6. 测试代码</h2><p>部署流程后, 通过测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSignTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String taskId = <span class="string">"17508"</span>;</span><br><span class="line">    TaskEntity taskEntity = (TaskEntity) activitiRule.getTaskService().createTaskQuery()</span><br><span class="line">            .taskId(taskId)</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"taskEntity: &#123;&#125;"</span>, taskEntity);</span><br><span class="line">    String firstNodeId = <span class="string">"destinyA"</span>;</span><br><span class="line">    String lastNodeId = <span class="string">"destinyB"</span>;</span><br><span class="line">    List&lt;TaskModel&gt; taskModelList = Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">    TaskModel taskModel1 = ActivityUtils.buildTaskModel(<span class="string">"destinyD"</span>, <span class="string">"destinyD"</span>, <span class="string">"destiny-d"</span>);</span><br><span class="line">    TaskModel taskModel2 = ActivityUtils.buildTaskModel(<span class="string">"destinyD"</span>, <span class="string">"destinyD"</span>, <span class="string">"destiny-d"</span>);</span><br><span class="line"></span><br><span class="line">    taskModelList.add(taskModel1);</span><br><span class="line">    taskModelList.add(taskModel2);</span><br><span class="line"></span><br><span class="line">    AddSignService addSignService = <span class="keyword">new</span> AddSignService();</span><br><span class="line">    addSignService.addUserTask(taskEntity.getProcessDefinitionId(), taskEntity.getProcessInstanceId(),</span><br><span class="line">            activitiRule.getProcessEngine(), taskModelList, firstNodeId, lastNodeId, <span class="keyword">true</span>, <span class="keyword">true</span>,</span><br><span class="line">            taskEntity.getId(), taskModelList.get(<span class="number">0</span>).getId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结束后我们就已经将 <code>destinyD -&gt; destinyE</code> 两个节点加签到 <code>destinyA</code> 之后, <code>destinyB</code> 之前.</p><p><code>select NAME_ from ACT_RU_TASK where PROC_INST_ID_ = &#39;17504&#39;;</code> 的执行结果已经变成: <code>destinyD</code></p><p>现在已经完成了加签的一部分代码, 但此时的任务是不能被正确提交的, 会报如下异常:</p><pre><code>org.activiti.engine.ActivitiException: Programmatic error: no current flow element found or invalid type: null. Halting.at org.activiti.engine.impl.agenda.TriggerExecutionOperation.run(TriggerExecutionOperation.java:49)at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperation(CommandInvoker.java:73)at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperations(CommandInvoker.java:57)at org.activiti.engine.impl.interceptor.CommandInvoker.execute(CommandInvoker.java:42)at org.activiti.engine.impl.interceptor.TransactionContextInterceptor.execute(TransactionContextInterceptor.java:48)at org.activiti.engine.impl.interceptor.CommandContextInterceptor.execute(CommandContextInterceptor.java:63)at org.activiti.engine.impl.interceptor.LogInterceptor.execute(LogInterceptor.java:29)at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:44)at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:39)at org.activiti.engine.impl.TaskServiceImpl.complete(TaskServiceImpl.java:182)at org.destiny.activiti.addsign1.ClientTest.complete(ClientTest.java:61)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)at org.activiti.engine.test.ActivitiRule$1.evaluate(ActivitiRule.java:116)</code></pre><h2 id="2-7-流程引擎启动时从-DB-加载流程定义信息"><a href="#2-7-流程引擎启动时从-DB-加载流程定义信息" class="headerlink" title="2.7. 流程引擎启动时从 DB 加载流程定义信息"></a>2.7. 流程引擎启动时从 DB 加载流程定义信息</h2><p>当流程引擎启动的时候, 如果 <code>ACT_ADD_SIGN</code> 表有数据, 就需要将对应的加签现场数据保存并添加到缓存中.</p>]]></content>
      
      <categories>
          
          <category> Activiti </category>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti(5)--任意节点跳转</title>
      <link href="/blog/2018/12/22/Activiti-5-%E4%BB%BB%E6%84%8F%E8%8A%82%E7%82%B9%E8%B7%B3%E8%BD%AC/"/>
      <url>/blog/2018/12/22/Activiti-5-%E4%BB%BB%E6%84%8F%E8%8A%82%E7%82%B9%E8%B7%B3%E8%BD%AC/</url>
      <content type="html"><![CDATA[<h1 id="1-任意节点跳转以及原理"><a href="#1-任意节点跳转以及原理" class="headerlink" title="1. 任意节点跳转以及原理"></a>1. 任意节点跳转以及原理</h1><ul><li>常规节点跳转<ul><li>跳转到目标节点</li><li>跳转到目标节点的入线</li><li>跳转到目标节点的上一个节点并触发连线的条件计算</li></ul></li><li>多实例节点的跳转<ul><li>普通节点跳转到多实例节点</li><li>多实例节点跳转到普通节点</li></ul></li></ul><p>比如总经理审批节点跳转到请假申请节点:</p><p><img src="https://user-images.githubusercontent.com/17758731/50369657-2bf20e00-05d4-11e9-9af3-9416a020adae.png" alt="image"></p><p>思路:</p><ol><li>可以获取总经理审批节点对应的任务 ID, 实例 ID, 执行实例 ID</li><li>可以通过 <code>planContiuneProcessInCompensation</code> 方法让当前执行的实例按照我们预期的效果流转</li><li>我们可以将当前执行实例中的 <code>currentFlowElement</code> 字段设置为 <code>请假申请</code> 节点 XML 中的 id 值;</li><li>因为执行实例运转之后, 当前的任务节点并没有被删除, 所以需要手工删除;</li><li>历史表跳转之前的任务节点也不会被完成, 需要手工进行完成.</li></ol><h2 id="1-1-实现方案"><a href="#1-1-实现方案" class="headerlink" title="1.1. 实现方案"></a>1.1. 实现方案</h2><ul><li>获取 <code>ActivitiEngineAgenda</code></li><li><code>commandContext.getExecutionEntityManager()</code> 获取 ExecutionEntityManager</li><li><code>commandContext.getTaskEntityManager()</code> 获取 TaskEntityManager</li><li>设置执行实例的运行节点</li><li>触发执行实例运转</li><li>设置删除当前的任务节点</li><li>更新历史实例表以及历史任务表, 当前的任务节点为完成状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpCmd</span> <span class="keyword">implements</span> <span class="title">Command</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String taskId;</span><br><span class="line">    <span class="keyword">private</span> String targetNodeId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">        ActivitiEngineAgenda agenda = commandContext.getAgenda();</span><br><span class="line">        TaskEntityManager taskEntityManager = commandContext.getTaskEntityManager();</span><br><span class="line">        TaskEntity taskEntity = taskEntityManager.findById(taskId);</span><br><span class="line">        <span class="comment">// 执行实例 id</span></span><br><span class="line">        String executionId = taskEntity.getExecutionId();</span><br><span class="line">        String processDefinitionId = taskEntity.getProcessDefinitionId();</span><br><span class="line">        ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();</span><br><span class="line">        HistoryManager historyManager = commandContext.getHistoryManager();</span><br><span class="line">        <span class="comment">// 执行实例对象</span></span><br><span class="line">        ExecutionEntity executionEntity = executionEntityManager.findById(executionId);</span><br><span class="line">        Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);</span><br><span class="line">        FlowElement flowElement = process.getFlowElement(targetNodeId);</span><br><span class="line">        <span class="keyword">if</span> (flowElement == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"目标节点不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将历史活动表更新</span></span><br><span class="line">        historyManager.recordActivityEnd(executionEntity, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="comment">// 设置当前流程</span></span><br><span class="line">        executionEntity.setCurrentFlowElement(flowElement);</span><br><span class="line">        <span class="comment">// 跳转, 触发执行实例运转</span></span><br><span class="line">        agenda.planContinueProcessInCompensation(executionEntity);</span><br><span class="line">        <span class="comment">// 从runtime 表中删除当前任务</span></span><br><span class="line">        taskEntityManager.delete(taskId);</span><br><span class="line">        <span class="comment">// 将历史任务表更新, 历史任务标记为完成</span></span><br><span class="line">        historyManager.recordTaskEnd(taskId, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-测试场景"><a href="#1-2-测试场景" class="headerlink" title="1.2. 测试场景"></a>1.2. 测试场景</h2><p>假设有如下流程定义:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"userTask1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask1"</span> <span class="attr">name</span>=<span class="string">"userTask1"</span> <span class="attr">activiti:assignee</span>=<span class="string">"destiny1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"userTask1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask2"</span> <span class="attr">name</span>=<span class="string">"userTask2"</span> <span class="attr">activiti:assignee</span>=<span class="string">"destiny2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow3"</span> <span class="attr">sourceRef</span>=<span class="string">"userTask2"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结构如下:</p><pre><code>start -&gt; userTask1 -&gt; userTask2 -&gt; end</code></pre><p>使用如下的执行顺序:</p><ol><li>startProcessInstance</li><li>complete 任务 userTask1</li><li>执行 <code>ManagementService().executeCommand(new JumpCmd(&quot;7502&quot;, &quot;userTask1&quot;))</code></li><li>complete 任务 userTask1</li><li>执行 <code>ManagementService().executeCommand(new JumpCmd(&quot;7502&quot;, &quot;userTask1&quot;))</code></li></ol><p>然后查询 <code>ACT_HI_ACTINST</code> 表, 能够看到如下执行轨迹:</p><table><thead><tr><th>ID_</th><th>PROC_DEF_ID_</th><th>PROC_INST_ID_</th><th>EXECUTION_ID_</th><th>ACT_ID_</th><th>TASK_ID_</th><th>CALL_PROC_INST_ID_</th><th>ACT_NAME_</th><th>ACT_NAME_</th><th>ASSIGNEE_</th><th>START_TIME_</th><th>END_TIME_</th><th>DURATION_</th><th>DELETE_REASON_</th><th>TENANT_ID_</th></tr></thead><tbody><tr><td>6</td><td>my-process:1:3</td><td>4</td><td>5</td><td>start</td><td></td><td></td><td>startEvent</td><td></td><td>2019-03-04 00:37:54.328</td><td>2019-03-04 00:37:54.330</td><td>2</td><td>“”</td></tr><tr><td>7</td><td>my-process:1:3</td><td>4</td><td>5</td><td>userTask1</td><td>8</td><td></td><td>userTask1</td><td>userTask</td><td>destiny1</td><td>2019-03-04 00:37:54.331</td><td>2019-03-04 00:38:19.920</td><td>25589</td><td></td><td>“”</td></tr><tr><td>2501</td><td>my-process:1:3</td><td>4</td><td>5</td><td>userTask2</td><td>2502</td><td></td><td>userTask2</td><td>userTask</td><td>destiny2</td><td>2019-03-04 00:38:19.933</td><td>2019-03-04 00:38:44.834</td><td>24901</td><td>jump</td><td>“”</td></tr><tr><td>5001</td><td>my-process:1:3</td><td>4</td><td>5</td><td>userTask1</td><td>5002</td><td></td><td>userTask1</td><td>userTask</td><td>destiny1</td><td>2019-03-04 00:38:44.848</td><td>2019-03-04 00:39:02.232</td><td>17384</td><td></td><td>“”</td></tr><tr><td>7501</td><td>my-process:1:3</td><td>4</td><td>5</td><td>userTask2</td><td>7502</td><td></td><td>userTask2</td><td>userTask</td><td>destiny2</td><td>2019-03-04 00:39:02.245</td><td>2019-03-04 00:39:19.718</td><td>17473</td><td>jump</td><td>“”</td></tr><tr><td>10001</td><td>my-process:1:3</td><td>4</td><td>5</td><td>userTask1</td><td>10002</td><td>userTask1</td><td>userTask</td><td>destiny1</td><td>2019-03-04 00:39:19.743</td><td></td><td></td><td></td><td>“”</td></tr></tbody></table><p>可以看到我们已经完成了简单条件下的跳转</p><h2 id="1-3-关于自由跳转时历史活动不更新问题的解决"><a href="#1-3-关于自由跳转时历史活动不更新问题的解决" class="headerlink" title="1.3. 关于自由跳转时历史活动不更新问题的解决"></a>1.3. 关于自由跳转时历史活动不更新问题的解决</h2><p>之前遇到一个错误的写法: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpCmd</span> <span class="keyword">implements</span> <span class="title">Command</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String taskId;</span><br><span class="line">    <span class="keyword">private</span> String targetNodeId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">        ActivitiEngineAgenda agenda = commandContext.getAgenda();</span><br><span class="line">        TaskEntityManager taskEntityManager = commandContext.getTaskEntityManager();</span><br><span class="line">        TaskEntity taskEntity = taskEntityManager.findById(taskId);</span><br><span class="line">        <span class="comment">// 执行实例 id</span></span><br><span class="line">        String executionId = taskEntity.getExecutionId();</span><br><span class="line">        String processDefinitionId = taskEntity.getProcessDefinitionId();</span><br><span class="line">        ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();</span><br><span class="line">        HistoryManager historyManager = commandContext.getHistoryManager();</span><br><span class="line">        <span class="comment">// 执行实例对象</span></span><br><span class="line">        ExecutionEntity executionEntity = executionEntityManager.findById(executionId);</span><br><span class="line">        Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);</span><br><span class="line">        FlowElement flowElement = process.getFlowElement(targetNodeId);</span><br><span class="line">        <span class="keyword">if</span> (flowElement == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"目标节点不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置当前流程</span></span><br><span class="line">        executionEntity.setCurrentFlowElement(flowElement);</span><br><span class="line">        <span class="comment">// 跳转, 触发执行实例运转</span></span><br><span class="line">        agenda.planContinueProcessInCompensation(executionEntity);</span><br><span class="line">        <span class="comment">// 从runtime 表中删除当前任务</span></span><br><span class="line">        taskEntityManager.delete(taskId);</span><br><span class="line">        <span class="comment">// 将历史活动表更新</span></span><br><span class="line">        historyManager.recordActivityEnd(executionEntity, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="comment">// 将历史任务表更新, 历史任务标记为完成</span></span><br><span class="line">        historyManager.recordTaskEnd(taskId, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上文中正确写法的不同之处在于数据库更新操作的顺序. 但仅仅更换顺序也会到导致历史表中数据无法正确结束.</p><p>问题的原因在于第 25 行的时候已经为执行实例执行了 <code>setCurrentFlowElement()</code> 操作, 设置了最新的流程元素, 所以如果在后面再执行对 <code>ACT_HI_ACTINST</code> 的更新, 就无法找到正确的 FlowElement. 所以需要将 <code>historyManager.recordActivityEnd(executionEntity, &quot;jump&quot;);</code> 放在第 25 行之前</p><h1 id="2-跳转到目标节点的入线"><a href="#2-跳转到目标节点的入线" class="headerlink" title="2. 跳转到目标节点的入线"></a>2. 跳转到目标节点的入线</h1><p>假设有如下流程定义:</p><p><img src="https://user-images.githubusercontent.com/17758731/53717197-598beb00-3e92-11e9-884e-67d2c77fe042.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask1"</span> <span class="attr">name</span>=<span class="string">"userTask1"</span> <span class="attr">activiti:assignee</span>=<span class="string">"destiny1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask2"</span> <span class="attr">name</span>=<span class="string">"userTask2"</span> <span class="attr">activiti:assignee</span>=<span class="string">"destiny2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask3"</span> <span class="attr">name</span>=<span class="string">"userTask3"</span> <span class="attr">activiti:assignee</span>=<span class="string">"destiny3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"userTask1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"userTask1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">conditionExpression</span>&gt;</span>$&#123;condition==1&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"userTask1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">conditionExpression</span>&gt;</span>$&#123;condition==2&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"userTask2"</span> <span class="attr">targetRef</span>=<span class="string">"end1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"userTask3"</span> <span class="attr">targetRef</span>=<span class="string">"end2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将原先的跳转命令类稍作修改:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceFlowJumpCmd</span> <span class="keyword">implements</span> <span class="title">Command</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String taskId;</span><br><span class="line">    <span class="keyword">private</span> String targetNodeId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">        ActivitiEngineAgenda agenda = commandContext.getAgenda();</span><br><span class="line">        TaskEntityManager taskEntityManager = commandContext.getTaskEntityManager();</span><br><span class="line">        TaskEntity taskEntity = taskEntityManager.findById(taskId);</span><br><span class="line">        <span class="comment">// 执行实例 id</span></span><br><span class="line">        String executionId = taskEntity.getExecutionId();</span><br><span class="line">        String processDefinitionId = taskEntity.getProcessDefinitionId();</span><br><span class="line">        ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();</span><br><span class="line">        HistoryManager historyManager = commandContext.getHistoryManager();</span><br><span class="line">        <span class="comment">// 执行实例对象</span></span><br><span class="line">        ExecutionEntity executionEntity = executionEntityManager.findById(executionId);</span><br><span class="line">        Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);</span><br><span class="line">        FlowElement flowElement = process.getFlowElement(targetNodeId);</span><br><span class="line">        <span class="keyword">if</span> (flowElement == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"目标节点不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SequenceFlow sequenceFlow = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (flowElement <span class="keyword">instanceof</span> FlowNode) &#123;</span><br><span class="line">            FlowNode flowNode = (FlowNode) flowElement;</span><br><span class="line">            <span class="comment">// 找到所有的入线, 并取其中唯一的一条</span></span><br><span class="line">            List&lt;SequenceFlow&gt; incomingFlows = flowNode.getIncomingFlows();</span><br><span class="line">            sequenceFlow = incomingFlows.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sequenceFlow == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"目标连线不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将历史活动表更新</span></span><br><span class="line">        historyManager.recordActivityEnd(executionEntity, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="comment">// 设置当前流程</span></span><br><span class="line">        executionEntity.setCurrentFlowElement(sequenceFlow);</span><br><span class="line">        <span class="comment">// 触发执行实例运转, 第二个参数为是否参与计算</span></span><br><span class="line">        agenda.planTakeOutgoingSequenceFlowsOperation(executionEntity, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 从runtime 表中删除当前任务</span></span><br><span class="line">        taskEntityManager.delete(taskId);</span><br><span class="line">        <span class="comment">// 将历史任务表更新, 历史任务标记为完成</span></span><br><span class="line">        historyManager.recordTaskEnd(taskId, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过连线触发实例的时候, 连线上的条件不会参与计算</li><li>只有实例经过节点, 网关的时候, 连线上的条件才会经过计算</li></ul><h1 id="3-跳转到目标节点入线连接的节点"><a href="#3-跳转到目标节点入线连接的节点" class="headerlink" title="3. 跳转到目标节点入线连接的节点"></a>3. 跳转到目标节点入线连接的节点</h1><p>因为实例是从节点离开, 因此后面的连线是可以参与运算的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceFlowSourceJumpCmd</span> <span class="keyword">implements</span> <span class="title">Command</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String taskId;</span><br><span class="line">    <span class="keyword">private</span> String targetNodeId;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; condition;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">        ActivitiEngineAgenda agenda = commandContext.getAgenda();</span><br><span class="line">        TaskEntityManager taskEntityManager = commandContext.getTaskEntityManager();</span><br><span class="line">        TaskEntity taskEntity = taskEntityManager.findById(taskId);</span><br><span class="line">        <span class="comment">// 执行实例 id</span></span><br><span class="line">        String executionId = taskEntity.getExecutionId();</span><br><span class="line">        String processDefinitionId = taskEntity.getProcessDefinitionId();</span><br><span class="line">        ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();</span><br><span class="line">        HistoryManager historyManager = commandContext.getHistoryManager();</span><br><span class="line">        <span class="comment">// 执行实例对象</span></span><br><span class="line">        ExecutionEntity executionEntity = executionEntityManager.findById(executionId);</span><br><span class="line">        Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);</span><br><span class="line">        FlowElement flowElement = process.getFlowElement(targetNodeId);</span><br><span class="line">        <span class="keyword">if</span> (flowElement == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"目标节点不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SequenceFlow sequenceFlow = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (flowElement <span class="keyword">instanceof</span> FlowNode) &#123;</span><br><span class="line">            FlowNode flowNode = (FlowNode) flowElement;</span><br><span class="line">            <span class="comment">// 找到所有的入线, 并取其中唯一的一条</span></span><br><span class="line">            List&lt;SequenceFlow&gt; incomingFlows = flowNode.getIncomingFlows();</span><br><span class="line">            sequenceFlow = incomingFlows.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sequenceFlow == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"目标连线不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FlowElement sourceFlowElement = sequenceFlow.getSourceFlowElement();</span><br><span class="line">        executionEntity.setVariables(condition);</span><br><span class="line">        <span class="comment">// 将历史活动表更新</span></span><br><span class="line">        historyManager.recordActivityEnd(executionEntity, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="comment">// 设置当前流程</span></span><br><span class="line">        executionEntity.setCurrentFlowElement(sourceFlowElement);</span><br><span class="line">        <span class="comment">// 触发执行实例运转, 第二个参数为是否参与计算</span></span><br><span class="line">        agenda.planTakeOutgoingSequenceFlowsOperation(executionEntity, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 从runtime 表中删除当前任务</span></span><br><span class="line">        taskEntityManager.delete(taskId);</span><br><span class="line">        <span class="comment">// 将历史任务表更新, 历史任务标记为完成</span></span><br><span class="line">        historyManager.recordTaskEnd(taskId, <span class="string">"jump"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Activiti(6)--加签功能的实现</title>
      <link href="/blog/2018/12/22/Activiti-6-%E5%8A%A0%E7%AD%BE%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/blog/2018/12/22/Activiti-6-%E5%8A%A0%E7%AD%BE%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>假设有如下流程:</p><p><img src="https://user-images.githubusercontent.com/17758731/50369657-2bf20e00-05d4-11e9-9af3-9416a020adae.png" alt="image"></p><p>我们在流程进行的时候, 需要在申请和经理审批之间临时新增一个节点, 达到如下的效果:</p><p><img src="https://user-images.githubusercontent.com/17758731/50369682-6a87c880-05d4-11e9-8b4e-232ab3e708c5.png" alt="image"></p><p>该行为我们称之为加签.</p><p>加签的两种思路</p><ol><li>直接修改模板, 在模板中添加节点以及连线, 并修改实例的走向;</li><li>直接修改流程定义对应的缓存数据, 不修改模板, 新增的节点与当前需要加签的实例挂钩.</li></ol><h1 id="2-实现方式"><a href="#2-实现方式" class="headerlink" title="2. 实现方式"></a>2. 实现方式</h1><h2 id="2-1-修改模板"><a href="#2-1-修改模板" class="headerlink" title="2.1. 修改模板"></a>2.1. 修改模板</h2><p>步骤:</p><ol><li>找到当前实例对象对应的模板数据;</li><li>在模板数据的基础上添加新节点, 修改连线, 并更新数据库中的模板;</li><li>更新模板对应的流程定义缓存, 否则加签节点不会生效;</li><li>完成新增的节点任务后, 再把新增的节点以及连线删除, 即还原流程模板.</li></ol><ul><li>模板是共享的, 所以把模板修改了, 所有运行实例对应的模板也会被修改;</li><li>修改模板容易导致当前实例影响到其他实例, 这种方法并不可取;</li></ul><h2 id="2-2-修改流程定义缓存"><a href="#2-2-修改流程定义缓存" class="headerlink" title="2.2 修改流程定义缓存"></a>2.2 修改流程定义缓存</h2><p>因为模板是共享的, 不修改模板就不会影响其他实例;</p><p>也不需要修改原有流程的流向, 要让流程按照新的流向运行.</p><blockquote><p>因为流程在运转过程中, 需要实时获取该实例对应的模板数据才能知道应该如何流转</p></blockquote><ol><li>首先从流程定义缓存中获取模板数据;</li><li>如果流程缓存定义丢失, 则需要重新执行模板的解析工作并将其防止到流程缓存中;</li></ol><p>因此修改流程定义缓存就可以实现功能.</p><p>但仍有一个问题需要解决: 如果流程定义缓存丢失, 引擎默认解析的是数据库中存在的模板数据, 而新增的临时节点不会存在与 XML 中.</p><h3 id="2-2-1-步骤"><a href="#2-2-1-步骤" class="headerlink" title="2.2.1 步骤"></a>2.2.1 步骤</h3><p><img src="https://user-images.githubusercontent.com/17758731/50369997-a5402f80-05d9-11e9-9ef3-a8549723f74b.png" alt="image"></p><ol><li>在流程缓存中添加一个任务节点并为任务节点添加出线信息, 出线信息是需要到达的目标节点;</li><li>添加的目标节点并没有入线, 也就是说不会影响到其他的实例, 正常的流程实例启动的时候不会走到这个节点;</li><li>加签完成后可以触发执行实例走到新增的任务节点, 这样当前实例就按照最新的路线进行运转;</li><li>如果当前的节点加签后不想让实例运转到最新的节点, 可以复制一个当前节点, 继续让实例运转;</li><li>加签的最终目的是让实例按照最新的路线走, 与模板中规划的路线脱离关系.</li></ol><p>需要解决的问题:</p><ol><li>新增的节点以及连线如何存储;</li><li>流程定义缓存如何修改;</li><li>加签的节点以及连线信息如何持久化;</li><li>缓存丢失, 新的路线图丢失;</li><li>流程实例结束, 当前加签的节点以及连线已经不需要应该如何删除;</li></ol><p>修改流程定义缓存后, 由于缓存失效, 依然会报错</p><p>此时就需要先添加缓存, 然后完成任务</p><h1 id="3-加签原理代码讲解"><a href="#3-加签原理代码讲解" class="headerlink" title="3. 加签原理代码讲解"></a>3. 加签原理代码讲解</h1><h1 id="4-加签节点存储表设计"><a href="#4-加签节点存储表设计" class="headerlink" title="4. 加签节点存储表设计"></a>4. 加签节点存储表设计</h1><blockquote><p>Activiti 继承了 MyBatis 框架, 因此可以让我们注入配置文件或者注解类使用 MyBatis.</p></blockquote><h2 id="4-1-表结构"><a href="#4-1-表结构" class="headerlink" title="4.1. 表结构"></a>4.1. 表结构</h2><h2 id="4-2-实体类"><a href="#4-2-实体类" class="headerlink" title="4.2. 实体类"></a>4.2. 实体类</h2><h2 id="4-3-Mapper-类"><a href="#4-3-Mapper-类" class="headerlink" title="4.3. Mapper 类"></a>4.3. Mapper 类</h2><h2 id="4-4-注入流程引擎"><a href="#4-4-注入流程引擎" class="headerlink" title="4.4. 注入流程引擎"></a>4.4. 注入流程引擎</h2>]]></content>
      
      <categories>
          
          <category> Activiti </category>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti(4)--多实例实现会签功能</title>
      <link href="/blog/2018/12/16/Activiti-4-%E5%A4%9A%E5%AE%9E%E4%BE%8B%E5%AE%9E%E7%8E%B0%E4%BC%9A%E7%AD%BE%E5%8A%9F%E8%83%BD/"/>
      <url>/blog/2018/12/16/Activiti-4-%E5%A4%9A%E5%AE%9E%E4%BE%8B%E5%AE%9E%E7%8E%B0%E4%BC%9A%E7%AD%BE%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<h1 id="1-Activiti-多实例"><a href="#1-Activiti-多实例" class="headerlink" title="1. Activiti 多实例"></a>1. Activiti 多实例</h1><blockquote><p>多实例节点是在业务流程中定义重复环节的一种方式</p></blockquote><p>从开发角度讲, 多实例类似于循环, 可以根据给定的集合, 为每个元素执行一个环境甚至一个子流程, 既可以顺序依次执行也可以并发同步执行.</p><p>多实例是在一个普通节点上添加额外的属性定义, 这样被多实例修饰的节点就会执行多次, 在 BPMN 规范中, 下面的节点都可以成为一个多实例节点:</p><ul><li>UserTask</li><li>Script Task</li><li>Java Service Task</li><li>Web Service Task</li><li>Business Rule Task</li><li>Email Task</li><li>Manual Task</li><li>Receive Task</li><li>Sub-Process</li><li>Call Activity</li></ul><p>每个上级流程为每个实例创建分支的时候都要提供如下变量:</p><ol><li>nrOfInstances: 实例总数</li><li>nrOfActiveInstances: 当前活动的实例数量, 对于顺序执行的多实例, 该值始终为1</li><li>nrOfCompletedInstances: 已经完成的实例数量</li><li>loopCounter: 当前实例所在循环的索引值, 其他实例不可见, 不会保存到流程实例级别.</li></ol><p>可以通过 <code>execution.getVariable(String key)</code> 方法获得这些变量</p><h3 id="1-1-isSequential"><a href="#1-1-isSequential" class="headerlink" title="1.1. isSequential"></a>1.1. <code>isSequential</code></h3><p>表示节点时顺序执行还是并行执行, 默认为 <code>false</code>, 表示并行执行</p><h2 id="1-2-指定实例数量"><a href="#1-2-指定实例数量" class="headerlink" title="1.2. 指定实例数量"></a>1.2. 指定实例数量</h2><p>实例的数量会在进入节点时进行计算, 但也可以直接指定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以使用loopCardinality子元素直接指定一个数字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loopCardinality</span>&gt;</span>5<span class="tag">&lt;/<span class="name">loopCardinality</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 也可以使用结果为整数的表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loopCardinality</span>&gt;</span>$&#123;nrOfOrders-nrOfCancellations&#125;<span class="tag">&lt;/<span class="name">loopCardinality</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">multiInstanceLoopCharacteristics</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-接收并遍历集合"><a href="#1-3-接收并遍历集合" class="headerlink" title="1.3. 接收并遍历集合"></a>1.3. 接收并遍历集合</h2><p>除此之外还可以通过 <code>loopDataInputRef</code> 元素设置一个类型为集合的流程变量名, 对于集合中的每个元素都会创建一个实例, 也可以通过 <code>inputDataItem</code> 子元素指定集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loopDataInputRef</span>&gt;</span>userList<span class="tag">&lt;/<span class="name">loopDataInputRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inputDataItem</span> <span class="attr">name</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">multiInstanceLoopCharacteristics</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>loopDataInputRef 中的 userList 表示需要遍历的元素列表</li><li>inputDataItem 中的 user 表示每个分支都会拥有一个名为 user 的流程变量, 这个变量会包含集合中的对应元素, 在例子中用来设置用户任务的办理者, 也就是说 userTask 中的 <code>activiti:assignee</code> 属性的值需要和 <code>inputDataItem</code> 一致.</li></ul><p>此外, 上述的变量名存在如下缺点:</p><ol><li>名称复杂</li><li>BPMN2.0 规定不能该节点不能包含表达式</li></ol><p>Activiti 通过 multiInstanceCharacteristics 中设置 <code>collection</code> 和 <code>elementVariable</code> 属性来解决这个问题:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">"false"</span> <span class="attr">activiti:collection</span>=<span class="string">"$&#123;userList&#125;"</span> <span class="attr">activiti:elementVariable</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二者实现的功能是相同的, 不过后者可以支持表达式, 这是我们动态配置用户任务属性的重要功能</p><h2 id="1-4-结束条件"><a href="#1-4-结束条件" class="headerlink" title="1.4. 结束条件"></a>1.4. 结束条件</h2><p>多实例节点默认会在所有节点完成后结束, 也可以指定一个表达式在每个实例结束时执行, 如果表达式返回 true, 所有其他的实例都会销毁, 多实例节点也会结束, 流程会继续执行.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">"false"</span> <span class="attr">activiti:collection</span>=<span class="string">"$&#123;userList&#125;"</span> <span class="attr">activiti:elementVariable</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果有 60% 的任务完成时, 其他任务会被删除, 流程继续进行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">completionCondition</span>&gt;</span>$&#123;nrOfCompletedInstances/nrOfInstances &gt;= 0.6&#125;<span class="tag">&lt;/<span class="name">completionCondition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">multiInstanceLoopCharacteristics</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-会签逻辑"><a href="#2-会签逻辑" class="headerlink" title="2. 会签逻辑"></a>2. 会签逻辑</h1><p>经过以上对 Activiti 多实例的介绍可知, 实现会签功能几个重要的点在于:</p><ol><li>利用多实例完成动态实例的创建</li><li>根据业务设置合适的结束条件</li></ol><h2 id="2-1-流程定义"><a href="#2-1-流程定义" class="headerlink" title="2.1. 流程定义"></a>2.1. 流程定义</h2><h3 id="2-1-1-XML-格式"><a href="#2-1-1-XML-格式" class="headerlink" title="2.1.1. XML 格式"></a>2.1.1. XML 格式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">"false"</span> <span class="attr">activiti:collection</span>=<span class="string">"$&#123;userList&#125;"</span> <span class="attr">activiti:elementVariable</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-BpmnModel-模型"><a href="#2-1-2-BpmnModel-模型" class="headerlink" title="2.1.2. BpmnModel 模型"></a>2.1.2. BpmnModel 模型</h3><p>用到的测试类: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersBean</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUsers</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"userId: &#123;&#125;"</span>, userId);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(userId + <span class="string">"1"</span>, userId + <span class="string">"2"</span>, userId + <span class="string">"3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExclusionGatewayModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BpmnModel bpmnModel = <span class="keyword">new</span> BpmnModel();</span><br><span class="line">    Process process = <span class="keyword">new</span> Process();</span><br><span class="line">    process.setId(<span class="string">"my-process"</span>);</span><br><span class="line">    StartEvent startEvent = <span class="keyword">new</span> StartEvent();</span><br><span class="line">    startEvent.setId(<span class="string">"startEvent"</span>);</span><br><span class="line">    UserTask someTask = <span class="keyword">new</span> UserTask();</span><br><span class="line">    someTask.setId(<span class="string">"someTask"</span>);</span><br><span class="line">    someTask.setName(<span class="string">"Activiti is awesome!"</span>);</span><br><span class="line">    someTask.setAssignee(<span class="string">"$&#123;user&#125;"</span>);</span><br><span class="line">    MultiInstanceLoopCharacteristics multiInstanceLoopCharacteristics = <span class="keyword">new</span> MultiInstanceLoopCharacteristics();</span><br><span class="line">    multiInstanceLoopCharacteristics.setSequential(<span class="keyword">false</span>);</span><br><span class="line">    multiInstanceLoopCharacteristics.setInputDataItem(<span class="string">"$&#123;usersBean.getUsers(name)&#125;"</span>);</span><br><span class="line">    multiInstanceLoopCharacteristics.setElementVariable(<span class="string">"user"</span>);</span><br><span class="line">    multiInstanceLoopCharacteristics.setCompletionCondition(<span class="string">"$&#123;nrOfCompletedInstances &gt; 0&#125;"</span>);</span><br><span class="line">    someTask.setLoopCharacteristics(multiInstanceLoopCharacteristics);</span><br><span class="line">    EndEvent endEvent = <span class="keyword">new</span> EndEvent();</span><br><span class="line">    endEvent.setId(<span class="string">"endEvent"</span>);</span><br><span class="line">    SequenceFlow flow1 = createSequence(<span class="string">"startEvent"</span>, <span class="string">"someTask"</span>, <span class="string">"flow1"</span>, <span class="string">"flow1"</span>, <span class="keyword">null</span>);</span><br><span class="line">    SequenceFlow flow2 = createSequence(<span class="string">"someTask"</span>, <span class="string">"endEvent"</span>, <span class="string">"flow2"</span>, <span class="string">"flow2"</span>, <span class="keyword">null</span>);</span><br><span class="line">    process.addFlowElement(startEvent);</span><br><span class="line">    process.addFlowElement(someTask);</span><br><span class="line">    process.addFlowElement(endEvent);</span><br><span class="line">    process.addFlowElement(flow1);</span><br><span class="line">    process.addFlowElement(flow2);</span><br><span class="line">    bpmnModel.addProcess(process);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// client</span></span><br><span class="line">    Deployment deployment = activitiRule.getRepositoryService().createDeployment()</span><br><span class="line">            .addBpmnModel(<span class="string">"bpmn"</span>, bpmnModel)</span><br><span class="line">            .deploy();</span><br><span class="line">    log.info(<span class="string">"deployment: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(deployment, ToStringStyle.JSON_STYLE));</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"usersBean"</span>, usersBean);</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"wk"</span>);</span><br><span class="line">    </span><br><span class="line">    ProcessInstance processInstance = activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>, map);</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(processInstance, ToStringStyle.JSON_STYLE));</span><br><span class="line">    List&lt;Task&gt; taskList = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"当前 taskList 数量: &#123;&#125;"</span>, taskList.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        log.info(<span class="string">"task: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(task, ToStringStyle.JSON_STYLE));</span><br><span class="line">    &#125;</span><br><span class="line">    activitiRule.getTaskService().complete(taskList.get(<span class="number">0</span>).getId());</span><br><span class="line">    log.info(<span class="string">"其中一个节点完成审批"</span>);</span><br><span class="line">    taskList = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"第一个节点审批完成后 taskList 数量: &#123;&#125;"</span>, taskList.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        log.info(<span class="string">"第一个节点审批完成后 task: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(task, ToStringStyle.JSON_STYLE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-日志输出"><a href="#2-1-3-日志输出" class="headerlink" title="2.1.3. 日志输出"></a>2.1.3. 日志输出</h3><pre><code>09:55:17,517 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - processInstance: {&quot;currentFlowElement&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;processInstance&quot;:&quot;ProcessInstance[4]&quot;,&quot;parent&quot;:null,&quot;executions&quot;:[Multi instance root execution[ id &apos;8&apos; ] - activity &apos;someTask - parent &apos;4&apos;],&quot;superExecution&quot;:null,&quot;subProcessInstance&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;name&quot;:null,&quot;description&quot;:null,&quot;localizedName&quot;:null,&quot;localizedDescription&quot;:null,&quot;lockTime&quot;:null,&quot;isActive&quot;:true,&quot;isScope&quot;:true,&quot;isConcurrent&quot;:false,&quot;isEnded&quot;:false,&quot;isEventScope&quot;:false,&quot;isMultiInstanceRoot&quot;:false,&quot;isCountEnabled&quot;:false,&quot;eventName&quot;:null,&quot;eventSubscriptions&quot;:[],&quot;jobs&quot;:[],&quot;timerJobs&quot;:[],&quot;tasks&quot;:[],&quot;identityLinks&quot;:[IdentityLinkEntity[id=24, type=participant, userId=wk1, processInstanceId=4], IdentityLinkEntity[id=27, type=participant, userId=wk2, processInstanceId=4], IdentityLinkEntity[id=30, type=participant, userId=wk3, processInstanceId=4]],&quot;deleteReason&quot;:null,&quot;suspensionState&quot;:1,&quot;startUserId&quot;:null,&quot;startTime&quot;:&quot;Sun Dec 16 21:55:17 CST 2018&quot;,&quot;eventSubscriptionCount&quot;:0,&quot;taskCount&quot;:0,&quot;jobCount&quot;:0,&quot;timerJobCount&quot;:0,&quot;suspendedJobCount&quot;:0,&quot;deadLetterJobCount&quot;:0,&quot;variableCount&quot;:0,&quot;identityLinkCount&quot;:0,&quot;processDefinitionId&quot;:&quot;my-process:1:3&quot;,&quot;processDefinitionKey&quot;:&quot;my-process&quot;,&quot;processDefinitionName&quot;:null,&quot;processDefinitionVersion&quot;:1,&quot;deploymentId&quot;:null,&quot;activityId&quot;:null,&quot;activityName&quot;:null,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;businessKey&quot;:null,&quot;parentId&quot;:null,&quot;superExecutionId&quot;:null,&quot;rootProcessInstanceId&quot;:&quot;4&quot;,&quot;rootProcessInstance&quot;:null,&quot;forcedUpdate&quot;:false,&quot;queryVariables&quot;:null,&quot;isDeleted&quot;:false,&quot;variableInstances&quot;:{usersBean=VariableInstanceEntity[id=6, name=usersBean, type=serializable, byteArrayValueId=5]},&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;4&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:true,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}09:59:03,449 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - 当前 taskList 数量: 309:59:03,450 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - task: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:1,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:&quot;wk1&quot;,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Activiti is awesome!&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:null,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sun Dec 16 21:59:03 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;14&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;my-process:1:3&quot;,&quot;taskDefinitionKey&quot;:&quot;someTask&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;24&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}09:59:03,450 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - task: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:1,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:&quot;wk2&quot;,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Activiti is awesome!&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:null,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sun Dec 16 21:59:03 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;15&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;my-process:1:3&quot;,&quot;taskDefinitionKey&quot;:&quot;someTask&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;27&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}09:59:03,451 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - task: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:1,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:&quot;wk3&quot;,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Activiti is awesome!&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:null,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sun Dec 16 21:59:03 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;16&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;my-process:1:3&quot;,&quot;taskDefinitionKey&quot;:&quot;someTask&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;30&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}...09:55:17,585 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - 其中一个节点完成审批09:55:17,587 [main] INFO  org.destiny.activiti.GatewayExpressSpringTest  - 第一个节点审批完成后 taskList 数量: 0</code></pre><h1 id="3-多实例任务节点完成自定义条件"><a href="#3-多实例任务节点完成自定义条件" class="headerlink" title="3. 多实例任务节点完成自定义条件"></a>3. 多实例任务节点完成自定义条件</h1>]]></content>
      
      <categories>
          
          <category> Activiti </category>
          
          <category> Java </category>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti(3)--数据模型设计</title>
      <link href="/blog/2018/12/11/Activiti-3-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/"/>
      <url>/blog/2018/12/11/Activiti-3-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td>ACT_GE_*</td><td>通用数据表</td></tr><tr><td>ACT_RE_*</td><td>流程定义存储表</td></tr><tr><td>ACT_ID_*</td><td>身份信息表</td></tr><tr><td>ACT_RU_*</td><td>运行时数据库表</td></tr><tr><td>ACT_HI_*</td><td>历史数据库表, 为了保证运行时数据尽可能少, 流程执行完就会将相关数据迁移到历史表中</td></tr></tbody></table><ul><li>核心引擎: activiti.mysql.create.engine.sql</li><li>历史数据: activiti.mysql.create.history.sql</li><li>身份数据: activiti.mysql.create.identity.sql</li></ul><p>Activiti 除了核心引擎以外, 其他都是可选的.</p><p>首先创建 <code>ACT_GE_PROPERTY</code> 表, 并写入:</p><ol><li><code>schema.version</code>(schema 版本)</li><li><code>schema.history</code>(schema 历史)</li><li><code>next.dbid</code>(自增 id)<br>三条记录</li></ol><h1 id="1-通用数据库"><a href="#1-通用数据库" class="headerlink" title="1. 通用数据库"></a>1. 通用数据库</h1><table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td>ACT_GE_PROPERTY</td><td>属性表(保存流程引擎的 kv 键值属性)</td></tr><tr><td>ACT_GE_BYTEARRAY</td><td>资源表(存储流程定义相关的资源, 如 xml, 流程定义图)</td></tr></tbody></table><h2 id="1-1-ACT-GE-PROPERTY"><a href="#1-1-ACT-GE-PROPERTY" class="headerlink" title="1.1. ACT_GE_PROPERTY"></a>1.1. ACT_GE_PROPERTY</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.PropertyEntityImpl</code></p><p><img src="https://user-images.githubusercontent.com/17758731/49807932-40ddce80-fd96-11e8-8959-b2ccad75a9c1.png" alt="image"></p><h2 id="1-2-ACT-GE-BYTEARRAY"><a href="#1-2-ACT-GE-BYTEARRAY" class="headerlink" title="1.2 ACT_GE_BYTEARRAY"></a>1.2 ACT_GE_BYTEARRAY</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.ByteArrayEntityImpl</code></p><p><img src="https://user-images.githubusercontent.com/17758731/49808023-797da800-fd96-11e8-9940-8aa8ac085e7f.png" alt="image"></p><p>其中 GENERATED_ 字段标识该资源文件是自动生成还是人工上传</p><p>如果不想添加身份信息相关数据库和历史数据相关数据库, 可以在配置中显式指定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000;MVCC=TRUE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"sa"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不创建 ACT_ID_* 相关的表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbIdentityUsed"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不创建 ACT_HI_* 相关的表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbHistoryUsed"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-流程定义存储表"><a href="#2-流程定义存储表" class="headerlink" title="2. 流程定义存储表"></a>2. 流程定义存储表</h1><table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td>ACT_RE_DEPLOYMENT</td><td>流程部署记录表</td></tr><tr><td>ACT_RE_PROCDEF</td><td>流程定义信息表</td></tr><tr><td>ACT_RE_MODEL</td><td>模型信息表(用于 web 设计器)</td></tr><tr><td>ACT_PROCDEF_INFO</td><td>流程定义动态改变信息表</td></tr></tbody></table><h2 id="2-1-ACT-RE-DEPLOYMENT"><a href="#2-1-ACT-RE-DEPLOYMENT" class="headerlink" title="2.1. ACT_RE_DEPLOYMENT"></a>2.1. ACT_RE_DEPLOYMENT</h2><p>对应实体 <code>org.activiti.engine.impl.persistence.entity.DeploymentEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td></tr><tr><td>NAME_</td><td>名称</td></tr><tr><td>CATEGORY_</td><td>分类</td></tr><tr><td>TENANT_ID_</td><td>多租户标志</td></tr><tr><td>DEPLOY_TIME_</td><td>部署时间</td></tr><tr><td>KEY_</td><td>标志 key</td></tr><tr><td>ENGINE_VERSION_</td><td>兼容版本, 如果使用 Activiti5, 在升级到6后会有特殊标志</td></tr></tbody></table><h2 id="2-2-ACT-RE-PROCDEF"><a href="#2-2-ACT-RE-PROCDEF" class="headerlink" title="2.2 ACT_RE_PROCDEF"></a>2.2 ACT_RE_PROCDEF</h2><p>对应实体 <code>org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>DEPLOYMENT_ID_</td><td>关联部署 id</td></tr><tr><td>RESOURCE_NAME_</td><td>流程定义资源名称</td></tr><tr><td>DGRM_RESOURCE_NAME_</td><td>流程图片资源名称</td></tr><tr><td>HAS_START_FORM_KEY_</td><td>是否存在开始表单标志</td></tr><tr><td>HAS_GRAPHICAL_NOTATION_</td><td>是否有图形信息</td></tr><tr><td>SUSPENSION_STATE_</td><td>挂起状态 1 正常, 2 挂起</td></tr></tbody></table><h2 id="2-3-测试代码"><a href="#2-3-测试代码" class="headerlink" title="2.3. 测试代码"></a>2.3. 测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeploy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    activitiRule.getRepositoryService()</span><br><span class="line">            .createDeployment()</span><br><span class="line">            .name(<span class="string">"二次审批流程"</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">"org/destiny/activiti/SecondApprove.bpmn20.xml"</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ACT_RE_DEPLOYMENT 表内容:</p></blockquote><pre><code>mysql&gt; select * from ACT_RE_DEPLOYMENT \G;*************************** 1. row ***************************            ID_: 1          NAME_: 二次审批流程      CATEGORY_: NULL           KEY_: NULL     TENANT_ID_:   DEPLOY_TIME_: 2018-12-11 09:11:27.538ENGINE_VERSION_: NULL</code></pre><blockquote><p>ACT_RE_PROCDEF 表内容:</p></blockquote><pre><code>mysql&gt; select * from ACT_RE_PROCDEF \G;*************************** 1. row ***************************                    ID_: SecondApprove:1:4                   REV_: 1              CATEGORY_: http://www.activiti.org/test                  NAME_: 二级审批                   KEY_: SecondApprove               VERSION_: 1         DEPLOYMENT_ID_: 1         RESOURCE_NAME_: org/destiny/activiti/SecondApprove.bpmn20.xml    DGRM_RESOURCE_NAME_: org/destiny/activiti/SecondApprove.SecondApprove.png           DESCRIPTION_: NULL    HAS_START_FORM_KEY_: 0HAS_GRAPHICAL_NOTATION_: 1      SUSPENSION_STATE_: 1             TENANT_ID_:        ENGINE_VERSION_: NULL</code></pre><p>可以看到, 其中 <code>HAS_START_FORM_KEY_</code> 为 0, <code>DESCRIPTION_</code> 为 NULL, 二者都需要去流程定义文件中设置</p><ul><li><code>HAS_START_FORM_KEY_</code> 需要在 startEvent 中设置 actviti:formKey;</li><li><code>DESCRIPTION</code> 需要设置 documentation</li></ul><p>修改流程定义文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span> <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"SecondApprove"</span> <span class="attr">name</span>=<span class="string">"二级审批"</span> <span class="attr">isExecutable</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>审批流程描述<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"startEvent"</span> <span class="attr">name</span>=<span class="string">"开始"</span> <span class="attr">activiti:formKey</span>=<span class="string">"/process/form/key"</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"submitApprove"</span> <span class="attr">name</span>=<span class="string">"填写申请信息"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后重新部署即可看到: </p><pre><code>mysql&gt; select * from ACT_RE_PROCDEF \G;*************************** 1. row ***************************                    ID_: SecondApprove:1:4                   REV_: 1              CATEGORY_: http://www.activiti.org/test                  NAME_: 二级审批                   KEY_: SecondApprove               VERSION_: 1         DEPLOYMENT_ID_: 1         RESOURCE_NAME_: org/destiny/activiti/SecondApprove.bpmn20.xml    DGRM_RESOURCE_NAME_: org/destiny/activiti/SecondApprove.SecondApprove.png           DESCRIPTION_: NULL    HAS_START_FORM_KEY_: 0HAS_GRAPHICAL_NOTATION_: 1      SUSPENSION_STATE_: 1             TENANT_ID_:        ENGINE_VERSION_: NULL*************************** 2. row ***************************                    ID_: SecondApprove:2:2504                   REV_: 1              CATEGORY_: http://www.activiti.org/test                  NAME_: 二级审批                   KEY_: SecondApprove               VERSION_: 2         DEPLOYMENT_ID_: 2501         RESOURCE_NAME_: org/destiny/activiti/SecondApprove.bpmn20.xml    DGRM_RESOURCE_NAME_: org/destiny/activiti/SecondApprove.SecondApprove.png           DESCRIPTION_: 审批流程描述    HAS_START_FORM_KEY_: 0HAS_GRAPHICAL_NOTATION_: 1      SUSPENSION_STATE_: 1             TENANT_ID_:        ENGINE_VERSION_: NULL</code></pre><p>ACT_RE_PROCDEF 是基于 KEY_ 去升级版本号, 当原有的 key 已经存在, 就会升级版本号, 其中 KEY_, VERSION_, TENANT_ID_ 共同组成一个唯一键</p><h1 id="3-身份数据表设计"><a href="#3-身份数据表设计" class="headerlink" title="3. 身份数据表设计"></a>3. 身份数据表设计</h1><table><thead><tr><th>数据表设计</th><th>描述</th></tr></thead><tbody><tr><td>ACT_ID_USER</td><td>用户的基本信息</td></tr><tr><td>ACT_ID_INFO</td><td>用户的扩展信息</td></tr><tr><td>ACT_ID_GROUP</td><td>群组</td></tr><tr><td>ACT_ID_MEMBERSHIP</td><td>用户与群组关系</td></tr></tbody></table><h2 id="3-1-用户信息表"><a href="#3-1-用户信息表" class="headerlink" title="3.1. 用户信息表"></a>3.1. 用户信息表</h2><p>对应实体 <code>org.activiti.engine.impl.persistence.entity.UserEntityImpl</code></p><pre><code>+-------------+--------------+------+-----+---------+-------+| Field       | Type         | Null | Key | Default | Extra |+-------------+--------------+------+-----+---------+-------+| ID_         | varchar(64)  | NO   | PRI | NULL    |       || REV_        | int(11)      | YES  |     | NULL    |       || FIRST_      | varchar(255) | YES  |     | NULL    |       || LAST_       | varchar(255) | YES  |     | NULL    |       || EMAIL_      | varchar(255) | YES  |     | NULL    |       || PWD_        | varchar(255) | YES  |     | NULL    |       || PICTURE_ID_ | varchar(64)  | YES  |     | NULL    |       |+-------------+--------------+------+-----+---------+-------+</code></pre><h2 id="3-2-用户扩展信息"><a href="#3-2-用户扩展信息" class="headerlink" title="3.2. 用户扩展信息"></a>3.2. 用户扩展信息</h2><p>对应实体 <code>org.activiti.engine.impl.persistence.entity.IdentityInfoEntityImpl</code></p><pre><code>+------------+--------------+------+-----+---------+-------+| Field      | Type         | Null | Key | Default | Extra |+------------+--------------+------+-----+---------+-------+| ID_        | varchar(64)  | NO   | PRI | NULL    |       || REV_       | int(11)      | YES  |     | NULL    |       || USER_ID_   | varchar(64)  | YES  |     | NULL    |       || TYPE_      | varchar(64)  | YES  |     | NULL    |       || KEY_       | varchar(255) | YES  |     | NULL    |       || VALUE_     | varchar(255) | YES  |     | NULL    |       || PASSWORD_  | longblob     | YES  |     | NULL    |       || PARENT_ID_ | varchar(255) | YES  |     | NULL    |       |+------------+--------------+------+-----+---------+-------+</code></pre><ul><li>USER_ID_: 关联用户 id</li><li>TYPE_: 类型(固定值)</li><li>KEY_: 属性名</li><li>VALUE_: 属性值</li><li>PASSWORD_: 密码(未使用)</li><li>PARENT_ID_: 上级关联(不建议使用)</li></ul><h2 id="3-3-ACT-ID-GROUP"><a href="#3-3-ACT-ID-GROUP" class="headerlink" title="3.3. ACT_ID_GROUP"></a>3.3. ACT_ID_GROUP</h2><p>对应实体 <code>org.activiti.engine.impl.persistence.entity.GroupEntityImpl</code></p><pre><code>+-------+--------------+------+-----+---------+-------+| Field | Type         | Null | Key | Default | Extra |+-------+--------------+------+-----+---------+-------+| ID_   | varchar(64)  | NO   | PRI | NULL    |       || REV_  | int(11)      | YES  |     | NULL    |       || NAME_ | varchar(255) | YES  |     | NULL    |       || TYPE_ | varchar(255) | YES  |     | NULL    |       |+-------+--------------+------+-----+---------+-------+</code></pre><h2 id="3-4-用户组关系表"><a href="#3-4-用户组关系表" class="headerlink" title="3.4. 用户组关系表"></a>3.4. 用户组关系表</h2><p>对应实体 <code>org.activiti.engine.impl.persistence.entity.MembershipEntityImpl</code></p><pre><code>+-----------+-------------+------+-----+---------+-------+| Field     | Type        | Null | Key | Default | Extra |+-----------+-------------+------+-----+---------+-------+| USER_ID_  | varchar(64) | NO   | PRI | NULL    |       || GROUP_ID_ | varchar(64) | NO   | PRI | NULL    |       |+-----------+-------------+------+-----+---------+-------+</code></pre><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIdentity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IdentityService identityService = activitiRule.getIdentityService();</span><br><span class="line">    User user1 = identityService.newUser(<span class="string">"user1"</span>);</span><br><span class="line">    user1.setFirstName(<span class="string">"firstName"</span>);</span><br><span class="line">    user1.setLastName(<span class="string">"lastName"</span>);</span><br><span class="line">    user1.setEmail(<span class="string">"user1@126.com"</span>);</span><br><span class="line">    user1.setPassword(<span class="string">"pwd"</span>);</span><br><span class="line">    identityService.saveUser(user1);</span><br><span class="line">    User user2 = identityService.newUser(<span class="string">"user2"</span>);</span><br><span class="line">    identityService.saveUser(user2);</span><br><span class="line">    Group group1 = identityService.newGroup(<span class="string">"group1"</span>);</span><br><span class="line">    group1.setName(<span class="string">"for test"</span>);</span><br><span class="line">    identityService.saveGroup(group1);</span><br><span class="line">    identityService.createMembership(user1.getId(), group1.getId());</span><br><span class="line">    identityService.createMembership(user2.getId(), group1.getId());</span><br><span class="line">    <span class="comment">// 扩展信息</span></span><br><span class="line">    identityService.setUserInfo(user1.getId(), <span class="string">"age"</span>, <span class="string">"18"</span>);</span><br><span class="line">    identityService.setUserInfo(user1.getId(), <span class="string">"identity"</span>, <span class="string">"destiny"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-运行时流程数据表"><a href="#4-运行时流程数据表" class="headerlink" title="4. 运行时流程数据表"></a>4. 运行时流程数据表</h1><table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td>ACT_RU_EXECUTION</td><td>流程实例与分支执行信息</td></tr><tr><td>ACT_RU_TASK</td><td>用户任务信息</td></tr><tr><td>ACT_RU_VARIABLE</td><td>变量信息</td></tr><tr><td>ACT_RU_IDENTITYLINK</td><td>参与者相关信息</td></tr><tr><td>ACT_RU_EVENT_SUBSCR</td><td>事件监听表</td></tr><tr><td>ACT_RU_JOB</td><td>作业表</td></tr><tr><td>ACT_RU_TIMER_JOB</td><td>定时器表</td></tr><tr><td>ACT_RU_SUSPENDED_JOB</td><td>暂停作业表</td></tr><tr><td>ACT_RU_DEADLETTER_JOB</td><td>死信表</td></tr></tbody></table><h2 id="4-1-ACT-RU-EXECUTION"><a href="#4-1-ACT-RU-EXECUTION" class="headerlink" title="4.1. ACT_RU_EXECUTION"></a>4.1. ACT_RU_EXECUTION</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.ExecutionEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>PROC_INST_ID_</td><td>流程实例 ID</td></tr><tr><td>BUSINESS_KEY_</td><td>业务标志</td></tr><tr><td>PARENT_ID_</td><td>父执行信息</td></tr><tr><td>PROC_DEF_ID_</td><td>流程定义 ID</td></tr><tr><td>SUPER_EXEC_</td><td>父流程实例对应的执行</td></tr><tr><td>ACT_ID_</td><td>流程定义节点 ID</td></tr><tr><td>IS_ACTIVE</td><td>是否活动的执行 0-非活动, 1-活动</td></tr><tr><td>IS_CONCURRENT_</td><td>是否并行分支 0-非, 1-是</td></tr><tr><td>IS_SCOPE_</td><td>是否全局流程执行 0-非, 1-是</td></tr><tr><td>IS_EVENT_SCOPE_</td><td>是否激活状态</td></tr><tr><td>SUSPENSION_STATE</td><td>挂起状态 1-正常, 2-挂起</td></tr><tr><td>LOCK_TIME_</td><td>锁定时间</td></tr></tbody></table><h2 id="4-2-ACT-RU-TASK"><a href="#4-2-ACT-RU-TASK" class="headerlink" title="4.2. ACT_RU_TASK"></a>4.2. ACT_RU_TASK</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.TaskEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>EXECUTION_ID_</td><td>执行流 id</td></tr><tr><td>PROC_INST_ID_</td><td>流程实例 ID</td></tr><tr><td>PROC_DEF_ID_</td><td>流程定义 ID</td></tr><tr><td>PARENT_TASK_ID_</td><td>父任务</td></tr><tr><td>TASK_DEF_KEY_</td><td>任务定义 ID</td></tr><tr><td>NAME_</td><td>任务定义名称</td></tr><tr><td>OWNER_</td><td>拥有人</td></tr><tr><td>ASSIGNEE_</td><td>代理人</td></tr><tr><td>DELEGATION_</td><td>委托状态 PENDING-委托中, RESOLVED 已处理</td></tr><tr><td>PRIORITY_</td><td>优先级</td></tr><tr><td>DUE_DATE_</td><td>过期时间</td></tr><tr><td>FORM_KEY_</td><td>表单标志</td></tr></tbody></table><h2 id="4-3-ACT-RU-VARIABLE"><a href="#4-3-ACT-RU-VARIABLE" class="headerlink" title="4.3. ACT_RU_VARIABLE"></a>4.3. ACT_RU_VARIABLE</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.VariableInstanceEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>TYPE_</td><td>变量名称(integer, string, double, json)</td></tr><tr><td>NAME_</td><td>变量名</td></tr><tr><td>BYTEARRAY_ID_</td><td>资源表 id</td></tr><tr><td>DOUBLE_</td><td>浮点值</td></tr><tr><td>LONG_</td><td>长整型数值</td></tr><tr><td>TEXT_</td><td>文本值</td></tr></tbody></table><h2 id="4-4-ACT-RU-IDENTITYLINK"><a href="#4-4-ACT-RU-IDENTITYLINK" class="headerlink" title="4.4. ACT_RU_IDENTITYLINK"></a>4.4. ACT_RU_IDENTITYLINK</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.IdentityInfoEntityImpl</code></p><blockquote><p>当用户和流程建立关系的时候, 就会在此表中插入记录</p></blockquote><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>ID_</td><td>主键</td></tr><tr><td>GROUP_ID_</td><td>用户组 ID</td></tr><tr><td>TYPE_</td><td>类型 assignee, candidate, owner, starter…</td></tr><tr><td>USER_ID_</td><td>用户 ID</td></tr><tr><td>TASK_ID_</td><td>任务 ID</td></tr><tr><td>PROC_INST_ID_</td><td>流程实例</td></tr></tbody></table><h2 id="4-5-ACT-RU-EVENT-SUBSCR"><a href="#4-5-ACT-RU-EVENT-SUBSCR" class="headerlink" title="4.5. ACT_RU_EVENT_SUBSCR"></a>4.5. ACT_RU_EVENT_SUBSCR</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.EventSubscriptionEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>EVENT_TYPE_</td><td>事件类型 message, signal</td></tr><tr><td>EVENT_NAME_</td><td>事件名称</td></tr><tr><td>EXECUTION_ID_</td><td>流程执行 ID</td></tr><tr><td>PROC_INST_ID_</td><td>流程实例 ID</td></tr><tr><td>ACTIVITY_ID_</td><td>流程定义节点 ID</td></tr><tr><td>CONFIGURATION_</td><td>配置</td></tr></tbody></table><h2 id="4-6-ACT-RU-JOB"><a href="#4-6-ACT-RU-JOB" class="headerlink" title="4.6. ACT_RU_JOB"></a>4.6. ACT_RU_JOB</h2><p>对应实体类 <code>org.activiti.engine.impl.persistence.entity.JobEntityImpl</code></p><table><thead><tr><th>关键字段</th><th>描述</th></tr></thead><tbody><tr><td>TYPE_</td><td>类型</td></tr><tr><td>LOCK_EXP_TIME_</td><td>锁定过期时间</td></tr><tr><td>LOCK_OWNER_</td><td>锁定接点</td></tr><tr><td>EXCLUSIVE_</td><td>是否唯一</td></tr><tr><td>RETRIES_</td><td>重试次数3</td></tr><tr><td>REPEAT_</td><td>重复表达式 R5/PT10S</td></tr><tr><td>EXCEPTION_STACK_ID_</td><td>异常堆栈(资源表 ID)</td></tr><tr><td>EXCEPTION_MSG_</td><td>异常信息</td></tr><tr><td>DUEDATE_</td><td>过期时间</td></tr><tr><td>HANDLER_TYPE_</td><td>处理器类型</td></tr><tr><td>HANDLER_CFG</td><td>处理器配置</td></tr><tr><td>EXECUTION_ID_</td><td>流程执行表 ID</td></tr></tbody></table><h2 id="4-7-测试代码"><a href="#4-7-测试代码" class="headerlink" title="4.7 测试代码"></a>4.7 测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Deployment deployment = activitiRule.getRepositoryService()</span><br><span class="line">            .createDeployment()</span><br><span class="line">            .name(<span class="string">"二次审批"</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">"org/destiny/activiti/SecondApprove.bpmn20.xml"</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">    log.info(<span class="string">"deployment: &#123;&#125;"</span>, deployment);</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">    ProcessInstance processInstance = activitiRule.getRuntimeService()</span><br><span class="line">            .startProcessInstanceByKey(<span class="string">"SecondApprove"</span>, variables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-1-ACT-RU-EXECUTION-表"><a href="#4-7-1-ACT-RU-EXECUTION-表" class="headerlink" title="4.7.1 ACT_RU_EXECUTION 表"></a>4.7.1 ACT_RU_EXECUTION 表</h3><p>执行完成后, <code>ACT_RU_EXECUTION</code> 表会生成如下两条记录, 流程启动和用户任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">                  ID_: 5</span><br><span class="line">                 REV_: 1</span><br><span class="line">        PROC_INST_ID_: 5</span><br><span class="line">        BUSINESS_KEY_: NULL</span><br><span class="line">           PARENT_ID_: NULL</span><br><span class="line">         PROC_DEF_ID_: SecondApprove:1:4</span><br><span class="line">          SUPER_EXEC_: NULL</span><br><span class="line">   ROOT_PROC_INST_ID_: 5</span><br><span class="line">              ACT_ID_: NULL</span><br><span class="line">           IS_ACTIVE_: 1</span><br><span class="line">       IS_CONCURRENT_: 0</span><br><span class="line">            IS_SCOPE_: 1</span><br><span class="line">      IS_EVENT_SCOPE_: 0</span><br><span class="line">          IS_MI_ROOT_: 0</span><br><span class="line">    SUSPENSION_STATE_: 1</span><br><span class="line">    CACHED_ENT_STATE_: NULL</span><br><span class="line">           TENANT_ID_:</span><br><span class="line">                NAME_: NULL</span><br><span class="line">          START_TIME_: 2018-12-12 03:40:16.634</span><br><span class="line">       START_USER_ID_: NULL</span><br><span class="line">           LOCK_TIME_: NULL</span><br><span class="line">    IS_COUNT_ENABLED_: 0</span><br><span class="line">    EVT_SUBSCR_COUNT_: 0</span><br><span class="line">          TASK_COUNT_: 0</span><br><span class="line">           JOB_COUNT_: 0</span><br><span class="line">     TIMER_JOB_COUNT_: 0</span><br><span class="line">      SUSP_JOB_COUNT_: 0</span><br><span class="line">DEADLETTER_JOB_COUNT_: 0</span><br><span class="line">           VAR_COUNT_: 0</span><br><span class="line">       ID_LINK_COUNT_: 0</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">                  ID_: 7</span><br><span class="line">                 REV_: 1</span><br><span class="line">        PROC_INST_ID_: 5</span><br><span class="line">        BUSINESS_KEY_: NULL</span><br><span class="line">           PARENT_ID_: 5</span><br><span class="line">         PROC_DEF_ID_: SecondApprove:1:4</span><br><span class="line">          SUPER_EXEC_: NULL</span><br><span class="line">   ROOT_PROC_INST_ID_: 5</span><br><span class="line">              ACT_ID_: submitApprove</span><br><span class="line">           IS_ACTIVE_: 1</span><br><span class="line">       IS_CONCURRENT_: 0</span><br><span class="line">            IS_SCOPE_: 0</span><br><span class="line">      IS_EVENT_SCOPE_: 0</span><br><span class="line">          IS_MI_ROOT_: 0</span><br><span class="line">    SUSPENSION_STATE_: 1</span><br><span class="line">    CACHED_ENT_STATE_: NULL</span><br><span class="line">           TENANT_ID_:</span><br><span class="line">                NAME_: NULL</span><br><span class="line">          START_TIME_: 2018-12-12 03:40:16.636</span><br><span class="line">       START_USER_ID_: NULL</span><br><span class="line">           LOCK_TIME_: NULL</span><br><span class="line">    IS_COUNT_ENABLED_: 0</span><br><span class="line">    EVT_SUBSCR_COUNT_: 0</span><br><span class="line">          TASK_COUNT_: 0</span><br><span class="line">           JOB_COUNT_: 0</span><br><span class="line">     TIMER_JOB_COUNT_: 0</span><br><span class="line">      SUSP_JOB_COUNT_: 0</span><br><span class="line">DEADLETTER_JOB_COUNT_: 0</span><br><span class="line">           VAR_COUNT_: 0</span><br><span class="line">       ID_LINK_COUNT_: 0</span><br></pre></td></tr></table></figure><ul><li>两条记录的 <code>PROC_DEF_ID_</code> 相同, 说明是同一个流程的实例.</li><li>第一条记录的 <code>ID_</code> 是5, 第二条记录的 <code>PARENT_ID_</code> 是 5, 说明第二条是第一条生成的.</li><li>第二条记录的 <code>ACT_ID_</code> 值为 submitApprove, 代表 userTask 的一个节点</li><li>第二条记录的 <code>IS_SCOPE</code> 值为 0, 代表不是一个全局的执行流, 而第一条是一个全局执行流.</li></ul><h3 id="4-7-2-ACT-RU-TASK-表"><a href="#4-7-2-ACT-RU-TASK-表" class="headerlink" title="4.7.2 ACT_RU_TASK 表"></a>4.7.2 ACT_RU_TASK 表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">              ID_: 10</span><br><span class="line">             REV_: 1</span><br><span class="line">    EXECUTION_ID_: 7</span><br><span class="line">    PROC_INST_ID_: 5</span><br><span class="line">     PROC_DEF_ID_: SecondApprove:1:4</span><br><span class="line">            NAME_: 填写申请信息</span><br><span class="line">  PARENT_TASK_ID_: NULL</span><br><span class="line">     DESCRIPTION_: NULL</span><br><span class="line">    TASK_DEF_KEY_: submitApprove</span><br><span class="line">           OWNER_: NULL</span><br><span class="line">        ASSIGNEE_: NULL</span><br><span class="line">      DELEGATION_: NULL</span><br><span class="line">        PRIORITY_: 50</span><br><span class="line">     CREATE_TIME_: 2018-12-12 03:40:16.641</span><br><span class="line">        DUE_DATE_: NULL</span><br><span class="line">        CATEGORY_: NULL</span><br><span class="line">SUSPENSION_STATE_: 1</span><br><span class="line">       TENANT_ID_:</span><br><span class="line">        FORM_KEY_: NULL</span><br><span class="line">      CLAIM_TIME_: NULL</span><br></pre></td></tr></table></figure><ul><li><code>PROC_DEF_ID_</code> 为 SecondApprove:1:4</li></ul><h3 id="4-7-3-ACT-RU-VARIABLE-表"><a href="#4-7-3-ACT-RU-VARIABLE-表" class="headerlink" title="4.7.3. ACT_RU_VARIABLE 表"></a>4.7.3. ACT_RU_VARIABLE 表</h3><blockquote><p>保存启动时候设置的变量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">          ID_: 6</span><br><span class="line">         REV_: 1</span><br><span class="line">        TYPE_: string</span><br><span class="line">        NAME_: k1</span><br><span class="line">EXECUTION_ID_: 5</span><br><span class="line">PROC_INST_ID_: 5</span><br><span class="line">     TASK_ID_: NULL</span><br><span class="line">BYTEARRAY_ID_: NULL</span><br><span class="line">      DOUBLE_: NULL</span><br><span class="line">        LONG_: NULL</span><br><span class="line">        TEXT_: v1</span><br><span class="line">       TEXT2_: NULL</span><br></pre></td></tr></table></figure><p>执行设置所属人的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetOwner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TaskService taskService = activitiRule.getTaskService();</span><br><span class="line">    Task task = taskService</span><br><span class="line">            .createTaskQuery()</span><br><span class="line">            .processDefinitionKey(<span class="string">"SecondApprove"</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">// 设置所属人</span></span><br><span class="line">    taskService.setOwner(task.getId(), <span class="string">"destiny"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-4-ACT-RU-IDENTITYLINK"><a href="#4-7-4-ACT-RU-IDENTITYLINK" class="headerlink" title="4.7.4 ACT_RU_IDENTITYLINK"></a>4.7.4 ACT_RU_IDENTITYLINK</h3><pre><code>*************************** 1. row ***************************          ID_: 2501         REV_: 1    GROUP_ID_: NULL        TYPE_: participant     USER_ID_: destiny     TASK_ID_: NULLPROC_INST_ID_: 5 PROC_DEF_ID_: NULL</code></pre><p>而此时在 <code>ACT_RU_TASK</code> 表, 对应的 task 的 <code>OWNER_</code> 字段已经赋值为 destiny</p><h3 id="4-7-5-ACT-RU-TASK"><a href="#4-7-5-ACT-RU-TASK" class="headerlink" title="4.7.5 ACT_RU_TASK"></a>4.7.5 ACT_RU_TASK</h3><pre><code>*************************** 1. row ***************************              ID_: 10             REV_: 2    EXECUTION_ID_: 7    PROC_INST_ID_: 5     PROC_DEF_ID_: SecondApprove:1:4            NAME_: 填写申请信息  PARENT_TASK_ID_: NULL     DESCRIPTION_: NULL    TASK_DEF_KEY_: submitApprove           OWNER_: destiny        ASSIGNEE_: NULL      DELEGATION_: NULL        PRIORITY_: 50     CREATE_TIME_: 2018-12-12 07:19:33.134        DUE_DATE_: NULL        CATEGORY_: NULLSUSPENSION_STATE_: 1       TENANT_ID_:        FORM_KEY_: NULL      CLAIM_TIME_: NULL</code></pre><h1 id="5-历史流程数据表"><a href="#5-历史流程数据表" class="headerlink" title="5. 历史流程数据表"></a>5. 历史流程数据表</h1><table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td>ACT_HI_PROCINST</td><td>历史流程实例表</td></tr><tr><td>ACT_HI_ACTINST</td><td>历史节点信息表, 执行过程中每经过一个节点就会插入一条记录</td></tr><tr><td>ACT_HI_TASKINST</td><td>历史任务表</td></tr><tr><td>ACT_HI_VARINST</td><td>历史变量</td></tr><tr><td>ACT_HI_IDENTITYLINK</td><td>历史参与者</td></tr><tr><td>ACT_HI_DETAIL</td><td>历史变更, 当使用 FormService 提交表单时, 表单的属性就会存储在该表, 以及变量的更改</td></tr><tr><td>ACT_HI_ATTACHMENT</td><td>附件</td></tr><tr><td>ACT_HI_COMMENT</td><td>评论</td></tr><tr><td>ACT_EVT_LOG</td><td>事件日志</td></tr></tbody></table><h2 id="5-1-ACT-HI-PROCINST"><a href="#5-1-ACT-HI-PROCINST" class="headerlink" title="5.1 ACT_HI_PROCINST"></a>5.1 ACT_HI_PROCINST</h2><p>| 关键字段 | </p>]]></content>
      
      <categories>
          
          <category> Activiti </category>
          
          <category> Java </category>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti(2)--BPMN2.0规范</title>
      <link href="/blog/2018/12/08/Activiti-2-BPMN2-0%E8%A7%84%E8%8C%83/"/>
      <url>/blog/2018/12/08/Activiti-2-BPMN2-0%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<p>BPMN2.0:</p><ul><li>是一套业务流程模型与符号建模标准</li><li>精准的执行语义来描述元素的操作</li><li>以 XML 为载体, 以符号可视化业务</li></ul><p>BPMN2.0元素:</p><ul><li>流对象</li><li>连接对象</li><li>数据</li><li>泳道</li><li>描述对象</li></ul><blockquote><p>其中最重要的流对象, 流对象包括活动, 事件和网关, 通过连接对象连接起来, 用来表示数据的流转, 泳道用来对业务的范围做区分, 描述对象并不影响业务的进行, 为流程图的可读性做补充性的描述.</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49372749-a26ac100-f736-11e8-89f1-b01d14fa6f1d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/17758731/49372819-d0e89c00-f736-11e8-984f-34464892a1b9.png" alt="image"></p><h1 id="1-事件"><a href="#1-事件" class="headerlink" title="1. 事件"></a>1. 事件</h1><h2 id="1-1-分类"><a href="#1-1-分类" class="headerlink" title="1.1 分类"></a>1.1 分类</h2><p>按照位置分类:</p><ul><li>开始事件</li><li>中间事件/边界事件(中间事件是指出现在流程中, 可以单独作为流程节点的事件, 而边界事件指的是附属于某个流程节点的事件)</li><li>结束事件</li></ul><p>按照特征分类:</p><ul><li>捕获时间, 捕获事件是一直在等待被触发的事件, 所有的开始事件都是等待被触发的事件</li><li>抛出事件, 执行到节点会自动执行并抛出结果, 结束事件都属于抛出事件.</li></ul><p>按照定义分类:</p><ul><li>定时事件</li><li>错误事件</li><li>信号事件</li><li>消息事件</li></ul><h3 id="1-1-1-定时事件"><a href="#1-1-1-定时事件" class="headerlink" title="1.1.1 定时事件"></a>1.1.1 定时事件</h3><blockquote><p>在使用定时事件时, 首先需要流程引擎的异步开关打开</p></blockquote><ul><li>指定时间(timeDate)</li><li>指定持续时间(timeDuration)</li><li>周期执行(timeCycle)</li></ul><p>定时事件的定义方式: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定定时时间的类型: timeDate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timeDate</span>&gt;</span>2018-01-01T10:10:10<span class="tag">&lt;/<span class="name">timeDate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">timerEventDefinition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-1-1-1-定时开始事件"><a href="#1-1-1-1-定时开始事件" class="headerlink" title="1.1.1.1 定时开始事件"></a>1.1.1.1 定时开始事件</h4><p><img src="https://user-images.githubusercontent.com/17758731/49680055-62576580-facb-11e8-97d2-daa701f4993f.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"timerStartEvent"</span> <span class="attr">name</span>=<span class="string">"Timer Start"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在流程部署完成 5 分钟后,  执行5次 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timeCycle</span>&gt;</span>R5/PT5M<span class="tag">&lt;/<span class="name">timeCycle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-1-1-2-定时边界事件"><a href="#1-1-1-2-定时边界事件" class="headerlink" title="1.1.1.2 定时边界事件"></a>1.1.1.2 定时边界事件</h4><blockquote><p>流程流转到一个普通任务时, 如果在指定时间内没有完成, 就会触发定时边界事件</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49680088-d1cd5500-facb-11e8-8cd7-94c1b85d7402.png" alt="image"></p><h5 id="流程定义"><a href="#流程定义" class="headerlink" title="流程定义"></a>流程定义</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"startEvent"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"commonTask"</span> <span class="attr">name</span>=<span class="string">"Common Task"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明边界事件, attachedToRef 指定边界事件的宿主 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">boundaryEvent</span> <span class="attr">id</span>=<span class="string">"boundaryEvent"</span> <span class="attr">name</span>=<span class="string">"Timer"</span> <span class="attr">attachedToRef</span>=<span class="string">"commonTask"</span> <span class="attr">cancelActivity</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 部署完 5 秒之后 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timeDuration</span>&gt;</span>PT5S<span class="tag">&lt;/<span class="name">timeDuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">boundaryEvent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"timeoutTask"</span> <span class="attr">name</span>=<span class="string">"Timeout Task"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end2"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 构建顺序流 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"startEvent"</span> <span class="attr">targetRef</span>=<span class="string">"commonTask"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"commonTask"</span> <span class="attr">targetRef</span>=<span class="string">"end1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"boundaryEvent"</span> <span class="attr">targetRef</span>=<span class="string">"timeoutTask"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">"timeoutTask"</span> <span class="attr">targetRef</span>=<span class="string">"end2"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超时边界事件</span></span><br><span class="line"><span class="comment"> * 流程启动之后, 流转到 commonTask, 此时让当前线程休眠 10 秒(5秒就会超时)</span></span><br><span class="line"><span class="comment"> * 定时任务超时后执行 timeoutTask</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-time-boundary.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTimerBoundary</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">    <span class="comment">// task 列表</span></span><br><span class="line">    List&lt;Task&gt; taskList = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"task 总数: &#123;&#125;"</span>, taskList.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        log.info(<span class="string">"task.name = &#123;&#125;"</span>, task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 强制睡眠等待边界事件触发</span></span><br><span class="line">    Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// task 列表</span></span><br><span class="line">    taskList = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"休眠后 task 总数: &#123;&#125;"</span>, taskList.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        log.info(<span class="string">"休眠后 task.name = &#123;&#125;"</span>, task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>11:06:06,568 [main] INFO  org.destiny.activiti.bpmn20.TimerEventTest  - task 总数: 111:06:06,568 [main] INFO  org.destiny.activiti.bpmn20.TimerEventTest  - task.name = Common Task...11:06:16,573 [main] INFO  org.destiny.activiti.bpmn20.TimerEventTest  - 休眠后 task 总数: 111:06:16,573 [main] INFO  org.destiny.activiti.bpmn20.TimerEventTest  - 休眠后 task.name = Timeout Task</code></pre><h3 id="1-1-2-错误事件"><a href="#1-1-2-错误事件" class="headerlink" title="1.1.2 错误事件"></a>1.1.2 错误事件</h3><blockquote><p>网关中由提交的表单信息判断正常结束还是异常结束, 错误事件会被错误信息所触发, 主要用于处理业务异常</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49682183-c3dafc80-faea-11e8-9160-48f2f59d1c3f.png" alt="image"></p><blockquote><h4 id="流程图简单分析"><a href="#流程图简单分析" class="headerlink" title="流程图简单分析"></a>流程图简单分析</h4><blockquote><p>提交一个新的 <code>sales leader</code>, 创建一个子流程, 在子流程中同时对 <code>customer rating</code> 以及 <code>profitability</code> 进行考察, 如果同时通过, 则结束子流程, 完成主流程的 <code>Store lead in CRM system</code> 任务以及结束节点</p><blockquote><p>如果 <code>profitability</code> 任务没有提供足够的信息, 则会抛出错误事件, 错误事件被边界事件所捕获, 进入 <code>Provide additional details</code> 流程, 并进入开始子流程</p></blockquote></blockquote></blockquote><h4 id="流程定义-1"><a href="#流程定义-1" class="headerlink" title="流程定义"></a>流程定义</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error</span> <span class="attr">id</span>=<span class="string">"notEnoughInfoError"</span> <span class="attr">errorCode</span>=<span class="string">"not_enough_info"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"reviewSaledLead"</span> <span class="attr">name</span>=<span class="string">"Review sales lead"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"theStart"</span> <span class="attr">activiti:initiator</span>=<span class="string">"initiator"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"theStart"</span> <span class="attr">targetRef</span>=<span class="string">"provideNewSalesLead"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"provideNewSalesLead"</span> <span class="attr">name</span>=<span class="string">"Provide new sales lead"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;initiator&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"customerName"</span> <span class="attr">name</span>=<span class="string">"Customer name"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">required</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"potentialProfit"</span> <span class="attr">name</span>=<span class="string">"Potential profit"</span> <span class="attr">type</span>=<span class="string">"long"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"details"</span> <span class="attr">name</span>=<span class="string">"Details"</span> <span class="attr">type</span>=<span class="string">"string"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"provideNewSalesLead"</span> <span class="attr">targetRef</span>=<span class="string">"reviewSalesLeadSubProcess"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子流程 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">subProcess</span> <span class="attr">id</span>=<span class="string">"reviewSalesLeadSubProcess"</span> <span class="attr">name</span>=<span class="string">"Review sales lead"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"subProcessStart"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow3"</span> <span class="attr">sourceRef</span>=<span class="string">"subProcessStart"</span> <span class="attr">targetRef</span>=<span class="string">"fork"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow4"</span> <span class="attr">sourceRef</span>=<span class="string">"fork"</span> <span class="attr">targetRef</span>=<span class="string">"reviewProfitability"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">"fork"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow5"</span> <span class="attr">sourceRef</span>=<span class="string">"fork"</span> <span class="attr">targetRef</span>=<span class="string">"reviewCustomerRating"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"reviewCustomerRating"</span> <span class="attr">name</span>=<span class="string">"Review customer rating"</span> <span class="attr">activiti:candidateGroups</span>=<span class="string">"accountancy"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow6"</span> <span class="attr">sourceRef</span>=<span class="string">"reviewCustomerRating"</span> <span class="attr">targetRef</span>=<span class="string">"subProcessEnd1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"subProcessEnd1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"reviewProfitability"</span> <span class="attr">name</span>=<span class="string">"Review profitability"</span> <span class="attr">activiti:candidateGroups</span>=<span class="string">"management"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">documentation</span>&gt;</span></span><br><span class="line">                $&#123;initiator&#125; has published a new sales lead: $&#123;customerName&#125;. Details: $&#123;details&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"notEnoughInformation"</span> <span class="attr">name</span>=<span class="string">"Do you believe this customer is profitable?"</span> <span class="attr">type</span>=<span class="string">"enum"</span> <span class="attr">required</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">activiti:value</span> <span class="attr">id</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"Yes"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">activiti:value</span> <span class="attr">id</span>=<span class="string">"true"</span> <span class="attr">name</span>=<span class="string">"No (= request more info)"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">activiti:formProperty</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow7"</span> <span class="attr">sourceRef</span>=<span class="string">"reviewProfitability"</span> <span class="attr">targetRef</span>=<span class="string">"enoughInformationCheck"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">"enoughInformationCheck"</span> <span class="attr">name</span>=<span class="string">"Enough information?"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow8"</span> <span class="attr">sourceRef</span>=<span class="string">"enoughInformationCheck"</span> <span class="attr">targetRef</span>=<span class="string">"notEnoughInformationEnd"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">conditionExpression</span>&gt;</span>$&#123;notEnoughInformation == 'true'&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow9"</span> <span class="attr">sourceRef</span>=<span class="string">"enoughInformationCheck"</span> <span class="attr">targetRef</span>=<span class="string">"subProcessEnd2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">conditionExpression</span>&gt;</span>$&#123;notEnoughInformation == 'false'&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"subProcessEnd2"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"notEnoughInformationEnd"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">errorEventDefinition</span> <span class="attr">errorRef</span>=<span class="string">"notEnoughInfoError"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">subProcess</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow10"</span> <span class="attr">sourceRef</span>=<span class="string">"reviewSalesLeadSubProcess"</span> <span class="attr">targetRef</span>=<span class="string">"storeLeadInCrmSystem"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">boundaryEvent</span> <span class="attr">attachedToRef</span>=<span class="string">"reviewSalesLeadSubProcess"</span> <span class="attr">cancelActivity</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"catchNotEnoughInformationError"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">errorEventDefinition</span> <span class="attr">errorRef</span>=<span class="string">"notEnoughInfoError"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">boundaryEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow11"</span> <span class="attr">sourceRef</span>=<span class="string">"catchNotEnoughInformationError"</span> <span class="attr">targetRef</span>=<span class="string">"provideAdditionalDetails"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"provideAdditionalDetails"</span> <span class="attr">name</span>=<span class="string">"Provide additional details"</span> <span class="attr">activiti:assignee</span>=<span class="string">"$&#123;initiator&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>Provide additional details for $&#123;customerName&#125;.<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"details"</span> <span class="attr">name</span>=<span class="string">"Additional details"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">required</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow12"</span> <span class="attr">sourceRef</span>=<span class="string">"provideAdditionalDetails"</span> <span class="attr">targetRef</span>=<span class="string">"reviewSalesLeadSubProcess"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task</span> <span class="attr">id</span>=<span class="string">"storeLeadInCrmSystem"</span> <span class="attr">name</span>=<span class="string">"Store lead in CRM system"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow13"</span> <span class="attr">sourceRef</span>=<span class="string">"storeLeadInCrmSystem"</span> <span class="attr">targetRef</span>=<span class="string">"processEnd"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"processEnd"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoundaryErrorEventTest</span> <span class="keyword">extends</span> <span class="title">PluggableActivitiTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule = <span class="keyword">new</span> ActivitiRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setUp();</span><br><span class="line">        <span class="comment">// 设置当前用户</span></span><br><span class="line">        Authentication.setAuthenticatedUserId(<span class="string">"destiny"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Authentication.setAuthenticatedUserId(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">super</span>.tearDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/reviewSalesLead.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReviewSalesLeadProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; variables = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">"details"</span>, <span class="string">"interesting"</span>);</span><br><span class="line">        variables.put(<span class="string">"customerName"</span>, <span class="string">"Camery"</span>);</span><br><span class="line"></span><br><span class="line">        ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"reviewSaledLead"</span>, variables);</span><br><span class="line">        log.info(<span class="string">"processInstance: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(processInstance, ToStringStyle.JSON_STYLE));</span><br><span class="line"></span><br><span class="line">        Task task = taskService.createTaskQuery()</span><br><span class="line">                .taskAssignee(<span class="string">"destiny"</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"task: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(task, ToStringStyle.JSON_STYLE));</span><br><span class="line">        <span class="comment">// 使用断言确认</span></span><br><span class="line">        assertEquals(task.getName(), <span class="string">"Provide new sales lead"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交节点</span></span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进入并行网关, 会同时生成两个 task</span></span><br><span class="line">        Task ratingTask = taskService.createTaskQuery().taskCandidateGroup(<span class="string">"accountancy"</span>).singleResult();</span><br><span class="line">        log.info(<span class="string">"ratingTask: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(ratingTask, ToStringStyle.JSON_STYLE));</span><br><span class="line">        assertEquals(ratingTask.getName(), <span class="string">"Review customer rating"</span>);</span><br><span class="line"></span><br><span class="line">        Task profitabilityTask = taskService.createTaskQuery().taskCandidateGroup(<span class="string">"management"</span>).singleResult();</span><br><span class="line">        log.info(<span class="string">"profitabilityTask: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(profitabilityTask, ToStringStyle.JSON_STYLE));</span><br><span class="line">        assertEquals(profitabilityTask.getName(), <span class="string">"Review profitability"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Review profitability 提交后就会触发 errorEvent</span></span><br><span class="line">        variables = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">"notEnoughInformation"</span>, <span class="keyword">true</span>);</span><br><span class="line">        taskService.complete(profitabilityTask.getId(), variables);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找流程发起者 destiny 对应的 task</span></span><br><span class="line">        <span class="comment">// 此时 errorEvent 会被边界条件捕获, 流转到 Review profitability</span></span><br><span class="line">        Task provideDetailsTask = taskService.createTaskQuery().taskAssignee(<span class="string">"destiny"</span>).singleResult();</span><br><span class="line">        log.info(<span class="string">"provideDetailsTask: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(provideDetailsTask, ToStringStyle.JSON_STYLE));</span><br><span class="line">        assertEquals(provideDetailsTask.getName(), <span class="string">"Provide additional details"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完成 Review profitability 节点后, 会重新进入子流程</span></span><br><span class="line">        taskService.complete(provideDetailsTask.getId());</span><br><span class="line">        List&lt;Task&gt; reviewTasks = taskService.createTaskQuery().orderByTaskName().asc().list();</span><br><span class="line">        <span class="keyword">for</span> (Task reviewTask : reviewTasks) &#123;</span><br><span class="line">            log.info(<span class="string">"reviewTask: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(reviewTask, ToStringStyle.JSON_STYLE));</span><br><span class="line">        &#125;</span><br><span class="line">        assertEquals(reviewTasks.get(<span class="number">0</span>).getName(), <span class="string">"Review customer rating"</span>);</span><br><span class="line">        assertEquals(reviewTasks.get(<span class="number">1</span>).getName(), <span class="string">"Review profitability"</span>);</span><br><span class="line"></span><br><span class="line">        taskService.complete(reviewTasks.get(<span class="number">0</span>).getId());</span><br><span class="line">        variables.put(<span class="string">"notEnoughInformation"</span>, <span class="keyword">false</span>);</span><br><span class="line">        taskService.complete(reviewTasks.get(<span class="number">1</span>).getId(), variables);</span><br><span class="line">        assertProcessEnded(processInstance.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志输出-1"><a href="#日志输出-1" class="headerlink" title="日志输出"></a>日志输出</h4><blockquote><p>分析日志可以看到, 没有错误所有的断言全部通过, 证明整个流程无误(日志量比较大, 为了能够清晰描述流程特地将日志格式调整)</p></blockquote><pre><code>03:53:20,823 [main] INFO  org.activiti.engine.ProcessEngines  - initialised process engine default03:53:23,006 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,008 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : theStart (StartEvent, parent id 5 (active)03:53:23,009 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,009 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : theStart (StartEvent, parent id 5 (active)03:53:23,010 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,010 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : theStart -&gt; provideNewSalesLead, parent id 5 (active)03:53:23,010 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,011 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : provideNewSalesLead (UserTask, parent id 5 (active)03:53:23,053 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - processInstance: {&quot;currentFlowElement&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;processInstance&quot;:&quot;ProcessInstance[5]&quot;,&quot;parent&quot;:null,&quot;executions&quot;:[Execution[ id &apos;10&apos; ] - activity &apos;provideNewSalesLead - parent &apos;5&apos;],&quot;superExecution&quot;:null,&quot;subProcessInstance&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;name&quot;:null,&quot;description&quot;:null,&quot;localizedName&quot;:null,&quot;localizedDescription&quot;:null,&quot;lockTime&quot;:null,&quot;isActive&quot;:true,&quot;isScope&quot;:true,&quot;isConcurrent&quot;:false,&quot;isEnded&quot;:false,&quot;isEventScope&quot;:false,&quot;isMultiInstanceRoot&quot;:false,&quot;isCountEnabled&quot;:false,&quot;eventName&quot;:null,&quot;eventSubscriptions&quot;:[],&quot;jobs&quot;:[],&quot;timerJobs&quot;:[],&quot;tasks&quot;:[],&quot;identityLinks&quot;:[IdentityLinkEntity[id=7, type=starter, userId=destiny, processInstanceId=5]],&quot;deleteReason&quot;:null,&quot;suspensionState&quot;:1,&quot;startUserId&quot;:&quot;destiny&quot;,&quot;startTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;eventSubscriptionCount&quot;:0,&quot;taskCount&quot;:0,&quot;jobCount&quot;:0,&quot;timerJobCount&quot;:0,&quot;suspendedJobCount&quot;:0,&quot;deadLetterJobCount&quot;:0,&quot;variableCount&quot;:0,&quot;identityLinkCount&quot;:0,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;processDefinitionKey&quot;:&quot;reviewSaledLead&quot;,&quot;processDefinitionName&quot;:&quot;Review sales lead&quot;,&quot;processDefinitionVersion&quot;:1,&quot;deploymentId&quot;:null,&quot;activityId&quot;:null,&quot;activityName&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;businessKey&quot;:null,&quot;parentId&quot;:null,&quot;superExecutionId&quot;:null,&quot;rootProcessInstanceId&quot;:&quot;5&quot;,&quot;rootProcessInstance&quot;:null,&quot;forcedUpdate&quot;:false,&quot;queryVariables&quot;:null,&quot;isDeleted&quot;:false,&quot;variableInstances&quot;:{details=VariableInstanceEntity[id=8, name=details, type=string, textValue=interesting], customerName=VariableInstanceEntity[id=9, name=customerName, type=string, textValue=Camery], initiator=VariableInstanceEntity[id=6, name=initiator, type=string, textValue=destiny]},&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;5&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:true,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,075 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - task: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:1,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:&quot;destiny&quot;,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Provide new sales lead&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:null,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;10&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;taskDefinitionKey&quot;:&quot;provideNewSalesLead&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;13&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,081 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :03:53:23,082 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : provideNewSalesLead (UserTask, parent id 5 (active)03:53:23,083 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,083 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : provideNewSalesLead (UserTask, parent id 5 (active)03:53:23,084 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,084 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : provideNewSalesLead -&gt; reviewSalesLeadSubProcess, parent id 5 (active)03:53:23,084 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,084 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active)03:53:23,086 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,087 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    └── 17 : subProcessStart (StartEvent, parent id 14 (active)03:53:23,087 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,087 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    └── 17 : subProcessStart (StartEvent, parent id 14 (active)03:53:23,087 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,088 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    └── 17 : subProcessStart -&gt; fork, parent id 14 (active)03:53:23,088 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,088 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    └── 17 : fork (ParallelGateway, parent id 14 (active)03:53:23,088 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,089 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    └── 17 : fork (ParallelGateway, parent id 14 (not active)03:53:23,089 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,089 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : fork -&gt; reviewProfitability, parent id 14 (active)    └── 20 : fork -&gt; reviewCustomerRating, parent id 14 (active)03:53:23,089 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,090 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : reviewProfitability (UserTask, parent id 14 (active)    └── 20 : fork -&gt; reviewCustomerRating, parent id 14 (active)03:53:23,090 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,090 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : reviewProfitability (UserTask, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,092 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,092 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 10 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : reviewProfitability (UserTask, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,114 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - ratingTask: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:0,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:null,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Review customer rating&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:null,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;20&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;taskDefinitionKey&quot;:&quot;reviewCustomerRating&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;25&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,116 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - profitabilityTask: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:0,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:null,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Review profitability&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:&quot;destiny has published a new sales lead: Camery. Details: interesting&quot;,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;17&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;taskDefinitionKey&quot;:&quot;reviewProfitability&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;22&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,122 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :03:53:23,125 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : reviewProfitability (UserTask, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,126 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,126 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : reviewProfitability (UserTask, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,126 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,127 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : reviewProfitability -&gt; enoughInformationCheck, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,127 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,127 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : enoughInformationCheck (ExclusiveGateway, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,131 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,131 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : enoughInformationCheck -&gt; notEnoughInformationEnd, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,132 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,132 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : enoughInformationCheck -&gt; notEnoughInformationEnd, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,132 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,132 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : notEnoughInformationEnd (EndEvent, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,133 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :03:53:23,134 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 14 (active)    ├── 17 : notEnoughInformationEnd (EndEvent, parent id 14 (active)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (active)03:53:23,139 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,139 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 17 : notEnoughInformationEnd (EndEvent, parent id 14 (not active) (ended)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (not active) (ended)└── 16 : catchNotEnoughInformationError (BoundaryEvent, parent id 5 (active)03:53:23,139 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,139 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 17 : notEnoughInformationEnd (EndEvent, parent id 14 (not active) (ended)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (not active) (ended)└── 16 : catchNotEnoughInformationError -&gt; provideAdditionalDetails, parent id 5 (active)03:53:23,139 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,140 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 14 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 17 : notEnoughInformationEnd (EndEvent, parent id 14 (not active) (ended)    └── 20 : reviewCustomerRating (UserTask, parent id 14 (not active) (ended)└── 16 : provideAdditionalDetails (UserTask, parent id 5 (active)03:53:23,150 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - provideDetailsTask: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:1,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:&quot;destiny&quot;,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Provide additional details&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:&quot;Provide additional details for Camery.&quot;,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;16&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;taskDefinitionKey&quot;:&quot;provideAdditionalDetails&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;32&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,152 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :03:53:23,153 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : provideAdditionalDetails (UserTask, parent id 5 (active)03:53:23,154 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,154 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : provideAdditionalDetails (UserTask, parent id 5 (active)03:53:23,155 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,155 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : provideAdditionalDetails -&gt; reviewSalesLeadSubProcess, parent id 5 (active)03:53:23,155 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,155 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active)03:53:23,156 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,157 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : subProcessStart (StartEvent, parent id 33 (active)03:53:23,157 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,157 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : subProcessStart (StartEvent, parent id 33 (active)03:53:23,157 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,158 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : subProcessStart -&gt; fork, parent id 33 (active)03:53:23,158 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,158 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : fork (ParallelGateway, parent id 33 (active)03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : fork (ParallelGateway, parent id 33 (not active)03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    ├── 36 : fork -&gt; reviewProfitability, parent id 33 (active)    └── 39 : fork -&gt; reviewCustomerRating, parent id 33 (active)03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    ├── 36 : reviewProfitability (UserTask, parent id 33 (active)    └── 39 : fork -&gt; reviewCustomerRating, parent id 33 (active)03:53:23,159 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,160 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    ├── 36 : reviewProfitability (UserTask, parent id 33 (active)    └── 39 : reviewCustomerRating (UserTask, parent id 33 (active)03:53:23,161 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,162 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 16 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (ended)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    ├── 36 : reviewProfitability (UserTask, parent id 33 (active)    └── 39 : reviewCustomerRating (UserTask, parent id 33 (active)03:53:23,180 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - reviewTask: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:0,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:null,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Review customer rating&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:null,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;39&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;taskDefinitionKey&quot;:&quot;reviewCustomerRating&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;44&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,180 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - reviewTask: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:0,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:null,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Review profitability&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:&quot;destiny has published a new sales lead: Camery. Details: interesting&quot;,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Sat Dec 08 15:53:23 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;36&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;5&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;reviewSaledLead:1:4&quot;,&quot;taskDefinitionKey&quot;:&quot;reviewProfitability&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;41&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}03:53:23,183 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :03:53:23,190 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 39 : reviewCustomerRating (UserTask, parent id 33 (active)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,190 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,190 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 39 : reviewCustomerRating (UserTask, parent id 33 (active)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,191 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,191 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 39 : reviewCustomerRating -&gt; subProcessEnd1, parent id 33 (active)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,191 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,191 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 39 : subProcessEnd1 (EndEvent, parent id 33 (active)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,191 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,192 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 39 : subProcessEnd1 (EndEvent, parent id 33 (active)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,192 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.EndExecutionOperation :03:53:23,193 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 39 : subProcessEnd1 (EndEvent, parent id 33 (active)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,203 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :03:53:23,204 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,205 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,205 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability (UserTask, parent id 33 (active)03:53:23,206 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,206 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : reviewProfitability -&gt; enoughInformationCheck, parent id 33 (active)03:53:23,206 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,206 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : enoughInformationCheck (ExclusiveGateway, parent id 33 (active)03:53:23,206 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,206 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : enoughInformationCheck -&gt; subProcessEnd2, parent id 33 (active)03:53:23,207 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,207 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : enoughInformationCheck -&gt; subProcessEnd2, parent id 33 (active)03:53:23,207 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,207 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (active)03:53:23,207 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,207 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (active)03:53:23,208 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.EndExecutionOperation :03:53:23,208 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active) (scope)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (active)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (active)03:53:23,211 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,211 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (active)03:53:23,211 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,211 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : reviewSalesLeadSubProcess -&gt; storeLeadInCrmSystem, parent id 5 (active)03:53:23,211 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : storeLeadInCrmSystem (ManualTask, parent id 5 (active)03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : storeLeadInCrmSystem (ManualTask, parent id 5 (active)03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : storeLeadInCrmSystem -&gt; processEnd, parent id 5 (active)03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : processEnd (EndEvent, parent id 5 (active)03:53:23,212 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :03:53:23,213 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : processEnd (EndEvent, parent id 5 (active)03:53:23,213 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.EndExecutionOperation :03:53:23,213 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - 5 (process instance)└── 33 : reviewSalesLeadSubProcess (SubProcess, parent id 5 (not active) (scope) (ended)    ├── 35 : catchNotEnoughInformationError (BoundaryEvent, parent id 33 (not active) (ended)    └── 36 : subProcessEnd2 (EndEvent, parent id 33 (not active) (ended)└── 49 : processEnd (EndEvent, parent id 5 (active)03:53:23,281 [main] INFO  org.activiti.engine.impl.test.AbstractTestCase  - database was clean</code></pre><h3 id="1-1-3-信号事件"><a href="#1-1-3-信号事件" class="headerlink" title="1.1.3. 信号事件"></a>1.1.3. 信号事件</h3><h4 id="1-1-3-1-信号开始事件"><a href="#1-1-3-1-信号开始事件" class="headerlink" title="1.1.3.1. 信号开始事件"></a>1.1.3.1. 信号开始事件</h4><blockquote><p>信号开始事件的启动方式与普通开始事件启动方式很接近, 需要发出对应的信号去启动它</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49683712-2bea0c80-fb04-11e8-9a9d-f580144f604d.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">signal</span> <span class="attr">id</span>=<span class="string">"theSignal"</span> <span class="attr">name</span>=<span class="string">"The signal"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"processWithSignalStart1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"theStart"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">signalEventDefinition</span> <span class="attr">id</span>=<span class="string">"theSignalEventDefinition"</span> <span class="attr">signalRef</span>=<span class="string">"theSignal"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-1-3-2-信号中间事件"><a href="#1-1-3-2-信号中间事件" class="headerlink" title="1.1.3.2 信号中间事件"></a>1.1.3.2 信号中间事件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">signal</span> <span class="attr">id</span>=<span class="string">"alterSignal"</span> <span class="attr">name</span>=<span class="string">"alter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"catchSignal"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 信号抛出事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intermediateThrowEvent</span> <span class="attr">id</span>=<span class="string">"throwSignalEvent"</span> <span class="attr">name</span>=<span class="string">"Alter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">signalEventDefinition</span> <span class="attr">signalRef</span>=<span class="string">"alterSignal"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intermediateThrowEvent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 信号捕获事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intermediateCatchEvent</span> <span class="attr">id</span>=<span class="string">"throwSignalEvent"</span> <span class="attr">name</span>=<span class="string">"On Alter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">signalEventDefinition</span> <span class="attr">signalRef</span>=<span class="string">"alterSignal"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intermediateCatchEvent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-4-消息事件"><a href="#1-1-4-消息事件" class="headerlink" title="1.1.4 消息事件"></a>1.1.4 消息事件</h3><blockquote><p>消息事件的定义和信号事件的定义非常相近</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">id</span>=<span class="string">"newInvoice"</span> <span class="attr">name</span>=<span class="string">"newInvoiceMessage"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">id</span>=<span class="string">"payment"</span> <span class="attr">name</span>=<span class="string">"paymentMessage"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"catchSignal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"messageStart"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">messsageEventDefinition</span> <span class="attr">messageRef</span>=<span class="string">"newInvoice"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 信号捕获事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intermediateCatchEvent</span> <span class="attr">id</span>=<span class="string">"paymentEvt"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">messageEventDefinition</span> <span class="attr">messageRef</span>=<span class="string">"payment"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intermediateCatchEvent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-顺序流和和网关"><a href="#3-顺序流和和网关" class="headerlink" title="3. 顺序流和和网关"></a>3. 顺序流和和网关</h1><p>顺序流的分类: </p><ul><li>顺序流</li><li>条件顺序流</li><li>默认顺序流</li></ul><h2 id="3-1-网关"><a href="#3-1-网关" class="headerlink" title="3.1. 网关"></a>3.1. 网关</h2><p>网关的分类:</p><ul><li>排他网关(Exclusive Gateway)</li><li>并行网关(Parallel Gateway)</li><li>包容网关(Inclusive Gateway), 类似排他网关和并行网关的组合体, 即支持多条路, 有支持表达式</li><li>事件网关(Event-based Gateway), 每个分支都有一个捕获事件等待被触发, 一个触发后, 其他都会失效</li></ul><h3 id="3-1-1-排他网关"><a href="#3-1-1-排他网关" class="headerlink" title="3.1.1. 排他网关"></a>3.1.1. 排他网关</h3><blockquote><p>分支判断<br>只能选一<br>支持默认</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49684049-f562c080-fb08-11e8-9c3f-ef357ceb32b7.png" alt="image"></p><h4 id="流程定义-2"><a href="#流程定义-2" class="headerlink" title="流程定义"></a>流程定义</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">"exclusiveGateway1"</span> <span class="attr">name</span>=<span class="string">"Exclusive Gateway"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask1"</span> <span class="attr">name</span>=<span class="string">"精英"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask2"</span> <span class="attr">name</span>=<span class="string">"优秀"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask3"</span> <span class="attr">name</span>=<span class="string">"普通"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"exclusiveGateway1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">"tFormalExpression"</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[score &gt;= 90]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow3"</span> <span class="attr">sourceRef</span>=<span class="string">"exclusiveGateway1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">"tFormalExpression"</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[score &gt;= 75 &amp;&amp; score &lt; 90]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认数据流 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow4"</span> <span class="attr">sourceRef</span>=<span class="string">"exclusiveGateway1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-exclusive.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExclusiveGateway</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; variables = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">"key1"</span>, <span class="number">3</span>);</span><br><span class="line">    variables.put(<span class="string">"score"</span>, <span class="number">91</span>);</span><br><span class="line">    ProcessInstance processInstance = activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    Task task = activitiRule.getTaskService().createTaskQuery().singleResult();</span><br><span class="line">    <span class="comment">// org.destiny.activiti.bpmn20.GatewayTest  - task.name = 精英</span></span><br><span class="line">    log.info(<span class="string">"task.name = &#123;&#125;"</span>, task.getName());     </span><br><span class="line">    assertEquals(task.getName(), <span class="string">"精英"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-并行网关"><a href="#3-1-2-并行网关" class="headerlink" title="3.1.2. 并行网关"></a>3.1.2. 并行网关</h3><blockquote><p>让流程从单线程变为并发情况, 原有的一条流转数据变为两条, 可以同时进行确认支付和确认收货, 当这两个条件同时满足时, 继续进行后面的操作</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49684527-edf2e580-fb0f-11e8-9c43-d8e34140d663.png" alt="image"></p><ul><li>流程并发</li><li>分支</li><li>合并</li><li>忽略条件(即使填了条件也不会生效)</li><li>非对称(不要求所有的分支最终都合并在一起)</li></ul><h4 id="流程定义-3"><a href="#流程定义-3" class="headerlink" title="流程定义"></a>流程定义</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">"parallelGateway1"</span> <span class="attr">name</span>=<span class="string">"Parallel Gateway"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask1"</span> <span class="attr">name</span>=<span class="string">"确认支付"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask2"</span> <span class="attr">name</span>=<span class="string">"确认收货"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow3"</span> <span class="attr">sourceRef</span>=<span class="string">"parallelGateway1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow4"</span> <span class="attr">sourceRef</span>=<span class="string">"parallelGateway1"</span> <span class="attr">targetRef</span>=<span class="string">"userTask2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">"parallelGateway2"</span> <span class="attr">name</span>=<span class="string">"parallelGateway"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow8"</span> <span class="attr">sourceRef</span>=<span class="string">"userTask1"</span> <span class="attr">targetRef</span>=<span class="string">"parallelGateway2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow9"</span> <span class="attr">sourceRef</span>=<span class="string">"userTask2"</span> <span class="attr">targetRef</span>=<span class="string">"parallelGateway2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"userTask3"</span> <span class="attr">name</span>=<span class="string">"订单完成"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow10"</span> <span class="attr">sourceRef</span>=<span class="string">"parallelGateway2"</span> <span class="attr">targetRef</span>=<span class="string">"userTask3"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-parallel.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParallelGateway</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">    List&lt;Task&gt; taskList = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"过并行网关时的 task 数量: &#123;&#125;"</span>, taskList.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        log.info(<span class="string">"task name: &#123;&#125;"</span>, task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    assertEquals(<span class="number">2</span>, taskList.size());</span><br><span class="line">    activitiRule.getTaskService().complete(taskList.get(<span class="number">0</span>).getId());</span><br><span class="line">    List&lt;Task&gt; taskList1 = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"提交第 1 个任务时的 task 数量: [&#123;&#125;]"</span>, taskList1.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList1) &#123;</span><br><span class="line">        log.info(<span class="string">"task name: &#123;&#125;"</span>, task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    assertEquals(<span class="number">1</span>, taskList1.size());</span><br><span class="line">    activitiRule.getTaskService().complete(taskList.get(<span class="number">1</span>).getId());</span><br><span class="line">    List&lt;Task&gt; taskList2 = activitiRule.getTaskService().createTaskQuery().list();</span><br><span class="line">    log.info(<span class="string">"提交第 2 个任务时的 task 数量: [&#123;&#125;]"</span>, taskList2.size());</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList2) &#123;</span><br><span class="line">        log.info(<span class="string">"task name: &#123;&#125;"</span>, task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    assertEquals(<span class="number">1</span>, taskList1.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志输出-2"><a href="#日志输出-2" class="headerlink" title="日志输出"></a>日志输出</h4><pre><code>06:17:51,705 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - 过并行网关时的 task 数量: 206:17:51,705 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - task name: 确认支付06:17:51,706 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - task name: 确认收货06:17:51,710 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :06:17:51,721 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - 提交第 1 个任务时的 task 数量: [1]06:17:51,721 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - task name: 确认收货06:17:51,724 [main] INFO  org.activiti.engine.impl.interceptor.DebugCommandInvoker  - Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :06:17:51,738 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - 提交第 2 个任务时的 task 数量: [1]06:17:51,738 [main] INFO  org.destiny.activiti.bpmn20.GatewayTest  - task name: 订单完成</code></pre><h3 id="3-1-3-包容性网关"><a href="#3-1-3-包容性网关" class="headerlink" title="3.1.3. 包容性网关"></a>3.1.3. 包容性网关</h3><blockquote><p>可以理解为排他网关和并行网关的结合体</p></blockquote><ul><li>排他网关有条件, 只能选择一条路径</li><li>并行网关不带条件, 所有路径都会执行</li><li>包容性网关有条件, 且支持并行运行</li></ul><ol><li>并发</li><li>分支</li><li>合并</li><li>条件</li><li>非对称</li></ol><h4 id="事件网关"><a href="#事件网关" class="headerlink" title="事件网关"></a>事件网关</h4><blockquote><p>会根据连接的捕获时间决定流程的走向, 只能走一条线路</p></blockquote><ol><li>流程暂停</li><li>事件订阅</li><li>捕获事件</li><li>单一执行</li></ol>]]></content>
      
      <categories>
          
          <category> Activiti </category>
          
          <category> 工作流 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti6.0用户指引中文版</title>
      <link href="/blog/2018/12/05/Activiti6-0%E7%94%A8%E6%88%B7%E6%8C%87%E5%BC%95%E4%B8%AD%E6%96%87%E7%89%88/"/>
      <url>/blog/2018/12/05/Activiti6-0%E7%94%A8%E6%88%B7%E6%8C%87%E5%BC%95%E4%B8%AD%E6%96%87%E7%89%88/</url>
      <content type="html"><![CDATA[<h1 id="1-引导"><a href="#1-引导" class="headerlink" title="1. 引导"></a>1. 引导</h1><h2 id="1-1-License-许可"><a href="#1-1-License-许可" class="headerlink" title="1.1. License 许可"></a>1.1. License 许可</h2><p>Activiti 是在 <a href="http://www.apache.org/licenses/LICENSE-2.0.html" target="_blank" rel="noopener">Apache V2 license</a> 许可下发布的.</p><h2 id="1-2-下载"><a href="#1-2-下载" class="headerlink" title="1.2. 下载"></a>1.2. 下载</h2><p><a href="http://activiti.org/download.html" target="_blank" rel="noopener">http://activiti.org/download.html</a></p><h2 id="1-3-源代码"><a href="#1-3-源代码" class="headerlink" title="1.3. 源代码"></a>1.3. 源代码</h2><p>该发行版以 jar 文件的形式包含了大多数源代码, Activiti 的源代码可以在 <a href="https://github.com/Activiti/Activiti" target="_blank" rel="noopener">https://github.com/Activiti/Activiti</a> 找到.</p><h2 id="1-4-Required-software-必需的软件"><a href="#1-4-Required-software-必需的软件" class="headerlink" title="1.4. Required software 必需的软件"></a>1.4. Required software 必需的软件</h2><h3 id="1-4-1-JDK-7"><a href="#1-4-1-JDK-7" class="headerlink" title="1.4.1. JDK 7+"></a>1.4.1. JDK 7+</h3><p>Activiti 需要 JDK 版本高于或等于 7, 前往 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Oracle Java SE downloads</a> 进行下载. 在该页面上有相关的下载说明, 可以通过在命令行运行 <code>java -version</code> 命令来验证安装是否成功. 该命令会打印出安装的 JDK 版本.</p><h3 id="1-4-2-IDE"><a href="#1-4-2-IDE" class="headerlink" title="1.4.2. IDE"></a>1.4.2. IDE</h3><h1 id="2-Getting-Started-启动"><a href="#2-Getting-Started-启动" class="headerlink" title="2. Getting Started 启动"></a>2. Getting Started 启动</h1><h2 id="2-1-One-minute-version-一分钟版"><a href="#2-1-One-minute-version-一分钟版" class="headerlink" title="2.1. One minute version 一分钟版"></a>2.1. One minute version 一分钟版</h2><p>在从 <a href="http://www.activiti.org/" target="_blank" rel="noopener">Activiti website</a> 下载了 Activiti UI 的 WAR 包之后, 按照这些步骤去以默认配置运行样例. 你需要安装 <a href="http://java.sun.com/javase/downloads/index.jsp" target="_blank" rel="noopener">Java runtime</a> 和 <a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">Apache Tomcat</a>(实际上, 任意一个 web 容器都可以正常运行, 因为我们只依赖与 Servlet 的能力, 但我们主要在 Tomcat 上进行测试)</p><ul><li>将下载的 activiti-app.war 文件复制到 Tomcat 的 webapps 路径下</li><li>通过 bin 路径下的 startup.sh 或 startop.bat 启动 Tomcat</li><li>当 Tomcat 启动后, 打开浏览器并前往 <a href="http://localhost:8080/activiti-app" target="_blank" rel="noopener">http://localhost:8080/activiti-app</a>, 使用账号 admin, 密码 test 登录</li></ul><p>这样就可以了, ActivitiUI 应用默认使用基于内存的 H2 数据库</p><h2 id="2-2-Activiti-setup-Activiti-的安装"><a href="#2-2-Activiti-setup-Activiti-的安装" class="headerlink" title="2.2 Activiti setup Activiti 的安装"></a>2.2 Activiti setup Activiti 的安装</h2><p>要安装 Activiti, 需要安装 <a href="http://java.sun.com/javase/downloads/index.jsp" target="_blank" rel="noopener">Java runtime</a> 和 <a href="http://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">Apache Tomcat</a>, 并且确认系统变量 <code>JAVA_HOME</code> 已经正确的设置, 具体设置的方式取决于你的操作系统.</p><p>只需要将 war 文件从 Activiti 下载页面下载到 Tomcat 安装路径下的 <code>webapps</code> 路径就可以让 Activiti UI 和 REST 应用启动. 默认情况下 UI 应用使用内存数据库运行.</p><p>示例用户:</p><table><thead><tr><th>userId</th><th>Password</th><th>Security roles</th></tr></thead><tbody><tr><td>admin</td><td>test</td><td>admin</td></tr></tbody></table><p>现在可以访问的应用:</p><table><thead><tr><th>Webapp Name</th><th>URL</th><th>Description</th></tr></thead><tbody><tr><td>Activiti UI</td><td><a href="http://localhost:8080/activiti-app" target="_blank" rel="noopener">http://localhost:8080/activiti-app</a></td><td>流程引擎用户控制台, 通过该工具可以开启新的流程, 分配任务, 查看和认领任务等</td></tr></tbody></table><p>需要注意的是, Activiti UI 项目实例的启动只是一个简单快速演示功能的方式, 并不是说只能使用这种方式使用 Activiti. Activiti 只是一个 jar 文件, 可以嵌入到任何 Java 环境中, 比如 swing, Tomcat, JBoss, WebSphere 等. 或者也可以选择将Activiti作为一个典型的独立BPM服务器来运行, 只要能在 Java 中完成的, 就能使用 Activiti.</p><h2 id="2-3-Activiti-database-setup-数据库安装"><a href="#2-3-Activiti-database-setup-数据库安装" class="headerlink" title="2.3. Activiti database setup 数据库安装"></a>2.3. Activiti database setup 数据库安装</h2><p>如同在一分钟版示例说的, Activiti UI 应用默认使用内存数据库 H2. 要让 Activiti UI  应用使用独立的 H2 或者其他的数据库, 可以修改 <code>WEB-INF/classes/META-INF/activiti-app</code> 路径下的 <code>activiti-app.properties</code> 文件</p><h2 id="2-4-Include-the-Activiti-jar-and-its-denpendices-包含-jar-及其依赖"><a href="#2-4-Include-the-Activiti-jar-and-its-denpendices-包含-jar-及其依赖" class="headerlink" title="2.4 Include the Activiti jar and its denpendices 包含 jar 及其依赖"></a>2.4 Include the Activiti jar and its denpendices 包含 jar 及其依赖</h2><p>为了包含 Activiti jar 和它的依赖库, 我们决定使用 maven, 因为它简化了我们双方的依赖管理. 根据引导 <a href="http://www.activiti.org/community.html#maven.repository" target="_blank" rel="noopener">http://www.activiti.org/community.html#maven.repository</a> 来引入必要的依赖.</p><p>作为选择, 如果你不想使用 maven, 可以直接在项目中引入 jar 文件. Activiti 下载的压缩包包含一个文件夹 <code>libs</code>, 其中包含了所有 Activiti jar 文件(以及源代码 jar). 依赖不是通过这种方式提供的, Activiti 必须的依赖如下所示(使用 <code>mvn dependency:tree</code> 生成):</p><pre><code>org.activiti:activiti-engine:jar:6.x+- org.activiti:activiti-bpmn-converter:jar:6.x:compile|  \- org.activiti:activiti-bpmn-model:jar:6.x:compile|     +- com.fasterxml.jackson.core:jackson-core:jar:2.2.3:compile|     \- com.fasterxml.jackson.core:jackson-databind:jar:2.2.3:compile|        \- com.fasterxml.jackson.core:jackson-annotations:jar:2.2.3:compile+- org.activiti:activiti-process-validation:jar:6.x:compile+- org.activiti:activiti-image-generator:jar:6.x:compile+- org.apache.commons:commons-email:jar:1.2:compile|  +- javax.mail:mail:jar:1.4.1:compile|  \- javax.activation:activation:jar:1.1:compile+- org.apache.commons:commons-lang3:jar:3.3.2:compile+- org.mybatis:mybatis:jar:3.3.0:compile+- org.springframework:spring-beans:jar:4.1.6.RELEASE:compile|  \- org.springframework:spring-core:jar:4.1.6.RELEASE:compile+- joda-time:joda-time:jar:2.6:compile+- org.slf4j:slf4j-api:jar:1.7.6:compile+- org.slf4j:jcl-over-slf4j:jar:1.7.6:compile</code></pre><p>注意, 如果需要使用 <a href="https://www.activiti.org/userguide/#bpmnEmailTask" target="_blank" rel="noopener">mail service task</a> 才需要引入 mail 依赖 jar.</p><p>所有的依赖可以很轻松的通过使用 <code>mvn denpendency:cpoy-dependencies</code> 在 <a href="https://github.com/Activiti/Activiti" target="_blank" rel="noopener">activiti源代码</a> 上下载.</p><h2 id="2-5-Next-steps-下一步"><a href="#2-5-Next-steps-下一步" class="headerlink" title="2.5. Next steps 下一步"></a>2.5. Next steps 下一步</h2><h1 id="3-Configuration-配置"><a href="#3-Configuration-配置" class="headerlink" title="3. Configuration 配置"></a>3. Configuration 配置</h1><h2 id="3-1-Creating-a-ProcessEngine-创建一个流程引擎"><a href="#3-1-Creating-a-ProcessEngine-创建一个流程引擎" class="headerlink" title="3.1. Creating a ProcessEngine 创建一个流程引擎"></a>3.1. Creating a ProcessEngine 创建一个流程引擎</h2><p>Activiti 流程引擎通过 XML 文件 <code>activiti.cfg.xml</code> 配置, 需要注意的是不适用于 <a href="https://www.activiti.org/userguide/#springintegration" target="_blank" rel="noopener">Spring 风格下的流程引擎创建</a>.</p><p>获取 <code>流程引擎</code> 最简单的方式是使用 <code>org.activiti.engine.ProcessEngines</code> 类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngine processEngine = ProcessEngines.getDefauleProcesEngine();</span><br></pre></td></tr></table></figure><p>这样的方式会在 classpath 上寻找 <code>activiti.cfg.xml</code> 文件, 并且基于文件中的配置去构造引擎. 下面的片段展示了一个配置文件的样例, 后面的章节会给出配置参数的详细介绍.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"sa"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"asyncExecutorActivate"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mailServerHost"</span> <span class="attr">value</span>=<span class="string">"mail.my-corp.com"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mailServerPort"</span> <span class="attr">value</span>=<span class="string">"5025"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>值得注意的是, 这个 XML 配置文件实际上是一个 Spring 配置文件. 这并不意味着 Activiti 只能运行在 Spring 环境中. 我们仅仅是在内部利用 Spring 解析和依赖注入的能力来构建引擎.</p><p><code>ProcessEngineConfiguration</code> 对象也可以被配置文件编程式的创建, 也可以用一个不同 bean id.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于默认配置文件 activiti.cfg.xml</span></span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault();</span><br><span class="line"><span class="comment">// 指定路径</span></span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource);</span><br><span class="line"><span class="comment">// 指定路径和提取的 bean id</span></span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);</span><br><span class="line"><span class="comment">// 指定输入流</span></span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream);</span><br><span class="line"><span class="comment">// 指定输入流和 bean id</span></span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName);</span><br></pre></td></tr></table></figure><p>与此同时, 也可以不使用配置文件, 直接通过默认创建配置(参考<a href="https://www.activiti.org/userguide/#configurationClasses" target="_blank" rel="noopener">不同的支持类</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngineConfiguraion.createStandaloneProcessEngineConfiguration();</span><br><span class="line">ProcessEngineConfiguraion.createStandaloneInMemProcessEngineConfiguration();</span><br></pre></td></tr></table></figure><p>所有这些 <code>ProcessEngineConfiguraion.createXXX()</code> 方法返回一个后续可调整的 <code>ProcessEngineConfiguraion</code> 方便链式调用, 在调用 <code>buildProcessEngine()</code> 操作后, 就会创建一个 <code>ProcessEngine</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngine processEngine = ProcessEngineConfiguraion.createStandaloneInMemProcessEngineConfiguration()</span><br><span class="line">    .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)</span><br><span class="line">    .setJdbcUrl(<span class="string">"jdbc:h2:mem:my-own-db;DB_CLOSE_DELAY=1000"</span>)</span><br><span class="line">    .setAsyncExcutorActivate(<span class="keyword">false</span>)</span><br><span class="line">    .buildProcessEngine();</span><br></pre></td></tr></table></figure><h2 id="3-2-ProcessEngineConfiguration-bean"><a href="#3-2-ProcessEngineConfiguration-bean" class="headerlink" title="3.2. ProcessEngineConfiguration bean"></a>3.2. ProcessEngineConfiguration bean</h2><p><code>activiti.cfg.xml</code> 必须包含一个 id 为 <code>processEngineConfiguraion</code> 的 bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个 bean 会用来构建 <code>ProceeEngine</code>, 有多个类可以用来定义 <code>processEngineConfiguration</code>, 这些类代表了不同的环境, 并且设置了对应的默认值. 最佳的实践是选择与你当前环境最符合的类, 这样可以少配置几个引擎的参数, 下面是当前可用的类:</p><ul><li><strong>org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration</strong>: 这个 ProcessEngine 单独运行, Activiti 会自己处理事务, 默认情况下, 数据库只会在引擎启动的时候检查(并且如果没有 Activiti 的表或者表的版本不正确时会抛出异常);</li><li><strong>org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration</strong>: 这是一个方便的单元测试类, Activiti 会自己控制事务, 默认使用一个基于内存的 H2 数据库, 数据库分别会在启动和关闭的时候创建以及销毁, 当使用它的时候, 或许不需要额外的配置(除了使用 job 执行器或者邮件功能以外);</li><li><strong>org.activiti.spring.SpringProcessEngineConfiguration</strong>: 在 Spring 环境下使用流程引擎, 参考 <a href>Spring 集成</a>;</li><li><strong>org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration</strong>: 单独运行的流程引擎, 并使用 JTA 事务.</li></ul><h2 id="3-3-Database-Configuration-数据库配置"><a href="#3-3-Database-Configuration-数据库配置" class="headerlink" title="3.3. Database Configuration 数据库配置"></a>3.3. Database Configuration 数据库配置</h2><p>有两种方式配置数据库给 Activiti 引擎使用, 第一种方式是定义 JDBC 的数据库配置文件</p><ul><li>jdbcUrl: 数据库连接</li><li>jdbcDriver: 驱动类</li><li>jdbcUsername: 数据库用户名</li><li>jdbcPassword: 数据库用户密码</li></ul><p>基于 JDBC 配置文件构造出的数据源将默认使用 MyBatis 连接池, 下面的配置可以用来构造连接池:</p><ul><li>jdbcMaxActiveConnections: 任意时间数据库连接池中的最大连接数, 默认为 10;</li><li>jdbcMaxIdleConnections: 连接池中处于空闲状态的连接的最大值;</li><li>jdbcMaxCheckoutTime: 连接被取出使用的最长时间, 超过时间会被强制回收. 默认为20000(20 秒);</li><li>jdbcMaxWaitTime: 这是一个底层配置, 当获得的时间较长时, 给连接池一个打印日志并重新尝试获得连接的机会, 默认为20000(20 秒).</li></ul><p>数据库连接池默认配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"sa"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>我们的基准表明, MyBatis 连接池在大量并发请求下并不是最有效率的, 因此, 建议使用 <code>javax.sql.DataSource</code> 的实现 并且注入到 <code>ProcessEngine</code> 配置中(比如 DBCP, C3P0, Hikari, Tomcat Connection Pool等):</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/activiti"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"activiti"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"activiti"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultAutoCommit"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>注意, Activiti 并没有包含这些数据源, 因此你必须确保这些类库在你的类路径下.</p><p>不管是采用 JDBC 还是 DataSource 的方式, 下面的配置可以被设置:</p><ul><li>databaseType: 通常是不需要去单独制定这项配置, 因为会被数据库连接的元数据自动分析出来, 只有当自动制定失败的时候才需要被设置. 可能的值有 {h2, mysql, oracle, postgres, mssql, db2}. 这项配置会决定哪些创建/删除脚本和查询语句会被使用. 参考 <a href="https://www.activiti.org/userguide/#supporteddatabases" target="_blank" rel="noopener">支持数据库章节</a> 了解支持哪些类型.</li><li>databaseSchemaUpdate: 允许设置的策略去决定数据库表在流程启动和结束的时候被如何处理:<ul><li>false(默认): 当 <code>ProcessEngine</code> 启动的时候, 检查数据库表的版本是否匹配依赖库的版本, 并在不匹配的时候抛出异常;</li><li>true: 在 <code>ProcessEngine</code> 构建时, 执行检查, 如果有需要就执行更新, 如果数据库表不存在, 就重新创建;</li><li>create-drop: 在 <code>ProcessEngine</code> 启动的时候创建数据库表, 并且在 <code>ProcessEngine</code> 关闭的时候删除数据库表.</li></ul></li></ul><h1 id="4-The-Activiti-API-Activiti-API"><a href="#4-The-Activiti-API-Activiti-API" class="headerlink" title="4. The Activiti API Activiti API"></a>4. The Activiti API Activiti API</h1><h2 id="4-1-The-Process-Engine-API-ans-Service-ProcessEngine-的-API-和服务"><a href="#4-1-The-Process-Engine-API-ans-Service-ProcessEngine-的-API-和服务" class="headerlink" title="4.1. The Process Engine API ans Service ProcessEngine 的 API 和服务"></a>4.1. The Process Engine API ans Service <code>ProcessEngine</code> 的 API 和服务</h2><p>引擎的相关 API 是与 Activiti 交互最多的方式, 最重要的开始点就是 <code>ProcessEngine</code>, 它可以被多种在 <a href>配置部分</a> 描述的方式创建, 你可以获得多种包含 工作流/BPM 方法的服务. <code>ProcessEngine</code> 和服务对象都是线程安全的, 因此可以在整个应用中维护一个实例.</p><p><img src="https://www.activiti.org/userguide/images/api.services.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"></span><br><span class="line">Engine.getRuntimeService();</span><br><span class="line">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line">TaskService taskService = processEngine.getTaskService();</span><br><span class="line">ManagementService managementService = processEngine.getManagementService();</span><br><span class="line">IdentityService identityService = processEngine.getIdentityService();</span><br><span class="line">HistoryService historyService = processEngine.getHistoryService();</span><br><span class="line">FormService formService = processEngine.getFormService();</span><br><span class="line">DynamicBpmnService dynamicBpmnService = processEngine.getDynamicBpmnService();</span><br></pre></td></tr></table></figure><ul><li><code>ProcessEngines.getDefaultProcessEngine()</code> 会在第一次调用时初始化并构建一个 <code>ProcessEngine</code>, 并且后面始终返回相同的实例. 对应的可以创建和关闭所有 <code>ProcessEngine</code>: <code>ProcessEngine.init()</code> 和 <code>ProcessEngine.destroy()</code></li><li><code>ProcessEngine</code> 类会扫描所有的 <code>activiti.cfg.xml</code> 和 <code>activiti-context.xml</code> 文件, 对于 <code>activtivi.cfg.xml</code> 文件, 流程引擎会使用专有的方式构建: <code>ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream).buildProcessEngine()</code></li><li><code></code></li></ul>]]></content>
      
      <categories>
          
          <category> Activiti </category>
          
          <category> 工作流 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activiti工作流引擎</title>
      <link href="/blog/2018/11/26/Activiti%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/"/>
      <url>/blog/2018/11/26/Activiti%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<blockquote><p>前段时间入职字节跳动, 目前负责 Lark 工作流审批功能的开发, 选用工作流引擎 <code>Activiti</code> 进行开发, 因此在此记录下对 <code>Activiti</code> 的学习过程.</p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><blockquote><p>工作流引擎是用来驱动业务, 按照流程图次逐步流转的核心框架, 在复杂多变的场景下采用工作流引擎可以大大降低业务部署成本. 通过标准的业务流程模型作为业务与开发工作的桥梁, 有效减少业务团队与技术交流的障碍.</p></blockquote><p>工作流引擎最早用于企业 OA, CRM, 流程审批等系统的流程审批.<br>现在的工作流引擎已经大量运用到互联网电商, 金融出行, 中台支撑等.</p><p>工作流引擎在互联网公司快速盛行, 掌握工作流引擎技术可以提升技术架构和业务建模能力. </p><p>目录:</p><ul><li>工作流入门</li><li>Activiti 6.0 源码浅析</li><li>Activiti 6.0 引擎配置</li><li>Activiti 6.0 核心 API</li><li>数据设计与模型映射</li><li>BPMN 2.0 规范</li><li>集成 SpringBoot 2.0</li><li>搭建工作流平台</li></ul><h1 id="1-工作流入门"><a href="#1-工作流入门" class="headerlink" title="1. 工作流入门"></a>1. 工作流入门</h1><h2 id="1-1-工作流介绍"><a href="#1-1-工作流介绍" class="headerlink" title="1.1 工作流介绍"></a>1.1 工作流介绍</h2><h3 id="1-1-1-出差流程"><a href="#1-1-1-出差流程" class="headerlink" title="1.1.1 出差流程"></a>1.1.1 出差流程</h3><p>审批业务场景:</p><p><img src=".Activiti工作流引擎_images/08008382.png" alt> </p><p>审批流程模型化:</p><p><img src=".Activiti工作流引擎_images/835a7f82.png" alt></p><p>从一个开始节点, 经过多个任务节点和分支节点, 最终流向结束节点.</p><h3 id="1-1-2-电商购物流程"><a href="#1-1-2-电商购物流程" class="headerlink" title="1.1.2 电商购物流程"></a>1.1.2 电商购物流程</h3><p><img src=".Activiti工作流引擎_images/0b951608.png" alt></p><p>抽象成泳道图:</p><p><img src=".Activiti工作流引擎_images/3a10b0ab.png" alt></p><table><thead><tr><th style="text-align:center">节点</th><th style="text-align:center">抽象名称</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">电商购物流程</td><td style="text-align:center">泳池(Pool)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">用户/电商平台/仓储物流</td><td style="text-align:center">泳道(Line)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">校验库存</td><td style="text-align:center">服务任务(Service Task)</td><td style="text-align:center">不需要人工参与, 需要系统自动化完成的操作节点</td></tr></tbody></table><h3 id="1-1-3-工作流是什么"><a href="#1-1-3-工作流是什么" class="headerlink" title="1.1.3 工作流是什么"></a>1.1.3 工作流是什么</h3><blockquote><h4 id="工作流"><a href="#工作流" class="headerlink" title="工作流:"></a>工作流:</h4><p>是对工作流程以及各个步骤之间的业务规则的抽象, 概括描述.</p></blockquote><blockquote><h4 id="工作流建模"><a href="#工作流建模" class="headerlink" title="工作流建模:"></a>工作流建模:</h4><p>将工作流程中的工作如何前后组织在一起的逻辑和规则, 在计算机中以恰当的模型表达并对其实施计算.</p></blockquote><blockquote><h4 id="要解决的问题"><a href="#要解决的问题" class="headerlink" title="要解决的问题:"></a>要解决的问题:</h4><p>为实现某个业务目标, 利用计算机在多个参与者之间按某种预定规则自动传递文档, 信息或任务.</p></blockquote><table><thead><tr><th>关键词</th><th>概念</th></tr></thead><tbody><tr><td>工作流管理系统</td><td>处理工作流的电脑软件系统, 主要功能是通过计算机技术的支持去定义, 执行和管理工作流, 协调工作流执行过程中工作之间以及群体之间的信息交互</td></tr><tr><td>计算机支持的协同工作</td><td>研究一个群体如何在计算机的帮助下实现协同工作的, 工作流属于计算机支持的协同工作的一部分</td></tr><tr><td>工作流管理联盟</td><td>工作流技术标准化的工业组织, 发布了用于工作流管理系统之间互操作的工作流参考模型, 并相继制定了一些列工业标准</td></tr></tbody></table><h3 id="1-1-4-为什么需要工作流"><a href="#1-1-4-为什么需要工作流" class="headerlink" title="1.1.4 为什么需要工作流"></a>1.1.4 为什么需要工作流</h3><h4 id="日常开发中经常遇到的问题"><a href="#日常开发中经常遇到的问题" class="headerlink" title="日常开发中经常遇到的问题:"></a>日常开发中经常遇到的问题:</h4><ol><li>产品需求遗漏, 开发上线之后需求经常改;</li><li>业务代码复杂, 开发时间紧迫;</li><li>代码后期维护不足, 逐渐难以维护.</li></ol><h4 id="使用工作流能够带来的改变"><a href="#使用工作流能够带来的改变" class="headerlink" title="使用工作流能够带来的改变:"></a>使用工作流能够带来的改变:</h4><ol><li>可以快速响应, 灵活调整线上产品流程;</li><li>业务和开发基于流程模型沟通, 基于业务建模快速部署;</li><li>流程可视化, 方便查看流程的运行进展.</li></ol><h4 id="使用工作流对团队的作用"><a href="#使用工作流对团队的作用" class="headerlink" title="使用工作流对团队的作用:"></a>使用工作流对团队的作用:</h4><ol><li>提高效率, 减少等待;</li><li>规范行为, 落实制度;</li><li>协同内外, 快速响应;</li><li>监控全面, 提升执行.</li></ol><h2 id="1-2-工作流技术选型"><a href="#1-2-工作流技术选型" class="headerlink" title="1.2 工作流技术选型"></a>1.2 工作流技术选型</h2><blockquote><p>二者都是成熟的工作流框架</p></blockquote><table><thead><tr><th>jBPM</th><th>Activiti</th></tr></thead><tbody><tr><td>Hibernate</td><td>ByBatis</td></tr><tr><td>Drools Flow</td><td>JBPM4</td></tr><tr><td>JPA</td><td>Spring</td></tr><tr><td>Message</td><td>RESTful</td></tr></tbody></table><h2 id="1-3-Activiti6-0-快速体验"><a href="#1-3-Activiti6-0-快速体验" class="headerlink" title="1.3 Activiti6.0 快速体验"></a>1.3 Activiti6.0 快速体验</h2><h3 id="1-3-1-准备物料"><a href="#1-3-1-准备物料" class="headerlink" title="1.3.1 准备物料"></a>1.3.1 准备物料</h3><ul><li>Activiti 软件包: <code>activiti-6.0.0.zip</code></li><li>JDK</li><li>Servlet 容器 (如 Tomcat)</li></ul><h4 id="安装-sdkman"><a href="#安装-sdkman" class="headerlink" title="安装 sdkman"></a>安装 sdkman</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">"https://get.sdkman.io"</span> | bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">"<span class="variable">$HOME</span>/.sdkman/bin/sdkman-init.sh"</span></span><br><span class="line"></span><br><span class="line">sdk version</span><br></pre></td></tr></table></figure><h4 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sdk install java 8u161-oracle</span><br><span class="line"></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure><h4 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirror.bit.edu.cn/apache/tomcat/tomcat/8/v8.0.50/bin/apache-tomcat-8.0.50.zip</span><br><span class="line"></span><br><span class="line">tar -zxvf apache-tomcat-8.0.50.zip</span><br><span class="line"></span><br><span class="line">./apache-tomcat-8.0.50/bin/startup.sh</span><br><span class="line"></span><br><span class="line">jdp-mlv</span><br></pre></td></tr></table></figure><h4 id="部署-Activiti"><a href="#部署-Activiti" class="headerlink" title="部署 Activiti"></a>部署 Activiti</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/Activiti/Activiti/releases/download/activiti-6.0.0/activiti-6.0.0.zip</span><br><span class="line"></span><br><span class="line">tar -zxvf activiti-6.0.0.zip</span><br><span class="line"></span><br><span class="line">cp activiti-6.0.0/wars/activiti-app.war apache-tomcat-8.0.50/webapps</span><br><span class="line">cp activiti-6.0.0/wars/activiti-admin.war apache-tomcat-8.0.50/webapps</span><br></pre></td></tr></table></figure><p>此时打开浏览器, 输入 <a href="http://localhost:8080/activiti-app" target="_blank" rel="noopener">http://localhost:8080/activiti-app</a> 即可进入流程引擎的登录界面</p><pre><code>账号: admin密码: test</code></pre><h3 id="1-3-2-设计一个审批流程"><a href="#1-3-2-设计一个审批流程" class="headerlink" title="1.3.2 设计一个审批流程"></a>1.3.2 设计一个审批流程</h3><p>设计如下流程:</p><p>开始 -&gt; TL 审批 -&gt; HR 审批 -&gt; 结束</p><h4 id="流程参与者"><a href="#流程参与者" class="headerlink" title="流程参与者"></a>流程参与者</h4><table><thead><tr><th>ID</th><th>Email</th><th>Name</th></tr></thead><tbody><tr><td>admin</td><td>admin</td><td>Administrator</td></tr><tr><td>userdev</td><td><a href="mailto:userdev@126.com" target="_blank" rel="noopener">userdev@126.com</a></td><td>userdevDEV</td></tr><tr><td>userhr</td><td><a href="mailto:userhr@126.com" target="_blank" rel="noopener">userhr@126.com</a></td><td>userhrHR</td></tr><tr><td>usertl</td><td><a href="mailto:usertl@126.com" target="_blank" rel="noopener">usertl@126.com</a></td><td>usertlTL</td></tr></tbody></table><h1 id="2-源码概述"><a href="#2-源码概述" class="headerlink" title="2. 源码概述"></a>2. 源码概述</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:DestinyWang/Activiti.git</span><br><span class="line"></span><br><span class="line">git checkout -b study6 activiti-6.0.0</span><br><span class="line"></span><br><span class="line">mvn clean <span class="built_in">test</span>-compile</span><br></pre></td></tr></table></figure><table><thead><tr><th>路径</th><th>功能</th></tr></thead><tbody><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/cfg</code></td><td>Activiti 的启动依赖 <code>activiti.cfg.xml</code>, 在该目录完成</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/compatibility</code></td><td>Activiti 从 5 升级到 6 的时候有部分不兼容, 在该目录完成适配</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/debug</code></td><td>调试相关目录</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/delegate</code></td><td>需要制定的节点 Task 都需要实现 <code>JavaDelegate</code></td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/event</code></td><td>定义了事件和监听机制</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/form</code></td><td>通用表单</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/history</code></td><td>历史数据归档</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/identity</code></td><td>身份认证相关操作</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/impl</code></td><td>各个接口层的实现</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/logging</code></td><td>LogMDC 将重要的变量(如流程 id 放在上下文, logback 可以打印出来)</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/management</code></td><td>管理相关</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/parse</code></td><td>流程文件是 xml, 需要解析和验证</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/query</code></td><td>抽象了一些查询接口, 基于 mybatis</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/repository</code></td><td>抽象流程部署到数据库的过程</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/runtime</code></td><td>与 history 相对应, 是流程在流转过程中的数据</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/task</code></td><td>每个流程在需要人工处理的时候都会对应一个 task</td></tr><tr><td><code>Activiti/activiti-engine/src/main/java/org/activiti/engine/test</code></td><td>支持集成测试的帮助类</td></tr></tbody></table><p>核心模块:</p><ul><li><code>module/activiti-engine</code>: 核心引擎</li><li><code>module/activiti-spring</code>: Spring 集成模块</li><li><code>module/activiti-spring-boot</code>: SpringBoot 集成模块</li><li><code>module/activiti-rest</code>: 对外提供 rest api 模块</li><li><code>module/activiti-form-engine</code>: 表单引擎模块</li><li><code>module/activiti-ldap</code>: 集成 ldap 用户模块</li></ul><p>Activiti-engine 依赖的模块:</p><ul><li>bpmn-converter: 模型转换</li><li>process-validation: 流程校验</li><li>image-generator: 流程图绘制(BPMN 转 PNG)</li><li>dmn-api: 决策标准</li><li>form-api/form-model: form 表单相关</li></ul><h2 id="2-1-基于源码运行-activiti-app"><a href="#2-1-基于源码运行-activiti-app" class="headerlink" title="2.1 基于源码运行 activiti-app"></a>2.1 基于源码运行 activiti-app</h2><h3 id="2-1-1-启动-activiti-app"><a href="#2-1-1-启动-activiti-app" class="headerlink" title="2.1.1 启动 activiti-app"></a>2.1.1 启动 activiti-app</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> modules/activiti-ui/activiti-app</span><br><span class="line"></span><br><span class="line">mvn clean tomcat7:run</span><br><span class="line"></span><br><span class="line">open http://localhost:9999/activi-app</span><br></pre></td></tr></table></figure><h2 id="2-2-剖析-activiti-app"><a href="#2-2-剖析-activiti-app" class="headerlink" title="2.2 剖析 activiti-app"></a>2.2 剖析 activiti-app</h2><p>activiti-ui 的组成:</p><ul><li>activiti-app: 集成发布的 war 工程</li><li>activiti-app-conf: UI 独立域业务外的配置</li><li>activiti-app-logic: UI 的业务逻辑</li><li>activiti-app-rest: 提供接口的 rest api</li></ul><h1 id="3-HelloWorld"><a href="#3-HelloWorld" class="headerlink" title="3. HelloWorld"></a>3. HelloWorld</h1><p><img src="https://user-images.githubusercontent.com/17758731/49322695-b05cee00-f54c-11e8-8aeb-8f47882a7de9.png" alt="image"></p><ul><li>填写审批信息: 姓名, 时间, 是否提交</li><li>主管审批: 审批结果, 备注</li><li>审批结果, 备注</li></ul><h2 id="3-1-在-IDEA-中完成流程图的设计并配置"><a href="#3-1-在-IDEA-中完成流程图的设计并配置" class="headerlink" title="3.1 在 IDEA 中完成流程图的设计并配置"></a>3.1 在 IDEA 中完成流程图的设计并配置</h2><p><img src="https://user-images.githubusercontent.com/17758731/49323198-d7b6b980-f552-11e8-960e-271783710299.png" alt="image"></p><p>配置点:</p><ol><li>节点 id, 名称;</li><li>对每个网关的分支做判断(基于填写信息);</li><li>Task 节点接收的表单信息.</li></ol><h3 id="3-1-2-Task-节点接收的表单信息"><a href="#3-1-2-Task-节点接收的表单信息" class="headerlink" title="3.1.2 Task 节点接收的表单信息"></a>3.1.2 Task 节点接收的表单信息</h3><h4 id="填写申请信息"><a href="#填写申请信息" class="headerlink" title="填写申请信息"></a>填写申请信息</h4><table><thead><tr><th>Id</th><th>Name</th><th>Type</th><th>Expression</th><th>Variable</th><th>Default</th><th>Date Pattern</th><th>Readable</th><th>Writable</th><th>Required</th><th>Values</th></tr></thead><tbody><tr><td>message</td><td>申请信息</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>True</td><td></td></tr><tr><td>name</td><td>申请人姓名</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>True</td><td></td></tr><tr><td>submitTime</td><td>提交时间</td><td>date</td><td></td><td></td><td></td><td>yyyy-MM-dd</td><td></td><td></td><td>True</td><td></td></tr><tr><td>submitType</td><td>确认申请</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>True</td></tr></tbody></table><h4 id="主管审批"><a href="#主管审批" class="headerlink" title="主管审批"></a>主管审批</h4><table><thead><tr><th>Id</th><th>Name</th><th>Type</th><th>Expression</th><th>Variable</th><th>Default</th><th>Date Pattern</th><th>Readable</th><th>Writable</th><th>Required</th><th>Values</th></tr></thead><tbody><tr><td>tlApprove</td><td>主管审批结果</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>false</td><td></td></tr><tr><td>tlMessage</td><td>主管审批备注</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>true</td></tr></tbody></table><h4 id="人事审批"><a href="#人事审批" class="headerlink" title="人事审批"></a>人事审批</h4><table><thead><tr><th>Id</th><th>Name</th><th>Type</th><th>Expression</th><th>Variable</th><th>Default</th><th>Date Pattern</th><th>Readable</th><th>Writable</th><th>Required</th><th>Values</th></tr></thead><tbody><tr><td>hrApprove</td><td>人事审批结果</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>true</td><td></td></tr><tr><td>hrMessage</td><td>人事审批备注</td><td>string</td><td></td><td></td><td></td><td></td><td></td><td></td><td>true</td></tr></tbody></table><h3 id="3-1-3-排他网关配置"><a href="#3-1-3-排他网关配置" class="headerlink" title="3.1.3 排他网关配置"></a>3.1.3 排他网关配置</h3><blockquote><p>排他网关需要对流入网关的某个值做判断, 从而决定流程后续的流向</p></blockquote><h4 id="flow3-配置"><a href="#flow3-配置" class="headerlink" title="flow3 配置"></a>flow3 配置</h4><pre><code>${submitType==&quot;Y&quot; || submitType==&quot;y&quot;}</code></pre><h4 id="flow4-配置"><a href="#flow4-配置" class="headerlink" title="flow4 配置"></a>flow4 配置</h4><pre><code>${submitType==&quot;N&quot; || submitType==&quot;n&quot;}</code></pre><h4 id="flow6-配置"><a href="#flow6-配置" class="headerlink" title="flow6 配置"></a>flow6 配置</h4><pre><code>${tlApprove == &quot;Y&quot; || tlApprove == &quot;y&quot;}</code></pre><h4 id="flow7-配置"><a href="#flow7-配置" class="headerlink" title="flow7 配置"></a>flow7 配置</h4><pre><code>${tlApprove == &quot;N&quot; || tlApprove == &quot;n&quot;}</code></pre><h4 id="flow9-配置"><a href="#flow9-配置" class="headerlink" title="flow9 配置"></a>flow9 配置</h4><pre><code>${hrApprove == &quot;Y&quot; || tlApprove == &quot;y&quot;}</code></pre><h4 id="flow10-配置"><a href="#flow10-配置" class="headerlink" title="flow10 配置"></a>flow10 配置</h4><pre><code>${hrApprove == &quot;N&quot; || tlApprove == &quot;n&quot;}</code></pre><p>配置后的流程图</p><p><img src="https://user-images.githubusercontent.com/17758731/49323670-e18feb00-f559-11e8-9967-a2bac264e9fe.png" alt="image"></p><h3 id="3-2-helloworld程序"><a href="#3-2-helloworld程序" class="headerlink" title="3.2 helloworld程序"></a>3.2 helloworld程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DemoMain.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"----- 启动我们的程序 -----"</span>);</span><br><span class="line">        <span class="comment">// 1. 创建流程引擎</span></span><br><span class="line">        ProcessEngine processEngine = getProcessEngine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 部署流程定义文件</span></span><br><span class="line">        ProcessDefinition processDefinition = getProcessDefinition(processEngine);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 启动运行流程</span></span><br><span class="line">        ProcessInstance processInstance = getProcessInstance(processEngine, processDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 处理流程任务</span></span><br><span class="line">        processTask(processEngine, processInstance);</span><br><span class="line">        logger.info(<span class="string">"----- 结束我们的程序 -----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理流程任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processEngine   流程引擎</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processInstance 流程实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processTask</span><span class="params">(ProcessEngine processEngine, ProcessInstance processInstance)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (processInstance != <span class="keyword">null</span> &amp;&amp; !processInstance.isEnded()) &#123;</span><br><span class="line">            logger.info(<span class="string">"processInstanceId: [&#123;&#125;]"</span>, processInstance.getId());</span><br><span class="line">            logger.info(<span class="string">"processInstance.processInstanceId: [&#123;&#125;]"</span>, processInstance.getProcessInstanceId());</span><br><span class="line">            TaskService taskService = processEngine.getTaskService();</span><br><span class="line">            List&lt;Task&gt; list = taskService.createTaskQuery().list();</span><br><span class="line">            logger.info(<span class="string">"待处理任务数量: [&#123;&#125;]"</span>, list.size());</span><br><span class="line">            <span class="keyword">for</span> (Task task : list) &#123;</span><br><span class="line">                logger.info(<span class="string">"待处理任务: [&#123;&#125;]"</span>, task.getName());</span><br><span class="line">                Map&lt;String, Object&gt; variables = getVariables(processEngine, scanner, task);</span><br><span class="line">                taskService.complete(task.getId(), variables);</span><br><span class="line">                processInstance = processEngine.getRuntimeService()</span><br><span class="line">                        .createProcessInstanceQuery()</span><br><span class="line">                        .processInstanceId(processInstance.getId())</span><br><span class="line">                        .singleResult();</span><br><span class="line">                logger.info(<span class="string">"当前 ProcessInstance :&#123;&#125;"</span>, processInstance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取变量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processEngine</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scanner</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getVariables</span><span class="params">(ProcessEngine processEngine, Scanner scanner, Task task)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        FormService formService = processEngine.getFormService();</span><br><span class="line">        TaskFormData taskFormData = formService.getTaskFormData(task.getId());</span><br><span class="line">        List&lt;FormProperty&gt; formProperties = taskFormData.getFormProperties();</span><br><span class="line">        Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">        <span class="keyword">for</span> (FormProperty property : formProperties) &#123;</span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (StringFormType.class.isInstance(property.getType())) &#123;</span><br><span class="line">                <span class="comment">// 如果是 String 类型, 不需要做任何格式化</span></span><br><span class="line">                logger.info(<span class="string">"请输入 [&#123;&#125;] ?"</span>, property.getName());</span><br><span class="line">                line = scanner.nextLine();</span><br><span class="line">                variables.put(property.getId(), line);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DateFormType.class.isInstance(property.getType())) &#123;</span><br><span class="line">                <span class="comment">// 如果是日期类型</span></span><br><span class="line">                logger.info(<span class="string">"请输入 [&#123;&#125;] ?, 格式 (yyyy-MM-dd)"</span>, property.getName());</span><br><span class="line">                line = scanner.nextLine();</span><br><span class="line">                SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">                Date date = simpleDateFormat.parse(line);</span><br><span class="line">                variables.put(property.getId(), date);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.info(<span class="string">"类型不支持: &#123;&#125;"</span>, property.getType());</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"您输入的内容是 [&#123;&#125;]"</span>, line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> variables;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessInstance <span class="title">getProcessInstance</span><span class="params">(ProcessEngine processEngine, ProcessDefinition processDefinition)</span> </span>&#123;</span><br><span class="line">        RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line">        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinition.getId());</span><br><span class="line">        logger.info(<span class="string">"启动流程: [&#123;&#125;]"</span>, processInstance.getProcessDefinitionKey());</span><br><span class="line">        <span class="keyword">return</span> processInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessDefinition <span class="title">getProcessDefinition</span><span class="params">(ProcessEngine processEngine)</span> </span>&#123;</span><br><span class="line">        RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line">        DeploymentBuilder deploymentBuilder = repositoryService.createDeployment();</span><br><span class="line">        deploymentBuilder.addClasspathResource(<span class="string">"SecondApprove.bpmn20.xml"</span>);</span><br><span class="line">        Deployment deployment = deploymentBuilder.deploy();</span><br><span class="line"></span><br><span class="line">        String deploymentId = deployment.getId();</span><br><span class="line">        <span class="comment">// deploymentId: 1</span></span><br><span class="line">        logger.info(<span class="string">"deploymentId: [&#123;&#125;]"</span>, deploymentId);</span><br><span class="line">        ProcessDefinition processDefinition = repositoryService.</span><br><span class="line">                createProcessDefinitionQuery().</span><br><span class="line">                deploymentId(deploymentId)</span><br><span class="line">                .singleResult();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// processDefinition.getId() 是 SecondApprove:1:4, 根据部署 id 和流程 id 组装出的数据</span></span><br><span class="line">        logger.info(<span class="string">"流程定义文件: [&#123;&#125;], 流程 id: [&#123;&#125;]"</span>, processDefinition.getName(), processDefinition.getId());</span><br><span class="line">        <span class="keyword">return</span> processDefinition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessEngine <span class="title">getProcessEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();</span><br><span class="line">        ProcessEngine processEngine = configuration.buildProcessEngine();</span><br><span class="line">        String name = processEngine.getName();</span><br><span class="line">        String version = ProcessEngine.VERSION;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"流程引擎名称: [&#123;&#125;], 版本: [&#123;&#125;]"</span>, name, version);</span><br><span class="line">        <span class="keyword">return</span> processEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-Activiti-引擎配置"><a href="#4-Activiti-引擎配置" class="headerlink" title="4. Activiti 引擎配置"></a>4. Activiti 引擎配置</h1><h2 id="4-1-流程引擎配置"><a href="#4-1-流程引擎配置" class="headerlink" title="4.1 流程引擎配置"></a>4.1 流程引擎配置</h2><p>流程引擎配置的载体就是 <code>ProcessEngineConfiguration</code> 及其子类, Activiti 是通过 <code>activiti.cfg.xml</code> 来完成配置</p><p>然后构建出流程引擎 <code>ProcessEngine</code>, 最终获取业务开发中需要的各个 Service.</p><p><img src="https://user-images.githubusercontent.com/17758731/49327683-12deda00-f59f-11e8-8a37-b02ee297e713.png" alt="image"></p><p>ProcessorEngineConfiguration:</p><ol><li>查找并解析 XML 配置文件 <code>activiti.cfg.xml</code></li><li>提供多个静态方法创建配置对象</li><li>实现几个基于不同场景的子类, 配置方式灵活</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 ProcessEngineConfiguration  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/activitiDB?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- false: 不会自动创建表, 没有表, 则抛异常 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- create-drop: 先删除, 再创建表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- true: 没有表时，自动创建--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ProcessEngineConfigurationImpl: 抽象类, 配置了 ProcessEngineConfiguration 大部分属性;<br>StandaloneProcessEngineConfiguration: 独立部署运行, 可以通过 new 的方式创建;<br>SpringProcessEngineConfiguration: 完成与 Spring 的集成, 同时扩展了数据源配置, 事务, 自动装载部署文件的目录.</p><h2 id="4-2-数据库配置"><a href="#4-2-数据库配置" class="headerlink" title="4.2 数据库配置"></a>4.2 数据库配置</h2><ul><li>缺省配置默认使用 H2 内存数据库;</li><li>配置 JDBC 属性, 使用 MyBatis 提供的连接池;</li><li>配置 DataSource, 可自选第三方实现.</li></ul><p>配置 JDBC 属性使用 MyBatis 提供的连接池</p><table><thead><tr><th>基本属性</th><th>连接池配置</th></tr></thead><tbody><tr><td>jdbcUrl</td><td>jdbcMaxActiveConnections(最大活跃连接数)</td></tr><tr><td>jdbcDriver</td><td>jdbcMaxIdleConnections(最大空闲连接数)</td></tr><tr><td>jdbcUsername</td><td>jdbcMaxCheckoutTime(最大)</td></tr><tr><td>jdbcPassword</td><td>jdbcMaxWaitTIme(最大等待时间)</td></tr></tbody></table><p>配置第三方实现的 DataSource</p><ul><li>Druid: 为监控而生的数据库连接池</li><li>Dbcp: Tomcat 自带</li><li>HikariCP: 极速数据源连接池, Spring 默认</li></ul><h3 id="4-2-1-Druid-数据源连接池"><a href="#4-2-1-Druid-数据源连接池" class="headerlink" title="4.2.1 Druid 数据源连接池"></a>4.2.1 Druid 数据源连接池</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- false: 不会自动创建表, 没有表, 则抛异常 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- create-drop: 先删除, 再创建表 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- true: 没有表时，自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/activitiDB"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat,slf4f"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-数据库更新策略"><a href="#4-2-2-数据库更新策略" class="headerlink" title="4.2.2 数据库更新策略"></a>4.2.2 数据库更新策略</h3><ol><li>配置 databaseSchemaUpdate:<ul><li>false: 启动时检查数据库版本, 发生不匹配则抛出异常(线上默认)</li><li>true: 启动时自动检查并更新数据库表, 不存在会创建(开发环境默认)</li><li>create-drop: 启动时创建数据库表结构, 结束时删除表结构</li></ul></li></ol><h2 id="4-3-日志和数据记录配置"><a href="#4-3-日志和数据记录配置" class="headerlink" title="4.3 日志和数据记录配置"></a>4.3 日志和数据记录配置</h2><h3 id="4-3-1-日志组件的关系及-MDC"><a href="#4-3-1-日志组件的关系及-MDC" class="headerlink" title="4.3.1 日志组件的关系及 MDC"></a>4.3.1 日志组件的关系及 MDC</h3><table><thead><tr><th>日志分类</th><th>描述</th><th>分类内容</th></tr></thead><tbody><tr><td>日志门面</td><td>直接应用在程序中记录日志的组件</td><td>slf4j, commons-logging, log4j</td></tr><tr><td>日志实现</td><td>日志门面不能直接打日志, 需要日志实现</td><td>logback, log4j, log4j2, Java util logging</td></tr><tr><td>桥接方式</td><td>有些特殊需求, 例如需要 slf4j 作为门面, 但需要以 log4j 作为实现</td><td>slf4j-log4j12, slf4j-jdk14, …</td></tr><tr><td>改变依赖</td><td>将原有门面的功能委托给其他实现, 主要用于解决历史软件内部依赖的改变</td><td>jcl-over-slf4j, log4j-over-slf4j, …</td></tr></tbody></table><p>配置开启 MDC(Mapped Diagnostic Context): 可以理解为将上下文数据存储在 ThreadLocal 中</p><ul><li>默认没有开启, 需要手动设置 <code>LogMDC.setMDCEnable(true)</code></li><li>配置 logback.xml, 日志模板添加 <code>%X{mdcProcessInstanceID}</code>, 即打印当前 instance 的 id</li><li>流程只有在执行过程出现异常的时候才会记录 MDC 信息</li></ul><h4 id="4-3-1-1-默认日志输出"><a href="#4-3-1-1-默认日志输出" class="headerlink" title="4.3.1.1 默认日志输出"></a>4.3.1.1 默认日志输出</h4><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigMDCTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动构建 ProcessEngine</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule = <span class="keyword">new</span> ActivitiRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProcessInstance processInstance = activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">        assertNotNull(processInstance);</span><br><span class="line">        Task task = activitiRule.getTaskService().createTaskQuery().singleResult();</span><br><span class="line">        assertEquals(<span class="string">"Activiti is awesome!"</span>, task.getName());</span><br><span class="line">        activitiRule.getTaskService().complete(task.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"30 seconds"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.dir"</span> <span class="attr">value</span>=<span class="string">"target/logs"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plain"</span> <span class="attr">value</span>=<span class="string">"%msg%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"std"</span> <span class="attr">value</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%thread] [%level] %msg %X&#123;user&#125; %logger&#123;10&#125;.%M:%L%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"normal"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;10&#125;.%M:%L - %msg%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;std&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;encoding&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>00:19:43.624 [main] [INFO] Loading XML bean definitions from class path resource [activiti.cfg.xml]  o.s.b.f.x.XmlBeanDefinitionReader.loadBeanDefinitions:31600:19:45.162 [main] [INFO] Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.  o.a.e.c.DefaultActiviti5CompatibilityHandlerFactory.createActiviti5CompatibilityHandler:3800:19:45.174 [main] [INFO] performing create on engine with resource org/activiti/db/create/activiti.mysql.create.engine.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:19:45.176 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7  o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:19:46.466 [main] [INFO] performing create on history with resource org/activiti/db/create/activiti.mysql.create.history.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:19:46.466 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7  o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:19:46.922 [main] [INFO] performing create on identity with resource org/activiti/db/create/activiti.mysql.create.identity.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:19:46.922 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7  o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:19:47.035 [main] [INFO] ProcessEngine default created  o.a.e.i.ProcessEngineImpl.&lt;init&gt;:87</code></pre><h4 id="4-3-1-2-MDC-日志输出"><a href="#4-3-1-2-MDC-日志输出" class="headerlink" title="4.3.1.2 MDC 日志输出"></a>4.3.1.2 MDC 日志输出</h4><h5 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigMDCTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule = <span class="keyword">new</span> ActivitiRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 开启 MDC, 整个过程在正常情况下是不会激活 MDC 的</span></span><br><span class="line">        LogMDC.setMDCEnabled(<span class="keyword">true</span>);</span><br><span class="line">        ProcessInstance processInstance = activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">        assertNotNull(processInstance);</span><br><span class="line">        Task task = activitiRule.getTaskService().createTaskQuery().singleResult();</span><br><span class="line">        assertEquals(<span class="string">"Activiti is awesome!"</span>, task.getName());</span><br><span class="line">        activitiRule.getTaskService().complete(task.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="BPMN-流程图"><a href="#BPMN-流程图" class="headerlink" title="BPMN 流程图"></a>BPMN 流程图</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- org.destiny.activiti.delegate.MDCErrorDelegate 是一个会自动抛出异常 "test only" 的JavaDelegate --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">activiti:class</span>=<span class="string">"org.destiny.activiti.delegate.MDCErrorDelegate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"30 seconds"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.dir"</span> <span class="attr">value</span>=<span class="string">"target/logs"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plain"</span> <span class="attr">value</span>=<span class="string">"%msg%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"std"</span> <span class="attr">value</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%thread] [%level] %msg %X&#123;user&#125; %logger&#123;10&#125;.%M:%L%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     - MDC 配置:</span></span><br><span class="line"><span class="comment">     - ProcessDefinitionId: 流程定义 id</span></span><br><span class="line"><span class="comment">     - executionId:</span></span><br><span class="line"><span class="comment">     - mdcProcessInstanceId: 流程实例 id</span></span><br><span class="line"><span class="comment">     - mdcBusinessKey: 业务 key</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mdc"</span> <span class="attr">value</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%thread] [%level] %msg ProcessDefinitionId=%X&#123;mdcProcessDefinitionID&#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    executionId=%X&#123;mdcExecutionId&#125; mdcProcessInstanceId=%X&#123;mdcProcessInstanceId&#125; mdcBusinessKey=%X&#123;mdcBusinessKey&#125; %logger&#123;10&#125;.%M:%L%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"normal"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;10&#125;.%M:%L - %msg%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处将默认值输出由 std 改为 mdc --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;pattern&gt;$&#123;std&#125;&lt;/pattern&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;mdc&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;pattern&gt;$&#123;mdc&#125;&lt;/pattern&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;encoding&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="日志输出-1"><a href="#日志输出-1" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>00:32:57.204 [main] [INFO] Loading XML bean definitions from class path resource [activiti.cfg.xml] ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.s.b.f.x.XmlBeanDefinitionReader.loadBeanDefinitions:31600:32:58.659 [main] [INFO] Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled. ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.c.DefaultActiviti5CompatibilityHandlerFactory.createActiviti5CompatibilityHandler:3800:32:58.671 [main] [INFO] performing create on engine with resource org/activiti/db/create/activiti.mysql.create.engine.sql ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:32:58.673 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:33:00.219 [main] [INFO] performing create on history with resource org/activiti/db/create/activiti.mysql.create.history.sql ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:33:00.220 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:33:00.657 [main] [INFO] performing create on identity with resource org/activiti/db/create/activiti.mysql.create.identity.sql ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:33:00.657 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:33:00.771 [main] [INFO] ProcessEngine default created ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.ProcessEngineImpl.&lt;init&gt;:8700:33:00.932 [main] [INFO] MDCErrorDelegate.execute ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.d.MDCErrorDelegate.execute:2400:33:00.935 [main] [ERROR] Error while closing command context ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.CommandContext.logException:122java.lang.RuntimeException: test only...</code></pre><p>可以看到, 在 ERROR 行中, 打印出了 MDC 信息</p><h4 id="4-3-1-3-使用拦截器让每个流程节点都把-MDC-信息打印出来"><a href="#4-3-1-3-使用拦截器让每个流程节点都把-MDC-信息打印出来" class="headerlink" title="4.3.1.3 使用拦截器让每个流程节点都把 MDC 信息打印出来"></a>4.3.1.3 使用拦截器让每个流程节点都把 MDC 信息打印出来</h4><h5 id="新建拦截器"><a href="#新建拦截器" class="headerlink" title="新建拦截器"></a>新建拦截器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MDCCommandInvoker</span> <span class="keyword">extends</span> <span class="title">DebugCommandInvoker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先判断可运行的对象是不是 Activiti 支持的 Operation</span></span><br><span class="line"><span class="comment">     * 如果是, 将它强转, 并取出执行对象并输出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> runnable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeOperation</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> mdcEnabled = LogMDC.isMDCEnabled();</span><br><span class="line">        LogMDC.setMDCEnabled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (runnable <span class="keyword">instanceof</span> AbstractOperation) &#123;</span><br><span class="line">            AbstractOperation operation = (AbstractOperation) runnable;</span><br><span class="line">            <span class="keyword">if</span> (operation.getExecution() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果是可操作对象, 将该信息放入 MDC 上下文对象</span></span><br><span class="line">                LogMDC.putMDCExecution(operation.getExecution());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.executeOperation(runnable);</span><br><span class="line">        LogMDC.clear();</span><br><span class="line">        <span class="keyword">if</span> (!mdcEnabled) &#123;</span><br><span class="line">            <span class="comment">// 如果 MDC 原本不生效, 需要将 MDC 重新置为 false</span></span><br><span class="line">            LogMDC.setMDCEnabled(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置该拦截器"><a href="#配置该拦截器" class="headerlink" title="配置该拦截器"></a>配置该拦截器</h5><blockquote><p>修改默认配置文件 activiti.cfg.xml, 新增该 MDCCommandInvoker</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 ProcessEngineConfiguration  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/activitiDB?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;useSSL=false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"commandInvoker"</span> <span class="attr">ref</span>=<span class="string">"commandInvoker"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"commandInvoker"</span> <span class="attr">class</span>=<span class="string">"org.destiny.activiti.interceptor.MDCCommandInvoker"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="最终产出日志"><a href="#最终产出日志" class="headerlink" title="最终产出日志"></a>最终产出日志</h5><pre><code>00:56:35.631 [main] [INFO] Loading XML bean definitions from class path resource [activiti_mdc.cfg.xml] ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.s.b.f.x.XmlBeanDefinitionReader.loadBeanDefinitions:31600:56:37.141 [main] [INFO] Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled. ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.c.DefaultActiviti5CompatibilityHandlerFactory.createActiviti5CompatibilityHandler:3800:56:37.153 [main] [INFO] performing create on engine with resource org/activiti/db/create/activiti.mysql.create.engine.sql ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:56:37.154 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:56:38.655 [main] [INFO] performing create on history with resource org/activiti/db/create/activiti.mysql.create.history.sql ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:56:38.656 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:56:39.109 [main] [INFO] performing create on identity with resource org/activiti/db/create/activiti.mysql.create.identity.sql ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:114700:56:39.110 [main] [INFO] Found MySQL: majorVersion=5 minorVersion=7 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.d.DbSqlSession.executeSchemaResource:116200:56:39.218 [main] [INFO] ProcessEngine default created ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.ProcessEngineImpl.&lt;init&gt;:8700:56:39.403 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.407 [main] [INFO] 4 (process instance)└── 5 : start (StartEvent, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.409 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.410 [main] [INFO] 4 (process instance)└── 5 : start (StartEvent, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.411 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.412 [main] [INFO] 4 (process instance)└── 5 : start -&gt; someTask, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.412 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.412 [main] [INFO] 4 (process instance)└── 5 : someTask (UserTask, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.497 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.501 [main] [INFO] 4 (process instance)└── 5 : someTask (UserTask, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.502 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.503 [main] [INFO] 4 (process instance)└── 5 : someTask (UserTask, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.504 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.504 [main] [INFO] 4 (process instance)└── 5 : someTask -&gt; end, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.505 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.505 [main] [INFO] 4 (process instance)└── 5 : end (EndEvent, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.505 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.506 [main] [INFO] 4 (process instance)└── 5 : end (EndEvent, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3400:56:39.507 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.EndExecutionOperation : ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:3300:56:39.507 [main] [INFO] 4 (process instance)└── 5 : end (EndEvent, parent id 4 (active) ProcessDefinitionId=my-process:1:3     executionId=5 mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.i.DebugCommandInvoker.executeOperation:34</code></pre><blockquote><p>可以看到最终所有级别的日志都输出了 MDC 信息</p></blockquote><h3 id="4-3-2-配置历史记录级别"><a href="#4-3-2-配置历史记录级别" class="headerlink" title="4.3.2 配置历史记录级别"></a>4.3.2 配置历史记录级别</h3><p>配置 HistoryLevel:</p><ul><li>none: 不记录历史记录, 性能高, 流程结束后不可读取;</li><li>activiti: 归档流程实例和活动实例, 流程变量不同步;</li><li>audit: 默认值, 在 activiti 基础上同步变量值, 保存表单属性;</li><li>full: 性能较差, 记录所有实例和变量细节变化.</li></ul><h3 id="4-3-3-配置基于-DB-的事件日志"><a href="#4-3-3-配置基于-DB-的事件日志" class="headerlink" title="4.3.3 配置基于 DB 的事件日志"></a>4.3.3 配置基于 DB 的事件日志</h3><p>配置 Event Logging</p><ul><li>实验性的事件记录机制, 性能影响较大;</li><li>开启默认记录所有数据的变化过程, 导致表记录快速增长;</li><li>日志内容基于 JSON 格式, 建议存入 MongoDB, Elastic Search;</li></ul><h2 id="4-4-命令拦截器的配置"><a href="#4-4-命令拦截器的配置" class="headerlink" title="4.4 命令拦截器的配置"></a>4.4 命令拦截器的配置</h2><h3 id="4-4-1-命令模式与责任链模式"><a href="#4-4-1-命令模式与责任链模式" class="headerlink" title="4.4.1 命令模式与责任链模式"></a>4.4.1 命令模式与责任链模式</h3><h4 id="4-4-1-1-Command"><a href="#4-4-1-1-Command" class="headerlink" title="4.4.1.1 Command"></a>4.4.1.1 Command</h4><blockquote><p>命令拦截器使用命令模式实现, 多个拦截器会组成一个拦截器链, 实现了责任链模式</p></blockquote><p><img src="https://user-images.githubusercontent.com/17758731/49334530-3e031100-f613-11e8-9e2c-9e32150b0f33.png" alt="image"></p><ul><li>Command: 命令接口</li><li>ConcreteCommand: 命令实现, 构造命令的时候, 需要传入接受者, 即 Received</li><li>Receiver: Client 在实现 Command 接口的时候传入</li><li>Invoker: 调用者, 最终调用 ConcreteCommand 对象</li></ul><p><img src="https://user-images.githubusercontent.com/17758731/49334596-9edf1900-f614-11e8-99e2-ee9049405f55.png" alt="image"></p><h4 id="4-4-1-2-Chain-of-Responsibility"><a href="#4-4-1-2-Chain-of-Responsibility" class="headerlink" title="4.4.1.2 Chain of Responsibility"></a>4.4.1.2 Chain of Responsibility</h4><p><img src="https://user-images.githubusercontent.com/17758731/49334608-dea60080-f614-11e8-95e0-d55a75405c27.png" alt="image"></p><blockquote><p>customPre, default, customPost 中 <code>execute()</code> 的实现基本都是调用了 <code>next</code> 的 <code>execute()</code>, 只有 CommandInvoker 真正完成了执行器.</p></blockquote><ul><li>CustomPre: default 之前的拦截器</li><li>default: Activiti 默认的 CommandInterceptor</li><li>CustomPost: default 之后的拦截器</li><li>CommandInvoker: 最终的命令执行者</li></ul><h3 id="4-4-2-命令拦截器的配置"><a href="#4-4-2-命令拦截器的配置" class="headerlink" title="4.4.2 命令拦截器的配置"></a>4.4.2 命令拦截器的配置</h3><ul><li>配置Interceptor<ul><li>customProCommandInterceptors: 配置在默认拦截器之前</li><li>customPostCommandInterceptors: 配置在默认拦截器之后</li><li>commandInvoker: 配置在最后的执行器</li></ul></li></ul><h3 id="4-4-3-示例"><a href="#4-4-3-示例" class="headerlink" title="4.4.3 示例"></a>4.4.3 示例</h3><blockquote><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>实现一个可以统计所有命令完成时间的拦截器</p></blockquote><h4 id="拦截器实现"><a href="#拦截器实现" class="headerlink" title="拦截器实现"></a>拦截器实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DurationCommandInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractCommandInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DurationCommandInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(CommandConfig config, Command&lt;T&gt; command)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 记录当前时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getNext().execute(config, command);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> duration = System.currentTimeMillis() - start;</span><br><span class="line">            logger.info(<span class="string">"&#123;&#125; 执行时长: &#123;&#125; 毫秒"</span>, command.getClass().getSimpleName(), duration);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 ProcessEngineConfiguration  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"commandInvoker"</span> <span class="attr">ref</span>=<span class="string">"commandInvoker"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customPreCommandInterceptors"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.destiny.activiti.interceptor.DurationCommandInterceptor"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"commandInvoker"</span> <span class="attr">class</span>=<span class="string">"org.destiny.activiti.interceptor.MDCCommandInvoker"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="日志输出-2"><a href="#日志输出-2" class="headerlink" title="日志输出"></a>日志输出</h4><pre><code>10:10:09.371 [main] [INFO] SchemaOperationsProcessEngineBuild 执行时长: 113 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.372 [main] [INFO] ProcessEngine default created ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.a.e.i.ProcessEngineImpl.&lt;init&gt;:8710:10:09.391 [main] [INFO] ValidateExecutionRelatedEntityCountCfgCmd 执行时长: 14 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.394 [main] [INFO]  执行时长: 1 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.401 [main] [INFO] GetNextIdBlockCmd 执行时长: 4 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.508 [main] [INFO] GetProcessDefinitionInfoCmd 执行时长: 2 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.513 [main] [INFO] DeployCmd 执行时长: 116 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.616 [main] [INFO] CompleteTaskCmd 执行时长: 22 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:3310:10:09.630 [main] [INFO] DeleteDeploymentCmd 执行时长: 14 毫秒 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.i.DurationCommandInterceptor.execute:33</code></pre><h2 id="4-5-作业执行器-Job-Executor"><a href="#4-5-作业执行器-Job-Executor" class="headerlink" title="4.5 作业执行器 Job Executor"></a>4.5 作业执行器 Job Executor</h2><h3 id="4-5-1-作业执行器的配置"><a href="#4-5-1-作业执行器的配置" class="headerlink" title="4.5.1 作业执行器的配置"></a>4.5.1 作业执行器的配置</h3><ul><li>asyncExecutorActivate: 激活作业执行器</li><li>asyncExecutorXXX: 异步执行器的属性配置</li><li><p>asyncExecutor: 异步执行器 bean</p></li><li><p>定时开始事件</p><ul><li>timeDate: 指定启动时间</li><li>timeDuration: 指定持续时间间隔后执行</li><li>timeCycle:R5/P1DT1H 指定时间段后周期执行</li></ul></li></ul><h3 id="4-5-2-配置自定义线程池"><a href="#4-5-2-配置自定义线程池" class="headerlink" title="4.5.2 配置自定义线程池"></a>4.5.2 配置自定义线程池</h3><ul><li>corePoolSize: 核心线程数</li><li>maxPoolSize: 最大线程数</li><li>queueCapacity: 阻塞队列大小</li></ul><blockquote><p>如果核心线程数没满, 每当有一个任务, 不管原有线程是否空闲都会开启一个新的线程去执行, 直到达到核心线程数;<br>如果所有核心线程都在运行, 每当有一个任务, 会先放在阻塞队列等待, 直到核心线程执行完上一个任务, 会取阻塞队列第一个任务继续执行;<br>如果队列已满, 会继续创建新的线程, 直到达到最大线程数;<br>如果最大线程数和队列都已满, 此时会执行拒绝策略.</p></blockquote><h3 id="4-5-3-流程定义定时启动流程"><a href="#4-5-3-流程定义定时启动流程" class="headerlink" title="4.5.3 流程定义定时启动流程"></a>4.5.3 流程定义定时启动流程</h3><h3 id="4-5-4-Demo"><a href="#4-5-4-Demo" class="headerlink" title="4.5.4 Demo"></a>4.5.4 Demo</h3><h4 id="配置异步执行器"><a href="#配置异步执行器" class="headerlink" title="配置异步执行器"></a>配置异步执行器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 ProcessEngineConfiguration  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"commandInvoker"</span> <span class="attr">ref</span>=<span class="string">"commandInvoker"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打开异步执行器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"asyncExecutorActivate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"asyncExecutor"</span> <span class="attr">value</span>=<span class="string">"asyncExecutor"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件监听 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"eventListeners"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.destiny.activiti.listener.JobEventListener"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"asyncExecutor"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.asyncexecutor.DefaultAsyncJobExecutor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"executorService"</span> <span class="attr">ref</span>=<span class="string">"executorService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"executorService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"threadNamePrefix"</span> <span class="attr">value</span>=<span class="string">"activiti-job-"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"corePoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queueCapacity"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rejectedExecutionHandler"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"java.util.concurrent.ThreadPoolExecutor$AbortPolicy"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"commandInvoker"</span> <span class="attr">class</span>=<span class="string">"org.destiny.activiti.interceptor.MDCCommandInvoker"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="流程定义文件"><a href="#流程定义文件" class="headerlink" title="流程定义文件"></a>流程定义文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;startEvent id="start"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每 10 秒执行一次, 共执行 5 次 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeCycle</span>&gt;</span>R5/PT10S<span class="tag">&lt;/<span class="name">timeCycle</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加监听器"><a href="#添加监听器" class="headerlink" title="添加监听器"></a>添加监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobEventListener</span> <span class="keyword">implements</span> <span class="title">ActivitiEventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JobEventListener.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(ActivitiEvent event)</span> </span>&#123;</span><br><span class="line">        ActivitiEventType eventType = event.getType();</span><br><span class="line">        String name = eventType.name();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">"TIMER"</span>) || name.startsWith(<span class="string">"JOB"</span>)) &#123;</span><br><span class="line">            logger.info(<span class="string">"监听 Job 事件: &#123;&#125; \t &#123;&#125;"</span>, eventType, event.getProcessInstanceId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFailOnException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志输出-3"><a href="#日志输出-3" class="headerlink" title="日志输出"></a>日志输出</h4><pre><code>11:34:50.048 [main] [INFO] 监听 Job 事件: TIMER_SCHEDULED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:34:50.056 [main] [INFO] start ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.c.ConfigJobTest.test:3311:34:50.080 [main] [INFO] 定时任务 TimerJobEntity [id=4], 默认重试次数: 3 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.c.ConfigJobTest.test:3611:34:50.080 [main] [INFO] jobList.size: 1 ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.c.ConfigJobTest.test:3811:35:09.981 [activiti-job-1] [INFO] 监听 Job 事件: TIMER_FIRED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:09.990 [activiti-job-1] [INFO] 监听 Job 事件: TIMER_SCHEDULED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:09.990 [activiti-job-1] [INFO] 监听 Job 事件: JOB_EXECUTION_SUCCESS      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:19.950 [activiti-job-2] [INFO] 监听 Job 事件: TIMER_FIRED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:19.951 [activiti-job-2] [INFO] 监听 Job 事件: TIMER_SCHEDULED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:19.951 [activiti-job-2] [INFO] 监听 Job 事件: JOB_EXECUTION_SUCCESS      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:29.958 [activiti-job-3] [INFO] 监听 Job 事件: TIMER_FIRED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:29.959 [activiti-job-3] [INFO] 监听 Job 事件: TIMER_SCHEDULED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:29.960 [activiti-job-3] [INFO] 监听 Job 事件: JOB_EXECUTION_SUCCESS      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:39.966 [activiti-job-4] [INFO] 监听 Job 事件: TIMER_FIRED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:39.970 [activiti-job-4] [INFO] 监听 Job 事件: TIMER_SCHEDULED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:39.971 [activiti-job-4] [INFO] 监听 Job 事件: JOB_EXECUTION_SUCCESS      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:49.975 [activiti-job-5] [INFO] 监听 Job 事件: TIMER_FIRED      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:3411:35:49.975 [activiti-job-5] [INFO] 监听 Job 事件: JOB_EXECUTION_SUCCESS      null ProcessDefinitionId=     executionId= mdcProcessInstanceId= mdcBusinessKey= o.d.a.l.JobEventListener.onEvent:34</code></pre><h2 id="4-6-Activiti-与-Spring-集成"><a href="#4-6-Activiti-与-Spring-集成" class="headerlink" title="4.6 Activiti 与 Spring 集成"></a>4.6 Activiti 与 Spring 集成</h2><h3 id="4-6-1-集成-Spring-配置"><a href="#4-6-1-集成-Spring-配置" class="headerlink" title="4.6.1 集成 Spring 配置"></a>4.6.1 集成 Spring 配置</h3><ul><li>添加依赖:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>基于 Spring 的默认配置: <code>activiti-context.xml</code>, 如果配置该文件, Activiti 在启动过程中就会查找基于 Spring 的 <code>ProcessEngineConfiguration</code> 对象;</li><li>Activiti 核心服务注入 Spring 容器</li></ul><h3 id="4-6-2-基于-Spring-对-Activiti-的管理"><a href="#4-6-2-基于-Spring-对-Activiti-的管理" class="headerlink" title="4.6.2 基于 Spring 对 Activiti 的管理"></a>4.6.2 基于 Spring 对 Activiti 的管理</h3><h4 id="4-6-2-1-集成-Spring-事务管理器"><a href="#4-6-2-1-集成-Spring-事务管理器" class="headerlink" title="4.6.2.1  集成 Spring 事务管理器"></a>4.6.2.1  集成 Spring 事务管理器</h4><h4 id="activiti-context-xml"><a href="#activiti-context-xml" class="headerlink" title="activiti-context.xml"></a>activiti-context.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 ProcessEngineConfiguration  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.SpringProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring 需要单独配置 DataSource --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"sa"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 流程引擎对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngine"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.ProcessEngineFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">ref</span>=<span class="string">"processEngineConfiguration"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将服务暴露给 Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"runtimeService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getRuntimeService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"repositoryService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getRepositoryService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"formService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getFormService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getTaskService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"historyService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getHistoryService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 activitiRule 用于测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"activitiRule"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.test.ActivitiRule"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngine"</span> <span class="attr">ref</span>=<span class="string">"processEngine"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-6-2-2-定义文件表达式中使用-Spring-Bean"><a href="#4-6-2-2-定义文件表达式中使用-Spring-Bean" class="headerlink" title="4.6.2.2 定义文件表达式中使用 Spring Bean"></a>4.6.2.2 定义文件表达式中使用 Spring Bean</h4><h5 id="HelloBean"><a href="#HelloBean" class="headerlink" title="HelloBean"></a>HelloBean</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HelloBean.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"sayHello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="my-process-spring-bpmn20-xml"><a href="#my-process-spring-bpmn20-xml" class="headerlink" title="my-process-spring.bpmn20.xml"></a>my-process-spring.bpmn20.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"helloBean"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 从 Spring 容器中查找 Hello bean, 并且调用 sayHello() 方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">"helloBean"</span> <span class="attr">activiti:expression</span>=<span class="string">"$&#123;helloBean.sayHello()&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow3"</span> <span class="attr">sourceRef</span>=<span class="string">"helloBean"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试类-2"><a href="#测试类-2" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:activiti-context.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigSpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ConfigSpringTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"my-process-spring.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">        Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();</span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"processInstance: [&#123;&#125;]"</span>, processInstance);</span><br><span class="line">        logger.info(<span class="string">"task: [&#123;&#125;]"</span>, task);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-2-3-自动部署资源文件"><a href="#4-6-2-3-自动部署资源文件" class="headerlink" title="4.6.2.3 自动部署资源文件"></a>4.6.2.3 自动部署资源文件</h4><h3 id="4-6-3-基于-Spring-的流程单元测试"><a href="#4-6-3-基于-Spring-的流程单元测试" class="headerlink" title="4.6.3 基于 Spring 的流程单元测试"></a>4.6.3 基于 Spring 的流程单元测试</h3><ul><li>添加依赖 <code>spring-test</code></li><li>辅助测试 Rule: ActivitiRule</li><li>辅助测试 TestCase: SpringActivitiTestCase</li></ul><h1 id="5-Activiti-核心-API"><a href="#5-Activiti-核心-API" class="headerlink" title="5. Activiti 核心 API"></a>5. Activiti 核心 API</h1><table><thead><tr><th>服务名称</th><th>功能</th></tr></thead><tbody><tr><td>RepositoryServie</td><td>负责对静态文件的管理, 涉及部署对象和资源对象, 其二者是一对多的关系</td></tr><tr><td>RuntimeService</td><td>负责对流程进行控制的服务, 可以对流程实例完成启动, 暂停, 挂起等操作</td></tr><tr><td>TaskService</td><td>负责管理运行中的 UserTask(人工任务)</td></tr><tr><td>IdentityService</td><td>负责对用户和用户组的管理</td></tr><tr><td>FormService</td><td>负责解析流程定义中的表单, 对表单的数据类型做渲染</td></tr><tr><td>HistoryService</td><td>提供了对运行结束的流程实例的查询和删除操作</td></tr><tr><td>ManagementService</td><td>提供了对流程引擎基础的管理, 提供对定时任务 Job 的管理, 获取表结构, 表明的操作</td></tr><tr><td>DynamicBpmnService</td><td>提供了对动态的流程定义模型做修改</td></tr></tbody></table><h2 id="5-1-RepositoryService"><a href="#5-1-RepositoryService" class="headerlink" title="5.1 RepositoryService"></a>5.1 RepositoryService</h2><ul><li>管理流程定义文件 xml 及静态资源服务</li><li>对特定的流程的暂停和激活</li><li>流程定义启动权限管理</li><li>部署文件构造器 <code>DeploymentBuilder</code></li><li>部署文件查询器 <code>DeploymentQuery</code></li><li>流程定义文件查询对象 <code>ProcessDefinitionQuery</code></li><li>流程部署文件对象 <code>Deployment</code></li><li>流程定义文件对象 <code>ProcessDefinition</code></li><li>流程定义的 Java 格式 <code>BpmnModel</code></li></ul><p>RepositoryService API:</p><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>createDeployment</td><td>添加资源文件</td></tr><tr><td>deleteDeployment</td><td>删除资源文件</td></tr><tr><td>setDeploymentCategory</td><td>指定分类名称</td></tr><tr><td>createProcessDefinitionQuery</td><td>创建流程定义查询对象</td></tr><tr><td>createNativeProcessDefinitionQuery</td><td>通过 SQL 查询流程定义对象</td></tr><tr><td>suspendProcessDefinitionByXX</td><td>通过某些条件暂停/挂起流程定义对象, 使之不能再生成新的流程实例</td></tr><tr><td>activateProcessDefinitionByXX</td><td>通过某些条件激活流程定义对象, 使之可以继续生成新的流程实例</td></tr><tr><td>getProcssDiagram</td><td>获取流程图的数据流</td></tr><tr><td>getBpmnModel</td><td>获取 BpmnModel 对象</td></tr><tr><td>addCandidateStarterUser</td><td>设置某个流程文件只能由指定的用户去启动</td></tr><tr><td>addCandidateStarterGroup</td><td>设置某个流程文件只能由指定的用户组去启动</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h3 id="5-1-1-ProcessDefinitionId-的含义"><a href="#5-1-1-ProcessDefinitionId-的含义" class="headerlink" title="5.1.1 ProcessDefinitionId 的含义"></a>5.1.1 ProcessDefinitionId 的含义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RepositoryService repositoryService = activitiRule.getRepositoryService();</span><br><span class="line">    DeploymentBuilder deploymentBuilder1 = repositoryService.createDeployment();</span><br><span class="line">    deploymentBuilder1   <span class="comment">// 一个部署对象就记录了一次部署</span></span><br><span class="line">            .name(<span class="string">"测试部署资源1"</span>)                 <span class="comment">// 设置名称</span></span><br><span class="line">            .addClasspathResource(<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">"org/destiny/activiti/SecondApprove.bpmn20.xml"</span>)</span><br><span class="line">            .deploy();                          <span class="comment">// 完成部署</span></span><br><span class="line"></span><br><span class="line">    DeploymentBuilder deploymentBuilder2 = repositoryService.createDeployment();</span><br><span class="line">    deploymentBuilder2   <span class="comment">// 一个部署对象就记录了一次部署</span></span><br><span class="line">            .name(<span class="string">"测试部署资源2"</span>)                 <span class="comment">// 设置名称</span></span><br><span class="line">            .addClasspathResource(<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">"org/destiny/activiti/SecondApprove.bpmn20.xml"</span>)</span><br><span class="line">            .deploy();                          <span class="comment">// 完成部署</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询部署对象</span></span><br><span class="line">    List&lt;Deployment&gt; deploymentList = repositoryService.createDeploymentQuery()</span><br><span class="line">            .orderByDeploymenTime().asc()</span><br><span class="line">            .list();</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"size of deploymentList: &#123;&#125;"</span>, deploymentList.size());</span><br><span class="line">    <span class="keyword">for</span> (Deployment deployment : deploymentList) &#123;</span><br><span class="line">        logger.info(<span class="string">"deployment: &#123;&#125;"</span>, deployment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 流程定义</span></span><br><span class="line">    List&lt;ProcessDefinition&gt; processDefinitionList = repositoryService</span><br><span class="line">            .createProcessDefinitionQuery()</span><br><span class="line">            .orderByProcessDefinitionKey().asc()</span><br><span class="line">            .listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (ProcessDefinition processDefinition : processDefinitionList) &#123;</span><br><span class="line">        logger.info(<span class="string">"processDefinition: &#123;&#125;, version: &#123;&#125;, key: &#123;&#125;, name: &#123;&#125;"</span>,</span><br><span class="line">                processDefinition, processDefinition.getVersion(), processDefinition.getKey(), processDefinition.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的日志:</p><pre><code>08:42:45,507 [main] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from class path resource [activiti.cfg.xml]08:42:47,193 [main] INFO  org.activiti.engine.compatibility.DefaultActiviti5CompatibilityHandlerFactory  - Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.08:42:47,207 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql08:42:47,268 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql08:42:47,274 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql08:42:47,280 [main] INFO  org.activiti.engine.impl.ProcessEngineImpl  - ProcessEngine default created08:42:49,736 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - size of deploymentList: 208:42:49,736 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - deployment: DeploymentEntity[id=1, name=测试部署资源1]08:42:49,736 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - deployment: DeploymentEntity[id=7, name=测试部署资源2]08:42:49,742 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - processDefinition: ProcessDefinitionEntity[SecondApprove:1:5], version: 1, key: SecondApprove, name: 二级审批08:42:49,742 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - processDefinition: ProcessDefinitionEntity[SecondApprove:2:11], version: 2, key: SecondApprove, name: 二级审批08:42:49,742 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - processDefinition: ProcessDefinitionEntity[my-process:1:6], version: 1, key: my-process, name: null08:42:49,743 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - processDefinition: ProcessDefinitionEntity[my-process:2:12], version: 2, key: my-process, name: null</code></pre><p>两个 DeploymentEntity, 一个 id 为 1, 一个 id 为 7,  id 的设置使用全局自增, 说明在两个 Deployment 对象的部署过程中插入了 6 条记录:</p><ol><li>1 个部署记录;</li><li>2 个流程定义记录;</li><li>2 个 xml 文件对应的数据流记录;</li><li>1 个流程定义所生成的图片记录;(my-process 没有生成图片)</li></ol><h3 id="5-1-2-流程挂起-激活"><a href="#5-1-2-流程挂起-激活" class="headerlink" title="5.1.2 流程挂起/激活"></a>5.1.2 流程挂起/激活</h3><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@org</span>.activiti.engine.test.Deployment(resources = <span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSuspend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RepositoryService repositoryService = activitiRule.getRepositoryService();</span><br><span class="line">    ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().singleResult();</span><br><span class="line">    String processDefinitionId = processDefinition.getId();</span><br><span class="line">    logger.info(<span class="string">"processDefinitionId: &#123;&#125;"</span>, processDefinitionId);</span><br><span class="line"></span><br><span class="line">    repositoryService.suspendProcessDefinitionById(processDefinitionId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        logger.info(<span class="string">"开始启动"</span>);</span><br><span class="line">        activitiRule.getRuntimeService().startProcessInstanceById(processDefinitionId);</span><br><span class="line">        logger.info(<span class="string">"启动成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"启动失败, 原因: &#123;&#125;"</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repositoryService.activateProcessDefinitionById(processDefinitionId);</span><br><span class="line">    logger.info(<span class="string">"激活后开始启动"</span>);</span><br><span class="line">    activitiRule.getRuntimeService().startProcessInstanceById(processDefinitionId);</span><br><span class="line">    logger.info(<span class="string">"激活后启动成功"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出日志:</p><pre><code>09:12:42,071 [main] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from class path resource [activiti.cfg.xml]09:12:43,614 [main] INFO  org.activiti.engine.compatibility.DefaultActiviti5CompatibilityHandlerFactory  - Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.09:12:43,627 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql09:12:43,682 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql09:12:43,688 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql09:12:43,692 [main] INFO  org.activiti.engine.impl.ProcessEngineImpl  - ProcessEngine default created09:12:43,882 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - processDefinitionId: my-process:1:309:12:43,887 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - 开始启动09:12:43,893 [main] ERROR org.activiti.engine.impl.interceptor.CommandContext  - Error while closing command contextorg.activiti.engine.ActivitiException: Cannot start process instance. Process definition null (id = my-process:1:3) is suspended    at org.activiti.engine.impl.util.ProcessInstanceHelper.createAndStartProcessInstance(ProcessInstanceHelper.java:67)    at org.activiti.engine.impl.util.ProcessInstanceHelper.createAndStartProcessInstance(ProcessInstanceHelper.java:51)    at org.activiti.engine.impl.cmd.StartProcessInstanceCmd.createAndStartProcessInstance(StartProcessInstanceCmd.java:109)    at org.activiti.engine.impl.cmd.StartProcessInstanceCmd.execute(StartProcessInstanceCmd.java:102)    at org.activiti.engine.impl.cmd.StartProcessInstanceCmd.execute(StartProcessInstanceCmd.java:37)    at org.activiti.engine.impl.interceptor.CommandInvoker$1.run(CommandInvoker.java:37)    at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperation(CommandInvoker.java:78)    at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperations(CommandInvoker.java:57)    at org.activiti.engine.impl.interceptor.CommandInvoker.execute(CommandInvoker.java:42)    at org.activiti.engine.impl.interceptor.TransactionContextInterceptor.execute(TransactionContextInterceptor.java:48)    at org.activiti.engine.impl.interceptor.CommandContextInterceptor.execute(CommandContextInterceptor.java:63)    at org.activiti.engine.impl.interceptor.LogInterceptor.execute(LogInterceptor.java:29)    at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:44)    at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:39)    at org.activiti.engine.impl.RuntimeServiceImpl.startProcessInstanceById(RuntimeServiceImpl.java:114)    at org.destiny.activiti.coreapi.RepositoryServiceTest.testSuspend(RepositoryServiceTest.java:86)    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)    at java.lang.reflect.Method.invoke(Method.java:498)    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)    at org.activiti.engine.test.ActivitiRule$1.evaluate(ActivitiRule.java:116)    at org.junit.rules.RunRules.evaluate(RunRules.java:20)    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)    at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)09:12:43,895 [main] ERROR org.destiny.activiti.coreapi.RepositoryServiceTest  - 启动失败, 原因: Cannot start process instance. Process definition null (id = my-process:1:3) is suspended09:12:43,897 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - 激活后开始启动09:12:43,923 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - 激活后启动成功</code></pre><h3 id="5-1-3-绑定用户-用户组"><a href="#5-1-3-绑定用户-用户组" class="headerlink" title="5.1.3 绑定用户/用户组"></a>5.1.3 绑定用户/用户组</h3><blockquote></blockquote><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试用户组</span></span><br><span class="line"><span class="comment"> * repositoryService 只提供了构建关系的方式, 具体的校验逻辑需要自己完成</span></span><br><span class="line"><span class="comment"> * 可以取出用户/用户组信息, 自行通过逻辑判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@org</span>.activiti.engine.test.Deployment(resources = <span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCandidateStarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RepositoryService repositoryService = activitiRule.getRepositoryService();</span><br><span class="line">    ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().singleResult();</span><br><span class="line">    String processDefinitionId = processDefinition.getId();</span><br><span class="line">    logger.info(<span class="string">"processDefinitionId: &#123;&#125;"</span>, processDefinitionId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// userId/groupM 是对应的用户/用户组管理服务中创建的 id</span></span><br><span class="line">    repositoryService.addCandidateStarterUser(processDefinitionId, <span class="string">"user"</span>);</span><br><span class="line">    repositoryService.addCandidateStarterGroup(processDefinitionId, <span class="string">"groupM"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;IdentityLink&gt; identityLinkList = repositoryService.getIdentityLinksForProcessDefinition(processDefinitionId);</span><br><span class="line">    <span class="keyword">for</span> (IdentityLink identityLink : identityLinkList) &#123;</span><br><span class="line">        logger.info(<span class="string">"删除前: identityLink: [&#123;&#125;]"</span>, identityLink);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repositoryService.deleteCandidateStarterGroup(processDefinitionId, <span class="string">"groupM"</span>);</span><br><span class="line">    repositoryService.deleteCandidateStarterUser(processDefinitionId, <span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;IdentityLink&gt; identityLinkList1 = repositoryService.getIdentityLinksForProcessDefinition(processDefinitionId);</span><br><span class="line">    <span class="keyword">for</span> (IdentityLink identityLink : identityLinkList1) &#123;</span><br><span class="line">        logger.info(<span class="string">"删除后: identityLink: [&#123;&#125;]"</span>, identityLink);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志输出:</p><pre><code>10:08:35,380 [main] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from class path resource [activiti.cfg.xml]10:08:36,784 [main] INFO  org.activiti.engine.compatibility.DefaultActiviti5CompatibilityHandlerFactory  - Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.10:08:36,796 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql10:08:36,842 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql10:08:36,846 [main] INFO  org.activiti.engine.impl.db.DbSqlSession  - performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql10:08:36,849 [main] INFO  org.activiti.engine.impl.ProcessEngineImpl  - ProcessEngine default created10:08:37,009 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - processDefinitionId: my-process:1:310:08:37,016 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - 删除前: identityLink: [IdentityLinkEntity[id=4, type=candidate, userId=user, processDefId=my-process:1:3]]10:08:37,016 [main] INFO  org.destiny.activiti.coreapi.RepositoryServiceTest  - 删除前: identityLink: [IdentityLinkEntity[id=5, type=candidate, groupId=groupM, processDefId=my-process:1:3]]</code></pre><h2 id="5-2-RuntimeService-流程运行控制服务"><a href="#5-2-RuntimeService-流程运行控制服务" class="headerlink" title="5.2 RuntimeService 流程运行控制服务"></a>5.2 RuntimeService 流程运行控制服务</h2><p>功能:</p><ul><li>启动流程及对流程数据的控制</li><li>流程实例(ProcessInstance)与执行流(Execution)查询(当创建实例的时候, 一般也会创建一个执行流)</li><li>触发流程操作, 接受信号的消息</li></ul><p>Runtime 启动流程及变量管理:</p><ul><li>启动流程的常用方式(id, key, message)</li><li>启动流程可选参数:<ul><li>businessKey</li><li>variables</li><li>tenantId</li></ul></li><li>变量(variables)的设置和获取</li></ul><h3 id="5-2-1-基本操作"><a href="#5-2-1-基本操作" class="headerlink" title="5.2.1 基本操作"></a>5.2.1 基本操作</h3><h4 id="5-2-1-1-根据流程定义-key-启动流程"><a href="#5-2-1-1-根据流程定义-key-启动流程" class="headerlink" title="5.2.1.1 根据流程定义 key 启动流程"></a>5.2.1.1 根据流程定义 key 启动流程</h4><blockquote><p>每次流程部署时, 对应 ProcessDefintion 的 id 和 version 都会改变, 根据 ProcessDefintionKey 默认取最后一个版本的数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStartProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    </span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-1-2-根据流程定义-id"><a href="#5-2-1-2-根据流程定义-id" class="headerlink" title="5.2.1.2 根据流程定义 id"></a>5.2.1.2 根据流程定义 id</h4><blockquote><p>使用 ProcessDefintionId 进行获取的时候, 需要先通过 <code>RepositoryService</code> 获取到对应的 id</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据流程定义 id 启动流程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStartProcessById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RepositoryService repositoryService = activitiRule.getRepositoryService();</span><br><span class="line">    ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().singleResult();</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinition.getId(), variables);</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-1-3-通过-ProcessInstanceBuilder-完成流程的设置以及启动"><a href="#5-2-1-3-通过-ProcessInstanceBuilder-完成流程的设置以及启动" class="headerlink" title="5.2.1.3 通过 ProcessInstanceBuilder 完成流程的设置以及启动"></a>5.2.1.3 通过 ProcessInstanceBuilder 完成流程的设置以及启动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    ProcessInstance processInstance = runtimeService.createProcessInstanceBuilder()</span><br><span class="line">            .businessKey(<span class="string">"businessKey001"</span>)</span><br><span class="line">            .processDefinitionKey(<span class="string">"my-process"</span>)</span><br><span class="line">            .variables(variables)</span><br><span class="line">            .start();</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-1-4-设置和获取流程变量"><a href="#5-2-1-4-设置和获取流程变量" class="headerlink" title="5.2.1.4 设置和获取流程变量"></a>5.2.1.4 设置和获取流程变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVariables</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    variables.put(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">    variables.put(<span class="string">"key3"</span>, <span class="string">"value3"</span>);</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">    <span class="comment">// 覆盖原有内容</span></span><br><span class="line">    runtimeService.setVariable(processInstance.getId(), <span class="string">"key3"</span>, <span class="string">"newValue4"</span>);</span><br><span class="line">    runtimeService.setVariable(processInstance.getId(), <span class="string">"key4"</span>, <span class="string">"value4"</span>);</span><br><span class="line">    <span class="comment">// 根据流程实例 id 获取流程变量</span></span><br><span class="line">    Map&lt;String, Object&gt; map = runtimeService.getVariables(processInstance.getId());</span><br><span class="line">    log.info(<span class="string">"variable map: &#123;&#125;"</span>, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志输出:</p><pre><code>11:55:06.844 [main] [INFO] variable map: {key1=value1, key2=value2, key3=newValue4, key4=value4}  o.d.a.c.RuntimeServiceTest.testVariables:94</code></pre><h4 id="5-2-1-5-对流程实例的查询"><a href="#5-2-1-5-对流程实例的查询" class="headerlink" title="5.2.1.5 对流程实例的查询"></a>5.2.1.5 对流程实例的查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessInstanceQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">    ProcessInstance processInstance1 = runtimeService.createProcessInstanceQuery()</span><br><span class="line">            .processInstanceId(processInstance.getId())</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"processInstance1: &#123;&#125;"</span>, processInstance1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-1-6-对执行流的查询"><a href="#5-2-1-6-对执行流的查询" class="headerlink" title="5.2.1.6 对执行流的查询"></a>5.2.1.6 对执行流的查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecutionQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">    List&lt;Execution&gt; executionList = runtimeService.createExecutionQuery()</span><br><span class="line">            .listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (Execution execution : executionList) &#123;</span><br><span class="line">        log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-流程实例与执行流"><a href="#5-2-2-流程实例与执行流" class="headerlink" title="5.2.2 流程实例与执行流"></a>5.2.2 流程实例与执行流</h3><ul><li><code>流程实例(ProcessInstance)</code> 表示一次工作流业务的数据实体, 当每次启动流程的时候, 生成一个流程实例</li><li><code>执行流(Execution)</code> 表示流程实例中具体的执行路径, 如果简单的流程只有一条执行路径, 那么此时流程实例和执行流是一对一的关系</li><li>流程实例接口继承与执行流</li></ul><h3 id="5-2-3-流程触发"><a href="#5-2-3-流程触发" class="headerlink" title="5.2.3 流程触发"></a>5.2.3 流程触发</h3><ul><li>使用 trigger 触发 receiveTask 节点</li><li>触发信号捕获事件 singalEventRecivied(信号可以全局发送)</li><li>触发消息捕获事件 messageEventReceived(消息只能针对某一个流程实例)</li></ul><h4 id="5-2-3-1-流程触发-trigger"><a href="#5-2-3-1-流程触发-trigger" class="headerlink" title="5.2.3.1 流程触发 trigger"></a>5.2.3.1 流程触发 trigger</h4><p><img src="https://i.stack.imgur.com/CoNyK.png" alt></p><h5 id="流程配置文件"><a href="#流程配置文件" class="headerlink" title="流程配置文件"></a>流程配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;userTask id="someTask" name="Activiti is awesome!"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiveTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-trigger.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">    <span class="comment">// 开始流程后流程实例就会在 receiveTask 节点等待处理</span></span><br><span class="line">    Execution execution = runtimeService.createExecutionQuery()</span><br><span class="line">            .activityId(<span class="string">"someTask"</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">    runtimeService.trigger(execution.getId());</span><br><span class="line">    <span class="comment">// 再次查询</span></span><br><span class="line">    execution = runtimeService.createExecutionQuery()</span><br><span class="line">            .activityId(<span class="string">"someTask"</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">14:59:58.256 [main] [INFO] execution: Execution[ id &apos;5&apos; ] - activity &apos;someTask - parent &apos;4&apos;  o.d.a.c.RuntimeServiceTest.testTrigger:137</span><br><span class="line">14:59:58.291 [main] [INFO] execution: null  o.d.a.c.RuntimeServiceTest.testTrigger:142]</span><br></pre></td></tr></table></figure><blockquote><p>当完成了触发之后, 执行对象已经执行完成</p></blockquote><h4 id="5-2-3-2-流程触发-singalEventReceived"><a href="#5-2-3-2-流程触发-singalEventReceived" class="headerlink" title="5.2.3.2 流程触发 singalEventReceived"></a>5.2.3.2 流程触发 singalEventReceived</h4><blockquote><p>流程开始后, 流程会暂停在中间节点(SingalCatchingEvent), 当它获取到信号时间的时候, 才会继续流转</p></blockquote><p><img src="https://i.stack.imgur.com/TJv25.png" alt></p><h5 id="流程定义文件-1"><a href="#流程定义文件-1" class="headerlink" title="流程定义文件"></a>流程定义文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">signal</span> <span class="attr">id</span>=<span class="string">"signalStart"</span> <span class="attr">name</span>=<span class="string">"my-signal"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"signal-received"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义捕获边界事件, 当该节点接收到 my-signal 信号后会继续向后流转 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intermediateCatchEvent</span> <span class="attr">id</span>=<span class="string">"signal-received"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">signalEventDefinition</span> <span class="attr">signalRef</span>=<span class="string">"signalStart"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intermediateCatchEvent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;userTask id="someTask" name="Activiti is awesome!"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"signal-received"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-signal.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSignalEventReceived</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">    <span class="comment">// 查询数据库是否有一个正在等待信号的节点</span></span><br><span class="line">    Execution execution = runtimeService.createExecutionQuery()</span><br><span class="line">            .signalEventSubscriptionName(<span class="string">"my-signal"</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">    <span class="comment">// 触发信号</span></span><br><span class="line">    runtimeService.signalEventReceived(<span class="string">"my-signal"</span>);</span><br><span class="line">    <span class="comment">// 重新执行查询</span></span><br><span class="line">    execution = runtimeService.createExecutionQuery()</span><br><span class="line">            .signalEventSubscriptionName(<span class="string">"my-signal"</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="日志输出-4"><a href="#日志输出-4" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>15:14:42.184 [main] [INFO] execution: Execution[ id &apos;5&apos; ] - activity &apos;signal-received - parent &apos;4&apos;  o.d.a.c.RuntimeServiceTest.testSignalEventReceived:15515:14:42.216 [main] [INFO] execution: null  o.d.a.c.RuntimeServiceTest.testSignalEventReceived:163</code></pre><h4 id="5-2-3-3-流程触发-messageEventReceived"><a href="#5-2-3-3-流程触发-messageEventReceived" class="headerlink" title="5.2.3.3 流程触发 messageEventReceived"></a>5.2.3.3 流程触发 messageEventReceived</h4><blockquote><p>消息触发与信号触发非常相似, 唯一的不同是: 信号与具体的流程实例无关, 消息在执行过程中必须制定流程实例 id</p></blockquote><p><img src="https://i.stack.imgur.com/KxdJB.png" alt></p><h4 id="流程定义文件-2"><a href="#流程定义文件-2" class="headerlink" title="流程定义文件"></a>流程定义文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">message</span> <span class="attr">id</span>=<span class="string">"messageStart"</span> <span class="attr">name</span>=<span class="string">"my-message"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"message-received"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义捕获边界事件, 当该节点接收到 my-message 消息后会继续向后流转 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intermediateCatchEvent</span> <span class="attr">id</span>=<span class="string">"message-received"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">messageEventDefinition</span> <span class="attr">messageRef</span>=<span class="string">"messageStart"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intermediateCatchEvent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;userTask id="someTask" name="Activiti is awesome!"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"message-received"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-message.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMessageEventReceived</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">    <span class="comment">// 查询数据库是否有一个正在等待信号的节点</span></span><br><span class="line">    Execution execution = runtimeService.createExecutionQuery()</span><br><span class="line">            .messageEventSubscriptionName(<span class="string">"my-message"</span>)   <span class="comment">// 查询订阅了该信号的执行流</span></span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">    <span class="comment">// 触发消息, 不同于信号的触发, message 在触发时需要指定 executionId</span></span><br><span class="line">    runtimeService.messageEventReceived(<span class="string">"my-message"</span>, execution.getId());</span><br><span class="line">    <span class="comment">// 重新执行查询</span></span><br><span class="line">    execution = runtimeService.createExecutionQuery()</span><br><span class="line">            .messageEventSubscriptionName(<span class="string">"my-message"</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    log.info(<span class="string">"execution: &#123;&#125;"</span>, execution);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="日志输出-5"><a href="#日志输出-5" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>15:37:52.024 [main] [INFO] execution: Execution[ id &apos;5&apos; ] - activity &apos;message-received - parent &apos;4&apos;  o.d.a.c.RuntimeServiceTest.testMessageEventReceived:17515:37:52.054 [main] [INFO] execution: null  o.d.a.c.RuntimeServiceTest.testMessageEventReceived:183</code></pre><h4 id="5-2-3-4-流程基于-message-启动"><a href="#5-2-3-4-流程基于-message-启动" class="headerlink" title="5.2.3.4 流程基于 message 启动"></a>5.2.3.4 流程基于 message 启动</h4><h5 id="流程定义"><a href="#流程定义" class="headerlink" title="流程定义"></a>流程定义</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此时既可以基于 key 启动, 也可以基于 message 启动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">message</span> <span class="attr">id</span>=<span class="string">"messageStart"</span> <span class="attr">name</span>=<span class="string">"my-message"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 需要将 messageEventDefinition 放在开始节点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">messageEventDefinition</span> <span class="attr">messageRef</span>=<span class="string">"messageStart"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-message-start.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMessageStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByMessage(<span class="string">"my-message"</span>);</span><br><span class="line">    log.info(<span class="string">"processInstance: &#123;&#125;"</span>, processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="日志输出-6"><a href="#日志输出-6" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>15:45:12.844 [main] [INFO] processInstance: ProcessInstance[5]  o.d.a.c.RuntimeServiceTest.testMessageStart:195</code></pre><blockquote><p>基于 message 启动流程时, ProcessInstance 的 id 是 5, 意味着在流程订阅表中多插入了一条数据, 在实际启动过程中, 还是通过 message 找到 ProcessDefinition 的 key, 最终根据 key 来启动</p></blockquote><h2 id="5-3-TaskService-任务管理服务"><a href="#5-3-TaskService-任务管理服务" class="headerlink" title="5.3 TaskService 任务管理服务"></a>5.3 TaskService 任务管理服务</h2><p>TaskService 提供的功能:</p><ul><li>对用户任务管理和流程的控制</li><li>设置用户任务的权限信息(拥有者/候选人/办理人)</li><li>针对用户任务添加任务附件, 任务评论和事件记录</li></ul><p>TaskService 对 Task 管理与流程控制:</p><ul><li>Task 对象的创建, 删除</li><li>查询 Task, 并驱动 Task 节点完成执行</li><li>Task 相关参数变量设置<ul><li>local 变量</li><li>非 local 变量</li></ul></li></ul><h3 id="5-3-1-基本操作"><a href="#5-3-1-基本操作" class="headerlink" title="5.3.1 基本操作"></a>5.3.1 基本操作</h3><h4 id="5-3-1-1-获取-task-设置变量-驱动完成"><a href="#5-3-1-1-获取-task-设置变量-驱动完成" class="headerlink" title="5.3.1.1 获取 task/ 设置变量/ 驱动完成"></a>5.3.1.1 获取 task/ 设置变量/ 驱动完成</h4><h5 id="流程定义文件-3"><a href="#流程定义文件-3" class="headerlink" title="流程定义文件"></a>流程定义文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加候选人 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:candidateUsers</span>=<span class="string">"destiny,destiny1,destiny2"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加描述, message 会根据上下文中传入的 message 变量值去替换 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">documentation</span>&gt;</span></span><br><span class="line">                some task $&#123;message&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码-4"><a href="#测试代码-4" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-task.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTaskService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">        variables.put(<span class="string">"message"</span>, <span class="string">"my test message"</span>);</span><br><span class="line">        TaskService taskService = activitiRule.getTaskService();</span><br><span class="line">        <span class="comment">// 部署流程定义文件</span></span><br><span class="line">        ProcessInstance processInstance = activitiRule.getRuntimeService()</span><br><span class="line">                .startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">        Task task = taskService.createTaskQuery().singleResult();</span><br><span class="line">        log.info(<span class="string">"task: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(task, ToStringStyle.JSON_STYLE));</span><br><span class="line">        log.info(<span class="string">"task.description: &#123;&#125;"</span>, task.getDescription());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置变量</span></span><br><span class="line">        taskService.setVariable(task.getId(), <span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">        taskService.setVariableLocal(task.getId(), <span class="string">"localK1"</span>, <span class="string">"localV1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// local 只在 task 范围可见</span></span><br><span class="line">        Map&lt;String, Object&gt; taskServiceVariables = taskService.getVariables(task.getId());</span><br><span class="line">        Map&lt;String, Object&gt; taskServiceVariablesLocal = taskService.getVariablesLocal(task.getId());</span><br><span class="line">        <span class="comment">// 根据流程获取</span></span><br><span class="line">        Map&lt;String, Object&gt; processVariables = activitiRule.getRuntimeService().getVariables(task.getExecutionId());</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"taskServiceVariables: &#123;&#125;"</span>, taskServiceVariables);             <span class="comment">// &#123;k1=v1, localK1=localV1, message=my test message&#125;</span></span><br><span class="line">        log.info(<span class="string">"taskServiceVariablesLocal: &#123;&#125;"</span>, taskServiceVariablesLocal);   <span class="comment">// &#123;localK1=localV1&#125;</span></span><br><span class="line">        log.info(<span class="string">"processVariables: &#123;&#125;"</span>, processVariables);                     <span class="comment">// &#123;k1=v1, message=my test message&#125;</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; completeVar = Maps.newHashMap();</span><br><span class="line">        completeVar.put(<span class="string">"cKey1"</span>, <span class="string">"cValue1"</span>);</span><br><span class="line">        taskService.complete(task.getId(), completeVar);</span><br><span class="line"></span><br><span class="line">        Task task1 = taskService.createTaskQuery().taskId(task.getId()).singleResult();</span><br><span class="line">        log.info(<span class="string">"task1: &#123;&#125;"</span>, task1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="日志输出-7"><a href="#日志输出-7" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>16:13:26.654 [main] [INFO] Loading XML bean definitions from class path resource [activiti.cfg.xml]  o.s.b.f.x.XmlBeanDefinitionReader.loadBeanDefinitions:31616:13:28.438 [main] [INFO] Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.  o.a.e.c.DefaultActiviti5CompatibilityHandlerFactory.createActiviti5CompatibilityHandler:3816:13:28.451 [main] [INFO] performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114716:13:28.527 [main] [INFO] performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114716:13:28.535 [main] [INFO] performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114716:13:28.541 [main] [INFO] ProcessEngine default created  o.a.e.i.ProcessEngineImpl.&lt;init&gt;:8716:13:28.793 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.796 [main] [INFO] 4 (process instance)└── 6 : start (StartEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.798 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.799 [main] [INFO] 4 (process instance)└── 6 : start (StartEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.800 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.800 [main] [INFO] 4 (process instance)└── 6 : start -&gt; someTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.802 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.802 [main] [INFO] 4 (process instance)└── 6 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.878 [main] [INFO] task: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:0,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:null,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Activiti is awesome!&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:&quot;some task my test message&quot;,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Mon Dec 03 16:13:28 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;6&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;my-process:1:3&quot;,&quot;taskDefinitionKey&quot;:&quot;someTask&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;9&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskService:3316:13:28.878 [main] [INFO] task.description: some task my test message  o.d.a.c.TaskServiceTest.testTaskService:3416:13:28.893 [main] [INFO] taskServiceVariables: {k1=v1, localK1=localV1, message=my test message}  o.d.a.c.TaskServiceTest.testTaskService:4616:13:28.893 [main] [INFO] taskServiceVariablesLocal: {localK1=localV1}  o.d.a.c.TaskServiceTest.testTaskService:4716:13:28.893 [main] [INFO] processVariables: {k1=v1, message=my test message}  o.d.a.c.TaskServiceTest.testTaskService:4816:13:28.893 [main] [INFO] 4 (process instance)└── 6 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.893 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.893 [main] [INFO] 4 (process instance)└── 6 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.893 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.893 [main] [INFO] 4 (process instance)└── 6 : someTask -&gt; end, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.893 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.893 [main] [INFO] 4 (process instance)└── 6 : end (EndEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.893 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.893 [main] [INFO] 4 (process instance)└── 6 : end (EndEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.893 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.EndExecutionOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:13:28.893 [main] [INFO] 4 (process instance)└── 6 : end (EndEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:13:28.893 [main] [INFO] task1: null  o.d.a.c.TaskServiceTest.testTaskService:55</code></pre><h4 id="5-3-1-2-TaskService-设置-Task-权限信息"><a href="#5-3-1-2-TaskService-设置-Task-权限信息" class="headerlink" title="5.3.1.2 TaskService 设置 Task 权限信息"></a>5.3.1.2 TaskService 设置 Task 权限信息</h4><ul><li>候选用户(candidateUser) 和候选组(candidateGroup)</li><li>指定拥有人(Owner)和办理人(Assignee)</li><li>通过 claim 设置办理人(发现 task 已经有指定办理人且不是 claim 指定的人就会抛出异常)</li></ul><h5 id="流程定义-1"><a href="#流程定义-1" class="headerlink" title="流程定义"></a>流程定义</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加候选人 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:candidateUsers</span>=<span class="string">"destiny,destiny1,destiny2"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加描述, message 会根据上下文中传入的 message 变量值去替换 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">documentation</span>&gt;</span></span><br><span class="line">                some task $&#123;message&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试代码-5"><a href="#测试代码-5" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-task.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTaskServiceUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"message"</span>, <span class="string">"my test message"</span>);</span><br><span class="line">    activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    TaskService taskService = activitiRule.getTaskService();</span><br><span class="line">    Task task = taskService.createTaskQuery().singleResult();</span><br><span class="line">    log.info(<span class="string">"task: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(task, ToStringStyle.JSON_STYLE));</span><br><span class="line">    log.info(<span class="string">"task.description: &#123;&#125;"</span>, task.getDescription());</span><br><span class="line">    taskService.setOwner(task.getId(), <span class="string">"user1"</span>);</span><br><span class="line">    <span class="comment">// 可能存在覆盖已有代办放的问题, 因此不推荐</span></span><br><span class="line">    <span class="comment">// taskService.setAssignee(task.getId(), "destiny");</span></span><br><span class="line">    <span class="comment">// 查询在候选人列表, 且未指定办理人的 task 列表</span></span><br><span class="line">    List&lt;Task&gt; taskList = taskService.createTaskQuery()</span><br><span class="line">            .taskCandidateOrAssigned(<span class="string">"destiny"</span>)</span><br><span class="line">            .taskUnassigned()</span><br><span class="line">            .listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 使用 claim 设置候选人</span></span><br><span class="line">    <span class="keyword">for</span> (Task task1 : taskList) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            taskService.claim(task1.getId(), <span class="string">"destiny"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查看当前 task 的所有用户关系内容</span></span><br><span class="line">    List&lt;IdentityLink&gt; identityLinkList = taskService.getIdentityLinksForTask(task.getId());</span><br><span class="line">    <span class="keyword">for</span> (IdentityLink identityLink : identityLinkList) &#123;</span><br><span class="line">        log.info(<span class="string">"identityLink: &#123;&#125;"</span>, identityLink);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 完成任务, 首先找到处于代办状态的所有 task</span></span><br><span class="line">    List&lt;Task&gt; destinys = taskService.createTaskQuery().taskAssignee(<span class="string">"destiny"</span>).listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (Task destiny : destinys) &#123;</span><br><span class="line">        variables.clear();</span><br><span class="line">        variables.put(<span class="string">"cKey1"</span>, <span class="string">"cValue1"</span>);</span><br><span class="line">        taskService.complete(destiny.getId(), variables);</span><br><span class="line">    &#125;</span><br><span class="line">    destinys = taskService.createTaskQuery().taskAssignee(<span class="string">"destiny"</span>).listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    log.info(<span class="string">"是否存在: &#123;&#125;"</span>, CollectionUtils.isEmpty(destinys));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="输出日志-1"><a href="#输出日志-1" class="headerlink" title="输出日志"></a>输出日志</h5><pre><code>16:41:28.534 [main] [INFO] Loading XML bean definitions from class path resource [activiti.cfg.xml]  o.s.b.f.x.XmlBeanDefinitionReader.loadBeanDefinitions:31616:41:30.373 [main] [INFO] Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.  o.a.e.c.DefaultActiviti5CompatibilityHandlerFactory.createActiviti5CompatibilityHandler:3816:41:30.385 [main] [INFO] performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114716:41:30.443 [main] [INFO] performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114716:41:30.449 [main] [INFO] performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114716:41:30.453 [main] [INFO] ProcessEngine default created  o.a.e.i.ProcessEngineImpl.&lt;init&gt;:8716:41:30.631 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.636 [main] [INFO] 4 (process instance)└── 6 : start (StartEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.638 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.638 [main] [INFO] 4 (process instance)└── 6 : start (StartEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.639 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.640 [main] [INFO] 4 (process instance)└── 6 : start -&gt; someTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.640 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.641 [main] [INFO] 4 (process instance)└── 6 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.715 [main] [INFO] task: {&quot;owner&quot;:null,&quot;assigneeUpdatedCount&quot;:0,&quot;originalAssignee&quot;:null,&quot;assignee&quot;:null,&quot;delegationState&quot;:null,&quot;parentTaskId&quot;:null,&quot;name&quot;:&quot;Activiti is awesome!&quot;,&quot;localizedName&quot;:null,&quot;description&quot;:&quot;some task my test message&quot;,&quot;localizedDescription&quot;:null,&quot;priority&quot;:50,&quot;createTime&quot;:&quot;Mon Dec 03 16:41:30 CST 2018&quot;,&quot;dueDate&quot;:null,&quot;suspensionState&quot;:1,&quot;category&quot;:null,&quot;isIdentityLinksInitialized&quot;:false,&quot;taskIdentityLinkEntities&quot;:[],&quot;executionId&quot;:&quot;6&quot;,&quot;execution&quot;:null,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;processInstance&quot;:null,&quot;processDefinitionId&quot;:&quot;my-process:1:3&quot;,&quot;taskDefinitionKey&quot;:&quot;someTask&quot;,&quot;formKey&quot;:null,&quot;isDeleted&quot;:false,&quot;isCanceled&quot;:false,&quot;eventName&quot;:null,&quot;currentActivitiListener&quot;:null,&quot;tenantId&quot;:&quot;&quot;,&quot;queryVariables&quot;:null,&quot;forcedUpdate&quot;:false,&quot;claimTime&quot;:null,&quot;variableInstances&quot;:null,&quot;usedVariablesCache&quot;:{},&quot;transientVariabes&quot;:null,&quot;cachedElContext&quot;:null,&quot;id&quot;:&quot;9&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskServiceUser:6916:41:30.715 [main] [INFO] task.description: some task my test message  o.d.a.c.TaskServiceTest.testTaskServiceUser:7016:41:30.739 [main] [INFO] identityLink: IdentityLinkEntity[id=10, type=candidate, userId=destiny, taskId=9]  o.d.a.c.TaskServiceTest.testTaskServiceUser:9416:41:30.740 [main] [INFO] identityLink: IdentityLinkEntity[id=12, type=candidate, userId=destiny1, taskId=9]  o.d.a.c.TaskServiceTest.testTaskServiceUser:9416:41:30.740 [main] [INFO] identityLink: IdentityLinkEntity[id=14, type=candidate, userId=destiny2, taskId=9]  o.d.a.c.TaskServiceTest.testTaskServiceUser:9416:41:30.740 [main] [INFO] identityLink: IdentityLinkEntity[id=null, type=assignee, userId=destiny, taskId=9]  o.d.a.c.TaskServiceTest.testTaskServiceUser:9416:41:30.740 [main] [INFO] identityLink: IdentityLinkEntity[id=null, type=owner, userId=user1, taskId=9]  o.d.a.c.TaskServiceTest.testTaskServiceUser:9416:41:30.749 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TriggerExecutionOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.751 [main] [INFO] 4 (process instance)└── 6 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.752 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.753 [main] [INFO] 4 (process instance)└── 6 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.754 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.754 [main] [INFO] 4 (process instance)└── 6 : someTask -&gt; end, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.755 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.755 [main] [INFO] 4 (process instance)└── 6 : end (EndEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.755 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.755 [main] [INFO] 4 (process instance)└── 6 : end (EndEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.757 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.EndExecutionOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3316:41:30.757 [main] [INFO] 4 (process instance)└── 6 : end (EndEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3416:41:30.770 [main] [INFO] 是否存在: true  o.d.a.c.TaskServiceTest.testTaskServiceUser:106</code></pre><h3 id="5-3-2-TaskService-设置-Task-附加信息"><a href="#5-3-2-TaskService-设置-Task-附加信息" class="headerlink" title="5.3.2 TaskService 设置 Task 附加信息"></a>5.3.2 TaskService 设置 Task 附加信息</h3><ul><li>任务附件(Attachment)创建与查询</li><li>任务评论(Comment)创建与查询</li><li>事件记录(Event)创建于查询</li></ul><h4 id="5-3-2-1-任务附件-Attachment-创建与查询"><a href="#5-3-2-1-任务附件-Attachment-创建与查询" class="headerlink" title="5.3.2.1 任务附件(Attachment)创建与查询"></a>5.3.2.1 任务附件(Attachment)创建与查询</h4><h5 id="流程定义-2"><a href="#流程定义-2" class="headerlink" title="流程定义"></a>流程定义</h5><p>同上</p><h4 id="测试代码-6"><a href="#测试代码-6" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-task.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTaskAttachment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"message"</span>, <span class="string">"my test message"</span>);</span><br><span class="line">    activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    TaskService taskService = activitiRule.getTaskService();</span><br><span class="line">    Task task = taskService.createTaskQuery().singleResult();</span><br><span class="line">    <span class="comment">// 可以上传数据流或 url</span></span><br><span class="line">    Attachment attachment = taskService.createAttachment(<span class="string">"url"</span>, task.getId(), task.getProcessInstanceId(), <span class="string">"name"</span>, <span class="string">"desc"</span>, <span class="string">"/url/test.png"</span>);</span><br><span class="line">    log.info(<span class="string">"attachment: &#123;&#125;"</span>, attachment);</span><br><span class="line">    List&lt;Attachment&gt; taskAttachments = taskService.getTaskAttachments(task.getId());</span><br><span class="line">    <span class="keyword">for</span> (Attachment taskAttachment : taskAttachments) &#123;</span><br><span class="line">        log.info(<span class="string">"taskAttachment: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(taskAttachment, ToStringStyle.JSON_STYLE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志输出-8"><a href="#日志输出-8" class="headerlink" title="日志输出"></a>日志输出</h4><pre><code>17:12:47.043 [main] [INFO] attachment: org.activiti.engine.impl.persistence.entity.AttachmentEntityImpl@72b16078  o.d.a.c.TaskServiceTest.testTaskAttachment:11917:12:47.050 [main] [INFO] taskAttachment: {&quot;name&quot;:&quot;name&quot;,&quot;description&quot;:&quot;desc&quot;,&quot;type&quot;:&quot;url&quot;,&quot;taskId&quot;:&quot;9&quot;,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;url&quot;:&quot;/url/test.png&quot;,&quot;contentId&quot;:null,&quot;content&quot;:null,&quot;userId&quot;:null,&quot;time&quot;:&quot;Mon Dec 03 17:12:47 CST 2018&quot;,&quot;id&quot;:&quot;16&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskAttachment:122</code></pre><h4 id="5-3-2-2-任务评论-Comment-创建与查询"><a href="#5-3-2-2-任务评论-Comment-创建与查询" class="headerlink" title="5.3.2.2 任务评论(Comment)创建与查询"></a>5.3.2.2 任务评论(Comment)创建与查询</h4><h5 id="流程定义-3"><a href="#流程定义-3" class="headerlink" title="流程定义"></a>流程定义</h5><p>同上</p><h5 id="测试代码-7"><a href="#测试代码-7" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-task.bpmn20.xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTaskComment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; variables = Maps.newHashMap();</span><br><span class="line">    variables.put(<span class="string">"message"</span>, <span class="string">"my test message"</span>);</span><br><span class="line">    activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>, variables);</span><br><span class="line">    TaskService taskService = activitiRule.getTaskService();</span><br><span class="line">    Task task = taskService.createTaskQuery().singleResult();</span><br><span class="line">    <span class="comment">// 添加评论</span></span><br><span class="line">    taskService.addComment(task.getId(), task.getProcessInstanceId(), <span class="string">"record note1"</span>);</span><br><span class="line">    taskService.addComment(task.getId(), task.getProcessInstanceId(), <span class="string">"record note2"</span>);</span><br><span class="line">    List&lt;Comment&gt; taskComments = taskService.getTaskComments(task.getId());</span><br><span class="line">    <span class="keyword">for</span> (Comment taskComment : taskComments) &#123;</span><br><span class="line">        log.info(<span class="string">"taskComment: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(taskComment, ToStringStyle.JSON_STYLE));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 事件记录</span></span><br><span class="line">    List&lt;Event&gt; taskEvents = taskService.getTaskEvents(task.getId());</span><br><span class="line">    <span class="keyword">for</span> (Event taskEvent : taskEvents) &#123;</span><br><span class="line">        log.info(<span class="string">"taskEvent: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(taskEvent, ToStringStyle.JSON_STYLE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="日志输出-9"><a href="#日志输出-9" class="headerlink" title="日志输出"></a>日志输出</h5><pre><code>17:05:17.107 [main] [INFO] taskComment: {&quot;type&quot;:&quot;comment&quot;,&quot;userId&quot;:null,&quot;time&quot;:&quot;Mon Dec 03 17:05:17 CST 2018&quot;,&quot;taskId&quot;:&quot;9&quot;,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;action&quot;:&quot;AddComment&quot;,&quot;message&quot;:&quot;record note2&quot;,&quot;fullMessage&quot;:&quot;record note2&quot;,&quot;id&quot;:&quot;17&quot;,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskComment:14017:05:17.107 [main] [INFO] taskComment: {&quot;type&quot;:&quot;comment&quot;,&quot;userId&quot;:null,&quot;time&quot;:&quot;Mon Dec 03 17:05:17 CST 2018&quot;,&quot;taskId&quot;:&quot;9&quot;,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;action&quot;:&quot;AddComment&quot;,&quot;message&quot;:&quot;record note1&quot;,&quot;fullMessage&quot;:&quot;record note1&quot;,&quot;id&quot;:&quot;16&quot;,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskComment:14017:05:17.109 [main] [INFO] taskEvent: {&quot;type&quot;:&quot;comment&quot;,&quot;userId&quot;:null,&quot;time&quot;:&quot;Mon Dec 03 17:05:17 CST 2018&quot;,&quot;taskId&quot;:&quot;9&quot;,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;action&quot;:&quot;AddComment&quot;,&quot;message&quot;:&quot;record note2&quot;,&quot;fullMessage&quot;:&quot;record note2&quot;,&quot;id&quot;:&quot;17&quot;,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskComment:14617:05:17.110 [main] [INFO] taskEvent: {&quot;type&quot;:&quot;comment&quot;,&quot;userId&quot;:null,&quot;time&quot;:&quot;Mon Dec 03 17:05:17 CST 2018&quot;,&quot;taskId&quot;:&quot;9&quot;,&quot;processInstanceId&quot;:&quot;4&quot;,&quot;action&quot;:&quot;AddComment&quot;,&quot;message&quot;:&quot;record note1&quot;,&quot;fullMessage&quot;:&quot;record note1&quot;,&quot;id&quot;:&quot;16&quot;,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.TaskServiceTest.testTaskComment:146</code></pre><blockquote><h5 id="Comment-和-Event-的区别"><a href="#Comment-和-Event-的区别" class="headerlink" title="Comment 和 Event 的区别"></a>Comment 和 Event 的区别</h5><p>所有对 task 的操作都会生成新的 Event 记录, comment 只是其中的一种, 比如在上例中新增 owner 或 assignee, 也会产生新的 event 记录</p></blockquote><h2 id="5-4-身份管理服务"><a href="#5-4-身份管理服务" class="headerlink" title="5.4 身份管理服务"></a>5.4 身份管理服务</h2><blockquote><p>Activiti 提供了相对比较简单的用户/用户组管理</p></blockquote><p>主要功能:</p><ul><li>管理用户(User)</li><li>管理用户组(Group)</li><li>用户与用户组的关系(Membership)(多对多关系)</li></ul><h3 id="5-4-1-创建用户-用户组-对应关系"><a href="#5-4-1-创建用户-用户组-对应关系" class="headerlink" title="5.4.1 创建用户/用户组/对应关系"></a>5.4.1 创建用户/用户组/对应关系</h3><h4 id="流程定义-4"><a href="#流程定义-4" class="headerlink" title="流程定义"></a>流程定义</h4><blockquote><p>此处不需要基于流程定义完成</p></blockquote><h4 id="测试代码-8"><a href="#测试代码-8" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentityServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule = <span class="keyword">new</span> ActivitiRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIdentity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IdentityService identityService = activitiRule.getIdentityService();</span><br><span class="line">        User user1 = identityService.newUser(<span class="string">"user1"</span>);</span><br><span class="line">        user1.setEmail(<span class="string">"destinywk@163.com"</span>);</span><br><span class="line">        User user2 = identityService.newUser(<span class="string">"user2"</span>);</span><br><span class="line">        user2.setEmail(<span class="string">"destinywk@126.com"</span>);</span><br><span class="line">        identityService.saveUser(user1);</span><br><span class="line">        identityService.saveUser(user2);</span><br><span class="line"></span><br><span class="line">        Group group1 = identityService.newGroup(<span class="string">"group1"</span>);</span><br><span class="line">        identityService.saveGroup(group1);</span><br><span class="line">        Group group2 = identityService.newGroup(<span class="string">"group2"</span>);</span><br><span class="line">        identityService.saveGroup(group2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建关系</span></span><br><span class="line">        identityService.createMembership(<span class="string">"user1"</span>, <span class="string">"group1"</span>);</span><br><span class="line">        identityService.createMembership(<span class="string">"user2"</span>, <span class="string">"group1"</span>);</span><br><span class="line">        identityService.createMembership(<span class="string">"user1"</span>, <span class="string">"group2"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = identityService.createUserQuery()</span><br><span class="line">                .memberOfGroup(<span class="string">"group1"</span>)</span><br><span class="line">                .listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            log.info(<span class="string">"user: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(user, ToStringStyle.JSON_STYLE));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Group&gt; groupList = identityService.createGroupQuery()</span><br><span class="line">                .groupMember(<span class="string">"user1"</span>).listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (Group group : groupList) &#123;</span><br><span class="line">            log.info(<span class="string">"group: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(group, ToStringStyle.JSON_STYLE));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志输出-10"><a href="#日志输出-10" class="headerlink" title="日志输出"></a>日志输出</h4><pre><code>17:37:12.982 [main] [INFO] Loading XML bean definitions from class path resource [activiti.cfg.xml]  o.s.b.f.x.XmlBeanDefinitionReader.loadBeanDefinitions:31617:37:14.894 [main] [INFO] Activiti 5 compatibility handler implementation not found or error during instantiation : org.activiti.compatibility.DefaultActiviti5CompatibilityHandler. Activiti 5 backwards compatibility disabled.  o.a.e.c.DefaultActiviti5CompatibilityHandlerFactory.createActiviti5CompatibilityHandler:3817:37:14.910 [main] [INFO] performing create on engine with resource org/activiti/db/create/activiti.h2.create.engine.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114717:37:14.971 [main] [INFO] performing create on history with resource org/activiti/db/create/activiti.h2.create.history.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114717:37:14.978 [main] [INFO] performing create on identity with resource org/activiti/db/create/activiti.h2.create.identity.sql  o.a.e.i.d.DbSqlSession.executeSchemaResource:114717:37:14.982 [main] [INFO] ProcessEngine default created  o.a.e.i.ProcessEngineImpl.&lt;init&gt;:8717:37:15.041 [main] [INFO] user: {&quot;firstName&quot;:null,&quot;lastName&quot;:null,&quot;email&quot;:&quot;destinywk@163.com&quot;,&quot;password&quot;:null,&quot;pictureByteArrayRef&quot;:&quot;ByteArrayRef[id=null, name=null, entity=null]&quot;,&quot;id&quot;:&quot;user1&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.IdentityServiceTest.testIdentity:4617:37:15.042 [main] [INFO] user: {&quot;firstName&quot;:null,&quot;lastName&quot;:null,&quot;email&quot;:&quot;destinywk@126.com&quot;,&quot;password&quot;:null,&quot;pictureByteArrayRef&quot;:&quot;ByteArrayRef[id=null, name=null, entity=null]&quot;,&quot;id&quot;:&quot;user2&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.IdentityServiceTest.testIdentity:4617:37:15.048 [main] [INFO] group: {&quot;name&quot;:null,&quot;type&quot;:null,&quot;id&quot;:&quot;group1&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.IdentityServiceTest.testIdentity:5217:37:15.048 [main] [INFO] group: {&quot;name&quot;:null,&quot;type&quot;:null,&quot;id&quot;:&quot;group2&quot;,&quot;revision&quot;:1,&quot;isInserted&quot;:false,&quot;isUpdated&quot;:false,&quot;isDeleted&quot;:false}  o.d.a.c.IdentityServiceTest.testIdentity:52</code></pre><p>身份管理服务的调用过程:</p><p><img src="https://user-images.githubusercontent.com/17758731/49366329-08018200-f724-11e8-8b70-9fb9f4f6a6d5.png" alt="image"></p><p>会将 User 封装成一个 Command, 交由命令执行器去执行, 最后调用 MyBatis 底层接口去操作 DB</p><h2 id="5-5-表单管理服务-FormService"><a href="#5-5-表单管理服务-FormService" class="headerlink" title="5.5 表单管理服务 FormService"></a>5.5 表单管理服务 FormService</h2><p>功能:</p><ul><li>解析流程定义中表单项的配置</li><li>提供提交表单的方式驱动用户节点流转</li><li>获取自定义外部表单 key</li></ul><h3 id="5-5-1"><a href="#5-5-1" class="headerlink" title="5.5.1"></a>5.5.1</h3><h4 id="流程定义-5"><a href="#流程定义-5" class="headerlink" title="流程定义"></a>流程定义</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span> <span class="attr">activiti:formKey</span>=<span class="string">"/rest/process/form/start"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置表单项 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">name</span>=<span class="string">"信息"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">required</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> <span class="attr">activiti:formKey</span>=<span class="string">"/rest/process/form/userTask"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置表单项 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"yesOrNo"</span> <span class="attr">name</span>=<span class="string">"审批"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">required</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码-9"><a href="#测试代码-9" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule = <span class="keyword">new</span> ActivitiRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"org/destiny/activiti/my-process-form.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFormService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FormService formService = activitiRule.getFormService();</span><br><span class="line">        <span class="comment">// 获取流程定义文件</span></span><br><span class="line">        ProcessDefinition processDefinition = activitiRule.getRepositoryService().createProcessDefinitionQuery().singleResult();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 startForm 的 key 和 data</span></span><br><span class="line">        String startFormKey = formService.getStartFormKey(processDefinition.getId());</span><br><span class="line">        log.info(<span class="string">"startFormKey: &#123;&#125;"</span>, startFormKey);</span><br><span class="line">        StartFormData startFormData = formService.getStartFormData(processDefinition.getId());</span><br><span class="line">        log.info(<span class="string">"startFormKey: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(startFormData, ToStringStyle.JSON_STYLE));</span><br><span class="line">        <span class="keyword">for</span> (FormProperty startFormProperty : startFormData.getFormProperties()) &#123;</span><br><span class="line">            log.info(<span class="string">"startFormProperty: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(startFormProperty, ToStringStyle.JSON_STYLE));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动流程</span></span><br><span class="line">        Map&lt;String, String&gt; properties = Maps.newHashMap();</span><br><span class="line">        properties.put(<span class="string">"message"</span>, <span class="string">"my test message"</span>);</span><br><span class="line">        formService.submitStartFormData(processDefinition.getId(), properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询 task</span></span><br><span class="line">        Task task = activitiRule.getTaskService().createTaskQuery().singleResult();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 taskForm 的 data</span></span><br><span class="line">        TaskFormData taskFormData = formService.getTaskFormData(task.getId());</span><br><span class="line">        log.info(<span class="string">"taskFormData: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(taskFormData, ToStringStyle.JSON_STYLE));</span><br><span class="line">        <span class="keyword">for</span> (FormProperty taskFormProperty : taskFormData.getFormProperties()) &#123;</span><br><span class="line">            log.info(<span class="string">"taskFormProperty: &#123;&#125;"</span>, ToStringBuilder.reflectionToString(taskFormProperty, ToStringStyle.JSON_STYLE));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志输出-11"><a href="#日志输出-11" class="headerlink" title="日志输出"></a>日志输出</h4><pre><code>18:15:27.539 [main] [INFO] startFormKey: /rest/process/form/start  o.d.a.c.FormServiceTest.testFormService:3618:15:27.547 [main] [INFO] startFormKey: {&quot;processDefinition&quot;:&quot;ProcessDefinitionEntity[my-process:1:3]&quot;,&quot;formKey&quot;:&quot;/rest/process/form/start&quot;,&quot;deploymentId&quot;:&quot;1&quot;,&quot;formProperties&quot;:[org.activiti.engine.impl.form.FormPropertyImpl@3bde62ff]}  o.d.a.c.FormServiceTest.testFormService:3818:15:27.547 [main] [INFO] startFormProperty: {&quot;id&quot;:&quot;message&quot;,&quot;name&quot;:&quot;信息&quot;,&quot;type&quot;:&quot;org.activiti.engine.impl.form.StringFormType@2baa8d82&quot;,&quot;isRequired&quot;:true,&quot;isReadable&quot;:true,&quot;isWritable&quot;:true,&quot;value&quot;:null}  o.d.a.c.FormServiceTest.testFormService:4018:15:27.561 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3318:15:27.564 [main] [INFO] 4 (process instance)└── 5 : start (StartEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3418:15:27.565 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3318:15:27.566 [main] [INFO] 4 (process instance)└── 5 : start (StartEvent, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3418:15:27.567 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3318:15:27.567 [main] [INFO] 4 (process instance)└── 5 : start -&gt; someTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3418:15:27.568 [main] [INFO] Execution tree while executing operation class org.activiti.engine.impl.agenda.ContinueProcessOperation :  o.a.e.i.i.DebugCommandInvoker.executeOperation:3318:15:27.568 [main] [INFO] 4 (process instance)└── 5 : someTask (UserTask, parent id 4 (active)  o.a.e.i.i.DebugCommandInvoker.executeOperation:3418:15:27.602 [main] [INFO] taskFormData: {&quot;task&quot;:&quot;Task[id=10, name=Activiti is awesome!]&quot;,&quot;formKey&quot;:&quot;/rest/process/form/userTask&quot;,&quot;deploymentId&quot;:&quot;1&quot;,&quot;formProperties&quot;:[org.activiti.engine.impl.form.FormPropertyImpl@4e4efc1b]}  o.d.a.c.FormServiceTest.testFormService:5318:15:27.602 [main] [INFO] taskFormProperty: {&quot;id&quot;:&quot;yesOrNo&quot;,&quot;name&quot;:&quot;审批&quot;,&quot;type&quot;:&quot;org.activiti.engine.impl.form.StringFormType@2baa8d82&quot;,&quot;isRequired&quot;:true,&quot;isReadable&quot;:true,&quot;isWritable&quot;:true,&quot;value&quot;:null}  o.d.a.c.FormServiceTest.testFormService:55</code></pre><h2 id="5-6-HistoryService-历史数据管理服务"><a href="#5-6-HistoryService-历史数据管理服务" class="headerlink" title="5.6 HistoryService 历史数据管理服务"></a>5.6 HistoryService 历史数据管理服务</h2><p>作用:</p><ul><li>管理流程实例哦结束后的历史数据</li><li>构建历史数据的查询对象</li><li>根据流程实例 id 删除流程历史数据</li></ul><table><thead><tr><th>历史数据实体</th><th>描述</th></tr></thead><tbody><tr><td>HistoricProcessInstance</td><td>历史流程实例实体类</td></tr><tr><td>HistoricVariableInstance</td><td>流程或任务变量值的实体</td></tr><tr><td>HistoricActivityInstance</td><td>单个活动节点执行的信息</td></tr><tr><td>HistoricTaskInstance</td><td>用户任务实例的信息</td></tr><tr><td>HistoricDetail</td><td>历史流程活动任务详细信息</td></tr></tbody></table><ul><li>HistoryService 构建历史查询对象:<ul><li>create<code>[历史数据实体]</code>Query</li><li>createNative<code>[历史数据实体]</code>Query</li><li>createProcessInstanceHistoryLogQuery: 只能查出一个流程实例的一个对象, 每次只能查出一条记录, 包含流程实体所有的其他数据, 包括task, Activiti, comment 等信息</li></ul></li><li>HistoryService 删除历史操作<ul><li>deleteHistoricProcessInstance, 采用级联操作, 删除与流程实例相关的所有历史信息</li><li>deleteHistoricTaskInstance, 范围相对较小, 只删除 Task 及 Task 相关的变量</li></ul></li></ul><h2 id="5-7-ManagementService-管理服务"><a href="#5-7-ManagementService-管理服务" class="headerlink" title="5.7 ManagementService 管理服务"></a>5.7 ManagementService 管理服务</h2><p>作用:</p><ul><li>Job 任务管理</li><li>数据库相关通用操作</li><li>执行流程引擎命令(Command)</li></ul><h3 id="5-7-1-Job-任务管理"><a href="#5-7-1-Job-任务管理" class="headerlink" title="5.7.1 Job 任务管理"></a>5.7.1 Job 任务管理</h3><table><thead><tr><th>工作查询对象</th><th>描述</th></tr></thead><tbody><tr><td>JobQuery</td><td>查询一般工作</td></tr><tr><td>TimerJobQuery</td><td>查询定时任务</td></tr><tr><td>SuspendedKobQUery</td><td>查询中断工作</td></tr><tr><td>DeadLetterJobQuery</td><td>查询无法执行的工作(一般重试三次)</td></tr></tbody></table><h3 id="5-7-2-数据库相关操作"><a href="#5-7-2-数据库相关操作" class="headerlink" title="5.7.2 数据库相关操作"></a>5.7.2 数据库相关操作</h3><ul><li>查询表结构元数据</li><li>通用表查询</li><li>执行自定义的 sql 查询</li></ul><h2 id="5-8-DynamicBpmnService-动态流程定义服务"><a href="#5-8-DynamicBpmnService-动态流程定义服务" class="headerlink" title="5.8 DynamicBpmnService 动态流程定义服务"></a>5.8 DynamicBpmnService 动态流程定义服务</h2><blockquote><p>不推荐使用</p></blockquote><h1 id="6-数据库设计和模型映射"><a href="#6-数据库设计和模型映射" class="headerlink" title="6 数据库设计和模型映射"></a>6 数据库设计和模型映射</h1><table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td><code>ACT_GE_*</code></td><td>通用数据表</td></tr><tr><td><code>ACT_RE_*</code></td><td>流程定义存储表</td></tr><tr><td><code>ACT_ID_*</code></td><td>身份信息表</td></tr><tr><td><code>ACT_RU_*</code></td><td>运行时数据库表</td></tr><tr><td><code>ACT_HI_*</code></td><td>历史数据库表</td></tr></tbody></table><h2 id="6-1-MySql-建表语句"><a href="#6-1-MySql-建表语句" class="headerlink" title="6.1 MySql 建表语句"></a>6.1 MySql 建表语句</h2><blockquote><p>除了核心引擎是必选的, 其他两个不是必须的</p></blockquote><ul><li>核心引擎: activiti.mysql.create.engine.sql</li><li>历史数据: activiti.mysql.create.history.sql</li><li>身份信息: activiti.mysql.create.identity.sql</li></ul><h3 id="6-1-1-通用数据库"><a href="#6-1-1-通用数据库" class="headerlink" title="6.1.1 通用数据库"></a>6.1.1 通用数据库</h3><table><thead><tr><th>数据表分类</th><th>描述</th></tr></thead><tbody><tr><td>ACT_GE_PROPERTY</td><td>属性表(保存流程引擎的 key-value 键值属性)</td></tr><tr><td>ACT_GE_BYTEARRAY</td><td>资源表(存储流程定义相关的资源)</td></tr></tbody></table><h1 id="7-BPMN2-0-概述"><a href="#7-BPMN2-0-概述" class="headerlink" title="7 BPMN2.0 概述"></a>7 BPMN2.0 概述</h1><ul><li>是一套业务流程模型与符号建模标准</li><li>精准的执行语义来描述元素的操作</li><li>以 XML 为载体, 以符号可视化业务</li></ul><p>BPMN2.0元素:</p><ul><li>流对象</li><li>连接对象</li><li>数据</li><li>泳道</li><li>描述对象</li></ul><p><img src="https://user-images.githubusercontent.com/17758731/49372749-a26ac100-f736-11e8-89f1-b01d14fa6f1d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/17758731/49372819-d0e89c00-f736-11e8-984f-34464892a1b9.png" alt="image"></p><h2 id="7-1-流对象"><a href="#7-1-流对象" class="headerlink" title="7.1 流对象"></a>7.1 流对象</h2><ul><li>活动(Activities): User Task, Service Task…</li><li>事件(Events): Start Event, End Event…</li><li>网关(Gateway): Exclusive Gateway…</li></ul><h1 id="8-Activiti-集成-Spring-Boot"><a href="#8-Activiti-集成-Spring-Boot" class="headerlink" title="8 Activiti 集成 Spring Boot"></a>8 Activiti 集成 Spring Boot</h1><p>Activiti6.0 依赖的 SpringBoot 版本是 1.2.6</p><p>如果直接与 SpringBoot 2.0.0 集成的话, 会出现 ClassNotFound 等问题</p><p>因此在集成 SpringBoot 2.0.0 的时候, 需要 Activiti6.0 源码进行部分改动</p><p>升级 Activiti 6.0 依赖 SpringBoot 版本为 2.0.0 的改动</p><ul><li>升级 SpringBoot 依赖并解决编译错误</li><li>更新 activiti-spring-boot-starter-basic 版本并安装</li><li>集成使用 Activiti 的 AutoConfiguration 功能</li></ul><p>如果直接将 SpringBoot 2.0.0 和 activiti-spring-boot-starter-basic 6.0.0 集成, 会发生如下错误:</p><pre><code>java.lang.IllegalStateException: Failed to load ApplicationContextCaused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;documentationPluginsBootstrapper&apos; defined in URL [jar:file:/Users/destiny/.m2/repository/io/springfox/springfox-spring-web/2.8.0/springfox-spring-web-2.8.0.jar!/springfox/documentation/spring/web/plugins/DocumentationPluginsBootstrapper.class]: Unsatisfied dependency expressed through constructor parameter 1; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;webMvcRequestHandlerProvider&apos; defined in URL [jar:file:/Users/destiny/.m2/repository/io/springfox/springfox-spring-web/2.8.0/springfox-spring-web-2.8.0.jar!/springfox/documentation/spring/web/plugins/WebMvcRequestHandlerProvider.class]: Unsatisfied dependency expressed through constructor parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;requestMappingHandlerMapping&apos; defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Invocation of init method failed; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy...Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;webMvcRequestHandlerProvider&apos; defined in URL [jar:file:/Users/destiny/.m2/repository/io/springfox/springfox-spring-web/2.8.0/springfox-spring-web-2.8.0.jar!/springfox/documentation/spring/web/plugins/WebMvcRequestHandlerProvider.class]: Unsatisfied dependency expressed through constructor parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;requestMappingHandlerMapping&apos; defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Invocation of init method failed; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy...Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;requestMappingHandlerMapping&apos; defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Invocation of init method failed; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy...Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy...</code></pre><p>真正的原因是对应的类无法找到</p><h2 id="8-1-修改-activiti-源码以适应-SpringBoot-2-0-0-版本升级"><a href="#8-1-修改-activiti-源码以适应-SpringBoot-2-0-0-版本升级" class="headerlink" title="8.1 修改 activiti 源码以适应 SpringBoot 2.0.0 版本升级"></a>8.1 修改 activiti 源码以适应 SpringBoot 2.0.0 版本升级</h2><h3 id="8-1-1-将-activiti-中-SpringBoot-依赖升级到-2-0-0"><a href="#8-1-1-将-activiti-中-SpringBoot-依赖升级到-2-0-0" class="headerlink" title="8.1.1 将 activiti 中 SpringBoot 依赖升级到 2.0.0"></a>8.1.1 将 activiti 中 SpringBoot 依赖升级到 2.0.0</h3><p>修改 Activiti 源码中 <code>modules/activiti-spring-boot/pom.xml</code> pom 文件, 将其中 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>1.2.6.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后重新编译源码, 此时以下几个类会报错</p><h4 id="8-1-1-1-org-activiti-spring-boot-actuate-endpoint-ProcessEngineEndpoint"><a href="#8-1-1-1-org-activiti-spring-boot-actuate-endpoint-ProcessEngineEndpoint" class="headerlink" title="8.1.1.1 org.activiti.spring.boot.actuate.endpoint.ProcessEngineEndpoint"></a>8.1.1.1 <code>org.activiti.spring.boot.actuate.endpoint.ProcessEngineEndpoint</code></h4><p><img src="https://user-images.githubusercontent.com/17758731/49379804-fe3f4500-f74a-11e8-85f2-8c8b58390f6d.png" alt="image"></p><blockquote><p>主要的问题是 SpringBoot 从 1 升级到 2 的时候, 对 EndPoint 的使用方式发生了改变:<br>1.x 是继承一个抽象类 AbstractEndpoint<br>2.x 修改为使用对应的注解</p></blockquote><p>修改后的源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.activiti.spring.boot.actuate.endpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.ProcessEngine;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.persistence.deploy.DefaultDeploymentCache;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.persistence.deploy.DeploymentCache;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.persistence.deploy.ProcessDefinitionCacheEntry;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.repository.ProcessDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.endpoint.annotation.Endpoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.endpoint.annotation.ReadOperation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers a Boot Actuator endpoint that provides information on the</span></span><br><span class="line"><span class="comment"> * running process instance and renders BPMN diagrams of the deployed processes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Long</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@ConfigurationProperties(prefix = "endpoints.activiti")</span></span><br><span class="line"><span class="meta">@Endpoint</span>(id = <span class="string">"activiti"</span>)                  <span class="comment">// 使用注解 Endpoint</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessEngineEndpoint</span> </span>&#123;        <span class="comment">// 不再继承 AbstractEndpoint</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProcessEngine processEngine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProcessEngineEndpoint</span><span class="params">(ProcessEngine processEngine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processEngine = processEngine; <span class="comment">// 不再继承 Endpoint, 因此不需要调用 super 构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOperation</span>                          <span class="comment">// 不需要 @Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">activiti</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; metrics = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process definitions</span></span><br><span class="line">        metrics.put(<span class="string">"processDefinitionCount"</span>, processEngine.getRepositoryService().createProcessDefinitionQuery().count());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// List of all process definitions</span></span><br><span class="line">        List&lt;ProcessDefinition&gt; processDefinitions = processEngine.getRepositoryService().createProcessDefinitionQuery().orderByProcessDefinitionKey().asc().list();</span><br><span class="line">        List&lt;String&gt; processDefinitionKeys = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ProcessDefinition processDefinition : processDefinitions) &#123;</span><br><span class="line">            processDefinitionKeys.add(processDefinition.getKey() + <span class="string">" (v"</span> + processDefinition.getVersion() + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        metrics.put(<span class="string">"deployedProcessDefinitions"</span>, processDefinitionKeys);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process instances</span></span><br><span class="line">        Map&lt;String, Object&gt; processInstanceCountMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        metrics.put(<span class="string">"runningProcessInstanceCount"</span>, processInstanceCountMap);</span><br><span class="line">        <span class="keyword">for</span> (ProcessDefinition processDefinition : processDefinitions) &#123;</span><br><span class="line">            processInstanceCountMap.put(processDefinition.getKey() + <span class="string">" (v"</span> + processDefinition.getVersion() + <span class="string">")"</span>,</span><br><span class="line">                    processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).count());</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; completedProcessInstanceCountMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        metrics.put(<span class="string">"completedProcessInstanceCount"</span>, completedProcessInstanceCountMap);</span><br><span class="line">        <span class="keyword">for</span> (ProcessDefinition processDefinition : processDefinitions) &#123;</span><br><span class="line">            completedProcessInstanceCountMap.put(processDefinition.getKey() + <span class="string">" (v"</span> + processDefinition.getVersion() + <span class="string">")"</span>,</span><br><span class="line">                    processEngine.getHistoryService().createHistoricProcessInstanceQuery().finished().processDefinitionId(processDefinition.getId()).count());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Open tasks</span></span><br><span class="line">        metrics.put(<span class="string">"openTaskCount"</span>, processEngine.getTaskService().createTaskQuery().count());</span><br><span class="line">        metrics.put(<span class="string">"completedTaskCount"</span>, processEngine.getHistoryService().createHistoricTaskInstanceQuery().finished().count());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tasks completed today</span></span><br><span class="line">        metrics.put(<span class="string">"completedTaskCountToday"</span>, processEngine.getHistoryService().createHistoricTaskInstanceQuery().finished().taskCompletedAfter(</span><br><span class="line">                <span class="keyword">new</span> Date(System.currentTimeMillis() - secondsForDays(<span class="number">1</span>))).count());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process steps</span></span><br><span class="line">        metrics.put(<span class="string">"completedActivities"</span>, processEngine.getHistoryService().createHistoricActivityInstanceQuery().finished().count());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process definition cache</span></span><br><span class="line">        DeploymentCache&lt;ProcessDefinitionCacheEntry&gt; deploymentCache = ((ProcessEngineConfigurationImpl) processEngine.getProcessEngineConfiguration()).getProcessDefinitionCache();</span><br><span class="line">        <span class="keyword">if</span> (deploymentCache <span class="keyword">instanceof</span> DefaultDeploymentCache) &#123;</span><br><span class="line">            metrics.put(<span class="string">"cachedProcessDefinitionCount"</span>, ((DefaultDeploymentCache) deploymentCache).size());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> metrics;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">secondsForDays</span><span class="params">(<span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hour = <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span> day = <span class="number">24</span> * hour;</span><br><span class="line">        <span class="keyword">return</span> days * day;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-1-2-org-activiti-spring-boot-actuate-endpoint-ProcessEngineMvcEndpoint"><a href="#8-1-1-2-org-activiti-spring-boot-actuate-endpoint-ProcessEngineMvcEndpoint" class="headerlink" title="8.1.1.2 org.activiti.spring.boot.actuate.endpoint.ProcessEngineMvcEndpoint"></a>8.1.1.2 <code>org.activiti.spring.boot.actuate.endpoint.ProcessEngineMvcEndpoint</code></h4><p><img src="https://user-images.githubusercontent.com/17758731/49380305-5a569900-f74c-11e8-8e35-ea7325e21a8d.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.activiti.spring.boot.actuate.endpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.bpmn.BpmnAutoLayout;</span><br><span class="line"><span class="keyword">import</span> org.activiti.bpmn.model.BpmnModel;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.RepositoryService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.repository.ProcessDefinition;</span><br><span class="line"><span class="keyword">import</span> org.activiti.image.ProcessDiagramGenerator;</span><br><span class="line"><span class="keyword">import</span> org.activiti.image.impl.DefaultProcessDiagramGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.InputStreamResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Renders a valid running BPMN process definition as a BPMN diagram.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This is duplicative of the functionality in the full REST API implementation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joram Barrez</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Long</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessEngineMvcEndpoint</span> </span>&#123;                 <span class="comment">// 同样不再继承 EndpointMvcAdapter</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RepositoryService repositoryService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProcessEngineEndpoint processEngineEndpoint;  <span class="comment">// 创建一个 ProcessEngineEndpoint 私有变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProcessEngineMvcEndpoint</span><span class="params">(ProcessEngineEndpoint processEngineEndpoint, RepositoryService repositoryService)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super(processEngineEndpoint);</span></span><br><span class="line">        <span class="keyword">this</span>.processEngineEndpoint = processEngineEndpoint;</span><br><span class="line">        <span class="keyword">this</span>.repositoryService = repositoryService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Look up the process definition by key. For example,</span></span><br><span class="line"><span class="comment">     * this is &lt;A href="http://localhost:8080/activiti/processes/fulfillmentProcess"&gt;process-diagram for&lt;/A&gt;</span></span><br><span class="line"><span class="comment">     * a process definition named &#123;<span class="doctag">@code</span> fulfillmentProcess&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/processes/&#123;processDefinitionKey:.*&#125;"</span>, method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">processDefinitionDiagram</span><span class="params">(@PathVariable String processDefinitionKey)</span> </span>&#123;</span><br><span class="line">      ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()</span><br><span class="line">              .processDefinitionKey(processDefinitionKey)</span><br><span class="line">              .latestVersion()</span><br><span class="line">              .singleResult();</span><br><span class="line">      <span class="keyword">if</span> (processDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ProcessDiagramGenerator processDiagramGenerator = <span class="keyword">new</span> DefaultProcessDiagramGenerator();</span><br><span class="line">      BpmnModel bpmnModel = repositoryService.getBpmnModel(processDefinition.getId());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (bpmnModel.getLocationMap().size() == <span class="number">0</span>) &#123;</span><br><span class="line">          BpmnAutoLayout autoLayout = <span class="keyword">new</span> BpmnAutoLayout(bpmnModel);</span><br><span class="line">          autoLayout.execute();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      InputStream is = processDiagramGenerator.generateJpgDiagram(bpmnModel);</span><br><span class="line">      <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> InputStreamResource(is));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-1-3-org-activiti-spring-boot-EndpointAutoConfiguration"><a href="#8-1-1-3-org-activiti-spring-boot-EndpointAutoConfiguration" class="headerlink" title="8.1.1.3 org.activiti.spring.boot.EndpointAutoConfiguration"></a>8.1.1.3 <code>org.activiti.spring.boot.EndpointAutoConfiguration</code></h4><p><img src="https://user-images.githubusercontent.com/17758731/49380552-f4b6dc80-f74c-11e8-88b1-dd29cba005e1.png" alt="image"></p><blockquote><p>报错原因: SpringBoot2 不再使用 AbstractEndpoint<br>开启该表达式 AutoConfiguration 不会生效, 因此需要删除</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.activiti.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.ProcessEngine;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.RepositoryService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.spring.boot.actuate.endpoint.ProcessEngineEndpoint;</span><br><span class="line"><span class="keyword">import</span> org.activiti.spring.boot.actuate.endpoint.ProcessEngineMvcEndpoint;</span><br><span class="line"><span class="comment">//import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The idea behind this module is that Spring Security could</span></span><br><span class="line"><span class="comment"> * talk to the &#123;<span class="doctag">@link</span> org.activiti.engine.IdentityService&#125;</span></span><br><span class="line"><span class="comment"> * as required.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Long</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ConditionalOnClass (name = "org.springframework.boot.actuate.endpoint.AbstractEndpoint")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EndpointAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProcessEngineEndpoint <span class="title">processEngineEndpoint</span><span class="params">(ProcessEngine engine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProcessEngineEndpoint(engine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProcessEngineMvcEndpoint <span class="title">processEngineMvcEndpoint</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ProcessEngineEndpoint engineEndpoint, RepositoryService repositoryService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProcessEngineMvcEndpoint(engineEndpoint, repositoryService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-1-4-org-activiti-spring-boot-DataSourceProcessEngineAutoConfiguration"><a href="#8-1-1-4-org-activiti-spring-boot-DataSourceProcessEngineAutoConfiguration" class="headerlink" title="8.1.1.4 org.activiti.spring.boot.DataSourceProcessEngineAutoConfiguration"></a>8.1.1.4 <code>org.activiti.spring.boot.DataSourceProcessEngineAutoConfiguration</code></h4><p><img src="https://user-images.githubusercontent.com/17758731/49381205-5cb9f280-f74e-11e8-8a49-e2ced833c6b2.png" alt="image"></p><blockquote><p>报错原因: ConditionalOnMissingClass 注解中的 name 已经不能使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.activiti.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.spring.SpringAsyncExecutor;</span><br><span class="line"><span class="keyword">import</span> org.activiti.spring.SpringProcessEngineConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joram Barrez</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Long</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(DataSourceAutoConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProcessEngineAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//  @ConditionalOnMissingClass(name= "javax.persistence.EntityManagerFactory")</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingClass</span>(value= <span class="string">"javax.persistence.EntityManagerFactory"</span>)   <span class="comment">// 将 name 替换为 value</span></span><br><span class="line">  <span class="meta">@EnableConfigurationProperties</span>(ActivitiProperties.class)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProcessEngineConfiguration</span> <span class="keyword">extends</span> <span class="title">AbstractProcessEngineAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringProcessEngineConfiguration <span class="title">springProcessEngineConfiguration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            DataSource dataSource,</span></span></span><br><span class="line"><span class="function"><span class="params">            PlatformTransactionManager transactionManager,</span></span></span><br><span class="line"><span class="function"><span class="params">            SpringAsyncExecutor springAsyncExecutor)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.baseSpringProcessEngineConfiguration(dataSource, transactionManager, springAsyncExecutor);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-1-4-org-activiti-spring-boot-SecurityAutoConfiguration"><a href="#8-1-1-4-org-activiti-spring-boot-SecurityAutoConfiguration" class="headerlink" title="8.1.1.4 org.activiti.spring.boot.SecurityAutoConfiguration"></a>8.1.1.4 <code>org.activiti.spring.boot.SecurityAutoConfiguration</code></h4><p><img src="https://user-images.githubusercontent.com/17758731/49381360-aa365f80-f74e-11e8-8e61-c70b2fa462ea.png" alt="image"></p><blockquote><p>报错原因: 包结构发生改变, 导致原有的类全路径不可用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.activiti.engine.IdentityService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.rest.security.BasicAuthenticationProvider;</span><br><span class="line"><span class="keyword">import</span> org.activiti.spring.security.IdentityServiceUserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureBefore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.configurers.GlobalAuthenticationConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Installs a Spring Security adapter for the Activiti</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.activiti.engine.IdentityService&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Long</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@AutoConfigureBefore(org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore</span>(org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration.class)   <span class="comment">// 修改类路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>( UserDetailsService.class)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceConfiguration</span></span></span><br><span class="line"><span class="class">          <span class="keyword">extends</span> <span class="title">GlobalAuthenticationConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      auth.userDetailsService( userDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> IdentityServiceUserDetailsService(<span class="keyword">this</span>.identityService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IdentityService identityService;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(name = &#123;<span class="string">"org.activiti.rest.service.api.RestUrls"</span>, <span class="string">"org.springframework.web.servlet.DispatcherServlet"</span>&#125;)</span><br><span class="line">  <span class="meta">@EnableWebSecurity</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationProvider <span class="title">authenticationProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BasicAuthenticationProvider();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      http</span><br><span class="line">        .authenticationProvider(authenticationProvider())</span><br><span class="line">        .csrf().disable()</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">          .anyRequest().authenticated()</span><br><span class="line">          .and()</span><br><span class="line">        .httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-对-Activiti-版本做更改"><a href="#8-2-对-Activiti-版本做更改" class="headerlink" title="8.2 对 Activiti 版本做更改"></a>8.2 对 Activiti 版本做更改</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starters<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starter-basic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在此处新增版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-boot2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;properties&gt; &lt;spring.framework.version&gt;4.1.4.RELEASE&lt;/spring.framework.version&gt; </span></span><br><span class="line"><span class="comment">&lt;/properties&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>尝试执行 <code>mvn clean install</code></p><p>此时 maven 会去尝试下载 <code>6.0.0-boot2</code> 版本, 但显然公网仓库中不会存在</p><pre><code>[INFO] Scanning for projects...[INFO] [INFO] ----------&lt; org.activiti:activiti-spring-boot-starter-basic &gt;-----------[INFO] Building activiti-spring-boot-starter-basic 6.0.0-boot2[INFO] --------------------------------[ jar ]---------------------------------[WARNING] The POM for org.activiti:activiti-engine:jar:6.0.0-boot2 is missing, no dependency information available[WARNING] The POM for org.activiti:activiti-spring:jar:6.0.0-boot2 is missing, no dependency information available[WARNING] The POM for org.activiti:activiti-rest:jar:6.0.0-boot2 is missing, no dependency information available[WARNING] The POM for org.activiti:activiti-common-rest:jar:6.0.0-boot2 is missing, no dependency information available[WARNING] The POM for org.activiti:activiti-image-generator:jar:6.0.0-boot2 is missing, no dependency information available[WARNING] The POM for org.activiti:activiti-bpmn-model:jar:6.0.0-boot2 is missing, no dependency information available[WARNING] The POM for org.activiti:activiti-bpmn-layout:jar:6.0.0-boot2 is missing, no dependency information available[INFO] ------------------------------------------------------------------------[INFO] BUILD FAILURE[INFO] ------------------------------------------------------------------------[INFO] Total time:  0.850 s[INFO] Finished at: 2018-12-03T23:15:57+08:00[INFO] ------------------------------------------------------------------------[ERROR] Failed to execute goal on project activiti-spring-boot-starter-basic: Could not resolve dependencies for project org.activiti:activiti-spring-boot-starter-basic:jar:6.0.0-boot2: The following artifacts could not be resolved: org.activiti:activiti-engine:jar:6.0.0-boot2, org.activiti:activiti-spring:jar:6.0.0-boot2, org.activiti:activiti-rest:jar:6.0.0-boot2, org.activiti:activiti-common-rest:jar:6.0.0-boot2, org.activiti:activiti-image-generator:jar:6.0.0-boot2, org.activiti:activiti-bpmn-model:jar:6.0.0-boot2, org.activiti:activiti-bpmn-layout:jar:6.0.0-boot2: Failure to find org.activiti:activiti-engine:jar:6.0.0-boot2 in http://maven.aliyun.com/nexus/content/groups/public was cached in the local repository, resolution will not be reattempted until the update interval of nexus-aliyun has elapsed or updates are forced -&gt; [Help 1][ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.[ERROR] Re-run Maven using the -X switch to enable full debug logging.[ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles:[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException</code></pre><blockquote><p>错误原因: activiti-spring-boot-starter-basic 的版本号被修改为 6.0.0-boot2, 但安装的时候, 对应的 <code>activiti-engine</code> 版本只有 6.0.0, 并没有 <code>6.0.0-boot2</code><br>可以将所有需要找 <code>6.0.0-boot2</code> 的版本修改为去找 <code>6.0.0</code></p></blockquote><p>将根 pom 中所有的 <code>${project.version}</code> 修改为 <code>6.0.0</code></p>]]></content>
      
      <categories>
          
          <category> Activiti </category>
          
          <category> Java </category>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java逃逸分析</title>
      <link href="/blog/2018/09/07/Java%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/"/>
      <url>/blog/2018/09/07/Java%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="1-逃逸概念的引入"><a href="#1-逃逸概念的引入" class="headerlink" title="1. 逃逸概念的引入"></a>1. 逃逸概念的引入</h1><blockquote><p>我们都知道, Java 创建的对象都是被分配到堆内存上, 但是事实并不是这么绝对, 通过对Java对象分配的过程分析, 可以知道有两个地方会导致 Java 中创建出来的对象并不一定分别在所认为的堆上. 这两个点分别是 Java 中的 <code>逃逸分析</code> 和 <code>TLAB(Thread Local Allocation Buffer)</code>线程私有的缓存区。</p></blockquote><h1 id="2-逃逸分析基本概念"><a href="#2-逃逸分析基本概念" class="headerlink" title="2. 逃逸分析基本概念"></a>2. 逃逸分析基本概念</h1><p>逃逸分析, 是一种可以有效减少 Java 程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法. 通过逃逸分析, <code>Hotspot编译器</code> 能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上.</p><p>在计算机语言编译器优化原理中, 逃逸分析是指分析指针动态范围的方法, 它同编译器优化原理的指针分析和外形分析相关联. 当变量(或者对象)在方法中分配后, 其指针有可能被返回或者被全局引用, 这样就会被其他过程或者线程所引用, 这种现象称作指针(或者引用)的 <code>逃逸(Escape)</code> . 通俗点讲, 如果一个对象的指针被多个方法或者线程引用时, 那么我们就称这个对象的指针发生了逃逸.</p><h2 id="2-1-具体分析"><a href="#2-1-具体分析" class="headerlink" title="2.1. 具体分析"></a>2.1. 具体分析</h2><p>逃逸分析研究对于 java 编译器有什么好处呢? 我们知道 java 对象总是在堆中被分配的, 因此 java 对象的创建和回收对系统的开销是很大的. java 语言被批评的一个地方, 也是认为 java 性能慢的一个原因就是  java 不支持栈上分配对象, JDK6里的 <code>Swing</code> 内存和性能消耗的瓶颈就是由于 GC 来遍历引用树并回收内存的, 如果对象的数目比较多, 将给 GC 带来较大的压力, 也间接得影响了性能. 减少临时对象在堆内分配的数量, 无疑是最有效的优化方法. java 中应用里普遍存在一种场景, 一般是在方法体内, 声明了一个局部变量, 并且该变量在方法执行生命周期内未发生逃逸, 按照  JVM 内存分配机制, 首先会在堆内存上创建类的实例(对象), 然后将此对象的引用压入调用栈, 继续执行, 这是 JVM 优化前的方式. 当然, 我们可以采用逃逸分析对 JVM  进行优化, 即针对栈的重新分配方式, 首先我们需要分析并且找到未逃逸的变量, 将该变量类的实例化内存直接在栈里分配, 无需进入堆, 分配完成之后, 继续调用栈内执行, 最后线程执行结束, 栈空间被回收, 局部变量对象也被回收, 通过这种方式的优化, 与优化前的方案主要区别在于对象的存储介质, 优化前是在堆中, 而优化后的是在栈中, 从而减少了堆中临时对象的分配(较耗时), 最终完成性能的优化.</p><blockquote><p>逃逸分析实际上是 JVM 的一种为优化提供支持的分析手段, 逃逸分析的范围分为两个, 方法逃逸和线程逃逸</p></blockquote><h3 id="2-2-1-方法逃逸"><a href="#2-2-1-方法逃逸" class="headerlink" title="2.2.1 方法逃逸"></a>2.2.1 方法逃逸</h3><blockquote><p>不逃逸出当前方法, 就是说在一个方法内 <code>new</code> 出来的对象, 它的引用没有泄露到这个方法之外<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    Foo foo = <span class="keyword">new</span> Foo();</span><br><span class="line">    foo.a = a;</span><br><span class="line">    foo.b = b;</span><br><span class="line">    <span class="comment">// foo 对象没有逃逸出 bar 方法, 只在 bar 方法里当做局部变量存在</span></span><br><span class="line">    <span class="keyword">return</span> foo.a + foo.b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>在上面的例子中, Foo 对象就没有逃逸出 bar 方法, 只有一个局部 foo 变量引用这个对象, foo 变量既没有被当做返回值, 也没有当做另一个方法的参数.</p><p>但其实我们一般写的普通 Java Bean 都会有 getter /setter </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在 <code>bar()</code> 方法里依然给 Foo 实例对象赋值, 那肯定就会调用到 Foo 的成员方法 <code>setA(), setB()</code>, 把局部变量 foo 的 this 作为参数传递给 foo 的成员方法, 这个时候变量 foo 确实逃逸除了 bar 方法, 而 JIT 提供了 <code>方法内联</code>, 在完成方法内联后, 这个参数传递实际上优化掉了.</p><h3 id="2-2-2-线程逃逸"><a href="#2-2-2-线程逃逸" class="headerlink" title="2.2.2 线程逃逸"></a>2.2.2 线程逃逸</h3><blockquote><p>不逃逸出当前线程, 指的是实例对象没有被别的类引用到. 该对象的引用赋值到其他对象的字段, 或其他类的静态字段上, 没办法让它进入一个全局可见的范围, 这个时候我们认为该实例没有逃逸出当前线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    Foo foo = <span class="keyword">new</span> Foo();</span><br><span class="line">    foo.a = a;</span><br><span class="line">    foo.b = b;</span><br><span class="line">    <span class="keyword">return</span> doBar(foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doBar</span><span class="params">(Foo foo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foo.a + foo.b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>bar()</code> 方法调用了 <code>doBar()</code>, 把 foo 实例作为入参传入了 <code>doBar()</code>, 这个时候认为 foo 逃逸除了 bar 方法, 但是 bar 和 doBar 都在一个类中, 并没有被其他类引用, 我们认为 foo 对象没有逃逸出线程.</p><h2 id="2-3-JVM-为逃逸分析所做的优化"><a href="#2-3-JVM-为逃逸分析所做的优化" class="headerlink" title="2.3. JVM 为逃逸分析所做的优化"></a>2.3. JVM 为逃逸分析所做的优化</h2><h3 id="2-3-1-标量替换"><a href="#2-3-1-标量替换" class="headerlink" title="2.3.1 标量替换"></a>2.3.1 标量替换</h3><blockquote><p>Java 中标量的意思是不能再分割的量, 如基本类型和 Reference 类型, 反之成为聚合量, 如果把一个对象拆开, 将它的成员变量分割成标量, 这个就叫标量替换.</p></blockquote><p>如果逃逸分析发现一个对象不会被外部访问, 并且该对象可以被拆散, 那么经过优化后, 并不直接生成该对象, 而是在栈上创建若干个成员变量, 原本的对象就无需再堆上整体分配空间了.</p><pre><code>栈帧内分配对象的行为成为栈上分配, 目的是减少新生代的 GC 频率, 见解提高 JVM 性能, 通过 -XX+EliminateAllcations 可以开启标量替换.</code></pre><h3 id="2-3-2-锁消除优化"><a href="#2-3-2-锁消除优化" class="headerlink" title="2.3.2 锁消除优化"></a>2.3.2 锁消除优化</h3><blockquote><p>Java 方法中返回值如果没有被其他类用到, 那这个对象就不会逃逸出线程, 我们知道变量的读写竞争的时候需要加锁访问, 如果确定该变量不会逃逸出该线程, 那同步访问控制就可以优化掉.</p></blockquote><h2 id="2-4-实操"><a href="#2-4-实操" class="headerlink" title="2.4 实操"></a>2.4 实操</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Sting name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getters / setters / constructors</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bar</span><span class="params">(Foo foo)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">23</span>);</span><br><span class="line">    <span class="keyword">return</span> foo.getA() + foo.getB() + user.getAge();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Foo foo = <span class="keyword">new</span> Foo();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; ++i) &#123;</span><br><span class="line">        foo.setA(<span class="number">4</span>);</span><br><span class="line">        foo.setB(<span class="number">45</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-1-关闭逃逸分析"><a href="#2-4-1-关闭逃逸分析" class="headerlink" title="2.4.1 关闭逃逸分析"></a>2.4.1 关闭逃逸分析</h3><p>启动 JVM 参数</p><pre><code>-server-XX:-DoEscapeAnalysis</code></pre><p>使用 <code>jmap -histo</code><br><img src="http://oetw0yrii.bkt.clouddn.com/18-8-30/3446787.jpg" alt></p><h3 id="2-4-2-打开逃逸分析"><a href="#2-4-2-打开逃逸分析" class="headerlink" title="2.4.2 打开逃逸分析"></a>2.4.2 打开逃逸分析</h3><p>JVM 参数</p><pre><code>-server-XX:+DoEscapeAnalysis</code></pre><p><img src="http://oetw0yrii.bkt.clouddn.com/18-8-30/67522193.jpg" alt></p><p>可以看到, 只有少量的对象在堆上实例化, 大部分对象的属性被标量替换了.</p><h1 id="3-JIT-编译"><a href="#3-JIT-编译" class="headerlink" title="3. JIT 编译"></a>3. JIT 编译</h1><p>在 JVM 中触发 JIT 编译是基于两个计数器:</p><ol><li>一个方法被调用的次数</li><li>存在有分支的方法中的循环次数, 如果方法里面有一个很长的循环, 这时候需要编译到这个循环, 每一次分支的循环被调用, 该分支的计数器都会增加</li></ol><p>增加 <code>-XX:+PrintCompileation</code> 参数观察 JVM 输出的编译日志</p><pre><code>- 96    1       3       java.lang.String::equals (81 bytes) 96    4       3       java.io.UnixFileSystem::normalize (75 bytes) 97    9       3       java.lang.String::hashCode (55 bytes) 97    8       3       java.lang.Object::&lt;init&gt; (1 bytes) 97    7       3       java.lang.AbstractStringBuilder::ensureCapacityInternal (16 bytes) 98    3       3       java.lang.String::length (6 bytes) 98   10       3       java.lang.Math::min (11 bytes) 98    2       3       java.lang.System::getSecurityManager (4 bytes) 98    6       3       java.util.Arrays::copyOf (19 bytes) 98   11     n 0       java.lang.System::arraycopy (native)   (static) 98   12       3       java.lang.String::indexOf (70 bytes) 98   15       3       sun.nio.cs.UTF_8$Encoder::encode (359 bytes) 99   13       4       java.lang.String::charAt (29 bytes) 99   16       3       java.lang.String::lastIndexOf (52 bytes) 99    5       3       java.util.HashMap::hash (20 bytes)100   18       3       java.lang.String::&lt;init&gt; (82 bytes)100   14       3       java.lang.StringBuilder::toString (17 bytes)100   19       3       java.lang.String::startsWith (72 bytes)100   20       1       java.util.ArrayList::size (5 bytes)100   17       1       java.lang.ref.Reference::get (5 bytes)101   21       1       sun.instrument.TransformerManager::getSnapshotTransformerList (5 bytes)101   22       3       java.lang.String::startsWith (7 bytes)101   23       3       java.lang.String::indexOf (166 bytes)102   26       1       java.lang.Object::&lt;init&gt; (1 bytes)102    8       3       java.lang.Object::&lt;init&gt; (1 bytes)   made not entrant102   30       3       org.destiny.demo.Foo::setA (6 bytes)102   31       3       org.destiny.demo.Foo::setB (6 bytes)102   32       3       org.destiny.demo.User::bar (25 bytes)102   33       3       org.destiny.demo.User::&lt;init&gt; (10 bytes)103   34       1       org.destiny.demo.Foo::setA (6 bytes)103   30       3       org.destiny.demo.Foo::setA (6 bytes)   made not entrant103   35       1       org.destiny.demo.Foo::setB (6 bytes)103   31       3       org.destiny.demo.Foo::setB (6 bytes)   made not entrant103   27       1       org.destiny.demo.Foo::getA (5 bytes)103   28       1       org.destiny.demo.Foo::getB (5 bytes)103   29       1       org.destiny.demo.User::getAge (5 bytes)103   24       3       java.lang.String::endsWith (17 bytes)103   36       4       org.destiny.demo.User::bar (25 bytes)103   25       3       java.lang.ref.SoftReference::get (29 bytes)104   32       3       org.destiny.demo.User::bar (25 bytes)   made not entrant104   37       1       java.lang.ThreadLocal::access$400 (5 bytes)106   38       3       java.lang.String::indexOf (7 bytes)106   39       3       java.lang.Character::toLowerCase (9 bytes)106   40       3       java.lang.CharacterDataLatin1::toLowerCase (39 bytes)108   41 %     3       org.destiny.demo.User::main @ 18 (48 bytes)108   42       3       org.destiny.demo.User::main (48 bytes)109   43 %     4       org.destiny.demo.User::main @ 18 (48 bytes)112   41 %     3       org.destiny.demo.User::main @ -2 (48 bytes)   made not entrant150   43 %     4       org.destiny.demo.User::main @ -2 (48 bytes)   made not entrant </code></pre><p>编译日志分为 7 列, 依次是</p><ul><li>时间(基于 JVM 启动的时间戳)</li><li>编译任务 id(基本递增)</li><li>编译属性</li><li>tiered_level(分为 4 级)</li><li>方法信息</li><li>占用字节数</li><li>deopt</li></ul><p>其中, 编译属性 <code>attribute</code> 分为:</p><table><thead><tr><th>属性值</th><th>属性描述</th></tr></thead><tbody><tr><td>%</td><td>The compilation is OSR</td></tr><tr><td>s</td><td>The method is synchronized</td></tr><tr><td>!</td><td>The method has an exception handler</td></tr><tr><td>b</td><td>Compliation occurred in blocking mode</td></tr><tr><td>n</td><td>Compliation occurred for a wrapper to a native method</td></tr></tbody></table><p>tiered_level:</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>Interpreted Code</td></tr><tr><td>1</td><td>Simple C1 Compiled Code</td></tr><tr><td>2</td><td>Limited C1 Compiled Code</td></tr><tr><td>3</td><td>Full C1 Compiled Code</td></tr><tr><td>4</td><td>C2 Compile Code</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> JVM </category>
          
          <category> 逃逸分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逃逸分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分布式事务总结</title>
      <link href="/blog/2018/09/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%80%BB%E7%BB%93/"/>
      <url>/blog/2018/09/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h1><pre><code>事务能够提供一种将一个活动涉及到的所有操作纳入到一个不可分割的执行单元的机制.组成事务的操作只有在操作均能正常执行的情况下才能提交, 只要其中任意一步执行失败, 都将导致整个操作回滚.</code></pre><h1 id="2-数据库本地事务"><a href="#2-数据库本地事务" class="headerlink" title="2. 数据库本地事务"></a>2. 数据库本地事务</h1><h2 id="2-1-ACID"><a href="#2-1-ACID" class="headerlink" title="2.1 ACID"></a>2.1 ACID</h2><table><thead><tr><th>特性</th><th>描述</th></tr></thead><tbody><tr><td>原子性</td><td>一个事务的所有操作, 要么全部完成, 要么全部不完成, 不会结束在中间某个环节</td></tr><tr><td>一致性</td><td>在一个事务执行之前和执行之后, 数据库必须保持处于一致的状态. 如果事务成功执行, 系统中所有的变化都将正确地被应用, 反之, 所有变化都将被回滚</td></tr><tr><td>隔离性</td><td>当不同的事务操作相同的数据的时候, 每个事务都有各自的完整数据空间, 由事务所做的修改必须与任何其他事务所做的修改隔离, 事务不会看到数据的中间状态.</td></tr><tr><td>持久性</td><td>只要事务成功结束, 它对数据库所做的更新就必须永久保存下来</td></tr></tbody></table><p><img src="http://oetw0yrii.bkt.clouddn.com/18-8-4/3451917.jpg" alt></p><p>而事务的 ACID 是通过 InnoDB 日志和锁来保证.</p><ul><li>事务的隔离性是通过数据库锁的机制来实现;</li><li>持久性是通过 redo log(重做日志) 来实现的</li><li>原子性和一致性是通过 undo log(回滚日志)</li></ul><pre><code>Undo log: 为了满足事务的原子性, 在操作任何数据之前, 首先将数据备份到一个地方, 然后对数据进行修改, 如果出现了错误, 或者用户执行 RollBack, 系统可以利用 Undo log 中的备份将数据恢复到事务开始之前的状态Redo log: 记录新数据的备份, 在事务提交之前, 只要将 Redo log 持久化即可, 当系统崩溃时, 虽然数据没有持久化, 但是 Redo log 已经持久化, 系统可以根据 Redo log 的内容, 将所有数据恢复到最新状态.</code></pre><h1 id="3-分布式事务"><a href="#3-分布式事务" class="headerlink" title="3. 分布式事务"></a>3. 分布式事务</h1><h2 id="3-1-分布式事务概念"><a href="#3-1-分布式事务概念" class="headerlink" title="3.1 分布式事务概念"></a>3.1 分布式事务概念</h2><pre><code>指事物的参与者, 支持事务的服务器, 资源服务器以及事务管理器分别位于不同的分布式系统之上.本质上讲, 分布式事务就是为了保证不同数据库的数据一致性.</code></pre><h2 id="3-2-场景"><a href="#3-2-场景" class="headerlink" title="3.2 场景"></a>3.2 场景</h2><h3 id="3-2-1-service-多个节点"><a href="#3-2-1-service-多个节点" class="headerlink" title="3.2.1 service 多个节点"></a>3.2.1 service 多个节点</h3><blockquote><p>随着互联网快速发展, SOA, 微服务等架构模式正在被大规模使用, 一个公司内, 用户的资产可能被分为好多个部分, 比如余额, 积分, 优惠券等</p></blockquote><p><img src="http://oetw0yrii.bkt.clouddn.com/18-8-4/44346101.jpg" alt></p><p>这样的话传统的单机事务实现方式无法保证积分扣减成功之后, 优惠券也能正确完成扣减操作.</p><h3 id="3-2-2-resource-多个节点"><a href="#3-2-2-resource-多个节点" class="headerlink" title="3.2.2 resource 多个节点"></a>3.2.2 resource 多个节点</h3><blockquote><p>同样, 由于单表数据过大需要进行拆分, 一次转账业务需要在北京的 MySQL 实例向 上海的 MySQL 实例转账, 同样无法保证他们能同时成功.</p></blockquote><p><img src="http://oetw0yrii.bkt.clouddn.com/18-8-4/47229853.jpg" alt></p><h2 id="3-3-分布式事务基础"><a href="#3-3-分布式事务基础" class="headerlink" title="3.3 分布式事务基础"></a>3.3 分布式事务基础</h2><h3 id="3-3-1-CAP"><a href="#3-3-1-CAP" class="headerlink" title="3.3.1 CAP"></a>3.3.1 CAP</h3><ul><li>C: 对某个执行的客户端来说, 读操作能返回最新的写操作. 对于数据分布在不同节点上的数据来说, 如果在某个节点更新了数据, 那么在其他节点都能读取到最新的数据, 那么就成为强一致, 反之就是分布式不一致;</li><li>A: 非故障的节点在一定时间内返回合理的响应(不是错误或超时), 可用性的关键在于: <code>合理的时间</code> 和 <code>合理的响应</code>, 请求不能无限期得不到响应, 并且需要得到系统正确的返回结果;</li><li>P: 当出现网络分区后, 系统依然能够正常工作.</li></ul><p>在分布式系统中, 网络永远无法 100% 可靠, 分区是一个一定会出现的情况, 如果我们选择 AC 而放弃 P, 当分区发生时, 为了保证一致性, 这个时候必须拒绝请求, 当时 A 又不允许拒绝, 所以分布式系统理论上不可能选择 CA 架构, 只能选择 CP 或者 AP 架构.</p><p>对于 CP 来说, 放弃可用性, 追求一致性和分区容错性, 比如 Zookeeper 就是追求强一致.</p><p>对于 AP 来说, 放弃一致性(强一致), 追求分区容错和可用, 这是很多分布式系统的选择.</p><p>CAP 是忽略网络延迟的, 也就是当事务提交时, 从节点 A 复制到节点 B, 但是在现实中总会有一定的时间延迟.</p><h3 id="3-3-2-BASE"><a href="#3-3-2-BASE" class="headerlink" title="3.3.2 BASE"></a>3.3.2 BASE</h3><pre><code>基本可用, 软状态, 最终一致性的缩写本质上是 AP 的一个扩张, 通过软状态实现基本可用和最终一致性.</code></pre><ul><li>BA: 基本可用, 分布式系统出现故障时, 允许损失部分可用功能, 保证核心功能可用;</li><li>软状态: 允许系统中存在中间状态, 这个状态不影响系统可用性, 这里指的是 CAP 中的不一致;</li><li>最终一致性: 经过一段时间后, 所有节点数据都将达到一致.</li></ul><h1 id="4-分布式事务的解决方案"><a href="#4-分布式事务的解决方案" class="headerlink" title="4. 分布式事务的解决方案"></a>4. 分布式事务的解决方案</h1><h2 id="4-1-是否真的需要分布式事务"><a href="#4-1-是否真的需要分布式事务" class="headerlink" title="4.1 是否真的需要分布式事务"></a>4.1 是否真的需要分布式事务</h2><pre><code>首先要明确是否真的需要分布式事务?</code></pre><p>是否存在由于服务拆分过细导致不合理的分布式系统设计?</p><p>可以先考虑将多个微服务聚合成一个单机服务, 避免引入不必要的成本和复杂度.</p><h2 id="4-2-2PC"><a href="#4-2-2PC" class="headerlink" title="4.2 2PC"></a>4.2 2PC</h2><p><img src="http://images2015.cnblogs.com/blog/524341/201607/524341-20160718200514638-1914892480.png" alt="image"></p><p>第一阶段: 事务管理器要求每个涉及到事务的数据库预提交此操作, 并反映是否可以提交</p><p>第二节点: 事务协调器要求每个数据库提交数据, 或者回滚</p><p>优点: 保证数据强一致, 实现简单;</p><p>缺点: 事务管理器存在单机风险; 整个过程存在同步阻塞; 数据可能不一致; 不支持高并发.</p><h2 id="4-3-TCC"><a href="#4-3-TCC" class="headerlink" title="4.3 TCC"></a>4.3 TCC</h2><p>相比 2PC, 解决了以下问题</p><ol><li>解决了协调者单点, 引入集群</li><li>引入超时, 超时后进行补偿, 并且不会锁定整个资源, 将资源转换为业务逻辑形式</li><li>数据一致性, 有了补偿机制后, 由业务管理其控制一致性</li></ol><pre><code>Try 阶段: 尝试执行, 完成所有业务检查(一致性), 预留必须业务资源(准隔离性)Confirm 阶段: 确认执行真正的业务, 不做任何业务检查, 只使用 Try 阶段预留的业务资源, Confirm 操作满足幂等性. 要求具备幂等设计, Confirm 失败后需要进行重试.Cancel 阶段: 取消执行, 释放 Try 阶段预留的业务资源, 也需要满足幂等性.</code></pre><p><img src="http://oetw0yrii.bkt.clouddn.com/18-8-4/81578002.jpg" alt></p><h2 id="4-4-本地消息表"><a href="#4-4-本地消息表" class="headerlink" title="4.4 本地消息表"></a>4.4 本地消息表</h2><pre><code>将需要分布式处理的任务通过消息日至的方式来异步执行</code></pre><p>消息日志可以存储到本地文本, 数据库或者消息队列, 再通过业务规则或人工发起重试, 人工重试更多应用于支付系统</p><blockquote><p>举一个购物的例子</p></blockquote><ol><li>当账户扣款的时候, 需要在扣款相关的服务上新增一个本地消息表, 需要把记录扣款和写入扣减商品库存的本地消息表放入同一个事务.</li><li>有个定时任务去轮询本地事务表, 把没有发送的消息扔给商品服务, 让它扣减库存, 到达商品服务后, 先写入这个服务器的事务表, 再进行扣减, 扣减成功后, 更新事务表中的状态;</li><li>商品服务器通过定时任务扫描消息表或者直接通过扣款服务吗扣款服务本地消息表进行更新;</li><li>针对特定情况, 定时扫描未成功处理的消息, 进行重新发送, 在商品服务收到消息后, 先判断是否是重复消息, 如果已经接受, 再判断是否执行, 如果执行再马上又进行通知事务, 如果未执行, 就需要重新执行需要由业务保证幂等.</li></ol><p><img src="http://oetw0yrii.bkt.clouddn.com/18-8-4/62419454.jpg" alt></p><ol><li>在分布式事务操作的一方完成写业务数据的操作之后向本地消息表发送一个消息，本地事务能保证这个消息一定会被写入本地消息表中。</li><li>之后将本地消息表中的消息转发到 Kafka 等消息队列中，如果转发成功则将消息从本地消息表中删除，否则继续重新转发。</li><li>在分布式事务操作的另一方从消息队列中读取一个消息，并执行消息中的操作。</li></ol><h2 id="4-5-MQ-事务"><a href="#4-5-MQ-事务" class="headerlink" title="4.5 MQ 事务"></a>4.5 MQ 事务</h2><p>还是以转账的模型举例:<br><img src="https://upload-images.jianshu.io/upload_images/175724-92abb226f288ff9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/621" alt="image"></p><h4 id="1-先发送消息"><a href="#1-先发送消息" class="headerlink" title="1. 先发送消息"></a>1. 先发送消息</h4><p><img src="https://upload-images.jianshu.io/upload_images/175724-1927b8f3d14ef823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/618" alt="image"></p><p>如果消息发送成功，但是扣款失败，消费端就会消费此消息，进而向Smith账户加钱。</p><h4 id="2-先扣款"><a href="#2-先扣款" class="headerlink" title="2. 先扣款"></a>2. 先扣款</h4><p><img src="https://upload-images.jianshu.io/upload_images/175724-367b5cf60cbdfa16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/619" alt="image"></p><p>如果扣款成功，发送消息失败，就会出现Bob扣钱了，但是Smith账户未加钱。</p><h4 id="3-RocketMQ-的实现"><a href="#3-RocketMQ-的实现" class="headerlink" title="3. RocketMQ 的实现"></a>3. RocketMQ 的实现</h4><p><img src="https://upload-images.jianshu.io/upload_images/175724-ab0085543c6d02d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/621" alt="image"></p><ol><li>发送 <code>Prepared</code> 消息时，会拿到消息的地址;</li><li>执行本地事物;</li><li>通过第一阶段拿到的地址去访问消息, 并修改消息的状态.</li></ol><p>这样可以保证消息发送消息和本地事务执行成功保持原子性操作.</p><h4 id="问题1-如果步骤-3-失败怎么办"><a href="#问题1-如果步骤-3-失败怎么办" class="headerlink" title="问题1: 如果步骤 3 失败怎么办"></a>问题1: 如果步骤 3 失败怎么办</h4><pre><code>RocketMQ会定期扫描消息集群中的事物消息，如果发现了Prepared消息，它会向消息发送端(生产者)确认，Bob的钱到底是减了还是没减呢？如果减了是回滚还是继续发送确认消息呢？RocketMQ会根据发送端设置的策略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =============================发送事务消息的一系列准备工作========================================</span></span><br><span class="line"><span class="comment">// 未决事务，MQ服务器回查客户端</span></span><br><span class="line"><span class="comment">// 也就是上文所说的，当RocketMQ发现`Prepared消息`时，会根据这个Listener实现的策略来决断事务</span></span><br><span class="line">TransactionCheckListener transactionCheckListener = <span class="keyword">new</span> TransactionCheckListenerImpl();</span><br><span class="line"><span class="comment">// 构造事务消息的生产者</span></span><br><span class="line">TransactionMQProducer producer = <span class="keyword">new</span> TransactionMQProducer(<span class="string">"groupName"</span>);</span><br><span class="line"><span class="comment">// 设置事务决断处理类</span></span><br><span class="line">producer.setTransactionCheckListener(transactionCheckListener);</span><br><span class="line"><span class="comment">// 本地事务的处理逻辑，相当于示例中检查Bob账户并扣钱的逻辑</span></span><br><span class="line">TransactionExecuterImpl tranExecuter = <span class="keyword">new</span> TransactionExecuterImpl();</span><br><span class="line">producer.start()</span><br><span class="line"><span class="comment">// 构造MSG，省略构造参数</span></span><br><span class="line">Message msg = <span class="keyword">new</span> Message(......);</span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">SendResult sendResult = producer.sendMessageInTransaction(msg, tranExecuter, <span class="keyword">null</span>);</span><br><span class="line">producer.shutdown();</span><br></pre></td></tr></table></figure><p>接着查看 <code>sendMessageInTransaction</code> 方法的源码，总共分为3个阶段：发送 Prepared 消息、执行本地事务、发送确认消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ================================事务消息的发送过程=============================================</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TransactionSendResult <span class="title">sendMessageInTransaction</span><span class="params">(.....)</span>  </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑代码，非实际代码</span></span><br><span class="line">    <span class="comment">// 1.发送消息</span></span><br><span class="line">    sendResult = <span class="keyword">this</span>.send(msg);</span><br><span class="line">    <span class="comment">// sendResult.getSendStatus() == SEND_OK</span></span><br><span class="line">    <span class="comment">// 2.如果消息发送成功，处理与消息关联的本地事务单元</span></span><br><span class="line">    LocalTransactionState localTransactionState = tranExecuter.executeLocalTransactionBranch(msg, arg);</span><br><span class="line">    <span class="comment">// 3.结束事务</span></span><br><span class="line">    <span class="keyword">this</span>.endTransaction(sendResult, localTransactionState, localException);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>endTransaction</code> 方法会将请求发往 <code>broker(mq server)</code> 去更新事务消息的最终状态：</p><ol><li>根据 sendResult 找到 Prepared 消息, sendResult 包含事务消息的 ID</li><li>根据 localTransaction 更新消息的最终状态</li></ol><h4 id="问题2-Consumer-消费失败怎么办"><a href="#问题2-Consumer-消费失败怎么办" class="headerlink" title="问题2: Consumer 消费失败怎么办"></a>问题2: Consumer 消费失败怎么办</h4><pre><code>如果 Bob 的账户的余额已经减少，且消息已经发送成功，Smith 端开始消费这条消息，这个时候就会出现消费失败和消费超时两个问题.解决超时问题的思路就是一直重试，直到消费端消费消息成功，整个过程中有可能会出现消息重复的问题，按照前面的思路解决即可。</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/175724-1d9ba7bcd230e0dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/624" alt="image"></p>]]></content>
      
      <categories>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现简易JVM</title>
      <link href="/blog/2018/06/24/%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93JVM/"/>
      <url>/blog/2018/06/24/%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93JVM/</url>
      <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-23/68954491.jpg" alt></p><ol><li>Java 源代码经过编译生成 class 文件</li><li>在不同的操作系统上分别实现 JVM, JVM 在不同操作系统上实现差异很大, 如线程, 图形界面等, 由 JVM 屏蔽与操作系统的接口</li></ol><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-23/18183015.jpg" alt></p><h2 id="1-1-Class-文件格式"><a href="#1-1-Class-文件格式" class="headerlink" title="1.1 Class 文件格式"></a>1.1 Class 文件格式</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-23/7574723.jpg" alt></p><h3 id="1-1-1-魔数-amp-版本-amp-常量池个数"><a href="#1-1-1-魔数-amp-版本-amp-常量池个数" class="headerlink" title="1.1.1 魔数 &amp; 版本 &amp; 常量池个数"></a>1.1.1 魔数 &amp; 版本 &amp; 常量池个数</h3><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-23/37222872.jpg" alt></p><ul><li>Magic Number <ul><li>确定这是一个 Java 文件</li></ul></li><li>Minor / Major Version: 版本号</li><li>16 进制<ul><li>Major Version (0x34) = 52</li><li>常量池个数 (0x36) = 54</li></ul></li><li>大端模式(Big-Endian): 高位在前<ul><li><code>00 36</code> 而不是 <code>36 00</code></li></ul></li></ul><h3 id="1-1-2-常量池"><a href="#1-1-2-常量池" class="headerlink" title="1.1.2 常量池"></a>1.1.2 常量池</h3><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-23/57215332.jpg" alt></p><p><code>0036</code> 代表常量池常量的个数, 后面的 <code>07</code> 通过查表发现含义为 <code>ClassInfo</code> 的 <code>tag</code> 值, 而 <code>name_index</code> 值为 2, 代表类名在第二个常量中.</p><p>第二个常量开头为 <code>01</code>, 查表得知是一个 <code>Utf8</code> 字符串, <code>0021</code> 代表长度 <code>length</code> 值为 33. 而后面 33 个字节 <code>63 6F 6D 2F 63 6F 64 65 72 69 73 69 6E 67 2F 65 78 61 6D 70 6C 65 2F 45 6D 70 6C 6F 79 65 65 56 31</code> 转换成字符串之后的值为 <code>com/coderising/example/EmployeeV1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONSTANT_Class_info &#123;</span><br><span class="line">    u1 tag;         // 值为7</span><br><span class="line">    u2 name_index;  // 名称索引</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONSTANT_Utf8_info &#123;</span><br><span class="line">    u1 tag;             // 值为1</span><br><span class="line">    u2 length;          // 长度</span><br><span class="line">    u1 bytes[length];   // 内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-2-1-常量池实例"><a href="#1-1-2-1-常量池实例" class="headerlink" title="1.1.2.1 常量池实例"></a>1.1.2.1 常量池实例</h4><table><thead><tr><th style="text-align:center">索引</th><th style="text-align:center">类型</th><th style="text-align:center">操作数 1</th><th style="text-align:center">操作数 2</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">#1</td><td style="text-align:center">ClassInfo</td><td style="text-align:center">#2</td></tr><tr><td style="text-align:center">#2</td><td style="text-align:center">Utf8</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">org/destiny/jvm/model/Employee</td></tr><tr><td style="text-align:center">#3</td><td style="text-align:center">ClassInfo</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">#4</td></tr><tr><td style="text-align:center">#4</td><td style="text-align:center">Utf8</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">java/lang/Object</td></tr><tr><td style="text-align:center">#5</td><td style="text-align:center">Utf8</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">name</td></tr><tr><td style="text-align:center">#6</td><td style="text-align:center">Utf8</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">Ljava/lang/String</td></tr><tr><td style="text-align:center">#7</td><td style="text-align:center">Utf8</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">age</td></tr><tr><td style="text-align:center">#8</td><td style="text-align:center">Utf8</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">#9</td><td style="text-align:center">Utf8</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><init></init></td></tr><tr><td style="text-align:center">#10</td><td style="text-align:center">Utf8</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">#11</td><td style="text-align:center">Utf8</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">#12</td><td style="text-align:center">MethodRef</td><td style="text-align:center">#3</td><td style="text-align:center">#13</td><td style="text-align:center"><code>java.lang.Object&lt;init&gt;()V</code></td></tr><tr><td style="text-align:center">#13</td><td style="text-align:center">NameAndType</td><td style="text-align:center">#9</td><td style="text-align:center">#14</td><td style="text-align:center"><code>&lt;init&gt;()V</code></td></tr><tr><td style="text-align:center">#14</td><td style="text-align:center">Utf8</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">()V</td></tr><tr><td style="text-align:center">#15</td><td style="text-align:center">FieldRef</td><td style="text-align:center">#1</td><td style="text-align:center">#16</td><td style="text-align:center"><code>org/destiny/jvm/model/Employee 包含一个 Ljava/lang/String 类型的变量 name</code></td></tr><tr><td style="text-align:center">#16</td><td style="text-align:center">NameAndType</td><td style="text-align:center">#5</td><td style="text-align:center">#6</td><td style="text-align:center"><code>Ljava/lang/String 类型的变量 name</code></td></tr></tbody></table><h3 id="1-1-3-访问标志"><a href="#1-1-3-访问标志" class="headerlink" title="1.1.3 访问标志"></a>1.1.3 访问标志</h3><table><thead><tr><th style="text-align:center">标志名称</th><th style="text-align:center">标志值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">ACC_PUBLIC</td><td style="text-align:center">0x0001</td><td style="text-align:center">public 类型</td></tr><tr><td style="text-align:center">ACC_FINAL</td><td style="text-align:center">0x0002</td><td style="text-align:center">声明为 final 类型</td></tr><tr><td style="text-align:center">ACC_SUPER</td><td style="text-align:center">0x0020</td><td style="text-align:center">是否允许使用 <code>invokespecial</code> 字节码指令的新语义</td></tr><tr><td style="text-align:center">ACC_INTERFACE</td><td style="text-align:center">0x0200</td><td style="text-align:center">声明为接口</td></tr><tr><td style="text-align:center">ACC_ABSTRACT</td><td style="text-align:center">0x0400</td><td style="text-align:center">Abstract 类型</td></tr><tr><td style="text-align:center">ACC_SYNTHETIC</td><td style="text-align:center">0x1000</td><td style="text-align:center">这个类并非由用户代码产生</td></tr><tr><td style="text-align:center">ACC_ANNOTATION</td><td style="text-align:center">0x2000</td><td style="text-align:center">注解</td></tr><tr><td style="text-align:center">ACC_ENUM</td><td style="text-align:center">0x4000</td><td style="text-align:center">枚举</td></tr></tbody></table><h3 id="1-1-4-类索引-父类索引"><a href="#1-1-4-类索引-父类索引" class="headerlink" title="1.1.4 类索引, 父类索引"></a>1.1.4 类索引, 父类索引</h3><pre><code>类索引和父类索引都是指向常量池的索引</code></pre><p>由于 Java 采用动态连接</p><p>动态连接是一个将符号引用解析为直接引用的过程。当java虚拟机执行字节码时，如果它遇到一个操作码，这个操作码第一次使用一个指向另一个类的符号引用</p><p>那么虚拟机就必须解析这个符号引用。在解析时，虚拟机执行两个基本任务</p><ol><li>查找被引用的类，（如果必要的话就装载它）</li><li>将符号引用替换为直接引用，这样当它以后再次遇到相同的引用时，它就可以立即使用这个直接引用，而不必花时间再次解析这个符号引用了。</li></ol><h3 id="1-1-5-接口"><a href="#1-1-5-接口" class="headerlink" title="1.1.5 接口"></a>1.1.5 接口</h3><h3 id="1-1-6-字段"><a href="#1-1-6-字段" class="headerlink" title="1.1.6 字段"></a>1.1.6 字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">u2 fields_count;         // 字段数量</span><br><span class="line"></span><br><span class="line">field_info &#123;</span><br><span class="line">    u2 access_flags;                            // 访问控制符</span><br><span class="line">    u2 name_index;                              // 指向常量池的入口</span><br><span class="line">    u2 descriptor_index;                        // 指向常量池的入口</span><br><span class="line">    u2 attribute_count;                         // 该字段的属性数量</span><br><span class="line">    attribute_info attributes[attribute_count]; // 属性信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标志字符含义</p><table><thead><tr><th>header 1</th><th>header 2</th></tr></thead><tbody><tr><td>B</td><td>byte</td></tr><tr><td>C</td><td>char</td></tr><tr><td>D</td><td>double</td></tr><tr><td>F</td><td>float</td></tr><tr><td>I</td><td>int</td></tr><tr><td>J</td><td>long</td></tr><tr><td>S</td><td>short</td></tr><tr><td>Z</td><td>boolean</td></tr><tr><td>V</td><td>void</td></tr><tr><td>L</td><td>对象类型的通用前缀, 如 <code>Ljava/lang/Object</code></td></tr></tbody></table><h3 id="1-1-7-方法"><a href="#1-1-7-方法" class="headerlink" title="1.1.7 方法"></a>1.1.7 方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">u2 methods_count;           // 方法数量</span><br><span class="line"></span><br><span class="line">method_info &#123;</span><br><span class="line">    u2 access_flags;                // 访问标志</span><br><span class="line">    u2 name_index;                  // 指向常量池的入口</span><br><span class="line">    u2 descriptor_index;            // 指向常量池的入口</span><br><span class="line">    u2 attributes_count;            // 该字段的属性数量</span><br><span class="line">    attribute_info attributes[attributes_count];    // 属性信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>(Ljava/lang/String;)V</code> 表示 <code>参数为 String, 返回值为 void 的方法</code><br><code>(Ljava/lang/String;IF)V</code> 表示 <code>参数为 String, int, float, 返回值为 void 的方法</code></p></blockquote><h3 id="1-1-8-属性"><a href="#1-1-8-属性" class="headerlink" title="1.1.8 属性"></a>1.1.8 属性</h3><ul><li>方法和字段都可能有属性<ul><li>方法中可能有 <code>Code</code> 属性, 字段可能有 <code>Constant Value</code> 属性</li></ul></li><li>属性中可能嵌套属性<ul><li><code>code</code> 属性中还可能有 <code>Line Number Table</code>, <code>Local Variable Table</code>, <code>Stack Map Table</code> 等属性</li></ul></li><li>虚拟机的实现中还可以自定义属性</li></ul><h4 id="1-1-8-1-Constant-Value"><a href="#1-1-8-1-Constant-Value" class="headerlink" title="1.1.8.1 Constant Value"></a>1.1.8.1 Constant Value</h4><pre><code>如果某字段为静态类型(access_flag 中包含 ACC_STATIC 标志)将会被分配 Constant Value 属性</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ConstantValue_attribute &#123;</span><br><span class="line">    u2 attribute_name_index;    <span class="comment">// 必须是对常量池的一个有效索引, 常量池在该索引处的项必须是 UTF8Info, 表示字符串 "ConstantValue"</span></span><br><span class="line">    u4 attribute_length;        <span class="comment">// 固定为 2</span></span><br><span class="line">    u2 constantvalue_index;     <span class="comment">// 必须是对常量池的一个有效索引, 常量池在该索引处的项给出该属性表示的常量值, 可能的值有 Constant_String, Constant_Long 等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-8-2-Code"><a href="#1-1-8-2-Code" class="headerlink" title="1.1.8.2 Code"></a>1.1.8.2 Code</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Code_attribute &#123;</span><br><span class="line">    u2 attribute_name_index;            <span class="comment">// 指向常量池, 应该是 UTF8Info, 且值为 "Code"</span></span><br><span class="line">    u4 attribute_length;                <span class="comment">// 属性长度, 不包括开始的 6 个字节</span></span><br><span class="line">    u2 max_stack;                       <span class="comment">// 操作数栈的最大深度</span></span><br><span class="line">    u2 max_locals;                      <span class="comment">// 最大局部变量表个数</span></span><br><span class="line">    u4 code_length;                     <span class="comment">// 该方法的代码长度</span></span><br><span class="line">    u1 code[code_length];               <span class="comment">// 真正的字节码</span></span><br><span class="line">    u2 exception_table_length;          <span class="comment">// 捕获异常表的长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        u2 start_pc;        <span class="comment">// 捕获起始地址</span></span><br><span class="line">        u2 end_pc;          <span class="comment">// 捕获结束地址</span></span><br><span class="line">        u2 handler_pc;      <span class="comment">// </span></span><br><span class="line">        u2 catch_type;      <span class="comment">// 异常类型</span></span><br><span class="line">    &#125; exception_table[exception_table_length];  <span class="comment">// 捕获异常表</span></span><br><span class="line">    u2 attributes_count;                <span class="comment">// </span></span><br><span class="line">    attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Code 属性中的字节码</strong></p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/71745531.jpg" alt></p><table><thead><tr><th style="text-align:center">字节码</th><th style="text-align:center">命令</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">2A</td><td style="text-align:center">aload_0</td><td style="text-align:center">从局部变量表第 0 个值压入操作数栈</td></tr><tr><td style="text-align:center">B4 00 15</td><td style="text-align:center">getfield #21</td><td style="text-align:center">获取对象的字段值</td></tr><tr><td style="text-align:center">10 1E</td><td style="text-align:center">bipush 30</td><td style="text-align:center">将 30 压入栈中</td></tr><tr><td style="text-align:center">A2 00 0E</td><td style="text-align:center">if_icmp_ge 20</td><td style="text-align:center">将当前</td></tr></tbody></table><h4 id="1-1-8-3-LineNumber"><a href="#1-1-8-3-LineNumber" class="headerlink" title="1.1.8.3 LineNumber"></a>1.1.8.3 LineNumber</h4><pre><code>code属性的一个子属性可选的变长属性, 维护 Java 源代码行号与字节码行号(偏移量之间的对应关系)</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LineNumberTable_attribute &#123;</span><br><span class="line">    u2 attribute_name_index;</span><br><span class="line">    u4 attribute_length;</span><br><span class="line">    u2 line_number_table_length;</span><br><span class="line">    &#123;</span><br><span class="line">        u2 start_pc;        <span class="comment">// 字节码偏移量</span></span><br><span class="line">        u2 line_number;     <span class="comment">// 行号</span></span><br><span class="line">    &#125; line_number_table[line_number_table_length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-8-4-LocalVariableTable-属性"><a href="#1-1-8-4-LocalVariableTable-属性" class="headerlink" title="1.1.8.4 LocalVariableTable 属性"></a>1.1.8.4 LocalVariableTable 属性</h4><pre><code>code属性的一个子属性可选的变长属性, 维护栈帧中局部变量表中变量与 Java 源码中定义变量的关系</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LocalVariableTable_attribute &#123;</span><br><span class="line">    u2 attribute_name_index;</span><br><span class="line">    u4 attribute_length;</span><br><span class="line">    u2 local_variable_table_length;</span><br><span class="line">    &#123;</span><br><span class="line">        u2 start_pc;            <span class="comment">// 局部变量位于 [start_pc, start_pc + length)之间</span></span><br><span class="line">        u2 length;</span><br><span class="line">        u2 name_index;          <span class="comment">// 局部变量的名称索引</span></span><br><span class="line">        u2 descriptor_index;    <span class="comment">// 局部变量的描述符索引</span></span><br><span class="line">        u2 index;               <span class="comment">// 局部变量在栈帧中的索引</span></span><br><span class="line">    &#125; local_variable_table[local_variable_table_length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-JVM-运行时动态行为"><a href="#1-2-JVM-运行时动态行为" class="headerlink" title="1.2 JVM 运行时动态行为"></a>1.2 JVM 运行时动态行为</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/2593924.jpg" alt></p><ul><li>线程中包含函数栈帧, 其中每个函数帧表示某一个函数的调用过程</li><li>在每一个函数帧的内部, JVM 又细分了 <code>局部变量表</code>, <code>操作数栈</code> 等</li><li>局部变量和操作数栈中的变量会引用堆中的对象</li><li>常量池引用指向方法区, 方法区保存了类的元数据以及方法的字节码</li></ul><h3 id="1-2-1-实例"><a href="#1-2-1-实例" class="headerlink" title="1.2.1 实例"></a>1.2.1 实例</h3><p>Java 源码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = i + j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>转换成字节码后:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">demo:</span><br><span class="line"><span class="number">0</span>: aload_0</span><br><span class="line"><span class="number">1</span>: bipush   <span class="number">10</span></span><br><span class="line"><span class="number">3</span>: bipush   <span class="number">20</span></span><br><span class="line"><span class="number">5</span>: invokevirtial    #<span class="number">2</span></span><br><span class="line"><span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">add:</span><br><span class="line"><span class="number">0</span>: aload_1</span><br><span class="line"><span class="number">1</span>: aload_2</span><br><span class="line"><span class="number">2</span>: iadd</span><br><span class="line"><span class="number">3</span>: istore_3</span><br><span class="line"><span class="number">4</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure></p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/39159076.jpg" alt></p><p>调用 <code>add</code> 函数, 生成新的函数帧</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/5082789.jpg" alt></p><p><code>0: aload_1</code>: 将局部变量表第 1 个变量压入操作数栈;<br><code>1: aload_2</code>: 将局部变量表第 2 个变量压入操作数栈;<br><code>2: iadd</code>: 将操作数栈顶端的两个元素弹出, 相加并将结果压入栈顶<br><code>3: istore_3</code>: 将操作数栈栈顶元素放在局部变量表第 3 个元素中<br><code>4: return</code>: 执行完毕</p><h1 id="2-ClassLoader"><a href="#2-ClassLoader" class="headerlink" title="2. ClassLoader"></a>2. ClassLoader</h1><h2 id="2-1-Java-是动态链接"><a href="#2-1-Java-是动态链接" class="headerlink" title="2.1 Java 是动态链接"></a>2.1 Java 是动态链接</h2><ul><li>C: 编译 -&gt; 链接 -&gt; 生成 <code>.exe</code> -&gt; 执行<ul><li>函数 A 调用函数 B, 在链接时会直接在函数 A 中记录函数 B 的地址</li></ul></li><li>Java: 编译 -&gt; <code>.class</code> -&gt; 装载执行<ul><li>类 A 中使用了另一个类 B, 在 A.class 中只保存类 B 的名称, 而不会保留 B 的 “地址”</li><li>在运行时根据名称来查找类, 装载类</li></ul></li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/64108809.jpg" alt></p><h2 id="2-2-类加载器的委托模型"><a href="#2-2-类加载器的委托模型" class="headerlink" title="2.2 类加载器的委托模型"></a>2.2 类加载器的委托模型</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/90661799.jpg" alt></p><p>工作原理</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/74913726.jpg" alt></p><h2 id="2-3-类加载器的命名空间"><a href="#2-3-类加载器的命名空间" class="headerlink" title="2.3 类加载器的命名空间"></a>2.3 类加载器的命名空间</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/81556783.jpg" alt></p><p><code>类加载器 + 类名</code> 唯一确定一个类, 只有同一个加载器加载的类才是相同的类.</p><h2 id="2-4-验证"><a href="#2-4-验证" class="headerlink" title="2.4 验证"></a>2.4 验证</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/9057717.jpg" alt></p><h2 id="2-5-自定义类加载器"><a href="#2-5-自定义类加载器" class="headerlink" title="2.5 自定义类加载器"></a>2.5 自定义类加载器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; classPaths = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] byteCodes = loadByteCode(name);</span><br><span class="line">        <span class="keyword">if</span> (byteCodes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, byteCodes, <span class="number">0</span>, byteCodes.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassFile(String classFileName) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String classPath: classPaths) &#123;</span><br><span class="line">            String realPath = classPath + File.separatorChar + classFileName.replace(<span class="string">'.'</span>, File.separatorChar) + <span class="string">".class"</span>;</span><br><span class="line">            </span><br><span class="line">            File file = <span class="keyword">new</span> File(classFileName);</span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> IOUtils.toByteArray(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DefineClass</code> 方法</p><ul><li><code>protected final Class&lt;?&gt; defineClass(String name, byte[] b, int off, int length) throws ClassFormatError;</code></li><li>只要传递给该方法一个合法字节数组, 就可以转化成一个 Class 对象, 这就意味着可以从任何地方组装类:<ul><li>磁盘</li><li>zip 文件</li><li>网络</li><li>运行时动态生成</li></ul></li></ul><h1 id="3-常量池"><a href="#3-常量池" class="headerlink" title="3. 常量池"></a>3. 常量池</h1><h2 id="3-1-常见结构"><a href="#3-1-常见结构" class="headerlink" title="3.1 常见结构"></a>3.1 常见结构</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/54920383.jpg" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">CONSTANT_Class_info &#123;</span><br><span class="line">    u1 tag;         <span class="comment">// 7</span></span><br><span class="line">    u2 name_index;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CONSTANT_Utf8_info &#123;</span><br><span class="line">    u1 tag;             <span class="comment">// 1</span></span><br><span class="line">    u2 length;          <span class="comment">// 长度</span></span><br><span class="line">    u1 bytes[length];   <span class="comment">// content</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CONSTANT_String_info &#123;</span><br><span class="line">    u1 tag;             <span class="comment">// </span></span><br><span class="line">    u2 string_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CONSTANT_Fieldref_info &#123;</span><br><span class="line">    u1 tag;             <span class="comment">// 9</span></span><br><span class="line">    u2 class_index;     <span class="comment">// </span></span><br><span class="line">    u2 name_and_type_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CONSTANT_Methodref_info &#123;</span><br><span class="line">    u1 tag;             <span class="comment">// 10</span></span><br><span class="line">    u2 class_index;</span><br><span class="line">    u2 name_and_type_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CONSTANT_NameAndType_info &#123;</span><br><span class="line">    u1 tag;             <span class="comment">// 12</span></span><br><span class="line">    u2 class_index;</span><br><span class="line">    u2 descriptor_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/51804525.jpg" alt></p><h2 id="3-2-访问标志"><a href="#3-2-访问标志" class="headerlink" title="3.2 访问标志"></a>3.2 访问标志</h2><table><thead><tr><th style="text-align:center">标志名称</th><th style="text-align:center">标志值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">ACC_PUBLIC</td><td style="text-align:center">0x0001</td><td style="text-align:center">public 类型</td></tr><tr><td style="text-align:center">ACC_FINAL</td><td style="text-align:center">0x0002</td><td style="text-align:center">声明为 final 类型</td></tr><tr><td style="text-align:center">ACC_SUPER</td><td style="text-align:center">0x0020</td><td style="text-align:center">是否允许使用 <code>invokespecial</code> 字节码指令的新语义</td></tr><tr><td style="text-align:center">ACC_INTERFACE</td><td style="text-align:center">0x0200</td><td style="text-align:center">声明为接口</td></tr><tr><td style="text-align:center">ACC_ABSTRACT</td><td style="text-align:center">0x0400</td><td style="text-align:center">Abstract 类型</td></tr><tr><td style="text-align:center">ACC_SYNTHETIC</td><td style="text-align:center">0x1000</td><td style="text-align:center">这个类并非由用户代码产生</td></tr><tr><td style="text-align:center">ACC_ANNOTATION</td><td style="text-align:center">0x2000</td><td style="text-align:center">注解</td></tr><tr><td style="text-align:center">ACC_ENUM</td><td style="text-align:center">0x4000</td><td style="text-align:center">枚举</td></tr></tbody></table><h1 id="4-字段-amp-方法"><a href="#4-字段-amp-方法" class="headerlink" title="4. 字段 &amp; 方法"></a>4. 字段 &amp; 方法</h1><h2 id="4-1-字段"><a href="#4-1-字段" class="headerlink" title="4.1 字段"></a>4.1 字段</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">u2 fields_count;         // 字段数量</span><br><span class="line"></span><br><span class="line">field_info &#123;</span><br><span class="line">    u2 access_flags;                            // 访问控制符</span><br><span class="line">    u2 name_index;                              // 指向常量池的入口</span><br><span class="line">    u2 descriptor_index;                        // 指向常量池的入口</span><br><span class="line">    u2 attribute_count;                         // 该字段的属性数量</span><br><span class="line">    attribute_info attributes[attribute_count]; // 属性信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/51718592.jpg" alt></p><p>可以看到上图中有两个字段, 分别为 <code>String</code> 类型的 <code>name</code>, 和 <code>int</code> 类型的 <code>age</code></p><ul><li><code>Name Index</code> 表示常量池中变量名称的索引</li><li><code>Desc Index</code> 表示常量池中变量类型的索引</li></ul><h2 id="4-2-方法"><a href="#4-2-方法" class="headerlink" title="4.2 方法"></a>4.2 方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">u2 methods_count;           // 方法数量</span><br><span class="line"></span><br><span class="line">method_info &#123;</span><br><span class="line">    u2 access_flags;                // 访问标志</span><br><span class="line">    u2 name_index;                  // 指向常量池的入口</span><br><span class="line">    u2 descriptor_index;            // 指向常量池的入口</span><br><span class="line">    u2 attributes_count;            // 该字段的属性数量</span><br><span class="line">    attribute_info attributes[attributes_count];    // 属性信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/11946975.jpg" alt></p><p>以第一个方法为例:</p><ul><li><code>Name Index</code> 表示方法名称为 <code>&lt;init&gt;</code>, 即构造方法</li><li><code>Desc Index</code> 表示方法签名为 <code>(Ljava/lang/String;I)V</code>, 即 <code>(String, int):void</code></li></ul><h2 id="4-3-属性"><a href="#4-3-属性" class="headerlink" title="4.3 属性"></a>4.3 属性</h2><h3 id="4-3-1-Code-属性"><a href="#4-3-1-Code-属性" class="headerlink" title="4.3.1 Code 属性"></a>4.3.1 Code 属性</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Code_attribute &#123;</span><br><span class="line">    u2 attribute_name_index;            <span class="comment">// 指向常量池, 应该是 UTF8Info, 且值为 "Code"</span></span><br><span class="line">    u4 attribute_length;                <span class="comment">// 属性长度, 不包括开始的 6 个字节</span></span><br><span class="line">    u2 max_stack;                       <span class="comment">// 操作数栈的最大深度</span></span><br><span class="line">    u2 max_locals;                      <span class="comment">// 最大局部变量表个数</span></span><br><span class="line">    u4 code_length;                     <span class="comment">// 该方法的代码长度</span></span><br><span class="line">    u1 code[code_length];               <span class="comment">// 真正的字节码</span></span><br><span class="line">    u2 exception_table_length;          <span class="comment">// 捕获异常表的长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        u2 start_pc;        <span class="comment">// 捕获起始地址</span></span><br><span class="line">        u2 end_pc;          <span class="comment">// 捕获结束地址</span></span><br><span class="line">        u2 handler_pc;      <span class="comment">// </span></span><br><span class="line">        u2 catch_type;      <span class="comment">// 异常类型</span></span><br><span class="line">    &#125; exception_table[exception_table_length];  <span class="comment">// 捕获异常表</span></span><br><span class="line">    u2 attributes_count;                <span class="comment">// 嵌套属性数量</span></span><br><span class="line">    attribute_info attributes[attributes_count];    <span class="comment">// 嵌套属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>code 属性一般由两个常见的子属性, 分别是:</p><ul><li>LineNumberTable</li><li>LocalVariableTable</li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-24/56894058.jpg" alt></p><h3 id="4-3-2-LocalLineTable"><a href="#4-3-2-LocalLineTable" class="headerlink" title="4.3.2 LocalLineTable"></a>4.3.2 LocalLineTable</h3><pre><code>通过该属性可以完成字节码与 Java 源码的行号映射可以在 debug 的时候准确找到源码并且抛出异常的时候堆栈信息可以找到对应行号</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LineNumberTable_arrtibute &#123;</span><br><span class="line">    u2 attribute_name_index;        <span class="comment">// 指向常量池, 必须是值为 "LineNumberTable" 的 Utf8 常量</span></span><br><span class="line">    u4 arrtibute_length;            <span class="comment">// 当前属性长度, 不包括开始的 6 个字节</span></span><br><span class="line">    u2 line_number_table_length;    <span class="comment">// line_number_table 数组元素个数</span></span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        u2 start_pc;                <span class="comment">// start_pc 值必须是 code[] 数组的一个索引</span></span><br><span class="line">        u2 line_number;             <span class="comment">// 源文件的行号</span></span><br><span class="line">    &#125; line_number_table[line_number_table_length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-LocalVariableTable"><a href="#4-3-3-LocalVariableTable" class="headerlink" title="4.3.3 LocalVariableTable"></a>4.3.3 LocalVariableTable</h3><pre><code>LocalVariableTable 属性建立了方法中的局部变量与源代码中的局部变量之间的对应关系。 </code></pre><p>每个 LocalVariableTable  的 local_variable_table 部分可以看做是一个数组， 每个数组项是一个叫做local_variable_info的结构， 该结构描述了某个局部变量的变量名和描述符， 还有和源代码的对应关系。</p><p>下面讲解 <code>local_variable_info</code> 的各个部分：   </p><ul><li><code>start_pc</code> 是当前 local_variable_info 所对应的局部变量的作用域的起始字节码偏移量； </li><li><code>length</code> 是当前 <code>local_variable_info</code> 所对应的局部变量的作用域的大小。 也就是从字节码偏移量 <code>start_pc</code>  到 <code>start_pc+length</code> 就是当前局部变量的作用域范围； </li><li><code>name_index</code> 指向常量池中的一个 <code>CONSTANT_Utf8_info</code> ， 该 <code>CONSTANT_Utf8_info</code> 描述了当前局部变量的变量名； </li><li><code>descriptor_index</code> 指向常量池中的一个 <code>CONSTANT_Utf8_info</code> ， 该 <code>CONSTANT_Utf8_info</code> 描述了当前局部变量的描述符； </li><li><code>index</code> 描述了在该方法被执行时，当前局部变量在栈中局部变量表中的位置。 </li></ul><p>由此可知， 方法中的每个局部变量都会对应一个local_variable_info 。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LocalVariableTable_attribute &#123;</span><br><span class="line">    u2 attribute_name_index;        <span class="comment">// 指向常量池, 必须是值为 "LocalVariableTable_attribute" 的 Utf8 常量</span></span><br><span class="line">    u4 attribute_length;            <span class="comment">// 当前属性长度, 不包括开始的 6 个字节</span></span><br><span class="line">    u2 local_variable_table_length; <span class="comment">// local_variable_table[] 的元素个数</span></span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        u2 start_pc;                <span class="comment">// 局部变量的索引都在范围 [start_pc, start_pc + length)</span></span><br><span class="line">        u2 length;</span><br><span class="line">        u2 name_index;              <span class="comment">// 变量名索引, 在常量池中</span></span><br><span class="line">        u2 descriptor_index;        <span class="comment">// 变量描述索引(在常量池中)</span></span><br><span class="line">        u2 index;                   <span class="comment">// 此局部变量在当前栈帧的局部变量表中的索引</span></span><br><span class="line">    &#125; local_variable_table[local_variable_table_length]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-25/6624730.jpg" alt></p><p>解析以上字节码得到:</p><table><thead><tr><th style="text-align:center">start pc</th><th style="text-align:center">length</th><th style="text-align:center">slot</th><th style="text-align:center">name</th><th style="text-align:center">descript</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">15</td><td style="text-align:center">0</td><td style="text-align:center">this</td><td style="text-align:center">Lorg/destiny/jvm/model/Employee</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">15</td><td style="text-align:center">1</td><td style="text-align:center">name</td><td style="text-align:center">Ljava/lang/String</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">15</td><td style="text-align:center">2</td><td style="text-align:center">age</td><td style="text-align:center">I</td></tr></tbody></table><p>在解析 <code>code</code> 属性时需要注意的两点:</p><ul><li><code>code</code> 属性中包含了方法真正的字节码</li><li><code>code</code> 属性中包含几个子属性, 包括 <code>LineNumberTable</code>, <code>LocalVariableTable</code>等, 也需要进行解析.</li></ul><p>在 <code>Field</code>, <code>Method</code>, <code>Attribute</code> 三者中, 我们可以抽象出如下的关系:</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-25/90459462.jpg" alt></p><h3 id="4-3-4-Exceptions"><a href="#4-3-4-Exceptions" class="headerlink" title="4.3.4 Exceptions"></a>4.3.4 Exceptions</h3><pre><code>如果代码中出现了try{}catch{}块,那么try{}块内的机器指令的地址范围记录下来, 并且记录对应的catch{}块中的起始机器指令地址.当运行时在try块中有异常抛出的话, JVM会将catch{}块对应懂得其实机器指令地址传递给PC寄存器，从而实现指令跳转.</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">u2 exception_table_length;          <span class="comment">// 捕获异常表的长度</span></span><br><span class="line">&#123;</span><br><span class="line">    u2 start_pc;        <span class="comment">// 捕获起始地址</span></span><br><span class="line">    u2 end_pc;          <span class="comment">// 捕获结束地址</span></span><br><span class="line">    u2 handler_pc;      <span class="comment">// </span></span><br><span class="line">    u2 catch_type;      <span class="comment">// 异常类型</span></span><br><span class="line">&#125; exception_table[exception_table_length];  <span class="comment">// 捕获异常表</span></span><br></pre></td></tr></table></figure><p><code>exception_table</code> 记录了该 code 属性中所有显示抛出的异常信心, 包括异常的作用于及类型.</p><h1 id="5-字节码指令"><a href="#5-字节码指令" class="headerlink" title="5. 字节码指令"></a>5. 字节码指令</h1><h2 id="5-1-main-方法字节码"><a href="#5-1-main-方法字节码" class="headerlink" title="5.1 main 方法字节码"></a>5.1 main 方法字节码</h2><p>Employee 的 main 方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Employee employee = <span class="keyword">new</span> Employee(<span class="string">"destiny"</span>, <span class="number">24</span>);</span><br><span class="line">    employee.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>经过编译后的字节码:<br><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/52634127.jpg" alt></p><h3 id="5-1-1-new"><a href="#5-1-1-new" class="headerlink" title="5.1.1 new"></a>5.1.1 new</h3><pre><code>new indexbyte1 indexbyte2</code></pre><ul><li>操作: 创建一个对象</li><li>(indexbyte1 &lt;&lt; 8) | indexbyte2 得到一个指向常量池的索引</li><li>BB 00 01 对应 <code>new #1</code>, 对应的类就是 <code>org/destiny/jvm/model/Employee</code></li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/55866163.jpg" alt></p><ol><li>在堆中创建一个新对象</li><li>将该对象的引用压入栈中</li></ol><h3 id="5-1-2-dup"><a href="#5-1-2-dup" class="headerlink" title="5.1.2 dup"></a>5.1.2 dup</h3><ul><li>操作: 复制操作数栈栈顶的值, 并压入栈中</li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/56559512.jpg" alt></p><h3 id="5-1-3-ldc"><a href="#5-1-3-ldc" class="headerlink" title="5.1.3 ldc"></a>5.1.3 ldc</h3><pre><code>ldc index</code></pre><ul><li>操作: 从运行时常量池中提取数据压入栈中</li><li><code>ldc #43</code>, 43 在常量池中的值为字符串 <code>destiny</code></li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/3305320.jpg" alt></p><h3 id="5-1-4-bipush"><a href="#5-1-4-bipush" class="headerlink" title="5.1.4 bipush"></a>5.1.4 bipush</h3><pre><code>bipush byte</code></pre><ul><li>将有符号 byte 扩展为一个 int 类型的值 value, 然后将 value 压入到操作数栈中.</li><li>byte 是一个立即数而非常量池引用</li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/78725468.jpg" alt></p><h3 id="5-1-5-invokespecial-indexbyte1-indexbyte2"><a href="#5-1-5-invokespecial-indexbyte1-indexbyte2" class="headerlink" title="5.1.5 invokespecial indexbyte1 indexbyte2"></a>5.1.5 invokespecial indexbyte1 indexbyte2</h3><ul><li>操作: 对一个对象进行初始化, 父类的初始化, 调用私有方法(因为没有多态性为)</li><li>(indexbyte1 &lt;&lt; 8) | indexbyte2 得到一个指向常量池的索引</li><li><code>invokespecial #45</code></li><li>常量池 #45 是一个 <code>methodref</code>: <code>&lt;init&gt;:(Ljava/lang/String;I)V</code></li><li>需要形成新的栈帧</li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/44315742.jpg" alt></p><h3 id="5-1-6-astore-n"><a href="#5-1-6-astore-n" class="headerlink" title="5.1.6 astore_n"></a>5.1.6 astore_n</h3><ul><li>操作: 将栈顶的 <code>reference</code> 类型数据保存到局部变量表中</li><li>astore_0</li><li>astore_1</li><li>astore_2</li><li>astore_3</li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/31300372.jpg" alt></p><h3 id="5-1-7-aload-n"><a href="#5-1-7-aload-n" class="headerlink" title="5.1.7 aload_n"></a>5.1.7 aload_n</h3><ul><li>操作: 从局部变量表中加载一个 reference 类型的值到操作数栈中</li><li>aload_0</li><li>aload_1</li><li>aload_2</li><li>aload_3</li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/9829577.jpg" alt></p><h3 id="5-1-8-invokevirtual-indexbyte1-indexbyte2"><a href="#5-1-8-invokevirtual-indexbyte1-indexbyte2" class="headerlink" title="5.1.8 invokevirtual indexbyte1 indexbyte2"></a>5.1.8 invokevirtual indexbyte1 indexbyte2</h3><ul><li>操作: 调用实例方法, 依据实例的具体类型进行分派(多态)</li><li>(indexbyte1 &lt;&lt; 8) | indexbyte2</li><li><code>invokevirtual #47</code> =&gt; <code>sayHello: ()V</code></li><li>也需要形成新的栈帧</li></ul><h3 id="5-1-9-return"><a href="#5-1-9-return" class="headerlink" title="5.1.9 return"></a>5.1.9 return</h3><ul><li>操作: 方法返回, 从当前函数栈帧退出, 无返回值.</li></ul><h2 id="5-2-方法指令"><a href="#5-2-方法指令" class="headerlink" title="5.2  方法指令"></a>5.2 <init> 方法指令</init></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/3230642.jpg" alt></p><h3 id="5-2-1-aload-0"><a href="#5-2-1-aload-0" class="headerlink" title="5.2.1 aload_0"></a>5.2.1 aload_0</h3><ul><li>操作: 从局部变量表中加载 index 为 0 的 reference 类型的值到操作数栈中</li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/18433274.jpg" alt></p><h3 id="5-2-2-aload-1"><a href="#5-2-2-aload-1" class="headerlink" title="5.2.2 aload_1"></a>5.2.2 aload_1</h3><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/25073553.jpg" alt></p><h3 id="5-2-3-putfield-indexbyte1-indexbyte2"><a href="#5-2-3-putfield-indexbyte1-indexbyte2" class="headerlink" title="5.2.3 putfield indexbyte1 indexbyte2"></a>5.2.3 putfield indexbyte1 indexbyte2</h3><ul><li>操作: 给一个对象字段赋值</li><li>(indexbyte1 &lt;&lt; 8) | indexbyte2</li><li><code>putfield #15</code> =&gt; <code>putfield name:Ljava/lang/String</code></li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/36898043.jpg" alt></p><h3 id="5-3-3-iload-2"><a href="#5-3-3-iload-2" class="headerlink" title="5.3.3 iload_2"></a>5.3.3 iload_2</h3><ul><li>操作: 从局部变量中把 index 为 2 的 int 类型的值加载到操作数栈中</li><li>reference 类型使用 <code>aload</code>, int 类型使用 <code>iload</code></li></ul><h2 id="5-4-字节码指令的设计实现"><a href="#5-4-字节码指令的设计实现" class="headerlink" title="5.4 字节码指令的设计实现"></a>5.4 字节码指令的设计实现</h2><p>使用 <code>命令模式</code> 来抽象该场景, 即将所有字节码指令抽象为命令对象, 基类声明 <code>command</code> 方法, 再根据操作数的不同泛化出不同的抽象子类</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-6-26/32409326.jpg" alt></p><h1 id="6-JVM-执行引擎"><a href="#6-JVM-执行引擎" class="headerlink" title="6 JVM 执行引擎"></a>6 JVM 执行引擎</h1><p><img src="http://oetw0yrii.bkt.clouddn.com/18-7-1/2187429.jpg" alt></p><h2 id="6-1-Java-命令"><a href="#6-1-Java-命令" class="headerlink" title="6.1 Java 命令"></a>6.1 Java 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp path1;path2 org.destiny.jvm.Employee</span><br></pre></td></tr></table></figure><ul><li>cp: classpath(s), 默认是当前路径</li><li>class name: 系统需要找到这个类的 main 方法, 然后执行它的字节码</li></ul><h2 id="6-2-执行过程"><a href="#6-2-执行过程" class="headerlink" title="6.2 执行过程"></a>6.2 执行过程</h2><ul><li>加载类<ul><li>工具: <code>ClassFileLoader</code></li><li>目的地: 方法区</li></ul></li><li>获取类的 <code>public static void main(String[] args)</code> 方法<ul><li>从方法区寻找</li></ul></li><li>执行 <code>main</code> 方法的字节码<ul><li>字节码指令</li><li>栈帧(StackFrame)</li><li>堆(Heap)</li></ul></li></ul><h2 id="6-3-字节码指令的分类"><a href="#6-3-字节码指令的分类" class="headerlink" title="6.3 字节码指令的分类"></a>6.3 字节码指令的分类</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">指令</th></tr></thead><tbody><tr><td style="text-align:center">依次执行</td><td style="text-align:center"><code>new</code><br><code>bipush</code><br><code>ldc</code><br><code>dup</code></td></tr><tr><td style="text-align:center">暂停当前栈帧并创建新栈帧</td><td style="text-align:center"><code>invokespecial</code><br><code>invokevirtual</code></td></tr><tr><td style="text-align:center">跳转到另一行去执行</td><td style="text-align:center"><code>if_icmp_ge</code><br><code>if_icmple</code><br><code>goto</code></td></tr><tr><td style="text-align:center">退出当前栈帧</td><td style="text-align:center"><code>return</code></td></tr></tbody></table><h1 id="7-垃圾回收机制"><a href="#7-垃圾回收机制" class="headerlink" title="7. 垃圾回收机制"></a>7. 垃圾回收机制</h1><h2 id="7-1-Java-对象的内存布局"><a href="#7-1-Java-对象的内存布局" class="headerlink" title="7.1 Java 对象的内存布局"></a>7.1 Java 对象的内存布局</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-7-1/13981658.jpg" alt></p><ul><li>MarkWord: 标注对象的元信息<ul><li>GC 年龄</li><li>锁的标志位</li></ul></li><li>ClassPointer: 指向方法区的类信息的指针</li><li>InstanceData: 类实例对象的数据<ul><li>方法信息保存在方法区</li></ul></li><li>padding: 填充</li></ul><h2 id="7-2-对象分配和垃圾回收"><a href="#7-2-对象分配和垃圾回收" class="headerlink" title="7.2 对象分配和垃圾回收"></a>7.2 对象分配和垃圾回收</h2><ul><li>对象优先分配在新生代<ul><li>如果 Eden 区没有足够的空间, 则触发一次 MinorGC</li><li>Java 对象大多具有生命周期短暂的特点, MinorGC 非常频繁, 速度也很快</li></ul></li><li>大对象直接进入老年代<ul><li>可以根据参数设置阈值</li></ul></li><li>长期存活对象进入老年代<ul><li>每个对象都有一个年龄(age), 在 MarkWord 中</li><li>如果 age 超过阈值, 则晋升到老年代</li></ul></li><li>动态年龄判断<ul><li>如果在 Survivor 空间中相同年龄的所有对象大小的总数和大于 Survivor 空间的一半, 年龄大于或等于该年龄的对象可以直接进入老年代</li></ul></li></ul><h2 id="MinorGC-时-新生代与老年代的关系"><a href="#MinorGC-时-新生代与老年代的关系" class="headerlink" title="MinorGC 时 新生代与老年代的关系"></a>MinorGC 时 新生代与老年代的关系</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-7-1/2587031.jpg" alt></p>]]></content>
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>盘点实际项目中常用的加密算法及使用场景</title>
      <link href="/blog/2018/04/08/%E7%9B%98%E7%82%B9%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/blog/2018/04/08/%E7%9B%98%E7%82%B9%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      <content type="html"><![CDATA[<h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><code>MD5即Message-Digest Algorithm 5</code>（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。<br>将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>压缩性：任意长度的数据，算出的MD5值长度都是固定的。</li><li>容易计算：从原数据计算出MD5值很容易。</li><li>抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</li><li>强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</li></ol><p>MD5的作用是让大容量信息在用数字签名软件签署私人密钥前被”压缩”成一种保密的格式（就是把一个任意长度的字节串变换成一定长的十六进制数字串）。除了MD5以外，其中比较有名的还有sha-1、RIPEMD以及Haval等。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="一致性验证"><a href="#一致性验证" class="headerlink" title="一致性验证"></a>一致性验证</h3><p>MD5的典型应用是对一段信息（Message）产生信息摘要（Message-Digest），以防止被篡改。MD5就可以为任何文件（不管其大小、格式、数量）产生一个同样独一无二的“数字指纹”，如果任何人对文件做了任何改动，其MD5值也就是对应的“数字指纹”都会发生变化。</p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>MD5的典型应用是对一段Message(字节串)产生fingerprint(指纹），以防止被“篡改”。举个例子，你将一段话写在一个叫 readme.txt文件中，并对这个readme.txt产生一个MD5的值并记录在案，然后你可以传播这个文件给别人，别人如果修改了文件中的任何内容，你对这个文件重新计算MD5时就会发现（两个MD5值不相同）。如果再有一个第三方的认证机构，用MD5还可以防止文件作者的“抵赖”，这就是所谓的数字签名应用。</p><h3 id="安全访问认证"><a href="#安全访问认证" class="headerlink" title="安全访问认证"></a>安全访问认证</h3><p>MD5还广泛用于操作系统的登陆认证上，如Unix、各类BSD系统登录密码、数字签名等诸多方面。如在Unix系统中用户的密码是以MD5（或其它类似的算法）经Hash运算后存储在文件系统中。当用户登录的时候，系统把用户输入的密码进行MD5 Hash运算，然后再去和保存在文件系统中的MD5值进行比较，进而确定输入的密码是否正确。通过这样的步骤，系统在并不知道用户密码的明码的情况下就可以确定用户登录系统的合法性。这可以避免用户的密码被具有系统管理员权限的用户知道。</p><h2 id="缺点与不足"><a href="#缺点与不足" class="headerlink" title="缺点与不足"></a>缺点与不足</h2><p>2014年中国山东大学的王小云教授公布破译了MD5、HAVAL-128、 MD4和RIPEMD算法的报告。通过加速的杂凑与冲撞方法破译了MD5算法。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-8/17215732.jpg" alt></p><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>RSA为公钥加密体制</p><ul><li>乙方生成两把秘钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。</li><li>甲方获取乙方的公钥，然后用它对信息加密。</li><li>乙方得到加密后的信息，用私钥解密。</li></ul><p><img src="http://img.blog.csdn.net/20130613222101437" alt="image"></p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><h3 id="便于理解，使用广泛"><a href="#便于理解，使用广泛" class="headerlink" title="便于理解，使用广泛"></a>便于理解，使用广泛</h3><p>RSA算法是第一个能同时用于加密和数字签名的算法，也易于理解和操作。RSA是被研究得最广泛的公钥算法，从提出到现今的三十多年里，经历了各种攻击的考验，逐渐为人们接受，普遍认为是目前最优秀的公钥方案之一。</p><h3 id="缺点与不足：加密和解密花费时间长、速度慢，只适合对少量数据进行加密"><a href="#缺点与不足：加密和解密花费时间长、速度慢，只适合对少量数据进行加密" class="headerlink" title="缺点与不足：加密和解密花费时间长、速度慢，只适合对少量数据进行加密"></a>缺点与不足：加密和解密花费时间长、速度慢，只适合对少量数据进行加密</h3><p>为提高保密强度，RSA密钥至少为500位长，一般推荐使用1024位。这就使加密的计算量很大。为减少计算量，在传送信息时，常采用传统加密方法与公开密钥加密方法相结合的方式，即信息采用改进的DES或IDEA对话密钥加密，然后使用RSA密钥加密对话密钥和信息摘要。对方收到信息后，用不同的密钥解密并可核对信息摘要。</p><h2 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h2><h3 id="ssh口令登录"><a href="#ssh口令登录" class="headerlink" title="ssh口令登录"></a>ssh口令登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">客户端-&gt;&gt;服务端: 口令登录</span><br><span class="line">服务端-&gt;&gt;客户端: 发送1024为公钥指纹</span><br><span class="line">客户端-&gt;&gt;服务端: 指纹保存在$HOME/.ssh/known_hosts，接受远程主机秘钥</span><br><span class="line">服务端-&gt;&gt;客户端: 请求输入密码</span><br><span class="line">客户端-&gt;&gt;服务端: 输入密码</span><br><span class="line">服务端-&gt;&gt;客户端: 接受或拒绝链接</span><br></pre></td></tr></table></figure><h3 id="ssh公钥登录"><a href="#ssh公钥登录" class="headerlink" title="ssh公钥登录"></a>ssh公钥登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">客户端-&gt;&gt;服务端: 登录请求</span><br><span class="line">服务端-&gt;&gt;客户端: 发送随机字符串</span><br><span class="line">客户端-&gt;&gt;服务端: 发送加密后的随机字符串</span><br><span class="line">服务端-&gt;&gt;客户端: 接受或拒绝链接</span><br></pre></td></tr></table></figure><p>客户端事先把自己的公钥保存在服务端的指定目录: <code>$HOME/.ssh/authorized_keys</code></p><p>客户端生成秘钥: <code>ssh-keygen</code>，运行结束后，在<code>$HOME/.ssh/</code>目录下，会新生成两个文件: <code>id_rsa.pub</code>和<code>id_rsa</code>。前者是公钥，后者是私钥。</p><p>将公钥发送给远程主机: <code>ssh-copy-id user@host</code></p>]]></content>
      
      <categories>
          
          <category> 加密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从头搭建github博客</title>
      <link href="/blog/2018/04/01/%E4%BB%8E%E5%A4%B4%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"/>
      <url>/blog/2018/04/01/%E4%BB%8E%E5%A4%B4%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="安装Node-js并配置Node-js环境"><a href="#安装Node-js并配置Node-js环境" class="headerlink" title="安装Node.js并配置Node.js环境"></a>安装Node.js并配置Node.js环境</h1><p>成功界面如下：</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/70261172.jpg" alt></p><h1 id="安装git并配置git环境"><a href="#安装git并配置git环境" class="headerlink" title="安装git并配置git环境"></a>安装git并配置git环境</h1><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/70159677.jpg" alt></p><h1 id="注册Github并新建项目"><a href="#注册Github并新建项目" class="headerlink" title="注册Github并新建项目"></a>注册Github并新建项目</h1><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/97358630.jpg" alt></p><h2 id="新建仓库页"><a href="#新建仓库页" class="headerlink" title="新建仓库页"></a>新建仓库页</h2><p>参考其他博客的时候，很多博客中都提到</p><blockquote><p>项目名必须是 <code>github账户名.github.io</code></p></blockquote><p>但经本人测试其实项目名称可以任意选取，如本人的仓库名就是<code>blog</code>，而非<code>destinywang.github.io</code></p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/27050333.jpg" alt></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>进入项目的<code>setting</code>选项卡中</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/78571147.jpg" alt></p><p>下拉到<code>Github Pages</code>，此时该项目已经被部署，可以通过提供的外网链接去访问。</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/58918233.jpg" alt></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo中文网站</a></p><pre><code>Hexo是个快捷，简介且高效的博客框架让上百个页面在几秒内完成渲染Hexo支持Github Flavored Markdown的所有功能</code></pre><h2 id="在合适的位置创建文件夹"><a href="#在合适的位置创建文件夹" class="headerlink" title="在合适的位置创建文件夹"></a>在合适的位置创建文件夹</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/99445506.jpg" alt></p><p>以上操作需要在空文件夹中进行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo -g             <span class="comment"># 安装Hexo</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo -v                         <span class="comment"># 检查Hexo是否安装成功</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init                       <span class="comment"># 初始化文件夹</span></span></span><br></pre></td></tr></table></figure><h2 id="Hexo-init"><a href="#Hexo-init" class="headerlink" title="Hexo init"></a>Hexo init</h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/8639246.jpg" alt></p><h2 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h2><p>此命令用于安装所需要的组件<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/77556695.jpg" alt></p><h2 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h2><p>首次体验Hexo</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/78086644.jpg" alt></p><h2 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h2><p>此命令会在本地开启Hexo的服务器</p><p>可以在发布到github之前先在本地进行调试</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/85905480.jpg" alt></p><p>然后再浏览器中输入<code>localhost:4000/blog/</code><br>如果出现如下界面就成功了<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/66613199.jpg" alt></p><h1 id="将Hexo和Github-page联系起来"><a href="#将Hexo和Github-page联系起来" class="headerlink" title="将Hexo和Github page联系起来"></a>将Hexo和Github page联系起来</h1><h2 id="设置本地git"><a href="#设置本地git" class="headerlink" title="设置本地git"></a>设置本地git</h2><p>如果是第一次使用git的话需要设置<code>name</code>和<code>email</code><br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/13461778.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your email&quot;     # 生成秘钥，路径在~/.ssh下，windows用户的路径为C:\Users\Administrator\.ssh</span><br><span class="line"></span><br><span class="line">$ eval &quot;$(ssh-agent -s)&quot;                # 添加秘钥到ssh-agent</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa                 # 添加生成的SSH key到ssh-agent</span><br></pre></td></tr></table></figure><h2 id="登录github，进行设置"><a href="#登录github，进行设置" class="headerlink" title="登录github，进行设置"></a>登录github，进行设置</h2><ol><li>进入用户的setting页面</li></ol><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/59448019.jpg" alt></p><ol start="2"><li>在<code>SSH and GPG keys</code>选项卡中添加一个ssh key，并将<code>id_rsa.pub</code>(公钥)的内容复制上去</li></ol><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/74389678.jpg" alt></p><h1 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h1><p>为了保证Hexo能够正确的通过Git进行<code>add</code>、<code>commit</code>、<code>pull</code>、<code>push</code>等操作<br>需要将本地及远程的git仓库信息进行配置</p><p>当前站点文件夹的状态：<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/15486482.jpg" alt></p><p>修改<code>_config.yml</code>文件，将<code>deployment</code>部分相关的内容进行替换</p><ul><li>type: 部署类型</li><li>repository: 远程仓库路径，即github中的仓库路径</li><li>branch: 分支名</li></ul><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/85193500.jpg" alt></p><h1 id="新建一篇博客"><a href="#新建一篇博客" class="headerlink" title="新建一篇博客"></a>新建一篇博客</h1><h2 id="在终端中执行命令hexo-new-post-博客名"><a href="#在终端中执行命令hexo-new-post-博客名" class="headerlink" title="在终端中执行命令hexo new post 博客名"></a>在终端中执行命令<code>hexo new post 博客名</code></h2><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/44957206.jpg" alt></p><p>会在<code>source/_posts</code>路径下生成对应的博客文件<code>test.md</code><br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/50261262.jpg" alt></p><h2 id="安装hexo-deployer-git扩展文件"><a href="#安装hexo-deployer-git扩展文件" class="headerlink" title="安装hexo-deployer-git扩展文件"></a>安装<code>hexo-deployer-git</code>扩展文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/92845681.jpg" alt></p><h2 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim source/_posts/test.md</span><br></pre></td></tr></table></figure><p>打开<code>test.md</code>文件，按照正常的Markdown文件编辑即可<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/50073786.jpg" alt></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 640 ms</span><br><span class="line">INFO  Generated: tags/index.html</span><br><span class="line">INFO  Generated: about/index.html</span><br><span class="line">INFO  Generated: 2018/04/01/jvm/index.html</span><br><span class="line">INFO  Generated: 2018/04/01/test/index.html</span><br><span class="line">INFO  Generated: 2018/04/01/hello-world-1/index.html</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: tags/jvm/index.html</span><br><span class="line">INFO  Generated: archives/2018/index.html</span><br><span class="line">INFO  Generated: archives/2018/04/index.html</span><br><span class="line">INFO  Generated: tags/java基础/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: 2018/04/01/hello-world/index.html</span><br><span class="line">INFO  Generated: 2018/04/01/一-Nginx基本知识/index.html</span><br><span class="line">INFO  Generated: tags/Nginx/index.html</span><br><span class="line">INFO  Generated: images/cc-by-nc-nd.svg</span><br><span class="line">INFO  Generated: images/avatar.gif</span><br><span class="line">INFO  Generated: images/apple-touch-icon-next.png</span><br><span class="line">INFO  Generated: images/cc-by-nc-sa.svg</span><br><span class="line">INFO  Generated: images/algolia_logo.svg</span><br><span class="line">INFO  Generated: images/cc-by-nc.svg</span><br><span class="line">INFO  Generated: images/cc-by-nd.svg</span><br><span class="line">INFO  Generated: images/cc-by-sa.svg</span><br><span class="line">INFO  Generated: images/cc-by.svg</span><br><span class="line">INFO  Generated: images/cc-zero.svg</span><br><span class="line">INFO  Generated: images/favicon-16x16-next.png</span><br><span class="line">INFO  Generated: images/favicon-32x32-next.png</span><br><span class="line">INFO  Generated: images/loading.gif</span><br><span class="line">INFO  Generated: images/logo.svg</span><br><span class="line">INFO  Generated: images/placeholder.gif</span><br><span class="line">INFO  Generated: images/quote-r.svg</span><br><span class="line">INFO  Generated: images/searchicon.png</span><br><span class="line">INFO  Generated: lib/font-awesome/css/font-awesome.css.map</span><br><span class="line">INFO  Generated: images/quote-l.svg</span><br><span class="line">INFO  Generated: lib/font-awesome/HELP-US-OUT.txt</span><br><span class="line">INFO  Generated: images/blog-logo.jpeg</span><br><span class="line">INFO  Generated: lib/font-awesome/fonts/fontawesome-webfont.woff2</span><br><span class="line">INFO  Generated: css/main.css</span><br><span class="line">INFO  Generated: lib/font-awesome/fonts/fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: js/src/affix.js</span><br><span class="line">INFO  Generated: js/src/exturl.js</span><br><span class="line">INFO  Generated: js/src/algolia-search.js</span><br><span class="line">INFO  Generated: js/src/bootstrap.js</span><br><span class="line">INFO  Generated: js/src/love.js</span><br><span class="line">INFO  Generated: js/src/js.cookie.js</span><br><span class="line">INFO  Generated: js/src/post-details.js</span><br><span class="line">INFO  Generated: js/src/motion.js</span><br><span class="line">INFO  Generated: js/src/scrollspy.js</span><br><span class="line">INFO  Generated: js/src/scroll-cookie.js</span><br><span class="line">INFO  Generated: lib/font-awesome/bower.json</span><br><span class="line">INFO  Generated: js/src/utils.js</span><br><span class="line">INFO  Generated: lib/ua-parser-js/dist/ua-parser.min.js</span><br><span class="line">INFO  Generated: lib/velocity/velocity.ui.min.js</span><br><span class="line">INFO  Generated: lib/velocity/velocity.min.js</span><br><span class="line">INFO  Generated: js/src/schemes/pisces.js</span><br><span class="line">INFO  Generated: lib/ua-parser-js/dist/ua-parser.pack.js</span><br><span class="line">INFO  Generated: lib/velocity/velocity.ui.js</span><br><span class="line">INFO  Generated: lib/font-awesome/css/font-awesome.css</span><br><span class="line">INFO  Generated: lib/jquery/index.js</span><br><span class="line">INFO  Generated: lib/font-awesome/css/font-awesome.min.css</span><br><span class="line">INFO  Generated: lib/font-awesome/fonts/fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: lib/velocity/velocity.js</span><br><span class="line">INFO  61 files generated in 1.13 s</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">[master 966acc9] Site updated: 2018-04-01 21:18:16</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">To github.com:DestinyWang/blog.git</span><br><span class="line"> + fa066f8...966acc9 HEAD -&gt; master (forced update)</span><br><span class="line">Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;git@github.com:DestinyWang/blog.git&apos;.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure><p>至此，博客已经部署成功，可以去<code>http://用户名.github.io</code>查看。</p><p><img src="http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022001738037-1195721153.png" alt="image"></p><h1 id="安装Next"><a href="#安装Next" class="headerlink" title="安装Next"></a>安装Next</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>下载到站点文件夹路径下的<code>themes/next</code></p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/97713977.jpg" alt></p><h1 id="启用Next主体"><a href="#启用Next主体" class="headerlink" title="启用Next主体"></a>启用Next主体</h1><p>在站点目录中，打开配置文件<code>_config.yml</code>，修改<code>theme: next</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">~/blog</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim _config.yml</span></span><br></pre></td></tr></table></figure></p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/41418865.jpg" alt></p><h1 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h1><p>在next主题目录下的<code>_config.yml</code>，修改<code>scheme: Pisces</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/3206762.jpg" alt></p><h1 id="语言设定"><a href="#语言设定" class="headerlink" title="语言设定"></a>语言设定</h1><p>Hexo提供了多种语言支持，包括简体中文<code>zh-Hans</code><br>在站点根目录下修改配置文件<code>_config.yml</code>中的<code>language</code>为<code>zh-Hans</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">~/blog</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim _config.yml</span></span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/30730480.jpg" alt></p><h1 id="修改菜单栏"><a href="#修改菜单栏" class="headerlink" title="修改菜单栏"></a>修改菜单栏</h1><p>在主题目录下修改配置文件<code>_config.yml</code>中的<code>menu</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/60828279.jpg" alt></p><h1 id="设置菜单项图标"><a href="#设置菜单项图标" class="headerlink" title="设置菜单项图标"></a>设置菜单项图标</h1><p>对应字段是<code>menu_icons</code><br>同样在主题目录下的<code>_config.yml</code>中修改</p><p>格式为<code>item name: icon name</code>，其中<code>item name</code> 与所配置的菜单名字对应，<code>icon name</code>是<code>Font Awesome</code>图标的名字。而 <code>enable</code>可用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/60198648.jpg" alt></p><h1 id="设置侧栏位置"><a href="#设置侧栏位置" class="headerlink" title="设置侧栏位置"></a>设置侧栏位置</h1><p>修改主题目录下<code>sidebar</code>的<code>position</code>值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/98610330.jpg" alt></p><h1 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h1><p>在站点根目录下载配置文件中新增avatar，值设置为头像的链接地址。地址可以是网络地址，也可以是本地地址（放置在<code>source/images/</code>目录下）</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/90699135.jpg" alt></p><h1 id="设置文章代码主题"><a href="#设置文章代码主题" class="headerlink" title="设置文章代码主题"></a>设置文章代码主题</h1><p>在主题目录下修改配置文件<code>_config.yml</code>，字段<code>highlight_theme</code>，默认值为<code>nomal</code>。可以设置为<code>night</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/42242111.jpg" alt></p><h1 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h1><p>在站点路径下新建页面<code>categories</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ hexo new page categories</span><br><span class="line"></span><br><span class="line"># 在 source/categories 目录中修改index.md</span><br><span class="line">vim source/categories/index.md</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-2/61519989.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在主题的 _config.yml 中取消注释:</span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-2/75484065.jpg" alt></p><p>在要分类的文章中加入 category 属性:</p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-2/86412607.jpg" alt></p><h1 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h1><p>标签是对博客分类的方式<br>比如一个系列的博客都是将<code>神经网络</code>，那么就可以给每篇博客加上<code>神经网络</code>的tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ hexo new page tags</span><br><span class="line">INFO Created: ~/blog/source/tags/index.md</span><br><span class="line"></span><br><span class="line"># 在新建的index.md中添加type: &quot;tags&quot;</span><br><span class="line">vim source/tags/index.md</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/60934507.jpg" alt></p><p>后面只需要在博客的开头中添加<code>tags: [A, B, C]</code>即可</p><p>成功后，<code>标签</code>部分的导航栏为<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/92069862.jpg" alt></p><h1 id="Aboute-Me"><a href="#Aboute-Me" class="headerlink" title="Aboute Me"></a><code>Aboute Me</code></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ hexo new page about</span><br><span class="line">INFO Created: ~/blog/source/about/index.md</span><br><span class="line"></span><br><span class="line"># 在新建的index.md中添加如下内容</span><br><span class="line">vim source/about/index.md</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/87161448.jpg" alt></p><p>成功后效果如下所示：<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/2887356.jpg" alt></p><h1 id="添加github导航条"><a href="#添加github导航条" class="headerlink" title="添加github导航条"></a>添加github导航条</h1><p><a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">从这里选择主题</a></p><p>然后将代码复制到<code>themes/next/layout/_layout.swig</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">~/blog</span><br><span class="line">$ vim themes/next/layout/_layout.swig</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/69448329.jpg" alt></p><p>成功后的效果如下：<br><img src="http://oetw0yrii.bkt.clouddn.com/18-4-1/97473185.jpg" alt></p><h1 id="修改内容区域宽度"><a href="#修改内容区域宽度" class="headerlink" title="修改内容区域宽度"></a>修改内容区域宽度</h1><h2 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h2><p>Next 对内容的宽度的设定如下：</p><ul><li>700px，当屏幕宽度 &lt; 1600px</li><li>900px，当屏幕宽度 &gt;= 1600px</li><li>移动设备下，宽度自适应</li></ul><h2 id="非Pisces-Scheme主题修改"><a href="#非Pisces-Scheme主题修改" class="headerlink" title="非Pisces Scheme主题修改"></a>非<code>Pisces Scheme</code>主题修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim <span class="built_in">source</span>/css_variables/custom.styl</span><br></pre></td></tr></table></figure><p>修改内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 修改成你期望的宽度</span><br><span class="line">$content-desktop = 700px</span><br><span class="line"></span><br><span class="line">// 当视窗超过 1600px 后的宽度</span><br><span class="line">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure><h2 id="Pisces-Scheme主题修改"><a href="#Pisces-Scheme主题修改" class="headerlink" title="Pisces Scheme主题修改"></a><code>Pisces Scheme</code>主题修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim themes\next\<span class="built_in">source</span>\css\_schemes\Picses\_layout.styl</span><br></pre></td></tr></table></figure><p>修改内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;<span class="attribute">width</span>: <span class="number">1150px</span>;&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123;<span class="attribute">width</span>: <span class="number">1150px</span>;&#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;<span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 260px);&#125;</span><br></pre></td></tr></table></figure><h1 id="设置首页不显示全文-只显示预览"><a href="#设置首页不显示全文-只显示预览" class="headerlink" title="设置首页不显示全文(只显示预览)"></a>设置首页不显示全文(只显示预览)</h1><h2 id="打开主题路径下的-config-yml"><a href="#打开主题路径下的-config-yml" class="headerlink" title="打开主题路径下的_config.yml"></a>打开主题路径下的<code>_config.yml</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure><h2 id="修改auto-excerpt"><a href="#修改auto-excerpt" class="headerlink" title="修改auto_excerpt"></a>修改<code>auto_excerpt</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommand.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><p>将<code>enable</code>属性改为<code>true</code></p><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-10/10430155.jpg" alt></p><h1 id="修改code代码块自定义样式"><a href="#修改code代码块自定义样式" class="headerlink" title="修改code代码块自定义样式"></a>修改<code>code</code>代码块自定义样式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim themes/next/source/css/_custom/custom.styl</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-10/87094654.jpg" alt></p><h1 id="取消文章目录对标题的自动编号"><a href="#取消文章目录对标题的自动编号" class="headerlink" title="取消文章目录对标题的自动编号"></a>取消<code>文章目录</code>对标题的自动编号</h1><p><img src="http://segmentfault.com/img/bVJN4j?w=1246&amp;h=345" alt></p><p>nexT对 <code>markdown</code> 语法的标题</p><pre><code>#            一级标题##            二级标题###            三级标题####        四级标题#####        五级标题######        六级标题</code></pre><p>会默认进行标号分配，这样有可能会打乱文章原有标题</p><p>取消方式：</p><p><strong>修改主题配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim theme/next/_config</span><br></pre></td></tr></table></figure><p><img src="http://oetw0yrii.bkt.clouddn.com/18-4-15/56617961.jpg" alt></p><p>将 <code>number</code> 设为 <code>false</code></p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>至此，博客基本设置OK<br>但还有很多地方可以继续挖掘</p><p>后续会持续更新</p>]]></content>
      
      
        <tags>
            
            <tag> github博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2018/04/01/hello-world/"/>
      <url>/blog/2018/04/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
